{"version":3,"sources":["../../../src/components/browser-container/BrowserContainer.jsx"],"names":["CL_ROOT","BrowserContainer","state","elBrowsers","_onStore","actionType","data","props","initBrowserAction","setState","prevState","componentDidMount","store","unsubscribe","listen","componentWillUnmount","render","showDialogAction","onCloseDialog","map","Comp","React","cloneElement","Component"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AAFA;AAIA,IAAMA,OAAO,GAAG,eAAhB;;IAEMC,gB;;;;;;;;;;;;;UAYJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;UAaRC,Q,GAAW,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAC9B,UAAID,UAAU,KAAK,MAAKE,KAAL,CAAWC,iBAA9B,EAAgD;AAC9C,cAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,iBAAK;AAC1BP,YAAAA,UAAU,GAAGG,IAAH,SAAYI,SAAS,CAACP,UAAtB;AADgB,WAAL;AAAA,SAAvB;AAGD;AACH,K;;;;;;;SAfDQ,iB,GAAA,6BAAmB;AAAA,QACTC,KADS,GACC,KAAKL,KADN,CACTK,KADS;AAEjB,SAAKC,WAAL,GAAmBD,KAAK,CAACE,MAAN,CAAa,KAAKV,QAAlB,CAAnB;AACD,G;;SAEDW,oB,GAAA,gCAAsB;AACpB,SAAKF,WAAL;AACD,G;;SAUDG,M,GAAA,kBAAQ;AAAA,sBAKF,KAAKT,KALH;AAAA,QAEJK,KAFI,eAEJA,KAFI;AAAA,QAGJK,gBAHI,eAGJA,gBAHI;AAAA,QAIJC,aAJI,eAIJA,aAJI;AAAA,QAOJf,UAPI,GAQF,KAAKD,KARH,CAOJC,UAPI;AAUN,WACE;AAAK,MAAA,SAAS,EAAEH;AAAhB,OACIG,UAAU,CAACgB,GAAX,CAAe,UAAAC,IAAI;AAAA,aAAIC,kBAAMC,YAAN,CAAmBF,IAAnB,CAAJ;AAAA,KAAnB,CADJ,EAEG,gCAAC,2BAAD;AACG,MAAA,SAAS,EAAE,CADd;AAEG,MAAA,KAAK,EAAER,KAFV;AAGG,MAAA,UAAU,EAAEK,gBAHf;AAIG,MAAA,aAAa,EAAEC;AAJlB,MAFH,CADF;AAWD,G;;;EAtD4BK,gB;;eAyDhBtB,gB","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DialogContainer from '../zhn-containers/DialogContainer';\r\n\r\nconst CL_ROOT = \"hrz-container\";\r\n\r\nclass BrowserContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    initBrowserAction: PropTypes.string,\r\n    showDialogAction: PropTypes.string,\r\n    onCloseDialog: PropTypes.func\r\n  }\r\n  */\r\n\r\n  state = {\r\n    elBrowsers: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { store } = this.props;\r\n    this.unsubscribe = store.listen(this._onStore)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  _onStore = (actionType, data) => {\r\n     if (actionType === this.props.initBrowserAction){\r\n       this.setState(prevState => ({\r\n         elBrowsers: [data, ...prevState.elBrowsers]\r\n       }))\r\n     }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      store,\r\n      showDialogAction,\r\n      onCloseDialog\r\n    } = this.props\r\n    , {\r\n      elBrowsers\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={CL_ROOT}>\r\n         {elBrowsers.map(Comp => React.cloneElement(Comp))}\r\n         <DialogContainer\r\n            maxDialog={3}\r\n            store={store}\r\n            showAction={showDialogAction}\r\n            onCloseDialog={onCloseDialog}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BrowserContainer\r\n"],"file":"BrowserContainer.js"}