{"version":3,"sources":["../../../src/components/zhn-moleculs/DatesFragment.jsx"],"names":["styles","FORMAT_ERR_MSG","NEAR_ERR_MSG","DatesFragment","getValues","fromDate","getValue","toDate","getValidation","msgOnNotValidFormat","props","datesMsg","isValid","push","trim","length","focusInput","focusNotValidInput","initFromDate","initToDate","nForecastDate","onTestDate","rowDiv","labelSpan","c","defaultProps","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,+BAAN;;AAEA,IAAMC,iBAAiB,2BAAvB;AACA,IAAMC,eAAe,gCAArB;;IAEMC,a;;;;;;;;;;;;;;kNAuCJC,S,GAAY,YAAM;AAChB,aAAO;AACLC,kBAAU,MAAKA,QAAL,CAAcC,QAAd,EADL;AAELC,gBAAQ,MAAKA,MAAL,CAAYD,QAAZ;AAFH,OAAP;AAID,K,QAEDE,a,GAAgB,YAAM;AACd,UAAEC,mBAAF,GAA0B,MAAKC,KAA/B,CAAED,mBAAF;AAAA,UACAE,QADA,GACW,EADX;;AAEN,UAAI,CAAC,MAAKN,QAAL,CAAcO,OAAd,EAAL,EAA8B;AAAED,iBAASE,IAAT,CAAcJ,oBAAoB,WAApB,CAAd;AAAkD;AAClF,UAAI,CAAC,MAAKF,MAAL,CAAYK,OAAZ,EAAL,EAA8B;AAAED,iBAASE,IAAT,CAAcJ,oBAAoB,SAApB,CAAd;AAAgD;;AAEhF,UAAI,MAAKJ,QAAL,CAAcC,QAAd,GAAyBQ,IAAzB,KAAkC,MAAKP,MAAL,CAAYD,QAAZ,GAAuBQ,IAAvB,EAAtC,EAAsE;AACpEH,iBAASE,IAAT,CAAcX,YAAd;AACD;;AAED,UAAIS,SAASI,MAAT,GAAgB,CAApB,EAAsB;AACpB,eAAO,EAAEH,SAAS,KAAX,EAAkBD,kBAAlB,EAAP;AACD;AACD,aAAO,EAAEC,SAAU,IAAZ,EAAP;AACD,K,QAEDI,U,GAAa,YAAM;AACjB,YAAKX,QAAL,CAAcW,UAAd;AACD,K,QAEDC,kB,GAAqB,YAAM;AACzB,UAAI,CAAC,MAAKZ,QAAL,CAAcO,OAAd,EAAL,EAA6B;AAC1B,cAAKP,QAAL,CAAcW,UAAd;AACA,eAAO,IAAP;AACF;AACD,UAAI,CAAC,MAAKT,MAAL,CAAYK,OAAZ,EAAL,EAA2B;AACzB,cAAKL,MAAL,CAAYS,UAAZ;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD,K;;;;;6BAvEO;AAAA;;AAAA,mBAIE,KAAKN,KAJP;AAAA,UAEEQ,YAFF,UAEEA,YAFF;AAAA,UAEgBC,UAFhB,UAEgBA,UAFhB;AAAA,UAGEC,aAHF,UAGEA,aAHF;AAAA,UAGiBC,UAHjB,UAGiBA,UAHjB;;AAKN,aACI;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,OAAOrB,OAAOsB,MAAnB;AACE;AAAA;AAAA,cAAM,OAAOtB,OAAOuB,SAApB;AAAA;AAAA,WADF;AAIE;AACG,iBAAK;AAAA,qBAAK,OAAKlB,QAAL,GAAgBmB,CAArB;AAAA,aADR;AAEG,uBAAWN,YAFd;AAGG,sBAAUjB,cAHb;AAIG,oBAAQoB;AAJX;AAJF,SADF;AAYC;AAAA;AAAA,YAAK,OAAOrB,OAAOsB,MAAnB;AACG;AAAA;AAAA,cAAM,OAAOtB,OAAOuB,SAApB;AAAA;AAAA,WADH;AAIG;AACK,iBAAK;AAAA,qBAAK,OAAKhB,MAAL,GAAciB,CAAnB;AAAA,aADV;AAEK,uBAAWL,UAFhB;AAGK,2BAAeC,aAHpB;AAIK,sBAAUnB,cAJf;AAKK,oBAAQoB;AALb;AAJH;AAZD,OADJ;AA2BD;;;4BApCMI,Y,GAAe;AACpBhB,uBAAsB;AAAA,QAACiB,IAAD,uEAAM,MAAN;AAAA,WAAoBA,IAApB;AAAA;AADF,C;kBA8ETvB,a","file":"DatesFragment.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport DateField from '../zhn/DateField';\r\nimport DialogStyles from '../styles/DialogStyles';\r\n\r\nconst styles = DialogStyles;\r\n\r\nconst FORMAT_ERR_MSG = \"YYYY-MM-DD format must be\";\r\nconst NEAR_ERR_MSG = \"From Date is near that To Date\";\r\n\r\nclass DatesFragment extends Component {\r\n  static defaultProps = {\r\n    msgOnNotValidFormat : (item='Date') => `${item} is not in valid format`\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            initFromDate, initToDate,\r\n            nForecastDate, onTestDate\r\n        } = this.props;\r\n    return (\r\n        <div>\r\n          <div style={styles.rowDiv}>\r\n            <span style={styles.labelSpan}>\r\n               From Date:\r\n            </span>\r\n            <DateField\r\n               ref={c => this.fromDate = c}\r\n               initValue={initFromDate}\r\n               errorMsg={FORMAT_ERR_MSG}\r\n               onTest={onTestDate}\r\n            />\r\n         </div>\r\n         <div style={styles.rowDiv}>\r\n            <span style={styles.labelSpan}>\r\n              To Date:\r\n            </span>\r\n            <DateField\r\n                 ref={c => this.toDate = c}\r\n                 initValue={initToDate}\r\n                 nForecastDate={nForecastDate}\r\n                 errorMsg={FORMAT_ERR_MSG}\r\n                 onTest={onTestDate}\r\n            />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n\r\n  getValues = () => {\r\n    return {\r\n      fromDate: this.fromDate.getValue(),\r\n      toDate: this.toDate.getValue()\r\n    }\r\n  }\r\n\r\n  getValidation = () => {\r\n    const { msgOnNotValidFormat } = this.props\r\n        , datesMsg = [];\r\n    if (!this.fromDate.isValid()) { datesMsg.push(msgOnNotValidFormat('From Date')); }\r\n    if (!this.toDate.isValid())   { datesMsg.push(msgOnNotValidFormat('To Date')); }\r\n\r\n    if (this.fromDate.getValue().trim() > this.toDate.getValue().trim() ) {\r\n      datesMsg.push(NEAR_ERR_MSG);\r\n    }\r\n\r\n    if (datesMsg.length>0){\r\n      return { isValid: false, datesMsg }\r\n    }\r\n    return { isValid : true}\r\n  }\r\n\r\n  focusInput = () => {\r\n    this.fromDate.focusInput();\r\n  }\r\n\r\n  focusNotValidInput = () => {\r\n    if (!this.fromDate.isValid()){\r\n       this.fromDate.focusInput();\r\n       return true;\r\n    }\r\n    if (!this.toDate.isValid()){\r\n      this.toDate.focusInput();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default DatesFragment\r\n"]}