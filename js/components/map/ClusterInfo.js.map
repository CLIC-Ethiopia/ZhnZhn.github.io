{"version":3,"sources":["../../../src/components/map/ClusterInfo.jsx"],"names":["COLOR_MAX","COLOR_MIN","COLOR_EQUAL","SPOT_COLORS","S","CAPTION","position","opacity","lineHeight","padding","marginBottom","CAPTION_BT","top","right","fontSize","fontWeight","cursor","ITEM_ROOT","ITEM_TITLE","display","width","ITEM_VALUE","float","Caption","color","from","to","onClick","background","Item","title","value","ClusterItem","props","_handleClickItem","setState","isShowChart","prevState","data","point","seria","pointIndex","length","state","index","isShowRange","_maxLabel","_minLabel","id","propTypes","shape","number","string","array","bool","Cluster","cluster","points","map","arrayOf","ClusterInfo","_handleToggleRange","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AASA,IAAMA,YAAY,SAAlB;AACA,IAAMC,YAAY,SAAlB;AACA,IAAMC,cAAc,OAApB;AACA,IAAMC,cAAc,EAAC,MAAMF,SAAP,EAAkB,KAAKC,WAAvB,EAAoC,KAAKF,SAAzC,EAApB;;AAEA,IAAMI,IAAI;AACRC,WAAS;AACPC,cAAU,UADH;AAEPC,aAAS,GAFF;AAGPC,gBAAY,GAHL;AAIPC,aAAS,KAJF;AAKPC,kBAAc;AALP,GADD;AAQRC,cAAY;AACVL,cAAU,UADA;AAEVM,SAAK,KAFK;AAGVC,WAAO,KAHG;AAIVC,cAAU,MAJA;AAKVC,gBAAY,MALF;AAMVC,YAAQ;AANE,GARJ;AAgBRC,aAAW;AACTR,aAAS,KADA;AAETO,YAAQ;AAFC,GAhBH;AAoBRE,cAAY;AACVC,aAAS,cADC;AAEVC,WAAO;AAFG,GApBJ;AAwBRC,cAAY;AACVF,aAAS,cADC;AAEVG,WAAO;AAFG;AAxBJ,CAAV;;AA+BA,IAAMC,UAAU,SAAVA,OAAU;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,IAAV,QAAUA,IAAV;AAAA,MAAgBC,EAAhB,QAAgBA,EAAhB;AAAA,MAAoBC,OAApB,QAAoBA,OAApB;AAAA,SACd;AAAA;AAAA,MAAG,kCAAYvB,EAAEC,OAAd,EAA0B,EAAEuB,YAAYJ,KAAd,EAA1B,CAAH;AACE;AAAA;AAAA;AAAOC,UAAP;AAAA;AAAgCC;AAAhC,KADF;AAEE;AAAA;AAAA,QAAM,OAAOtB,EAAEO,UAAf,EAA2B,SAASgB,OAApC;AAAA;AAAA;AAFF,GADc;AAAA,CAAhB;;AAQA,IAAME,OAAO,SAAPA,IAAO;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,MAAUC,KAAV,SAAUA,KAAV;AAAA,MAAiBJ,OAAjB,SAAiBA,OAAjB;AAAA,SACX;AAAA;AAAA;AACE,aAAOvB,EAAEa,SADX;AAEE,eAASU;AAFX;AAIE;AAAA;AAAA,QAAM,OAAOvB,EAAEc,UAAf;AACIY;AADJ,KAJF;AAOE;AAAA;AAAA,QAAM,OAAO1B,EAAEiB,UAAf;AACGU;AADH;AAPF,GADW;AAAA,CAAb;;IAcMC,W;;;AAcJ,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,UASlBC,gBATkB,GASC,YAAM;AACvB,YAAKC,QAAL,CAAc,qBAAa;AACzB,eAAO;AACLC,uBAAa,CAACC,UAAUD;AADnB,SAAP;AAGD,OAJD;AAKD,KAfiB;;AAEhB,UAAKE,IAAL,GAAYL,MAAMM,KAAN,CAAYC,KAAZ,CAAkBF,IAA9B;AACA,UAAKG,UAAL,GAAkB,MAAKH,IAAL,CAAUI,MAAV,GAAmB,CAArC;AACA,UAAKC,KAAL,GAAa;AACXP,mBAAcH,MAAMW,KAAN,GAAY,CAAb,GAAkB,IAAlB,GAAyB;AAD3B,KAAb;AAJgB;AAOjB;;;;6BAUO;AAAA,mBACkC,KAAKX,KADvC;AAAA,UACIM,KADJ,UACIA,KADJ;AAAA,UACWf,KADX,UACWA,KADX;AAAA,UACkBqB,WADlB,UACkBA,WADlB;AAAA,UAEIT,WAFJ,GAEoB,KAAKO,KAFzB,CAEIP,WAFJ;AAAA,UAGEU,SAHF,GAGeD,WAAD,GACR,gEAAoB,OAAO7C,SAA3B,EAAsC,UAAU,EAAhD,GADQ,GAER,2CALN;AAAA,UAME+C,SANF,GAMeF,WAAD,GACR,gEAAoB,OAAO5C,SAA3B,EAAsC,UAAU,EAAhD,GADQ,GAER,2CARN;;AAUJ,aACE;AAAA;AAAA;AACE,sCAAC,IAAD;AACE,iBAAOsC,MAAMS,EADf;AAEE,iBAAOT,MAAM,CAAN,CAFT;AAGE,mBAAS,KAAKL;AAHhB,UADF;AAME;AAAA;AAAA,YAAU,QAAQE,WAAlB;AACE;AAAA;AAAA;AACE,sBAAQ,EADV;AAEE,qBAAO,GAFT;AAGE,yBAAW,EAHb;AAIE,wBAAU,GAJZ;AAKE,oBAAM,KAAKE,IALb;AAME,sBAAQ;AACR;AAPF;AASIQ,qBATJ;AAUIC,qBAVJ;AAWG,wEAAgB,OAAOvB,KAAvB,GAXH;AAaG;AACI,0BAAY,KAAKiB,UADrB;AAEI,oBAAM,CAFV;AAGI,0BAAYtC;AAHhB;AAbH;AADF;AANF,OADF;AA8BF;;;;;AAvEE6B,W,CACGiB,S,2CAAY;AACjBV,SAAO,oBAAUW,KAAV,CAAgB;AACrB,OAAG,oBAAUC,MADQ;AAErBH,QAAI,oBAAUI,MAFO;AAGrBZ,WAAO,oBAAUU,KAAV,CAAgB;AACrBZ,YAAM,oBAAUe;AADK,KAAhB;AAHc,GAAhB,CADU;AAQjB7B,SAAO,oBAAU4B,MARA;AASjBR,SAAO,oBAAUO,MATA;AAUjBN,eAAa,oBAAUS;AAVN,C;;;AAyErB,IAAMC,UAAU,SAAVA,OAAU,QAAoC;AAAA,MAAjCC,OAAiC,SAAjCA,OAAiC;AAAA,MAAzBhC,KAAyB,SAAzBA,KAAyB;AAAA,MAAlBqB,WAAkB,SAAlBA,WAAkB;;AAClD,MAAMY,SAASD,QAAQC,MAAR,IAAkB,EAAjC;AACA,SACE;AAAA;AAAA;AAEIA,WAAOC,GAAP,CAAY,UAACnB,KAAD,EAAQK,KAAR,EAAkB;AAC5B,aACE,8BAAC,WAAD;AACG,aAAKL,MAAMS;AADd,SAEO,EAAET,YAAF,EAASf,YAAT,EAAgBoB,YAAhB,EAAuBC,wBAAvB,EAFP,EADF;AAMD,KAPD;AAFJ,GADF;AAcD,CAhBD;AAiBAU,QAAQN,SAAR,2CAAoB;AAClBO,WAAS,oBAAUN,KAAV,CAAgB;AACvBO,YAAQ,oBAAUE,OAAV,CACJ,oBAAUT,KAAV,CAAgB;AACbF,UAAI,oBAAUI;AADD,KAAhB,CADI;AADe,GAAhB,CADS;AAOlB5B,SAAO,oBAAU4B;AAPC,CAApB;;IAUMQ,W;;;AACJ,uBAAY3B,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,WAMlB4B,kBANkB,GAMG,YAAM;AACzB,aAAK1B,QAAL,CAAc;AAAA,eAAc,EAACU,aAAa,CAACR,UAAUQ,WAAzB,EAAd;AAAA,OAAd;AACD,KARiB;;AAEhB,WAAKF,KAAL,GAAa;AACXE,mBAAa;AADF,KAAb;AAFgB;AAKjB;;;;6BAKO;AAAA,oBACgC,KAAKZ,KADrC;AAAA,UACGuB,OADH,WACGA,OADH;AAAA,UACYhC,KADZ,WACYA,KADZ;AAAA,UACmBC,IADnB,WACmBA,IADnB;AAAA,UACyBC,EADzB,WACyBA,EADzB;AAAA,UAEGmB,WAFH,GAEmB,KAAKF,KAFxB,CAEGE,WAFH;;AAGN,aACE;AAAA;AAAA;AACE,sCAAC,OAAD,EAAa,EAAErB,YAAF,EAASC,UAAT,EAAeC,MAAf,EAAmBC,SAAQ,KAAKkC,kBAAhC,EAAb,CADF;AAEE,sCAAC,OAAD,EAAa,EAAEL,gBAAF,EAAWhC,YAAX,EAAkBqB,wBAAlB,EAAb;AAFF,OADF;AAMD;;;;;AAGHe,YAAYX,SAAZ,2CAAwB;AACtBO,WAAS,oBAAUM,MADG;AAEtBtC,SAAO,oBAAU4B,MAFK;AAGtB3B,QAAM,oBAAU2B,MAHM;AAItB1B,MAAI,oBAAU0B;AAJQ,CAAxB;;kBAOeQ,W","file":"ClusterInfo.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport ShowHide from '../zhn/ShowHide'\r\nimport {\r\n  Sparklines,\r\n  SparklinesLine,\r\n  //SparklinesSpots,\r\n  SparklinesSpot,\r\n  SparklinesMaxLabel,\r\n  SparklinesMinLabel\r\n} from '../zhn-sparklines/Sparklines'\r\n\r\nconst COLOR_MAX = \"#8bc34a\";\r\nconst COLOR_MIN = \"#f44336\";\r\nconst COLOR_EQUAL = 'black';\r\nconst SPOT_COLORS = {'-1': COLOR_MIN, '0': COLOR_EQUAL, '1': COLOR_MAX };\r\n\r\nconst S = {\r\n  CAPTION: {\r\n    position: 'relative',\r\n    opacity: 0.7,\r\n    lineHeight: 1.8,\r\n    padding: '3px',\r\n    marginBottom: '5px'\r\n  },\r\n  CAPTION_BT: {\r\n    position: 'absolute',\r\n    top: '4px',\r\n    right: '8px',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    cursor: 'pointer'\r\n  },\r\n  ITEM_ROOT: {\r\n    padding: '3px',\r\n    cursor: 'pointer'\r\n  },\r\n  ITEM_TITLE: {\r\n    display: 'inline-block',\r\n    width: '30px',\r\n  },\r\n  ITEM_VALUE: {\r\n    display: 'inline-block',\r\n    float: 'right'\r\n  }\r\n}\r\n\r\n\r\nconst Caption = ({ color, from, to, onClick }) => (\r\n  <p style={{ ...S.CAPTION, ...{ background: color } }}>\r\n    <span>{from}&nbsp;&ndash;&nbsp;{to}</span>\r\n    <span style={S.CAPTION_BT} onClick={onClick}>*</span>\r\n  </p>\r\n);\r\n\r\n\r\nconst Item = ({ title, value, onClick }) => (\r\n  <p\r\n    style={S.ITEM_ROOT}\r\n    onClick={onClick}\r\n  >\r\n    <span style={S.ITEM_TITLE}>\r\n       {title}\r\n    </span>\r\n    <span style={S.ITEM_VALUE}>\r\n      {value}\r\n    </span>\r\n  </p>\r\n);\r\n\r\nclass ClusterItem extends Component {\r\n  static propTypes = {\r\n    point: PropTypes.shape({\r\n      0: PropTypes.number,\r\n      id: PropTypes.string,\r\n      seria: PropTypes.shape({\r\n        data: PropTypes.array\r\n      })\r\n    }),\r\n    color: PropTypes.string,\r\n    index: PropTypes.number,\r\n    isShowRange: PropTypes.bool\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this.data = props.point.seria.data\r\n    this.pointIndex = this.data.length - 1\r\n    this.state = {\r\n      isShowChart: (props.index<3) ? true : false\r\n    }\r\n  }\r\n\r\n  _handleClickItem = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isShowChart: !prevState.isShowChart\r\n      };\r\n    })\r\n  }\r\n\r\n  render(){\r\n      const { point, color, isShowRange } = this.props\r\n          , { isShowChart } = this.state\r\n          , _maxLabel = (isShowRange)\r\n              ? <SparklinesMaxLabel color={COLOR_MAX} fontSize={14} />\r\n              : <span/>\r\n          , _minLabel = (isShowRange)\r\n              ? <SparklinesMinLabel color={COLOR_MIN} fontSize={14} />\r\n              : <span/>;\r\n\r\n      return (\r\n        <div>\r\n          <Item\r\n            title={point.id}\r\n            value={point[0]}\r\n            onClick={this._handleClickItem}\r\n          />\r\n          <ShowHide isShow={isShowChart}>\r\n            <Sparklines\r\n              height={32}\r\n              width={140}\r\n              svgHeight={32}\r\n              svgWidth={140}\r\n              data={this.data}\r\n              margin={3}\r\n              //marginLeft={20}\r\n            >\r\n               {_maxLabel}\r\n               {_minLabel}\r\n               <SparklinesLine color={color} />\r\n               {/*<SparklinesSpots />*/}\r\n               <SparklinesSpot\r\n                   pointIndex={this.pointIndex}\r\n                   size={3}\r\n                   spotColors={SPOT_COLORS}\r\n                 />\r\n            </Sparklines>\r\n        </ShowHide>\r\n       </div>\r\n      );\r\n   }\r\n}\r\n\r\nconst Cluster = ({ cluster,color, isShowRange }) => {\r\n  const points = cluster.points || [];\r\n  return (\r\n    <div>\r\n      {\r\n        points.map( (point, index) => {\r\n          return (\r\n            <ClusterItem\r\n               key={point.id}\r\n               {...{ point, color, index, isShowRange }}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\nCluster.propTypes = {\r\n  cluster: PropTypes.shape({\r\n    points: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n           id: PropTypes.string\r\n    }))\r\n  }),\r\n  color: PropTypes.string\r\n}\r\n\r\nclass ClusterInfo extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      isShowRange: false\r\n    }\r\n  }\r\n  _handleToggleRange = () => {\r\n    this.setState(prevState => ({isShowRange: !prevState.isShowRange }))\r\n  }\r\n\r\n  render(){\r\n    const  { cluster, color, from, to } = this.props\r\n        ,  { isShowRange } = this.state;    \r\n    return  (\r\n      <div>\r\n        <Caption {...{ color, from, to, onClick:this._handleToggleRange } } />\r\n        <Cluster {...{ cluster, color, isShowRange } } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClusterInfo.propTypes = {\r\n  cluster: PropTypes.object,\r\n  color: PropTypes.string,\r\n  from: PropTypes.string,\r\n  to: PropTypes.string\r\n}\r\n\r\nexport default ClusterInfo\r\n"]}