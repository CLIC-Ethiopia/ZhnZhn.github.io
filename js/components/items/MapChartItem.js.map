{"version":3,"sources":["../../../src/components/items/MapChartItem.jsx"],"names":["styles","rootDiv","position","lineHeight","marginBottom","marginRight","headerDiv","backgroundColor","paddingTop","paddingLeft","height","width","borderTopRightRadius","borderBottomRightRadius","checkBoxStyle","float","marginLeft","captionSpanOpen","display","color","cursor","fontWeight","whiteSpace","textOverflow","overflow","timeSpan","captionSpanClose","tabDiv","zIndex","mapDiv","spinnerLoading","textAlign","margin","marginTop","displayBlock","displayNone","MapChartItem","props","_handleToggle","setState","isOpen","state","_handleClickInfo","isShowInfo","_handleClickChart","_renderTabToolbar","map","undefined","isLoading","time","caption","config","jsonCube","json","zhMapSlice","draw","then","option","catch","onCloseItem","zhDialog","subtitle","_styleCaption","_styleMap","label","Object","assign","info","propTypes","string","shape","object","func"],"mappings":"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","file":"MapChartItem.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ChoroplethMap from '../../adapters/eurostat/ChoroplethMap';\r\n\r\nimport SvgClose from '../zhn/SvgClose';\r\nimport ButtonTab from '../zhn/ButtonTab';\r\nimport ShowHide from '../zhn/ShowHide';\r\nimport PanelDataInfo from '../zhn/PanelDataInfo';\r\nimport SpinnerLoading from '../zhn/SpinnerLoading';\r\n\r\nconst styles = {\r\n  rootDiv : {\r\n    position : 'relative',\r\n    lineHeight : 1.5,\r\n    marginBottom: '10px',\r\n    marginRight: '25px',\r\n  },\r\n  headerDiv: {\r\n    //backgroundColor: '#232F3B',\r\n    backgroundColor: '#1b2836',\r\n    paddingTop: '4px',\r\n    paddingLeft: '10px',\r\n    lineHeight: 1.8,\r\n    height: '32px',\r\n    width : '100%',\r\n    borderTopRightRadius: '2px',\r\n    borderBottomRightRadius: '2px'\r\n  },\r\n  checkBoxStyle : {\r\n    float: 'left',\r\n    marginRight: '10px',\r\n    marginLeft: '10px'\r\n  },\r\n  captionSpanOpen : {\r\n    display : 'inline-block',\r\n    color: 'rgba(164, 135, 212, 1)',\r\n    cursor: 'pointer',\r\n    width: '410px',\r\n    fontWeight : 'bold',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow : 'ellipsis',\r\n    overflow : 'hidden',\r\n    float : 'left'\r\n  },\r\n  timeSpan : {\r\n    color : 'rgb(253, 179, 22)',\r\n    fontWeight : 'bold',\r\n    paddingLeft : '16px'\r\n  },\r\n  captionSpanClose : {\r\n    display : 'inline-block',\r\n    color : 'gray',\r\n    cursor: 'pointer',\r\n    width : '410px',\r\n    fontWeight : 'bold',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow : 'ellipsis',\r\n    overflow : 'hidden',\r\n    float : 'left'\r\n  },\r\n  tabDiv : {\r\n    position: 'relative',\r\n    height: '30px',\r\n    backgroundColor: 'transparent',\r\n    zIndex: 2\r\n  },\r\n  mapDiv : {\r\n    height : '400px'\r\n  },\r\n  spinnerLoading : {\r\n    position: 'relative',\r\n    display: 'block',\r\n    textAlign: 'middle',\r\n    margin: '0 auto',\r\n    marginTop: '64px',\r\n    width: '32px',\r\n    height: '32px'\r\n  },\r\n  displayBlock : {\r\n    display : 'block'\r\n  },\r\n  displayNone : {\r\n    display : 'none'\r\n  }\r\n}\r\n\r\nclass MapChartItem extends Component {\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    config: PropTypes.shape({\r\n      json: PropTypes.object,\r\n      zhMapSlice: PropTypes.object,\r\n      zhDialog: PropTypes.shape({\r\n        subtitle: PropTypes.string,\r\n        time: PropTypes.string\r\n      })\r\n    }),\r\n    onCloseItem: PropTypes.func\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this.map = undefined\r\n    this.state = {\r\n      isLoading: true,\r\n      isOpen : true,\r\n      isShowInfo : false,\r\n      time: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { caption, config } = this.props\r\n        , { json:jsonCube, zhMapSlice } = config;\r\n\r\n    ChoroplethMap.draw(`map_${caption}`, jsonCube, zhMapSlice)\r\n                 .then( (option) => {\r\n                    this.map = option.map\r\n                    this.setState({\r\n                      isLoading: false,\r\n                      time: option.time\r\n                    })\r\n                    return undefined;\r\n                 })\r\n                 .catch(err => {\r\n                   this.setState({ isLoading: false })\r\n                 });\r\n  }\r\n\r\n  _handleToggle = () => {\r\n     this.setState({ isOpen : !this.state.isOpen })\r\n  }\r\n\r\n  _handleClickInfo = () => {\r\n    this.setState({ isShowInfo : true });\r\n  }\r\n  _handleClickChart = () => {\r\n    this.setState({ isShowInfo : false });\r\n  }\r\n\r\n  _renderTabToolbar = () => {\r\n     return (\r\n      <div style={styles.tabDiv}>\r\n         <ButtonTab\r\n            caption={'Info'}\r\n            isShow={false}\r\n            onClick={this._handleClickInfo}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const { caption, config, onCloseItem } = this.props\r\n        , { json={}, zhDialog={} } = config\r\n        , { subtitle='' } = zhDialog\r\n        , { isLoading, isOpen, isShowInfo, time } = this.state\r\n        , _styleCaption = isOpen\r\n              ? styles.captionSpanOpen\r\n              : styles.captionSpanClose\r\n        , _styleMap = isShowInfo\r\n              ? styles.displayNone\r\n              : styles.displayBlock;\r\n\r\n    return (\r\n      <div style={styles.rootDiv}>\r\n        <div style={styles.headerDiv}>\r\n          <span\r\n             className=\"not-selected\"\r\n             title={json.label}\r\n             style={_styleCaption}\r\n             onClick={this._handleToggle}\r\n          >\r\n             {subtitle}\r\n          </span>\r\n          <span style={styles.timeSpan}>\r\n            {time}\r\n          </span>\r\n          <SvgClose onClose={onCloseItem} />\r\n        </div>\r\n        <ShowHide isShow={isOpen}>\r\n           {!isShowInfo && this._renderTabToolbar()}\r\n           <div\r\n              id={`map_${caption}`}\r\n              style={Object.assign({}, styles.mapDiv, _styleMap)}\r\n           >\r\n             { isLoading && <SpinnerLoading style={styles.spinnerLoading} /> }\r\n           </div>\r\n           <PanelDataInfo\r\n              isShow={isShowInfo}\r\n              info={config.info}\r\n              onClickChart={this._handleClickChart}\r\n           />\r\n        </ShowHide>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapChartItem\r\n"]}