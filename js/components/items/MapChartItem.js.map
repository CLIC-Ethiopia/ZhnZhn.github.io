{"version":3,"sources":["../../../src/components/items/MapChartItem.jsx"],"names":["S","ROOT_DIV","position","marginBottom","marginRight","TIME_SPAN","display","color","paddingLeft","fontWeight","TAB_DIV","height","backgroundColor","zIndex","MAP_DIV","SPINNER_LOADING","width","margin","marginTop","textAlign","BLOCK","NONE","BtTabInfo","isShow","onClick","MapChartItem","state","isLoading","isOpen","isShowInfo","time","_hToggle","setState","prevState","_hClickInfo","_hClickChart","componentDidMount","props","caption","config","jsonCube","json","zhMapSlice","ChoroplethMap","draw","then","option","map","err","render","onCloseItem","zhDialog","itemCaption","subtitle","_itemCaption","_styleMap","info","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport ChoroplethMap from '../../adapters/eurostat/ChoroplethMap';\r\n\r\nimport A from '../Comp'\r\nimport ItemHeader from './ItemHeader'\r\nimport PanelDataInfo from './PanelDataInfo';\r\n\r\nconst S = {\r\n  ROOT_DIV: {\r\n    position: 'relative',\r\n    marginBottom: 10,\r\n    marginRight: 25,\r\n  },\r\n  TIME_SPAN: {\r\n    position: 'absolute',\r\n    display: 'inline-block',\r\n    color: 'rgb(253, 179, 22)',\r\n    paddingLeft: 16,\r\n    fontWeight: 'bold'\r\n  },\r\n  TAB_DIV: {\r\n    position: 'relative',\r\n    height: 30,\r\n    backgroundColor: 'transparent',\r\n    zIndex: 2\r\n  },\r\n  MAP_DIV: {\r\n    height : 400\r\n  },\r\n  SPINNER_LOADING: {\r\n    position: 'relative',\r\n    display: 'block',\r\n    width: 32,\r\n    height: 32,\r\n    margin: '0 auto',\r\n    marginTop: 64,\r\n    textAlign: 'middle'\r\n  },\r\n  BLOCK: {\r\n    display: 'block'\r\n  },\r\n  NONE: {\r\n    display: 'none'\r\n  }\r\n}\r\n\r\nconst BtTabInfo = ({ isShow, onClick }) => {\r\n  if (!isShow) { return null; }\r\n  return (\r\n    <div style={S.TAB_DIV}>\r\n       <A.ButtonTab\r\n          caption=\"Info\"\r\n          onClick={onClick}\r\n       />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass MapChartItem extends Component {\r\n  /*\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    config: PropTypes.shape({\r\n      json: PropTypes.object,\r\n      zhMapSlice: PropTypes.object,\r\n      zhDialog: PropTypes.shape({\r\n        subtitle: PropTypes.string,\r\n        time: PropTypes.string\r\n      })\r\n    }),\r\n    onCloseItem: PropTypes.func\r\n  }\r\n  */\r\n\r\n  //map = void 0\r\n  state = {\r\n    isLoading: true,\r\n    isOpen: true,\r\n    isShowInfo: false,\r\n    time: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { caption, config } = this.props\r\n        , { json:jsonCube, zhMapSlice } = config;\r\n    ChoroplethMap.draw(`map_${caption}`, jsonCube, zhMapSlice)\r\n       .then(option => {\r\n          this.map = option.map\r\n          this.setState({\r\n            isLoading: false,\r\n            time: option.time\r\n          })\r\n       })\r\n       .catch(err => {\r\n         this.setState({ isLoading: false })\r\n       });\r\n  }\r\n\r\n  _hToggle = () => {\r\n     this.setState(prevState => ({\r\n       isOpen: !prevState.isOpen\r\n     }))\r\n  }\r\n\r\n  _hClickInfo = () => {\r\n    this.setState({ isShowInfo: true });\r\n  }\r\n  _hClickChart = () => {\r\n    this.setState({ isShowInfo: false });\r\n  }\r\n\r\n  render(){\r\n    const { caption, config, onCloseItem } = this.props\r\n    , { zhDialog } = config\r\n    , { itemCaption, subtitle } = zhDialog || {}\r\n    , _itemCaption = itemCaption || subtitle || ''\r\n    , {\r\n        isLoading, isOpen, isShowInfo,\r\n        time\r\n      } = this.state\r\n    , _styleMap = isShowInfo\r\n          ? S.NONE\r\n          : S.BLOCK;\r\n\r\n    return (\r\n      <div style={S.ROOT_DIV}>\r\n        <ItemHeader\r\n          isOpen={isOpen}\r\n          caption={_itemCaption}\r\n          onClick={this._hToggle}\r\n          onClose={onCloseItem}\r\n        >\r\n          <span style={S.TIME_SPAN}>\r\n            {time}\r\n          </span>\r\n        </ItemHeader>\r\n\r\n        <A.ShowHide isShow={isOpen}>\r\n           <BtTabInfo\r\n             isShow={!isShowInfo}\r\n             onClick={this._hClickInfo}\r\n           />\r\n           <div\r\n              id={`map_${caption}`}\r\n              style={{ ...S.MAP_DIV, ..._styleMap }}\r\n           >\r\n             {\r\n               isLoading && <A.SpinnerLoading style={S.SPINNER_LOADING} />\r\n             }\r\n           </div>\r\n           <PanelDataInfo\r\n              isShow={isShowInfo}\r\n              info={config.info}\r\n              onClickChart={this._hClickChart}\r\n           />\r\n        </A.ShowHide>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapChartItem\r\n"],"file":"MapChartItem.js"}