{"version":3,"sources":["../../../src/components/items/MapChartItem.jsx"],"names":["S","ROOT_DIV","position","marginBottom","marginRight","TIME_SPAN","display","color","fontWeight","paddingLeft","TAB_DIV","height","backgroundColor","zIndex","MAP_DIV","SPINNER_LOADING","textAlign","margin","marginTop","width","BLOCK","NONE","MapChartItem","props","_handleToggle","setState","isOpen","state","_handleClickInfo","isShowInfo","_handleClickChart","_renderTabToolbar","map","undefined","isLoading","time","componentDidMount","caption","config","jsonCube","json","zhMapSlice","ChoroplethMap","draw","then","option","err","render","onCloseItem","zhDialog","subtitle","_styleMap","info","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport ChoroplethMap from '../../adapters/eurostat/ChoroplethMap';\r\n\r\nimport ButtonTab from '../zhn/ButtonTab';\r\nimport ShowHide from '../zhn/ShowHide';\r\nimport SpinnerLoading from '../zhn/SpinnerLoading';\r\nimport ItemHeader from './ItemHeader'\r\nimport PanelDataInfo from './PanelDataInfo';\r\n\r\nconst S = {\r\n  ROOT_DIV: {\r\n    position: 'relative',\r\n    //lineHeight: 1.5,\r\n    marginBottom: '10px',\r\n    marginRight: '25px',\r\n  },\r\n  TIME_SPAN: {\r\n    position: 'absolute',\r\n    display: 'inline-block',\r\n    color: 'rgb(253, 179, 22)',\r\n    fontWeight: 'bold',\r\n    paddingLeft: '16px',\r\n  },\r\n  TAB_DIV: {\r\n    position: 'relative',\r\n    height: '30px',\r\n    backgroundColor: 'transparent',\r\n    zIndex: 2\r\n  },\r\n  MAP_DIV: {\r\n    height : '400px'\r\n  },\r\n  SPINNER_LOADING: {\r\n    position: 'relative',\r\n    display: 'block',\r\n    textAlign: 'middle',\r\n    margin: '0 auto',\r\n    marginTop: '64px',\r\n    width: '32px',\r\n    height: '32px'\r\n  },\r\n  BLOCK: {\r\n    display: 'block'\r\n  },\r\n  NONE: {\r\n    display: 'none'\r\n  }\r\n}\r\n\r\nclass MapChartItem extends Component {\r\n  /*\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    config: PropTypes.shape({\r\n      json: PropTypes.object,\r\n      zhMapSlice: PropTypes.object,\r\n      zhDialog: PropTypes.shape({\r\n        subtitle: PropTypes.string,\r\n        time: PropTypes.string\r\n      })\r\n    }),\r\n    onCloseItem: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.map = undefined\r\n    this.state = {\r\n      isLoading: true,\r\n      isOpen: true,\r\n      isShowInfo: false,\r\n      time: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { caption, config } = this.props\r\n        , { json:jsonCube, zhMapSlice } = config;\r\n\r\n    ChoroplethMap.draw(`map_${caption}`, jsonCube, zhMapSlice)\r\n                 .then( (option) => {\r\n                    this.map = option.map\r\n                    this.setState({\r\n                      isLoading: false,\r\n                      time: option.time\r\n                    })\r\n                    return undefined;\r\n                 })\r\n                 .catch(err => {\r\n                   this.setState({ isLoading: false })\r\n                 });\r\n  }\r\n\r\n  _handleToggle = () => {\r\n     this.setState({ isOpen: !this.state.isOpen })\r\n  }\r\n\r\n  _handleClickInfo = () => {\r\n    this.setState({ isShowInfo: true });\r\n  }\r\n  _handleClickChart = () => {\r\n    this.setState({ isShowInfo: false });\r\n  }\r\n\r\n  _renderTabToolbar = () => {\r\n     return (\r\n      <div style={S.TAB_DIV}>\r\n         <ButtonTab\r\n            caption=\"Info\"            \r\n            onClick={this._handleClickInfo}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const { caption, config, onCloseItem } = this.props\r\n        , { zhDialog={} } = config\r\n        , { subtitle='' } = zhDialog\r\n        , {\r\n            isLoading, isOpen, isShowInfo,\r\n            time\r\n          } = this.state\r\n        , _styleMap = isShowInfo\r\n              ? S.NONE\r\n              : S.BLOCK;\r\n\r\n    return (\r\n      <div style={S.ROOT_DIV}>\r\n\r\n        <ItemHeader\r\n          isOpen={isOpen}\r\n          caption={subtitle}\r\n          onClick={this._handleToggle}\r\n          onClose={onCloseItem}\r\n        >\r\n          <span style={S.TIME_SPAN}>\r\n            {time}\r\n          </span>\r\n        </ItemHeader>\r\n\r\n        <ShowHide isShow={isOpen}>\r\n           {!isShowInfo && this._renderTabToolbar()}\r\n           <div\r\n              id={`map_${caption}`}\r\n              style={{ ...S.MAP_DIV, ..._styleMap }}\r\n           >\r\n             {\r\n               isLoading && <SpinnerLoading\r\n                  style={S.SPINNER_LOADING} />\r\n             }\r\n           </div>\r\n           <PanelDataInfo\r\n              isShow={isShowInfo}\r\n              info={config.info}\r\n              onClickChart={this._handleClickChart}\r\n           />\r\n        </ShowHide>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapChartItem\r\n"],"file":"MapChartItem.js"}