{"version":3,"sources":["../../../src/components/items/AreaChartItem.jsx"],"names":["styles","rootDiv","lineHeight","marginBottom","marginRight","position","tabDiv","height","backgroundColor","zIndex","showHide","marginLeft","wrapper","marginTop","dataSource","left","bottom","color","fontSize","AreaChartItem","props","is2H","_fnOnCheck","_handlerCheckBox","bind","_fnOnUnCheck","config","caption","zhConfig","itemCaption","id","_itemCaption","_chartId","_crMomAthConfig","zhFnMomAthConfig","_dataSourceEl","state","isOpen","isShowToolbar","isShowChart","isShowLegend","isShowInfo","isInitVolume","isShowVolume","isATHVolume","isShowATH","isInitHighLow","isShowHighLow","chartsDescription","mfiConfigs","mainChart","chartComp","getChart","chartType","onCloseItem","isAdminMode","itemTime","_handlerToggleOpen","valueMoving","_crValueMoving","_createChartToolBar","comp","info","_handlerClickChart","_renderLegend","_renderIndicatorCharts","_renderMetricCharts","width","ChartFn","spacingLeft","arCalcDeltaYAxis","zhDetailCharts","options","setSize","undefined","Array","isArray","forEach","chart","update","setItemCaption","str","setState","setDataSource","strDataSource","forceUpdate","getMainChart","_handlerLoadedMetricChart","metricChart","push","_handlerWillUnLoadedChart","objChart","charts","filter","_handlerClickLegend","_handlerToggleSeria","item","zhToggleSeria","_handlerClick2H","setChartHeight","_handlerAddToWatch","onAddToWatch","_handleCopy","onCopy","_handlePasteTo","onPasteToDialog","toChart","fromChart","getCopyFromChart","_handlerClickInfo","_handlerClickVolume","arMetricOption","toggleAbsComp","type","_handlerClickATH","isInitATH","_handlerClickHighLow","isCheck","checkBox","onSetActive","_handlerAddSma","option","zhFnAddSeriesSma","_handleRemoveSeries","zhFnRemoveSeries","_handlerAddMfi","period","zhFnGetMfiConfig","_handlerRemoveMfi","objConfig","_handleAddMomAth","_handleClickConfig","onShowConfigDialog","onToggleToolbar","_handleToggleToolbar","prev","dateTo","crValueMoving","value","prevState","isWithLegend","legend","_compLegend","_metricCharts","map","descr","index","_isShow","_ref","_config","arrConfigs","_indicatorCharts","propTypes","string","shape","func","oneOfType","bool"],"mappings":"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","file":"AreaChartItem.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport safeGet from '../../utils/safeGet'\r\n\r\nimport Header from './Header';\r\nimport ChartToolBar from './ChartToolBar';\r\nimport ShowHide from '../zhn/ShowHide';\r\nimport HighchartWrapper from '../zhn/HighchartWrapper';\r\nimport Legend from '../zhn/Legend';\r\n\r\nimport PanelDataInfo from '../zhn/PanelDataInfo';\r\n\r\nconst styles = {\r\n  rootDiv : {\r\n    lineHeight : 1.5,\r\n    marginBottom: '10px',\r\n    marginRight: '25px',\r\n    position : 'relative'\r\n  },\r\n  tabDiv : {\r\n    position: 'relative',\r\n    height: '30px',\r\n    backgroundColor: 'transparent',\r\n    zIndex: 2\r\n  },\r\n  showHide : {\r\n    marginLeft: '8px'\r\n  },\r\n  wrapper: {\r\n    marginTop: '6px'\r\n  },\r\n  dataSource: {\r\n    position: 'absolute',\r\n    left: '5px',\r\n    bottom: '0px',\r\n    color: '#909090',\r\n    fontSize: '11px'\r\n  }\r\n}\r\n\r\nclass AreaChartItem extends Component {\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    chartType: PropTypes.string,\r\n    config: PropTypes.shape({\r\n      zhConfig: PropTypes.shape({\r\n        dataSource: PropTypes.string,\r\n        itemCaption: PropTypes.string\r\n      })\r\n    }),\r\n    onAddToWatch: PropTypes.func,\r\n    onSetActive: PropTypes.func,\r\n    onShowConfigDialog: PropTypes.func,\r\n    onCloseItem: PropTypes.func,\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    crValueMoving: PropTypes.func\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this.is2H = false\r\n    this._fnOnCheck = this._handlerCheckBox.bind(this, true)\r\n    this._fnOnUnCheck = this._handlerCheckBox.bind(this, false)\r\n\r\n    const { config={}, caption='' } = props\r\n        , { zhConfig={} } = config\r\n        , { dataSource='', itemCaption, id } = zhConfig\r\n        , _itemCaption = (itemCaption) ? itemCaption : caption;\r\n\r\n    this._chartId = id\r\n    this._crMomAthConfig = config.zhFnMomAthConfig\r\n\r\n    this._dataSourceEl = (\r\n       <div style={styles.dataSource}>\r\n         {dataSource}\r\n       </div>\r\n    )\r\n    this.state = {\r\n      isOpen: true,\r\n      isShowToolbar: true,\r\n      isShowChart : true,\r\n      isShowLegend : false,\r\n      isShowInfo : false,\r\n\r\n      isInitVolume : false, isShowVolume : false,\r\n      isATHVolume : false, isShowATH : false,\r\n      isInitHighLow : false, isShowHighLow : false,\r\n\r\n      itemCaption: _itemCaption,\r\n      chartsDescription : [],\r\n      mfiConfigs : []\r\n    }\r\n  }\r\n\r\n  setItemCaption = (str) => {\r\n    this.setState({ itemCaption: str })\r\n  }\r\n  setDataSource = (strDataSource) => {\r\n    this._dataSourceEl = (\r\n       <div style={styles.dataSource}>\r\n         {strDataSource}\r\n       </div>\r\n    )\r\n    this.forceUpdate()\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.mainChart = this.chartComp.getChart()\r\n  }\r\n\r\n  getMainChart = () => {\r\n    return this.mainChart;\r\n  }\r\n\r\n  _handlerLoadedMetricChart = (metricChart) => {\r\n     this.mainChart.options.zhDetailCharts.push(metricChart);\r\n  }\r\n  _handlerWillUnLoadedChart = (objChart) => {\r\n    const charts = safeGet(this.mainChart, 'options.zhDetailCharts')\r\n    if (Array.isArray(charts)){\r\n      this.mainChart.options.zhDetailCharts = charts.filter((chart) => {\r\n        return chart !== objChart;\r\n      })\r\n    }\r\n  }\r\n\r\n  _handlerToggleOpen = () => {\r\n    if (this.state.isOpen){\r\n      this.setState({ isOpen : false })\r\n    } else {\r\n      this.setState({ isOpen : true })\r\n    }\r\n  }\r\n\r\n  _handlerClickLegend = () => {\r\n    this.setState({ isShowLegend : !this.state.isShowLegend })\r\n  }\r\n  _handlerToggleSeria = (item) => {\r\n    this.mainChart.options.zhToggleSeria(this.mainChart, item)\r\n  }\r\n\r\n  _handlerClick2H = () => {\r\n    const height = (this.is2H)\r\n           ? this.mainChart.options.chart.height/2\r\n           : this.mainChart.options.chart.height*2;\r\n    this.setChartHeight(height);\r\n    this.is2H = !this.is2H;\r\n  }\r\n\r\n  _handlerAddToWatch = () => {\r\n    const { caption, config, onAddToWatch } = this.props;\r\n    onAddToWatch( {caption, config} )\r\n  }\r\n\r\n  _handleCopy = () => {\r\n    this.props.onCopy(this.mainChart)\r\n  }\r\n  _handlePasteTo = () => {\r\n    this.props.onPasteToDialog({\r\n      toChart: this.mainChart,\r\n      fromChart: this.props.getCopyFromChart(),\r\n      ChartFn: this.props.ChartFn\r\n    })\r\n  }\r\n\r\n  _handlerClickInfo = () => {\r\n    this.setState({\r\n      isShowInfo: true,\r\n      isShowChart: false,\r\n      isShowLegend: false\r\n    });\r\n  }\r\n\r\n  _handlerClickVolume = () => {\r\n\r\n    const { ChartFn } = this.props\r\n        , {\r\n            isInitVolume, isShowVolume,\r\n            chartsDescription\r\n          } = this.state;\r\n\r\n    this.mainChart.update(\r\n      ChartFn.arMetricOption(this.mainChart, isShowVolume)\r\n    )\r\n    this.chartComp.toggleAbsComp()\r\n\r\n    if (isInitVolume){\r\n      this.setState({ isShowVolume: !isShowVolume })\r\n    } else {\r\n      chartsDescription.push({ type: 'Volume' })\r\n      this.setState({\r\n        chartsDescription,\r\n        isShowVolume: true, isInitVolume: true\r\n      })\r\n    }\r\n  }\r\n  _handlerClickATH = () => {\r\n    const { isInitATH, isShowATH } = this.state;\r\n    if (isInitATH){\r\n      this.setState({ isShowATH: !isShowATH })\r\n    } else {\r\n      this.state.chartsDescription.push({ type: 'ATH' })\r\n      this.setState({\r\n        chartsDescription : this.state.chartsDescription,\r\n        isShowATH: true, isInitATH: true\r\n      })\r\n    }\r\n  }\r\n  _handlerClickHighLow = () => {\r\n    const {isInitHighLow, isShowHighLow} = this.state;\r\n    if (isInitHighLow){\r\n      this.setState({isShowHighLow: !isShowHighLow});\r\n    } else {\r\n      this.state.chartsDescription.push({type: 'HighLow'});\r\n      this.setState({\r\n        chartsDescription : this.state.chartsDescription,\r\n        isShowHighLow: true, isInitHighLow: true\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  _handlerClickChart = () => {\r\n    this.setState({ isShowChart: true, isShowInfo: false });\r\n  }\r\n\r\n  _handlerCheckBox = (isCheck, checkBox) => {\r\n    this.props.onSetActive(isCheck, checkBox, this.mainChart)\r\n  }\r\n\r\n  _handlerAddSma = (option) => {\r\n    option.chart = this.mainChart\r\n    return this.mainChart.options.zhFnAddSeriesSma(option);\r\n  }\r\n  _handleRemoveSeries = (id) => {\r\n    return this.mainChart.options.zhFnRemoveSeries(this.mainChart, id);\r\n  }\r\n  _handlerAddMfi = (period, id) => {\r\n    const config = this.mainChart.options.zhFnGetMfiConfig(this.mainChart, period, id);\r\n    this.state.mfiConfigs.push({config, id})\r\n    this.setState({ mfiConfigs: this.state.mfiConfigs })\r\n  }\r\n  _handlerRemoveMfi = (id) => {\r\n    this.state.mfiConfigs = this.state.mfiConfigs.filter((objConfig) => {\r\n      return objConfig.id !== id;\r\n    })\r\n    this.setState({mfiConfigs: this.state.mfiConfigs})\r\n  }\r\n  _handleAddMomAth = () => {\r\n     const config = this._crMomAthConfig(this.mainChart, this._chartId);\r\n     this.state.mfiConfigs.push({config, id: 'MOM_ATH'})\r\n     this.setState({ mfiConfigs: this.state.mfiConfigs })\r\n  }\r\n\r\n  _handleClickConfig = () => {\r\n    const { caption, onShowConfigDialog } = this.props;\r\n    onShowConfigDialog({\r\n      caption,\r\n      chart: this.mainChart,\r\n      setItemCaption: this.setItemCaption,\r\n      setDataSource: this.setDataSource,\r\n      onToggleToolbar: this._handleToggleToolbar\r\n    })\r\n  }\r\n\r\n  _crValueMoving = (prev, dateTo) => {\r\n     return this.props.crValueMoving(this.mainChart, prev, dateTo);\r\n  }\r\n\r\n  _handleToggleToolbar = (value) => {\r\n    this.setState(prevState => {\r\n      return { isShowToolbar: !prevState.isShowToolbar};\r\n    })\r\n  }\r\n\r\n _createChartToolBar = (config) => {\r\n   const { isShowToolbar } = this.state;\r\n   return (\r\n         <ShowHide isShow={isShowToolbar}>\r\n           <ChartToolBar\r\n             style={styles.tabDiv}\r\n             config={config}\r\n             onAddSma={this._handlerAddSma}\r\n             onRemoveSeries={this._handleRemoveSeries}\r\n             onAddMfi={this._handlerAddMfi}\r\n             onRemoveMfi={this._handlerRemoveMfi}\r\n             onAddMomAth={this._handleAddMomAth}\r\n             onClickLegend={this._handlerClickLegend}\r\n             onClick2H={this._handlerClick2H}\r\n             onAddToWatch={this._handlerAddToWatch}\r\n             onClickInfo={this._handlerClickInfo}\r\n             onClickVolume={this._handlerClickVolume}\r\n             onClickATH={this._handlerClickATH}\r\n             onClickHighLow={this._handlerClickHighLow}\r\n             onClickConfig={this._handleClickConfig}\r\n             onCopy={this._handleCopy}\r\n             onPasteTo={this._handlePasteTo}\r\n            />\r\n         </ShowHide>\r\n      );\r\n   }\r\n\r\n  _renderLegend = (config={}) => {\r\n    const { isShowLegend } = this.state\r\n        , { zhConfig={} } = config\r\n        , { isWithLegend, legend } = zhConfig\r\n    const _compLegend = isWithLegend ? (\r\n      <ShowHide isShow={isShowLegend}>\r\n        <Legend\r\n           legend={legend}\r\n           onClickItem={this._handlerToggleSeria}\r\n        />\r\n      </ShowHide>\r\n    ) : undefined\r\n\r\n    return _compLegend;\r\n  }\r\n\r\n  _renderMetricCharts = () => {\r\n    const { chartsDescription } = this.state;\r\n\r\n    const _metricCharts = chartsDescription.map((descr, index) => {\r\n      const { type } = descr\r\n          , _isShow = this.state['isShow' + type]\r\n          , _ref = 'chart' + type\r\n          , _config = this.props.config['zh' + type + 'Config'];\r\n\r\n      return (\r\n        <ShowHide isShow={_isShow} key={index}>\r\n          <HighchartWrapper\r\n              ref={_ref}\r\n              isShow={true}\r\n              config={_config}\r\n              absComp={this._dataSourceEl}\r\n              onLoaded={this._handlerLoadedMetricChart}\r\n          />\r\n        </ShowHide>\r\n      );\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        {_metricCharts}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _renderIndicatorCharts = (arrConfigs) => {\r\n    const _indicatorCharts = arrConfigs.map(objConfig => {\r\n      const { config, id } = objConfig;\r\n      return (\r\n        <ShowHide isShow={true} key={id}>\r\n          <HighchartWrapper\r\n              isShow={true}\r\n              config={config}\r\n              onLoaded={this._handlerLoadedMetricChart}\r\n              onWillUnLoaded={this._handlerWillUnLoadedChart}\r\n          />\r\n        </ShowHide>\r\n      );\r\n    })\r\n    return (\r\n      <div>\r\n        {_indicatorCharts}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            chartType, caption, config={},\r\n            onCloseItem, isAdminMode\r\n          } = this.props\r\n        , { zhConfig={} } = config\r\n        , { itemTime } = zhConfig\r\n        , {\r\n            isOpen, isShowChart, isShowInfo,\r\n            itemCaption,\r\n            mfiConfigs\r\n        } = this.state;\r\n\r\n    return (\r\n      <div style={styles.rootDiv}>\r\n         <Header\r\n            isOpen={isOpen}\r\n            chartType={chartType}\r\n            onCheck={this._fnOnCheck}\r\n            onUnCheck={this._fnOnUnCheck}\r\n            itemCaption={itemCaption}\r\n            itemTitle={caption}\r\n            itemTime={itemTime}\r\n            onToggle={this._handlerToggleOpen}\r\n            valueMoving={config.valueMoving}\r\n            onClose={onCloseItem}\r\n            isAdminMode={isAdminMode}\r\n            crValueMoving={this._crValueMoving}\r\n         />\r\n        <ShowHide isShow={isOpen} style={styles.showHide}>\r\n           {isShowChart && this._createChartToolBar(config)}\r\n           <HighchartWrapper\r\n              ref={comp => this.chartComp = comp}\r\n              isShow={isShowChart}\r\n              rootStyle={styles.wrapper}\r\n              config={config}\r\n              absComp={this._dataSourceEl}\r\n           />\r\n           <PanelDataInfo\r\n              isShow={isShowInfo}\r\n              info={config.info}\r\n              zhInfo={config.zhConfig}\r\n              onClickChart={this._handlerClickChart}\r\n           />\r\n          {this._renderLegend(config)}\r\n          {this._renderIndicatorCharts(mfiConfigs)}\r\n          {this._renderMetricCharts()}\r\n        </ShowHide>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  reflowChart(width){\r\n    const { ChartFn } = this.props\r\n        , spacingLeft = ChartFn.arCalcDeltaYAxis(this.mainChart)\r\n        , zhDetailCharts = this.mainChart.options.zhDetailCharts;\r\n\r\n    this.mainChart.setSize(width, undefined, true)\r\n    if (Array.isArray(zhDetailCharts)) {\r\n      zhDetailCharts.forEach(chart => {\r\n        if (spacingLeft) {\r\n          chart.update({ chart: { spacingLeft } }, false)\r\n        }\r\n        chart.setSize(width, undefined, true)\r\n      })\r\n    }\r\n  }\r\n\r\n  setChartHeight = (height) => {\r\n    this.mainChart.setSize(undefined, height, true)\r\n  }\r\n}\r\n\r\nexport default AreaChartItem\r\n"]}