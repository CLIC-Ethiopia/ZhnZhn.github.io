{"version":3,"sources":["../../../src/components/items/Header.jsx"],"names":["TH_ID","CL","CL_MORE","S","ROOT","backgroundColor","paddingTop","paddingRight","height","width","borderTopRightRadius","borderBottomRightRadius","boxShadow","SVG_MORE","stroke","fill","ROOT_MORE","display","CHECK_BOX","marginRight","marginLeft","CAPTION_OPEN","textAlign","color","cursor","fontWeight","whiteSpace","textOverflow","overflow","CAPTION_CLOSE","CAPTION_WIDTH","TIME","paddingLeft","CLOSE","position","right","top","ItemTime","itemTime","Header","state","isMore","_toggleMore","setState","prevState","_renderMore","moreModel","TS","BORDER","render","props","theme","isOpen","onCheck","onUnCheck","itemCaption","itemTitle","onToggle","valueMoving","isAdminMode","crValueMoving","onClose","getStyle","_openStyle","_captionStyle","Component"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport withTheme from '../hoc/withTheme'\r\n\r\nimport SvgMore from '../zhn/SvgMore'\r\nimport ModalSlider from '../zhn-modal-slider/ModalSlider'\r\n\r\nimport SvgCheckBox from '../zhn/SvgCheckBox';\r\nimport SvgClose from '../zhn/SvgClose';\r\nimport ValueMovingBadge from './ValueMovingBadge';\r\n\r\nconst TH_ID = 'ELEMENT';\r\nconst CL = 'not-selected shadow-right';\r\n\r\nconst CL_MORE = \"popup-menu charts__menu-more\"\r\n\r\nconst S = {\r\n  ROOT: {\r\n    backgroundColor: '#1b2836',\r\n    paddingTop: '4px',\r\n    paddingRight: '42px',\r\n    height: 'auto',\r\n    width: '100%',\r\n    borderTopRightRadius: '2px',\r\n    borderBottomRightRadius: '2px',\r\n    boxShadow: '0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15)'\r\n  },\r\n  SVG_MORE: {\r\n    stroke: '#777777',\r\n    fill: '#777777'\r\n  },\r\n  ROOT_MORE: {\r\n    display: 'inline-block'\r\n  },\r\n  CHECK_BOX: {\r\n    //float: 'left',\r\n    marginRight: '10px',\r\n    marginLeft: '10px'\r\n  },\r\n  CAPTION_OPEN : {\r\n    textAlign: 'left',\r\n    display : 'inline-block',\r\n    color: 'rgba(164, 135, 212, 1)',\r\n    cursor: 'pointer',\r\n    width: '125px',\r\n    fontWeight : 'bold',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow: 'clip',\r\n    overflow: 'hidden'\r\n\r\n  },\r\n  CAPTION_CLOSE: {\r\n    color : 'gray'\r\n  },\r\n  CAPTION_WIDTH: {\r\n    textAlign: 'left',\r\n    width: '280px'\r\n  },\r\n  TIME: {\r\n    color : 'rgb(253, 179, 22)',\r\n    fontWeight : 'bold',\r\n    paddingLeft : '16px'\r\n  },\r\n  CLOSE: {\r\n    position: 'absolute',\r\n    right: 0,\r\n    top: '4px'\r\n  }\r\n};\r\n\r\nconst ItemTime = ({ itemTime }) => {\r\n  if (!itemTime) return null;\r\n  return (\r\n    <span style={S.TIME}>\r\n      {itemTime}\r\n    </span>\r\n  );\r\n};\r\n\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    isMore: false\r\n  }\r\n\r\n  _toggleMore = () => {\r\n    this.setState(prevState => ({\r\n      isMore: !prevState.isMore\r\n    }))\r\n  }\r\n\r\n  _renderMore = (moreModel, TS) => {\r\n    if (!moreModel) return null;\r\n    const { isMore } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <SvgMore\r\n          svgStyle={S.SVG_MORE}\r\n          onClick={this._toggleMore}\r\n        />\r\n        <ModalSlider\r\n          isShow={isMore}\r\n          rootStyle={S.ROOT_MORE}\r\n          className={CL_MORE}\r\n          style={TS.BORDER}\r\n          model={moreModel}\r\n          onClose={this._toggleMore}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n            theme,\r\n            isOpen,\r\n            //chartType,\r\n            onCheck, onUnCheck,\r\n            itemCaption, itemTitle, itemTime, onToggle,\r\n            valueMoving, isAdminMode, crValueMoving,\r\n            moreModel,\r\n            onClose\r\n          } = this.props\r\n        , TS = theme.getStyle(TH_ID)\r\n        , _openStyle = isOpen\r\n               ? S.CAPTION_OPEN\r\n               : { ...S.CAPTION_OPEN, ...S.CAPTION_CLOSE }\r\n        , _captionStyle = (valueMoving)\r\n                ? _openStyle\r\n                : { ..._openStyle, ...S.CAPTION_WIDTH };\r\n\r\n    return (\r\n      <div style={{...S.ROOT, ...TS.ROOT }}>\r\n        { this._renderMore(moreModel, TS) }\r\n        <SvgCheckBox\r\n           style={S.CHECK_BOX}\r\n           onCheck={onCheck}\r\n           onUnCheck={onUnCheck}\r\n        />\r\n        <button\r\n           className={CL}\r\n           title={itemTitle}\r\n           style={_captionStyle}\r\n           onClick={onToggle}\r\n        >\r\n           {itemCaption}\r\n        </button>\r\n        {\r\n          valueMoving\r\n            ? <ValueMovingBadge\r\n                valueMoving={valueMoving}\r\n                isAdminMode={isAdminMode}\r\n                crValueMoving={crValueMoving}\r\n              />\r\n            : <ItemTime\r\n                itemType={itemTime}\r\n              />\r\n        }\r\n        <SvgClose\r\n          style={S.CLOSE}\r\n          onClose={onClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nHeader.propTypes = {\r\n  isOpen : PropTypes.bool.isRequired,\r\n  chartType : PropTypes.string.isRequired,\r\n  moreModel: PropTypes.object,\r\n  onCheck : PropTypes.func.isRequired,\r\n  onUnCheck : PropTypes.func.isRequired,\r\n  itemCaption : PropTypes.string.isRequired,\r\n  itemTitle : PropTypes.string.isRequired,\r\n  itemTime : PropTypes.string,\r\n  onToggle : PropTypes.func.isRequired,\r\n  valueMoving : PropTypes.object,\r\n  isAdminMode: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.bool\r\n  ]),\r\n  crValueMoving: PropTypes.func,\r\n  onClose : PropTypes.func.isRequired\r\n}\r\n*/\r\n\r\nexport default withTheme(Header)\r\n"],"file":"Header.js"}