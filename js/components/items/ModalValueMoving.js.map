{"version":3,"sources":["../../../src/components/items/ModalValueMoving.jsx"],"names":["isDmy","DateUtils","S","ROOT","position","top","left","zIndex","width","backgroundColor","border","borderRadius","boxShadow","padding","paddingTop","paddingBottom","cursor","ROW","display","justifyContent","DATE","paddingLeft","whiteSpace","_isNotAdminMode","isAdminMode","isDenyToChange","_isAdminMode","RowValueDate","value","date","ModalValueMoving","state","msgDateTo","_refInput","React","createRef","_handleEnterDate","dateTo","isUpdated","props","updateDateTo","setState","componentDidUpdate","prevProps","isShow","current","focusInput","render","onClose","valueMoving","valueTo","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\nimport formatAllNumber from '../../utils/formatAllNumber'\r\n\r\nimport ModalPopup from '../zhn-moleculs/ModalPopup'\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport DivCompareTo from '../modals/DivCompareTo'\r\n\r\nconst { isDmy } = DateUtils;\r\n\r\nconst S = {\r\n  ROOT: {\r\n    position: 'absolute',\r\n    top: 25,\r\n    left: 0,\r\n    zIndex : 10,\r\n    width: 'auto',\r\n\r\n    backgroundColor: 'inherit',\r\n    border: '2px solid #1b2836',\r\n    borderRadius: 5,\r\n    boxShadow: 'rgba(0, 0, 0, 0.2) 0px 0px 0px 5px',\r\n    padding: 10,\r\n    paddingTop: 5,\r\n    paddingBottom: 12,\r\n    cursor: 'auto'\r\n  },\r\n  ROW: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  DATE: {\r\n    display: 'inline-block',\r\n    paddingLeft: 16,\r\n    whiteSpace: 'nowrap'\r\n  }\r\n};\r\n\r\nconst _isNotAdminMode = (isAdminMode, isDenyToChange) => {\r\n  const _isAdminMode = typeof isAdminMode == 'function'\r\n    ? isAdminMode()\r\n    : typeof isAdminMode == 'boolean'\r\n        ? isAdminMode\r\n        : false;\r\n  return !_isAdminMode || isDenyToChange;\r\n};\r\n\r\nconst RowValueDate = ({ value, date }) => (\r\n  <div style={S.ROW}>\r\n    <SpanValue value={formatAllNumber(value)} />\r\n    <SpanDate date={date} style={S.DATE} />\r\n  </div>\r\n);\r\n\r\nclass ModalValueMoving extends Component {\r\n  /*\r\n  static propTypes = {\r\n    valueMoving: PropTypes.shape({\r\n      value: PropTypes.string,\r\n      date: PropTypes.string,\r\n      valueTo: PropTypes.string,\r\n      dateTo: PropTypes.string,\r\n      isDenyToChange: PropTypes.bool\r\n    }),\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    msgDateTo: PropTypes.string,\r\n    updateDateTo: PropTypes.func\r\n  }\r\n  */\r\n  state = {\r\n    msgDateTo: ''\r\n  }\r\n  _refInput = React.createRef()\r\n\r\n  componentDidUpdate(prevProps){\r\n    if (this.props.isShow && this._refInput.current) {\r\n      this._refInput.current.focusInput()\r\n    }\r\n    if (this.props !== prevProps) {\r\n      this.setState({ msgDateTo: '' })\r\n    }\r\n  }\r\n\r\n  _handleEnterDate = (dateTo) => {\r\n    if (isDmy(dateTo)){\r\n      const isUpdated = this.props.updateDateTo(dateTo)\r\n      if (isUpdated){\r\n        this.setState({ msgDateTo: ''})\r\n      } else {\r\n        this.setState({ msgDateTo: `No data for ${dateTo}`})\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    const {\r\n      isShow, onClose,\r\n      valueMoving, isAdminMode\r\n    } = this.props\r\n    , {\r\n      value, date,\r\n      valueTo, dateTo,\r\n      isDenyToChange\r\n    } = valueMoving\r\n    , { msgDateTo } = this.state;\r\n    return (\r\n      <ModalPopup\r\n        isShow={isShow}\r\n        style={S.ROOT}\r\n        onClose={onClose}\r\n      >\r\n        <RowValueDate value={value} date={date} />\r\n        <RowValueDate value={valueTo} date={dateTo} />\r\n        { !_isNotAdminMode(isAdminMode, isDenyToChange)\r\n          && <DivCompareTo\r\n           ref={this._refInput}\r\n           initialValue={dateTo}\r\n           msgErr={msgDateTo}\r\n           onTest={isDmy}\r\n           onEnter={this._handleEnterDate}\r\n        />}\r\n      </ModalPopup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalValueMoving\r\n"],"file":"ModalValueMoving.js"}