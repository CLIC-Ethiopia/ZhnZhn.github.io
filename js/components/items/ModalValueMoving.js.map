{"version":3,"sources":["../../../src/components/items/ModalValueMoving.jsx"],"names":["isDmy","DateUtils","S","ROOT","position","top","left","zIndex","width","backgroundColor","border","borderRadius","boxShadow","padding","paddingTop","paddingBottom","cursor","ROW","display","justifyContent","DATE","paddingLeft","whiteSpace","ROW_INPUT","alignItems","marginTop","DATE_FIELD","marginLeft","MSG","color","fontWeight","_isNotAdminMode","isAdminMode","isDenyToChange","_isAdminMode","RowValueDate","value","date","ModalValueMoving","state","msgDateTo","_handleEnterDate","dateTo","dateToComp","isValid","isUpdated","props","updateDateTo","setState","_refDateToComp","comp","_renderAdmin","componentDidUpdate","prevProps","render","isShow","onClose","valueMoving","valueTo","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\nimport formatAllNumber from '../../utils/formatAllNumber'\r\n\r\nimport ModalPopup from '../zhn-moleculs/ModalPopup'\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport SpanLabel from '../zhn-span/SpanLabel'\r\nimport DateField from '../zhn/DateField'\r\n\r\nconst { isDmy } = DateUtils;\r\n\r\nconst S = {\r\n  ROOT: {\r\n    position: 'absolute',\r\n    top: 25,\r\n    left: 0,\r\n    zIndex : 10,\r\n    width: 'auto',\r\n\r\n    backgroundColor: 'inherit',\r\n    border: '2px solid #1b2836',\r\n    borderRadius: 5,\r\n    boxShadow: 'rgba(0, 0, 0, 0.2) 0px 0px 0px 5px',\r\n    padding: 10,\r\n    paddingTop: 5,\r\n    paddingBottom: 12,\r\n    cursor: 'auto'\r\n  },\r\n  ROW: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  DATE: {\r\n    display: 'inline-block',\r\n    paddingLeft: 16,\r\n    whiteSpace: 'nowrap'\r\n  },\r\n  ROW_INPUT : {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginTop: 8\r\n  },\r\n  DATE_FIELD: {\r\n    width: 120,\r\n    marginLeft: 8,\r\n    boxShadow: '0 2px 2px 0 rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.1)'\r\n  },\r\n  MSG: {\r\n    color: '#f44336',\r\n    fontWeight: 'bold'\r\n  }\r\n};\r\n\r\nconst _isNotAdminMode = (isAdminMode, isDenyToChange) => {\r\n  const _isAdminMode = typeof isAdminMode == 'function'\r\n    ? isAdminMode()\r\n    : typeof isAdminMode == 'boolean'\r\n        ? isAdminMode\r\n        : false;\r\n  return !_isAdminMode || isDenyToChange;\r\n};\r\n\r\nconst RowValueDate = ({ value, date }) => (\r\n  <div style={S.ROW}>\r\n    <SpanValue value={formatAllNumber(value)} />\r\n    <SpanDate date={date} style={S.DATE} />\r\n  </div>\r\n);\r\n\r\nclass ModalValueMoving extends Component {\r\n  /*\r\n  static propTypes = {\r\n    valueMoving: PropTypes.shape({\r\n      value: PropTypes.string,\r\n      date: PropTypes.string,\r\n      valueTo: PropTypes.string,\r\n      dateTo: PropTypes.string,\r\n      isDenyToChange: PropTypes.bool\r\n    }),\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    msgDateTo: PropTypes.string,\r\n    updateDateTo: PropTypes.func\r\n  }\r\n  */\r\n  state = {\r\n    msgDateTo: ''\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if (this.props !== prevProps) {\r\n      this.setState({ msgDateTo: '' })\r\n    }\r\n  }\r\n\r\n  _handleEnterDate = (dateTo) => {\r\n    if (this.dateToComp.isValid()){\r\n      const isUpdated = this.props.updateDateTo(dateTo)\r\n      if (isUpdated){\r\n        this.setState({ msgDateTo: ''})\r\n      } else {\r\n        this.setState({ msgDateTo: `No data for ${dateTo}`})\r\n      }\r\n    }\r\n  }\r\n\r\n  _refDateToComp = comp => this.dateToComp = comp\r\n\r\n  _renderAdmin = (date, msgDateTo) => {\r\n    return (\r\n     <div>\r\n      {/* eslint-disable jsx-a11y/label-has-associated-control */ }\r\n      <label style={S.ROW_INPUT} >\r\n        <SpanLabel label=\"CompareTo:\" />\r\n        <DateField\r\n          ref={this._refDateToComp}\r\n          rootStyle={S.DATE_FIELD}\r\n          initValue={date}\r\n          placeholder=\"DD-MM-YYYY\"\r\n          errorMsg=\"DD-MM-YYYY\"\r\n          onTest={isDmy}\r\n          onEnter={this._handleEnterDate}\r\n        />\r\n      </label>\r\n      {/* eslint-enable jsx-a11y/label-has-associated-control */ }\r\n      <div>\r\n        <span style={S.MSG}>\r\n          {msgDateTo}\r\n        </span>\r\n      </div>\r\n    </div>\r\n   );\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      isShow, onClose,\r\n      valueMoving, isAdminMode\r\n    } = this.props\r\n    , {\r\n      value, date,\r\n      valueTo, dateTo,\r\n      isDenyToChange\r\n    } = valueMoving\r\n    , { msgDateTo } = this.state;\r\n    return (\r\n      <ModalPopup\r\n        isShow={isShow}\r\n        style={S.ROOT}\r\n        onClose={onClose}\r\n      >\r\n        <RowValueDate value={value} date={date} />\r\n        <RowValueDate value={valueTo} date={dateTo} />\r\n        { _isNotAdminMode(isAdminMode, isDenyToChange)\r\n           ? null\r\n           : this._renderAdmin(date, msgDateTo)\r\n         }\r\n      </ModalPopup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalValueMoving\r\n"],"file":"ModalValueMoving.js"}