{"version":3,"sources":["../../../src/components/items/SeriesPane.jsx"],"names":["CL","ELL","S","ROOT_DIV","paddingTop","TITLE","paddingBottom","marginLeft","marginBottom","fontWeight","borderBottom","CHART_ID","width","verticalAlign","color","_crYAxisOption","toChart","options","caption","value","yAxis","forEach","index","push","SeriesPane","compSeries","_regSeriaRow","comp","compIndex","props","_unregSeriaRow","_renderSeries","chartId","series","filter","seria","visible","map","render","rootStyle","fromChart","_yAxisOption","userOptions","zhConfig","id","getValues","xAxis","getExtremes","dataMin","dataMax","userMin","userMax","getValue","config","isChecked","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport ScrollPane from '../zhn/ScrollPane'\r\nimport SeriaRow from './SeriaRow'\r\n\r\nconst CL = {\r\n  ELL: 'ellipsis'\r\n};\r\n\r\nconst S = {\r\n  ROOT_DIV: {\r\n    paddingTop: 8\r\n  },\r\n  TITLE: {\r\n    paddingBottom: 4,\r\n    marginLeft: 16,\r\n    marginBottom: 8,\r\n    fontWeight: 'bold',\r\n    borderBottom: '2px solid black'\r\n  },\r\n  CHART_ID: {\r\n    width: 200,\r\n    verticalAlign: 'bottom',\r\n    color: 'rgb(164, 135, 212)',\r\n  }\r\n};\r\n\r\n/*\r\nconst DF_FROM_CHART = {\r\n  userOptions: {\r\n    zhConfig: {\r\n      id: 'id'\r\n    }\r\n  },\r\n  series: []\r\n};\r\n*/\r\n\r\nconst _crYAxisOption = (toChart) => {\r\n  const options = [{\r\n    caption: 'withYAxis',\r\n    value: -1\r\n  }];\r\n  toChart.yAxis.forEach((yAxis, index) => {\r\n    options.push ({\r\n      caption: `toYAxis${index+1}`,\r\n      value: index\r\n    })\r\n  })\r\n  return options;\r\n};\r\n\r\nclass SeriesPane extends Component {\r\n\r\n   compSeries = []\r\n\r\n  _regSeriaRow = (comp) => {\r\n    const compIndex = comp.props.compIndex;\r\n    this.compSeries[compIndex] = comp\r\n  }\r\n  _unregSeriaRow = (comp) => {\r\n    const compIndex = comp.props.compIndex;\r\n    this.compSeries[compIndex] = null\r\n  }\r\n\r\n  _renderSeries = (chartId, series, options) => {\r\n    return series\r\n      .filter(seria => seria.visible)\r\n      .map((seria, index) => {\r\n         return (\r\n           <SeriaRow\r\n              key={chartId + index}\r\n              seria={seria}\r\n              compIndex={index}\r\n              yAxisOptions={options}\r\n              onReg={this._regSeriaRow}\r\n              onUnReg={this._unregSeriaRow}\r\n           />\r\n        );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { rootStyle, toChart, fromChart={} } = this.props\r\n        , _yAxisOption = _crYAxisOption(toChart)\r\n        , { userOptions={}, series=[] } = fromChart\r\n        , { zhConfig={} } = userOptions\r\n        , { id:chartId='id' } = zhConfig;\r\n\r\n    return (\r\n      <ScrollPane style={rootStyle}>\r\n        <div style={S.ROOT_DIV}>\r\n          <div style={S.TITLE}>\r\n            <span>From Chart:&nbsp;</span>\r\n            <span\r\n               className={CL.ELL}\r\n               style={S.CHART_ID}\r\n            >\r\n              {chartId}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            {this._renderSeries(chartId, series, _yAxisOption)}\r\n          </div>\r\n        </div>\r\n      </ScrollPane>\r\n    );\r\n  }\r\n\r\n  getValues(){\r\n    const {\r\n      fromChart={}\r\n    } = this.props\r\n    , {\r\n      dataMin, dataMax,\r\n      userMin, userMax\r\n    } = (fromChart.xAxis\r\n      && fromChart.xAxis[0].getExtremes()) || {};\r\n    return this.compSeries\r\n      .filter(comp => comp !== null )\r\n      .map(comp => comp.getValue())\r\n      .filter(config => config.isChecked)\r\n      .map(config => {\r\n        config.userMin = userMin || dataMin\r\n        config.userMax = userMax || dataMax\r\n        return config;\r\n      });\r\n  }\r\n}\r\n\r\nexport default SeriesPane\r\n"],"file":"SeriesPane.js"}