{"version":3,"sources":["../../../src/components/items/SeriesPane.jsx"],"names":["CL","ELL","S","ROOT_DIV","paddingTop","TITLE","paddingBottom","marginLeft","marginBottom","fontWeight","borderBottom","CHART_ID","width","verticalAlign","color","_crYAxisOption","toChart","options","caption","value","yAxis","forEach","index","push","SeriesPane","_regSeriaRow","comp","compIndex","props","compSeries","_unregSeriaRow","_renderSeries","chartId","series","filter","seria","visible","map","rootStyle","fromChart","_yAxisOption","userOptions","zhConfig","id","getValue","config","isChecked"],"mappings":"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","file":"SeriesPane.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport ScrollPane from '../zhn/ScrollPane'\r\nimport SeriaRow from './SeriaRow'\r\n\r\nconst CL = {\r\n  ELL: 'ellipsis'\r\n};\r\n\r\nconst S = {\r\n  ROOT_DIV: {\r\n    paddingTop: '8px'\r\n  },\r\n  TITLE: {\r\n    paddingBottom: '4px',\r\n    marginLeft: '16px',\r\n    marginBottom: '8px',\r\n    fontWeight: 'bold',\r\n    borderBottom: '2px solid black'\r\n  },\r\n  CHART_ID: {\r\n    width: '200px',\r\n    verticalAlign: 'bottom',\r\n    color: 'rgb(164, 135, 212)',\r\n  }\r\n};\r\n\r\nconst _crYAxisOption = (toChart) => {\r\n  const options = [{\r\n    caption: 'withYAxis',\r\n    value: -1\r\n  }]\r\n  toChart.yAxis.forEach((yAxis, index) => {\r\n    options.push ({\r\n      caption: `toYAxis${index+1}`,\r\n      value: index\r\n    })\r\n  })\r\n  return options;\r\n};\r\n\r\nclass SeriesPane extends Component {\r\n\r\n   constructor(){\r\n     super()\r\n     this.compSeries = []\r\n   }\r\n\r\n  _regSeriaRow = (comp) => {\r\n    const compIndex = comp.props.compIndex\r\n    this.compSeries[compIndex] = comp\r\n  }\r\n  _unregSeriaRow = (comp) => {\r\n    const compIndex = comp.props.compIndex\r\n    this.compSeries[compIndex] = null\r\n  }\r\n\r\n  _renderSeries = (chartId, series, options) => {\r\n    return series\r\n      .filter(seria => seria.visible)\r\n      .map((seria, index) => {\r\n         return (\r\n           <SeriaRow\r\n              key={chartId + index}\r\n              seria={seria}\r\n              compIndex={index}\r\n              yAxisOptions={options}\r\n              onReg={this._regSeriaRow}\r\n              onUnReg={this._unregSeriaRow}\r\n           />\r\n        );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { rootStyle, toChart, fromChart={} } = this.props\r\n        , _yAxisOption = _crYAxisOption(toChart)\r\n        , { userOptions={}, series=[] } = fromChart\r\n        , { zhConfig={} } = userOptions\r\n        , { id:chartId='id' } = zhConfig;\r\n    return (\r\n      <ScrollPane style={rootStyle}>\r\n        <div style={S.ROOT_DIV}>\r\n          <div style={S.TITLE}>\r\n            <span>From Chart:&nbsp;</span>\r\n            <span\r\n               className={CL.ELL}\r\n               style={S.CHART_ID}\r\n            >\r\n              {chartId}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            {this._renderSeries(chartId, series, _yAxisOption)}\r\n          </div>\r\n        </div>\r\n      </ScrollPane>\r\n    );\r\n  }\r\n\r\n  getValues(){\r\n    return this.compSeries\r\n      .filter(comp => comp !== null )\r\n      .map(comp => comp.getValue())\r\n      .filter(config => config.isChecked);\r\n  }\r\n}\r\n\r\nexport default SeriesPane\r\n"]}