{"version":3,"sources":["../../../src/components/items/ValueMovingBadge.jsx"],"names":["S","ROOT","position","display","marginLeft","DELTA","fontWeight","DATE","UP","color","DOWN","EQUAL","BT","cursor","SHOW_HIDE","top","left","zIndex","_getDirection","direction","D","_svgDirection","_dStyle","ValueMovingBadge","props","_hClickBt","setState","prev","isShowModal","_hCloseModal","event","_updateDateTo","dateTo","valueMoving","crValueMoving","state","componentDidMount","regCompVm","render","isAdminMode","msgDateTo","value","delta","percent","date","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport { Direction as D } from '../../constants/Type'\r\n\r\nimport SvgDown from '../zhn/SvgDown'\r\nimport SvgUp from '../zhn/SvgUp'\r\nimport SvgEqual from '../zhn/SvgEqual'\r\n\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport ModalValueMoving from './ModalValueMoving'\r\n\r\nconst S = {\r\n  ROOT: {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    marginLeft: 10\r\n  },\r\n  DELTA: {\r\n    marginLeft: 5,\r\n    fontWeight: 'bold'\r\n  },\r\n  DATE: {\r\n    marginLeft: 10\r\n  },\r\n  UP: {\r\n    color: '#4caf50'\r\n  },\r\n  DOWN: {\r\n    color: '#f44336'\r\n  },\r\n  EQUAL: {\r\n    color: '#2f7ed8'\r\n  },\r\n  BT: {\r\n    cursor: 'pointer'\r\n  },\r\n  SHOW_HIDE: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    zIndex: 20\r\n  }\r\n};\r\n\r\nconst _getDirection = (direction) => {\r\n  switch(direction){\r\n    case D.DOWN:\r\n      return {\r\n        _svgDirection: <SvgDown />,\r\n        _dStyle: S.DOWN\r\n      };\r\n    case D.UP:\r\n      return {\r\n        _svgDirection: <SvgUp />,\r\n        _dStyle: S.UP\r\n      };\r\n    case D.EQUAL:\r\n      return {\r\n        _svgDirection: <SvgEqual />,\r\n        _dStyle: S.EQUAL\r\n      };\r\n    default:\r\n      return {\r\n        _svgDirection: null\r\n      };\r\n  }\r\n};\r\n\r\nclass ValueMovingBadge extends Component {\r\n  /*\r\n  static propTypes = {\r\n    valueMoving: PropTypes.shape({\r\n      value: PropTypes.number,\r\n      delta: PropTypes.number,\r\n      percent: PropTypes.number,\r\n      direction: PropTypes.oneOf(\r\n        'up', 'down', 'equal', 'empty'\r\n      ),\r\n      date: PropTypes.string\r\n    }),\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    crValueMoving: PropTypes.func,\r\n    regCompVm: PropTypes.func\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    valueMoving: {\r\n      value: 0,\r\n      delta: 0,\r\n      percent: 0,\r\n      direction: D.EQUAL,\r\n      date: ''\r\n    },\r\n    regCompVm: () => {}\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      isShowModal : false,\r\n      valueMoving : props.valueMoving\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.regCompVm(this)\r\n  }\r\n\r\n  _hClickBt = () => {\r\n    this.setState(prev => ({\r\n        isShowModal: !prev.isShowModal\r\n    }))\r\n  }\r\n  _hCloseModal = (event) => {\r\n    this.setState({ isShowModal: false })\r\n  }\r\n\r\n\r\n  _updateDateTo = (dateTo) => {\r\n    const valueMoving = this.props.crValueMoving(this.state.valueMoving, dateTo)    \r\n    if (valueMoving) {\r\n      this.setState({ valueMoving })\r\n      return valueMoving;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    const { isAdminMode } = this.props\r\n    , {\r\n        isShowModal,\r\n        valueMoving,\r\n        msgDateTo\r\n      } = this.state\r\n    , {\r\n        value, delta, percent,\r\n        direction,\r\n        date\r\n      } = valueMoving,\r\n      {\r\n        _svgDirection,\r\n        _dStyle\r\n      } = _getDirection(direction);\r\n\r\n    return (\r\n      <span style={S.ROOT}>\r\n         <SpanValue value={value} />\r\n         {_svgDirection}\r\n         <span style={{...S.DELTA, ..._dStyle}}>\r\n           {percent}\r\n         </span>\r\n         <span style={{...S.DELTA, ..._dStyle}}>\r\n           {delta}\r\n         </span>\r\n         <button style = {S.BT} onClick={this._hClickBt} >\r\n           <SpanDate style={S.DATE} date={date} />\r\n         </button>\r\n         {\r\n           _svgDirection !== null && <ModalValueMoving\r\n                isShow={isShowModal}\r\n                onClose={this._hCloseModal}\r\n                valueMoving={valueMoving}\r\n                isAdminMode={isAdminMode}\r\n                msgDateTo={msgDateTo}\r\n                updateDateTo={this._updateDateTo}\r\n             />\r\n         }\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ValueMovingBadge\r\n"],"file":"ValueMovingBadge.js"}