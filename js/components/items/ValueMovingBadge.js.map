{"version":3,"sources":["../../../src/components/items/ValueMovingBadge.jsx"],"names":["CL_BT","S_ROOT","position","display","marginLeft","S_SPAN","fontWeight","S_W5","width","S_DATE","padding","S_UP","color","S_DOWN","S_EQUAL","_hmDirection","DF","DT_DOWN","DT_UP","DT_EQUAL","_getDirection","direction","DF_VALUE_MOVING","value","delta","percent","date","ValueMovingBadge","ref","isAdminMode","initialVm","crValueMoving","vm","setVm","isShowModal","setIsShowModal","_toggleModal","is","_closeModal","_updateDateTo","dateTo","_vm","_svgDirection","_dStyle","_spanStyle"],"mappings":"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","sourcesContent":["import {\r\n  forwardRef,\r\n  useState,\r\n  useCallback,\r\n  useImperativeHandle\r\n} from 'react';\r\n//import PropTypes from \"prop-types\";\r\nimport {\r\n  DT_UP,\r\n  DT_DOWN,\r\n  DT_EQUAL\r\n} from '../../constants/DirectionType';\r\n\r\nimport SvgDown from '../zhn/SvgDown'\r\nimport SvgUp from '../zhn/SvgUp'\r\nimport SvgEqual from '../zhn/SvgEqual'\r\n\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport ValueMovingModal from './ValueMovingModal'\r\n\r\nconst CL_BT = 'bt';\r\n\r\nconst S_ROOT = {\r\n  position: 'relative',\r\n  display: 'inline-block',\r\n  marginLeft: 10\r\n},\r\nS_SPAN = {\r\n  marginLeft: 5,\r\n  fontWeight: 'bold'\r\n},\r\nS_W5 = {\r\n  display: 'inline-block',\r\n  width: 5\r\n},\r\nS_DATE = {\r\n  display: 'inline-block',\r\n  padding: '4px 5px 2px 5px'\r\n},\r\nS_UP = {\r\n  color: '#4caf50'\r\n},\r\nS_DOWN = {\r\n  color: '#f44336'\r\n},\r\nS_EQUAL = {\r\n  color: '#2f7ed8'\r\n};\r\n\r\nconst _hmDirection = {\r\n  DF: [null],\r\n  [DT_DOWN]: [<SvgDown />, S_DOWN],\r\n  [DT_UP]: [<SvgUp />, S_UP],\r\n  [DT_EQUAL]: [<SvgEqual />, S_EQUAL]\r\n};\r\n\r\nconst _getDirection = direction => _hmDirection[direction]\r\n  || _hmDirection.DF;\r\n\r\n\r\nconst DF_VALUE_MOVING = {\r\n  value: 0,\r\n  delta: 0,\r\n  percent: 0,\r\n  direction: DT_EQUAL,\r\n  date: ''\r\n};\r\n\r\nconst ValueMovingBadge = forwardRef(({\r\n  isAdminMode,\r\n  initialVm=DF_VALUE_MOVING,\r\n  crValueMoving\r\n}, ref) => {\r\n  const [vm, setVm] = useState(initialVm)\r\n  , [isShowModal, setIsShowModal] = useState(false)\r\n  , _toggleModal = useCallback(() => setIsShowModal(is=>!is), [])\r\n  , _closeModal = useCallback(() => setIsShowModal(false), [])\r\n  /*eslint-disable react-hooks/exhaustive-deps */\r\n  , _updateDateTo = useCallback(dateTo => {\r\n     const _vm = crValueMoving(vm, dateTo);\r\n     if (_vm) {\r\n       setVm(_vm)\r\n       return true;\r\n     } else {\r\n       return false;\r\n     }\r\n  }, [vm])\r\n  //crValueMoving\r\n  /*eslint-enable react-hooks/exhaustive-deps */\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    _updateDateTo\r\n  }), [_updateDateTo])\r\n\r\n  const {\r\n     value, delta, percent,\r\n     direction,\r\n     date\r\n   } = vm\r\n   , [_svgDirection, _dStyle] = _getDirection(direction)\r\n   , _spanStyle = {...S_SPAN, ..._dStyle};\r\n\r\n  return (\r\n    <span style={S_ROOT}>\r\n       <SpanValue value={value} />\r\n       {_svgDirection}\r\n       <span style={_spanStyle}>\r\n         {percent}\r\n       </span>\r\n       <span style={_spanStyle}>\r\n         {delta}\r\n       </span>\r\n       <span style={S_W5} />\r\n       <button className={CL_BT} onClick={_toggleModal} >\r\n         <SpanDate style={S_DATE} date={date} />\r\n       </button>\r\n       {\r\n         _svgDirection && <ValueMovingModal\r\n            isShow={isShowModal}\r\n            isAdminMode={isAdminMode}\r\n            valueMoving={vm}\r\n            updateDateTo={_updateDateTo}\r\n            onClose={_closeModal}\r\n          />\r\n       }\r\n    </span>\r\n  );\r\n});\r\n\r\n/*\r\nValueMovingBadge.propTypes = {\r\n  valueMoving: PropTypes.shape({\r\n    value: PropTypes.number,\r\n    delta: PropTypes.number,\r\n    percent: PropTypes.number,\r\n    direction: PropTypes.oneOf(\r\n      'up', 'down', 'equal', 'empty'\r\n    ),\r\n    date: PropTypes.string\r\n  }),\r\n  isAdminMode: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.bool\r\n  ]),\r\n  crValueMoving: PropTypes.func,\r\n}\r\n*/\r\n\r\nexport default ValueMovingBadge\r\n"],"file":"ValueMovingBadge.js"}