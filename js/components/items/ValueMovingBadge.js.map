{"version":3,"sources":["../../../src/components/items/ValueMovingBadge.jsx"],"names":["S","ROOT","display","position","marginLeft","cursor","ROW","DELTA","fontWeight","DATE","UP","color","DOWN","EQUAL","SHOW_HIDE","top","left","zIndex","ValueMovingBadge","props","_handleClickRoot","setState","isShowPanel","prev","_updateDateTo","dateTo","valueMoving","crValueMoving","state","isAdminMode","msgDateTo","value","delta","percent","direction","date","_svgDirection","_dStyle","defaultProps"],"mappings":"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","file":"ValueMovingBadge.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport { Direction } from '../../constants/Type'\r\n\r\nimport SvgDown from '../zhn/SvgDown'\r\nimport SvgUp from '../zhn/SvgUp'\r\nimport SvgEqual from '../zhn/SvgEqual'\r\nimport ShowHide from '../zhn/ShowHide'\r\n\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport PanelValueMoving from './PanelValueMoving'\r\n\r\nconst S = {\r\n  ROOT: {\r\n    display : 'inline-block',\r\n    position: 'relative',\r\n    marginLeft : '10px',\r\n    cursor: 'pointer'\r\n  },\r\n  ROW: {\r\n    display : 'inline-block',\r\n  },\r\n  DELTA: {\r\n    marginLeft : '5px',\r\n    fontWeight : 'bold'\r\n  },\r\n  DATE: {\r\n    marginLeft: '10px'\r\n  },\r\n  UP: {\r\n    color: '#4CAF50'\r\n  },\r\n  DOWN: {\r\n    //color: '#ED5813'\r\n    color : '#F44336'\r\n  },\r\n  EQUAL: {\r\n    color : '#2F7ED8'\r\n  },\r\n  SHOW_HIDE: {\r\n    position: 'absolute',\r\n    top: '0px',\r\n    left: '0px',\r\n    zIndex: 20\r\n  }\r\n}\r\n\r\nclass ValueMovingBadge extends Component {\r\n  /*\r\n  static propTypes = {\r\n    valueMoving: PropTypes.shape({\r\n      value: PropTypes.number,\r\n      delta: PropTypes.number,\r\n      percent: PropTypes.number,\r\n      direction: PropTypes.oneOf(\r\n        'up', 'down', 'equal', 'empty'\r\n      ),\r\n      date: PropTypes.string\r\n    }),\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    crValueMoving: PropTypes.func\r\n  }\r\n  */\r\n  \r\n  static defaultProps = {\r\n    valueMoving : {\r\n      value : 0,\r\n      delta : 0,\r\n      percent : 0,\r\n      direction : Direction.EQUAL,\r\n      date : ''\r\n    }\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      isShowPanel : false,\r\n      valueMoving : props.valueMoving\r\n    }\r\n  }\r\n\r\n  _handleClickRoot = () => {\r\n    this.setState(prev => {\r\n      return {\r\n        isShowPanel: !prev.isShowPanel\r\n      };\r\n    })\r\n  }\r\n\r\n  _updateDateTo = (dateTo) => {\r\n    const valueMoving = this.props.crValueMoving(this.state.valueMoving, dateTo)\r\n    if (valueMoving) {\r\n      this.setState({ valueMoving })\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { isAdminMode } = this.props\r\n        , {\r\n            isShowPanel,\r\n            valueMoving,\r\n            msgDateTo\r\n          } = this.state\r\n        , {\r\n            value, delta, percent,\r\n            direction,\r\n            date\r\n          } = valueMoving;\r\n\r\n    let _svgDirection, _dStyle;\r\n    switch(direction){\r\n      case Direction.DOWN:\r\n        _svgDirection = <SvgDown />;\r\n        _dStyle = S.DOWN;\r\n        break;\r\n      case Direction.UP:\r\n        _svgDirection = <SvgUp />;\r\n        _dStyle = S.UP;\r\n        break;\r\n      case Direction.EQUAL:\r\n        _svgDirection = <SvgEqual />;\r\n        _dStyle = S.EQUAL;\r\n        break;\r\n      default:\r\n        _svgDirection = null;\r\n    }\r\n\r\n    return (\r\n      <span\r\n         style={S.ROOT}\r\n      >\r\n         <span\r\n            style={S.ROW}\r\n            onClick={this._handleClickRoot}\r\n         >\r\n           <SpanValue value={value} />\r\n           {_svgDirection}\r\n           <span style={{...S.DELTA, ..._dStyle}}>\r\n             {percent}\r\n           </span>\r\n           <span style={{...S.DELTA, ..._dStyle}}>\r\n             {delta}\r\n           </span>\r\n           <SpanDate style={S.DATE} date={date} />\r\n         </span>\r\n         {\r\n           _svgDirection !== null &&\r\n           <ShowHide\r\n              style={S.SHOW_HIDE}\r\n              isShow={isShowPanel}\r\n           >\r\n             <PanelValueMoving\r\n                valueMoving={valueMoving}\r\n                isAdminMode={isAdminMode}\r\n                msgDateTo={msgDateTo}\r\n                updateDateTo={this._updateDateTo}\r\n             />\r\n           </ShowHide>\r\n         }\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ValueMovingBadge\r\n"]}