{"version":3,"sources":["../../../src/components/items/SeriaRow.jsx"],"names":["DF","COLOR","CL","ELL","S","ROOT","paddingLeft","paddingBottom","TITLE","verticalAlign","color","textAlign","width","paddingRight","fontSize","fontWeight","userSelect","position","display","height","borderRadius","boxShadow","ROW_CHECK_BOX","SELECT","marginLeft","SELECT_OPTIONS","minHeight","SeriaRow","_getColor","colorEntered","state","props","seria","options","isChecked","_hCheck","HandleF","set","bind","_hUnCheck","_hSelectYAxis","reg","_hRegCellColor","_hEnterColor","enterTo","_hClosePalette","closeTo","_hClickPallete","toggleModalTo","isShowPallete","componentDidMount","onReg","componentWillUnmount","onUnReg","render","yAxisOptions","name","zhValueText","_name","_bgColor","backgroundColor","Model","palette","getValue","yIndex","toYAxis","value","data","userOptions","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport Model from '../../constants/Model'\r\nimport HandleF from '../f-handle/HandleF'\r\n\r\nimport CellColor from '../zhn-moleculs/CellColor'\r\nimport ModalPalette from '../zhn-moleculs/ModalPalette'\r\nimport InputSelect from '../zhn-select/InputSelect'\r\nimport D from '../dialogs/DialogCell'\r\n\r\nconst DF = {\r\n  COLOR: '#7cb5ec'\r\n};\r\nconst CL = {\r\n  ELL: 'ellipsis'\r\n};\r\nconst S = {\r\n  ROOT: {\r\n    paddingLeft: 16,\r\n    paddingBottom: 16\r\n  },\r\n  TITLE: {\r\n    verticalAlign: 'middle',\r\n    color: 'rgb(27, 117, 187)',\r\n    textAlign: 'right',\r\n    width: 100,\r\n    paddingLeft: 4,\r\n    paddingRight: 16,\r\n    fontSize: '16px',\r\n    fontWeight: 'bold',\r\n    userSelect: 'none'\r\n  },\r\n  COLOR: {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    height: 32,\r\n    width: 32,\r\n    borderRadius: 2,\r\n    verticalAlign: 'middle',\r\n    boxShadow: '0 2px 2px 0 rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.1)'\r\n  },\r\n  ROW_CHECK_BOX: {\r\n    display: 'inline-block',\r\n    verticalAlign: 'middle',\r\n    paddingLeft: 0\r\n  },\r\n  SELECT: {\r\n     verticalAlign: 'middle',\r\n     marginLeft: 24\r\n  },\r\n  SELECT_OPTIONS: {\r\n    minHeight: 100\r\n  }\r\n};\r\n\r\nclass SeriaRow extends Component {\r\n  constructor(){\r\n    super()\r\n\r\n    this.isChecked = false\r\n    this._hCheck = HandleF\r\n      .set('isChecked', true)\r\n      .bind(this)\r\n    this._hUnCheck = HandleF\r\n      .set('isChecked', false)\r\n      .bind(this)\r\n\r\n    this._hSelectYAxis = HandleF\r\n      .reg('toYAxis')\r\n      .bind(this)\r\n\r\n    this._hRegCellColor = HandleF\r\n      .reg('cellColorNode')\r\n      .bind(this)\r\n    this._hEnterColor = HandleF\r\n      .enterTo('colorEntered')\r\n      .bind(this)\r\n    this._hClosePalette = HandleF\r\n      .closeTo('isShowPallete')\r\n      .bind(this)\r\n    this._hClickPallete = HandleF\r\n      .toggleModalTo('isShowPallete', 'cellColorNode')\r\n      .bind(this)\r\n\r\n    this.state = {\r\n      isShowPallete: false,\r\n      colorEntered: void 0\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { onReg } = this.props;\r\n    if (typeof onReg === 'function') {\r\n      onReg(this)\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    const { onUnReg } = this.props;\r\n    if (typeof onUnReg === 'function') {\r\n      onUnReg(this)\r\n    }\r\n  }\r\n\r\n  _getColor = () => {\r\n    const { colorEntered } = this.state\r\n        , { color } = this.props.seria.options;\r\n    return colorEntered || color || DF.COLOR;\r\n  }\r\n\r\n  render(){\r\n    const { isShowPallete } = this.state\r\n        , { seria={}, yAxisOptions } = this.props\r\n        , { name, options={} } = seria\r\n        , { zhValueText } = options\r\n        , _name = zhValueText || name\r\n        , _bgColor = { backgroundColor: this._getColor() };\r\n\r\n    return (\r\n      <div style={S.ROOT}>\r\n        <D.RowCheckBox\r\n           rootStyle={S.ROW_CHECK_BOX}\r\n           caption=\"\"\r\n           onCheck={this._hCheck}\r\n           onUnCheck={this._hUnCheck}\r\n        />\r\n        <span\r\n           className={CL.ELL}\r\n           style={S.TITLE}\r\n        >\r\n          {_name}\r\n        </span>\r\n        <CellColor\r\n           style={{ ...S.COLOR, ..._bgColor}}\r\n           onReg={this._hRegCellColor}\r\n           onClick={this._hClickPallete}\r\n        >\r\n          <ModalPalette\r\n             isShow={isShowPallete}\r\n             model={Model.palette}\r\n             onClickCell={this._hEnterColor}\r\n             onClose={this._hClosePalette}\r\n          />\r\n        </CellColor>\r\n        <InputSelect\r\n          placeholder=\"withYAxis\"\r\n          width=\"150\"\r\n          rootStyle={S.SELECT}\r\n          rootOptionsStyle={S.SELECT_OPTIONS}\r\n          options={yAxisOptions}\r\n          onSelect={this._hSelectYAxis}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getValue() {\r\n    return {\r\n      isChecked: this.isChecked,\r\n      color: this._getColor(),\r\n      yIndex: this.toYAxis ? this.toYAxis.value : void 0,\r\n      data: this.props.seria.userOptions.data\r\n    };\r\n  }\r\n}\r\n\r\nexport default SeriaRow\r\n"],"file":"SeriaRow.js"}