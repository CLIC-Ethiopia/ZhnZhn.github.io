{"version":3,"sources":["../../../src/components/items/SeriaRow.jsx"],"names":["DF","COLOR","CL","ELL","S","ROOT","paddingLeft","paddingBottom","TITLE","verticalAlign","color","textAlign","width","paddingRight","fontSize","fontWeight","userSelect","position","display","height","borderRadius","boxShadow","ROW_CHECK_BOX","SELECT","marginLeft","SELECT_OPTIONS","minHeight","SeriaRow","_getColor","colorEntered","state","props","seria","options","isChecked","_hCheck","set","bind","_hUnCheck","_hSelectYAxis","reg","_hRegCellColor","_hEnterColor","enterTo","_hClosePalette","closeTo","_hClickPallete","toggleModalTo","isShowPallete","undefined","onReg","onUnReg","yAxisOptions","name","zhValueText","_name","_bgColor","backgroundColor","palette","toYAxis","data","userOptions"],"mappings":"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","file":"SeriaRow.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport Model from '../../constants/Model'\r\nimport HandleF from '../f-handle/HandleF'\r\n\r\nimport CellColor from '../zhn-moleculs/CellColor'\r\nimport ModalPalette from '../zhn-moleculs/ModalPalette'\r\nimport InputSelect from '../zhn-select/InputSelect'\r\nimport RowCheckBox from '../dialogs/RowCheckBox'\r\n\r\nconst DF = {\r\n  COLOR: '#7cb5ec'\r\n};\r\nconst CL = {\r\n  ELL: 'ellipsis'\r\n};\r\nconst S = {\r\n  ROOT: {\r\n    paddingLeft: '16px',\r\n    paddingBottom: '16px'\r\n  },\r\n  TITLE: {\r\n    verticalAlign: 'middle',\r\n    color: 'rgb(27, 117, 187)',\r\n    textAlign: 'right',\r\n    width: '100px',\r\n    paddingLeft: '4px',\r\n    paddingRight: '16px',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold',\r\n    userSelect: 'none'\r\n  },\r\n  COLOR: {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    height: '32px',\r\n    width: '32px',\r\n    borderRadius: '2px',\r\n    verticalAlign: 'middle',\r\n    boxShadow: '0 2px 2px 0 rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.1)'\r\n  },\r\n  ROW_CHECK_BOX: {\r\n    display: 'inline-block',\r\n    verticalAlign: 'middle'\r\n  },\r\n  SELECT: {\r\n     verticalAlign: 'middle',\r\n     marginLeft: '24px'\r\n  },\r\n  SELECT_OPTIONS: {\r\n    minHeight: '100px'\r\n  }\r\n};\r\n\r\nclass SeriaRow extends Component {\r\n  constructor(){\r\n    super()\r\n\r\n    this.isChecked = false\r\n    this._hCheck = HandleF\r\n      .set('isChecked', true).bind(this)\r\n    this._hUnCheck = HandleF\r\n      .set('isChecked', false).bind(this)\r\n\r\n    this._hSelectYAxis = HandleF\r\n      .reg('toYAxis').bind(this)\r\n\r\n    this._hRegCellColor = HandleF.\r\n      reg('cellColorNode').bind(this)\r\n    this._hEnterColor = HandleF.\r\n      enterTo('colorEntered').bind(this)\r\n    this._hClosePalette = HandleF.\r\n      closeTo('isShowPallete').bind(this)\r\n    this._hClickPallete = HandleF.\r\n      toggleModalTo('isShowPallete', 'cellColorNode').bind(this)\r\n\r\n    this.state = {\r\n      isShowPallete: false,\r\n      colorEntered: undefined\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { onReg } = this.props;\r\n    if (typeof onReg === 'function') {\r\n      onReg(this)\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    const { onUnReg } = this.props;\r\n    if (typeof onUnReg === 'function') {\r\n      onUnReg(this)\r\n    }\r\n  }\r\n\r\n  _getColor = () => {\r\n    const { colorEntered } = this.state\r\n        , { color } = this.props.seria.options;\r\n    return colorEntered || color || DF.COLOR;\r\n  }\r\n\r\n  render(){\r\n    const { isShowPallete } = this.state\r\n        , { seria={}, yAxisOptions } = this.props\r\n        , { name, options={} } = seria\r\n        , { zhValueText } = options\r\n        , _name = zhValueText || name\r\n        , _bgColor = { backgroundColor: this._getColor() };\r\n\r\n    return (\r\n      <div style={S.ROOT}>\r\n        <RowCheckBox\r\n           rootStyle={S.ROW_CHECK_BOX}\r\n           caption=\"\"\r\n           onCheck={this._hCheck}\r\n           onUnCheck={this._hUnCheck}\r\n        />\r\n        <span\r\n           className={CL.ELL}\r\n           style={S.TITLE}\r\n        >\r\n          {_name}\r\n        </span>\r\n        <CellColor\r\n           style={{ ...S.COLOR, ..._bgColor}}\r\n           onReg={this._hRegCellColor}\r\n           onClick={this._hClickPallete}\r\n        >\r\n          <ModalPalette\r\n             isShow={isShowPallete}\r\n             model={Model.palette}\r\n             onClickCell={this._hEnterColor}\r\n             onClose={this._hClosePalette}\r\n          />\r\n        </CellColor>\r\n        <InputSelect\r\n          placeholder=\"withYAxis\"\r\n          width=\"150\"\r\n          rootStyle={S.SELECT}\r\n          rootOptionsStyle={S.SELECT_OPTIONS}\r\n          options={yAxisOptions}\r\n          onSelect={this._hSelectYAxis}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getValue() {\r\n    return {\r\n      isChecked: this.isChecked,\r\n      color: this._getColor(),\r\n      toYAxis: this.toYAxis,\r\n      data: this.props.seria.userOptions.data\r\n    };\r\n  }\r\n}\r\n\r\nexport default SeriaRow\r\n"]}