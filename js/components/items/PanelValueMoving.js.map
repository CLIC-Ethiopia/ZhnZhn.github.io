{"version":3,"sources":["../../../src/components/items/PanelValueMoving.jsx"],"names":["STYLE","SUB_PANEL","position","top","left","width","ROW","display","justifyContent","DATE","paddingLeft","whiteSpace","ROW_INPUT","paddingTop","DATE_FIELD","marginLeft","boxShadow","MSG","color","fontWeight","PanelValueMoving","props","_handleEnterDate","dateTo","dateToComp","isValid","isUpdated","updateDateTo","setState","msgDateTo","_renderAdmin","isAdminMode","date","isDenyToChange","comp","isFormatDmy","state","nextProps","valueMoving","value","valueTo","_isAdminMode"],"mappings":"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","file":"PanelValueMoving.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\n\r\nimport SpanValue from '../zhn-span/SpanValue'\r\nimport SpanDate from '../zhn-span/SpanDate'\r\nimport SpanLabel from '../zhn-span/SpanLabel'\r\n\r\nimport DateField from '../zhn/DateField'\r\nimport SubPanel from './SubPanel'\r\n\r\nconst STYLE = {\r\n  SUB_PANEL: {\r\n    position: 'absolute',\r\n    top: '32px',\r\n    left: '0px',\r\n    width: 'auto'\r\n  },\r\n  ROW : {\r\n    //width: '230px'\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  DATE: {\r\n    display: 'inline-block',\r\n    //float: 'right',\r\n    paddingLeft: '16px',\r\n    whiteSpace: 'nowrap'\r\n  },\r\n  ROW_INPUT : {\r\n     display: 'block',\r\n     paddingTop: '8px'\r\n  },\r\n  DATE_FIELD: {\r\n    width: '120px',\r\n    marginLeft: '8px',\r\n    boxShadow: '0 2px 2px 0 rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.1)'\r\n  },\r\n  MSG: {\r\n    color: '#f44336',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n}\r\n\r\nclass PanelValueMoving extends Component {\r\n  /*\r\n  static propTypes = {\r\n    valueMoving: PropTypes.shape({\r\n      value: PropTypes.string,\r\n      date: PropTypes.string,\r\n      valueTo: PropTypes.string,\r\n      dateTo: PropTypes.string,\r\n      isDenyToChange: PropTypes.bool\r\n    }),\r\n    isAdminMode: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.bool\r\n    ]),\r\n    msgDateTo: PropTypes.string,\r\n    updateDateTo: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      msgDateTo: ''\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if (this.props !== nextProps){\r\n      this.setState({ msgDateTo: '' })\r\n    }\r\n  }\r\n\r\n  _handleEnterDate = (dateTo) => {\r\n    if (this.dateToComp.isValid()){\r\n      const isUpdated = this.props.updateDateTo(dateTo)\r\n      if (isUpdated){\r\n        this.setState({ msgDateTo: ''})\r\n      } else {\r\n        this.setState({ msgDateTo: `No data for ${dateTo}`})\r\n      }\r\n    }\r\n  }\r\n\r\n  _renderAdmin = (isAdminMode, date, msgDateTo, isDenyToChange)  => {\r\n    if (!isAdminMode || isDenyToChange) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <label style={STYLE.ROW_INPUT}>\r\n            <SpanLabel label=\"CompareTo:\" />\r\n            <DateField\r\n              ref={comp => this.dateToComp = comp }\r\n              rootStyle={STYLE.DATE_FIELD}\r\n              initValue={date}\r\n              placeholder=\"DD-MM-YYYY\"\r\n              errorMsg=\"DD-MM-YYYY\"\r\n              onTest={DateUtils.isFormatDmy}\r\n              onEnter={this._handleEnterDate}\r\n            />\r\n          </label>\r\n          <div>\r\n            <span style={STYLE.MSG}>\r\n              {msgDateTo}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { valueMoving, isAdminMode } = this.props\r\n        , { value, date, valueTo, dateTo, isDenyToChange } = valueMoving\r\n        , _isAdminMode = (typeof isAdminMode == 'function')\r\n              ? isAdminMode()\r\n              : ( typeof isAdminMode == 'boolean')\r\n                   ? isAdminMode\r\n                   : false\r\n       , { msgDateTo } = this.state;\r\n    return (\r\n      <SubPanel style={STYLE.SUB_PANEL}>\r\n         <div style={STYLE.ROW}>\r\n           <SpanValue value={value} />\r\n           <SpanDate date={date} style={STYLE.DATE} />\r\n        </div>\r\n        <div style={STYLE.ROW}>\r\n           <SpanValue value={valueTo} />\r\n           <SpanDate date={dateTo} style={STYLE.DATE} />\r\n        </div>\r\n        { this._renderAdmin(_isAdminMode, date, msgDateTo, isDenyToChange)}\r\n      </SubPanel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PanelValueMoving\r\n"]}