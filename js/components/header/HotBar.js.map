{"version":3,"sources":["../../../src/components/header/HotBar.jsx"],"names":["S","ROOT","display","BT_D","color","BT_CL","_isIn","arr","type","len","length","i","HotBar","props","_onStore","actionType","option","closeDialogAction","setState","hotButtons","prevState","countButtons","_maxButtons","_hClean","_renderHotButtons","onShowDialog","map","conf","index","caption","_accessKey","toString","_shortCaption","substr","bind","_btCleanEl","_calcMaxButtons","state","strWidth","window","getComputedStyle","document","body","getPropertyValue","maxButtons","store","unsubscribe","listen","_cleanBtEl","defaultProps"],"mappings":"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","file":"HotBar.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  ROOT: {\r\n    display: 'inline-block'\r\n  },\r\n  BT_D: {\r\n    color: '#c0c0c0'\r\n  },\r\n  BT_CL: {\r\n    color: '#f44336'\r\n  }\r\n};\r\n\r\nconst _isIn = (arr, type) => {\r\n  const len = arr.length;\r\n  let i = 0;\r\n  for(;i<len;i++){\r\n    if (arr[i].type === type){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nclass HotBar extends Component {\r\n  static defaultProps = {\r\n    maxButtons: 5\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this._btCleanEl = (\r\n      <FlatButton\r\n        key=\"BT_CLEAN\"\r\n        rootStyle={S.BT_CL}\r\n        caption=\"CL\"\r\n        title=\"Clean Hot Bar\"\r\n        onClick={this._hClean}\r\n      />\r\n    )\r\n    this._maxButtons = this._calcMaxButtons(props)\r\n    this.state = {\r\n      countButtons: 0,\r\n      hotButtons: []\r\n    }\r\n  }\r\n\r\n  _calcMaxButtons(props){\r\n    const strWidth = window\r\n           .getComputedStyle(document.body, ':after')\r\n           .getPropertyValue('content');\r\n    switch(strWidth){\r\n      case '\"W600\"': return 3;\r\n      case '\"W500\"': return 2;\r\n      default: return props.maxButtons;\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { store } = this.props;\r\n    this.unsubscribe = store.listen(this._onStore)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  _onStore = (actionType, option) => {\r\n    const { closeDialogAction } = this.props;\r\n    if (actionType === closeDialogAction ) {\r\n      this.setState(prevState => {\r\n        const { hotButtons, countButtons } = prevState;\r\n        if (!_isIn(hotButtons, option.type)) {\r\n          hotButtons[countButtons % this._maxButtons] = option\r\n          prevState.countButtons += 1\r\n        }\r\n        return prevState;\r\n      })\r\n    }\r\n  }\r\n\r\n  _hClean = () => {\r\n    this.setState({ countButtons: 0, hotButtons: [] })\r\n  }\r\n\r\n  _renderHotButtons = (hotButtons, onShowDialog) => {\r\n    return hotButtons.map((conf, index) => {\r\n      const { type, caption='' } = conf\r\n      , _accessKey = (index+1).toString()\r\n      , _shortCaption = _accessKey + caption.substr(0, 3);\r\n      return (\r\n        <FlatButton\r\n          key={type}\r\n          rootStyle={S.BT_D}\r\n          caption={_shortCaption}\r\n          title={caption}\r\n          accessKey={_accessKey}\r\n          onClick={onShowDialog.bind(null, type)}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { onShowDialog } = this.props\r\n        , { hotButtons } = this.state\r\n        , _cleanBtEl = (hotButtons.length !== 0)\r\n             ? this._btCleanEl\r\n             : null;\r\n    return (\r\n      <div style={S.ROOT}>\r\n        {this._renderHotButtons(hotButtons, onShowDialog)}\r\n        {_cleanBtEl}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HotBar\r\n"]}