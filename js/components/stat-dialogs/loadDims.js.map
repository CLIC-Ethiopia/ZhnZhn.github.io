{"version":3,"sources":["../../../src/components/stat-dialogs/loadDims.js"],"names":["MSG_STILL_LOADING","C","SELECTION_ALL","selection","filter","values","TID_DIM","code","_crSelectDim","_crOption","dims","noTime","arrQuery","map","dim","v","push","method","body","JSON","stringify","query","response","format","_crSelectOptions","ds","arr","_id","c","Dimension","len","length","i","caption","Category","label","slice","id","_fNotTimeDimension","timeId","config","_crConfigs","json","_ds","Dataset","configs","options","guard","LoadGuard","loadDims","metaUrl","isLoading","_option","start","then","stop","err","errMsg","message","Promise","resolve"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AAEA,IAAMA,iBAAiB,GAAG,gCAA1B;AAEA,IAAMC,CAAC,GAAG;AACRC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,MAAM,EAAE,CAAC,GAAD;AAFC;AADE,GADP;AAORC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,KADD;AAELJ,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,MAAM,EAAE,CAAE,GAAF;AAFC;AAFN;AAPD,CAAV;;AAiBA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACD,IAAD,EAAU;AAC7B;AAASA,IAAAA,IAAI,EAAJA;AAAT,KAAkBN,CAAC,CAACC,aAApB;AACD,CAFD;;AAIA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,MAAP,EAAkB;AAClC,MAAMC,QAAQ,GAAGF,IAAI,CAClBG,GADc,CACV,UAAAC,GAAG;AAAA,WAAIN,YAAY,CAACM,GAAG,CAACC,CAAL,CAAhB;AAAA,GADO,CAAjB;;AAGA,MAAI,CAACJ,MAAL,EAAa;AACZC,IAAAA,QAAQ,CAACI,IAAT,CAAcf,CAAC,CAACK,OAAhB;AACA;;AAED,SAAQ;AACNW,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAClBC,MAAAA,KAAK,EAAET,QADW;AAElBU,MAAAA,QAAQ,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD;AAFQ,KAAf;AAFA,GAAR;AASD,CAjBD;;AAmBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,EAAD,EAAKX,GAAL,EAAa;AACpC,MAAMY,GAAG,GAAG,EAAZ;AAAA,MACMC,GAAG,GAAGb,GAAG,CAACC,CADhB;AAAA,MAEMa,CAAC,GAAGH,EAAE,CAACI,SAAH,CAAaF,GAAb,CAFV;AAAA,MAGMG,GAAG,GAAGF,CAAC,CAACG,MAHd;AAIA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAKA,CAAC,GAACF,GAAP,EAAYE,CAAC,EAAb,EAAgB;AAAA;;AACdN,IAAAA,GAAG,CAACV,IAAJ,CAAS;AACPiB,MAAAA,OAAO,EAAEL,CAAC,CAACM,QAAF,CAAWF,CAAX,EAAcG,KADhB;AAEPC,MAAAA,KAAK,uBACFT,GADE,IACIC,CAAC,CAACS,EAAF,CAAKL,CAAL,CADJ;AAFE,KAAT;AAMD;;AACD,SAAON,GAAP;AACD,CAfD;;AAiBA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SAAI,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACH,EAAP,KAAcE,MAAlB;AAAA,GAAV;AAAA,CAAjC;;AAEA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOhC,IAAP,EAAa6B,MAAb,EAAwB;AACzC,MAAMI,GAAG,GAAG,0BAASD,IAAT,EAAeE,OAAf,CAAuB,CAAvB,CAAZ;AAAA,MACEC,OAAO,GAAGnC,IAAI,CAACG,GAAL,CAAS,UAAAC,GAAG;AAAA,WAAK;AACzBuB,MAAAA,EAAE,EAAEvB,GAAG,CAACC,CADiB;AAEzBkB,MAAAA,OAAO,EAAEnB,GAAG,CAACc,CAFY;AAGzBkB,MAAAA,OAAO,EAAEtB,gBAAgB,CAACmB,GAAD,EAAM7B,GAAN;AAHA,KAAL;AAAA,GAAZ,EAKTV,MALS,CAKFkC,kBAAkB,CAACC,MAAD,CALhB,CADZ;;AAOA,SAAOM,OAAP;AACD,CATD;;AAWA,IAAME,KAAK,GAAG,IAAIC,qBAAJ,EAAd;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA0C;AAAA,MAAvCC,OAAuC,QAAvCA,OAAuC;AAAA,uBAA9BxC,IAA8B;AAAA,MAA9BA,IAA8B,0BAAzB,EAAyB;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAb4B,MAAa,QAAbA,MAAa;;AACzD,MAAI,CAACQ,KAAK,CAACI,SAAX,EAAsB;AACpB,QAAMC,OAAO,GAAG3C,SAAS,CAACC,IAAD,EAAOC,MAAP,CAAzB;;AACAoC,IAAAA,KAAK,CAACM,KAAN,CAAYH,OAAZ;AACA,WAAO,0BAASA,OAAT,EAAkBE,OAAlB,EACJE,IADI,CACC,UAAAZ,IAAI,EAAI;AACZ,UAAMG,OAAO,GAAGJ,UAAU,CAACC,IAAD,EAAOhC,IAAP,EAAa6B,MAAb,CAA1B;;AACAQ,MAAAA,KAAK,CAACQ,IAAN;AACA,aAAO;AAAEV,QAAAA,OAAO,EAAPA;AAAF,OAAP;AACD,KALI,WAME,UAAAW,GAAG,EAAI;AACZT,MAAAA,KAAK,CAACQ,IAAN;AACA,aAAO;AAAEE,QAAAA,MAAM,EAAED,GAAG,CAACE;AAAd,OAAP;AACD,KATI,CAAP;AAUA,GAbF,MAaQ;AACL,WAAOC,OAAO,CACXC,OADI,CACI;AAAEH,MAAAA,MAAM,EAAEzD;AAAV,KADJ,CAAP;AAED;AACH,CAlBD;;eAoBeiD,Q","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport LoadGuard from '../../utils/LoadGuard'\r\nimport loadJson from './loadJson'\r\n\r\nconst MSG_STILL_LOADING = \"Another dims are still loading\";\r\n\r\nconst C = {\r\n  SELECTION_ALL: {\r\n    selection: {\r\n      filter: 'all',\r\n      values: ['*']\r\n    }\r\n  },\r\n  TID_DIM: {\r\n      code: \"Tid\",\r\n      selection: {\r\n        filter: \"top\",\r\n        values: [ \"1\" ]\r\n      }\r\n  }\r\n};\r\n\r\n\r\nconst _crSelectDim = (code) => {\r\n  return { code, ...C.SELECTION_ALL };\r\n}\r\n\r\nconst _crOption = (dims, noTime) => {\r\n  const arrQuery = dims\r\n    .map(dim => _crSelectDim(dim.v));\r\n\r\n  if (!noTime) {\r\n   arrQuery.push(C.TID_DIM);\r\n  }\r\n\r\n  return  {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n       query: arrQuery,\r\n       response: {\r\n          format: \"json-stat\"\r\n       }\r\n    })\r\n  };\r\n}\r\n\r\nconst _crSelectOptions = (ds, dim) => {\r\n  const arr = []\r\n      , _id = dim.v\r\n      , c = ds.Dimension(_id)\r\n      , len = c.length;\r\n  let i = 0;\r\n  for(;i<len; i++){\r\n    arr.push({\r\n      caption: c.Category(i).label,\r\n      slice: {\r\n        [_id]: c.id[i]\r\n      }\r\n    })\r\n  }\r\n  return arr;\r\n}\r\n\r\nconst _fNotTimeDimension = timeId => config => config.id !== timeId;\r\n\r\nconst _crConfigs = (json, dims, timeId) => {\r\n  const _ds = JSONstat(json).Dataset(0)\r\n  , configs = dims.map(dim => ({\r\n      id: dim.v,\r\n      caption: dim.c,\r\n      options: _crSelectOptions(_ds, dim)\r\n    }))\r\n    .filter(_fNotTimeDimension(timeId));\r\n  return configs;\r\n}\r\n\r\nconst guard = new LoadGuard();\r\n\r\nconst loadDims = ({ metaUrl, dims=[], noTime, timeId }) => {\r\n  if (!guard.isLoading) {\r\n    const _option = _crOption(dims, noTime);\r\n    guard.start(metaUrl)\r\n    return loadJson(metaUrl, _option)\r\n      .then(json => {\r\n        const configs = _crConfigs(json, dims, timeId);\r\n        guard.stop()\r\n        return { configs };\r\n      })\r\n      .catch(err => {\r\n        guard.stop()\r\n        return { errMsg: err.message };\r\n      });\r\n   } else {\r\n     return Promise\r\n       .resolve({ errMsg: MSG_STILL_LOADING });\r\n   }\r\n}\r\n\r\nexport default loadDims\r\n"],"file":"loadDims.js"}