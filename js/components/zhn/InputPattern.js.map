{"version":3,"sources":["../../../src/components/zhn/InputPattern.jsx"],"names":["STYLE","ROOT","position","display","backgroundColor","width","INPUT","background","border","outline","height","paddingLeft","color","fontSize","fontWeight","HR","borderWidth","borderStyle","borderColor","borderImage","margin","marginLeft","marginRight","marginBottom","HR_VALID","HR_NOT_VALID","ERR_MSG","paddingBottom","InputPattern","props","_handleChangeValue","event","onTest","value","target","setState","isValid","errorInput","undefined","_handleBlurValue","errorMsg","state","_handleKeyDown","keyCode","onEnter","preventDefault","initValue","rootStyle","inputStyle","placeholder","_styleHr","inputPattern","input","String","trim","focus","defaultProps","propTypes","object","string","func"],"mappings":"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","file":"InputPattern.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst STYLE = {\r\n  ROOT : {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    backgroundColor: '#E1E1CB',\r\n    width: '250px'\r\n  },\r\n  INPUT : {\r\n    background: 'transparent none repeat scroll 0 0',\r\n    border: 'medium none',\r\n    outline: 'medium none',\r\n    height: '30px',\r\n    paddingLeft: '10px',\r\n    color: 'green',\r\n    width: '100%',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold'\r\n  },\r\n  HR : {\r\n    borderWidth: 'medium medium 1px',\r\n    borderStyle: 'none none solid',\r\n    borderColor: 'red',\r\n    borderImage: 'none',\r\n    margin: 0,\r\n    marginLeft: '10px',\r\n    marginRight: '10px',\r\n    marginBottom: '5px',\r\n    width: 'auto'\r\n    //width: '90%'\r\n    //width: '230px'\r\n  },\r\n  HR_VALID : {\r\n     borderColor: '#1B75BB'\r\n  },\r\n  HR_NOT_VALID : {\r\n     borderColor: '#F44336'\r\n  },\r\n  ERR_MSG : {\r\n    color: '#F44336',\r\n    paddingLeft: '10px',\r\n    paddingBottom: '5px',\r\n    fontSize: '12px',\r\n    fontWeight: 'bold'\r\n  }\r\n};\r\n\r\nclass InputPattern extends Component {\r\n   static propTypes = {\r\n     rootStyle: PropTypes.object,\r\n     inputStyle: PropTypes.object,\r\n     initValue: PropTypes.string,\r\n     placeholder: PropTypes.string,\r\n     errorMsg: PropTypes.string,\r\n     onTest: PropTypes.func,\r\n     onEnter: PropTypes.func\r\n   }\r\n   static defaultProps = {\r\n      onTest: () => { return true; }\r\n   }\r\n\r\n   constructor(props){\r\n     super();\r\n     this.state = {\r\n       value: props.initValue ? props.initValue : '',\r\n       errorInput: undefined,\r\n       isValid: true\r\n     };\r\n   }\r\n\r\n  _handleChangeValue = (event) => {\r\n    const { onTest } = this.props\r\n         , value = event.target.value\r\n    if (!onTest(value)){\r\n      this.setState({\r\n         value : value,\r\n         isValid : false\r\n      })\r\n    } else {\r\n      this.setState({\r\n         value : value,\r\n         isValid : true,\r\n         errorInput : undefined\r\n      })\r\n    }\r\n  }\r\n\r\n  _handleBlurValue = () => {\r\n    const { onTest,  errorMsg } = this.props\r\n        , { value } = this.state;\r\n    if (!onTest(value)){\r\n      this.setState({\r\n        errorInput : errorMsg,\r\n        isValid : false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        errorInput : undefined,\r\n        isValid : true\r\n      })\r\n    }\r\n  }\r\n\r\n  _handleKeyDown = (event) => {\r\n    switch(event.keyCode){\r\n      case 13:\r\n        if (typeof this.props.onEnter === 'function') {\r\n          this.props.onEnter(event.target.value)\r\n        }\r\n        break;\r\n      case 27: case 46:\r\n        event.preventDefault()\r\n        this.setState({\r\n          value: this.props.initValue || '' ,\r\n          errorInput: undefined,\r\n          isValid: true\r\n        })\r\n        break;\r\n      default: return;\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            rootStyle, inputStyle,\r\n            placeholder='Input Pattern'\r\n          } = this.props\r\n        , { value, errorInput, isValid } = this.state\r\n        , _styleHr = isValid\r\n            ? STYLE.HR_VALID\r\n            : STYLE.HR_NOT_VALID;\r\n    return (\r\n      <div style={{...STYLE.ROOT, ...rootStyle}}>\r\n        <input\r\n           style={{...STYLE.INPUT, ...inputStyle}}\r\n           name=\"text-date\"\r\n           //autoComplete=\"new-text-date\"\r\n           autoComplete=\"off\"\r\n           autoCorrect=\"off\"\r\n           autoCapitalize=\"off\"\r\n           spellCheck={false}\r\n           ref={input => this.inputPattern = input }\r\n           type=\"text\"\r\n           placeholder={placeholder}\r\n           value={value}\r\n           onChange={this._handleChangeValue}\r\n           onBlur={this._handleBlurValue}\r\n           onKeyDown={this._handleKeyDown}\r\n        >\r\n        </input>\r\n        <hr style={{ ...STYLE.HR, ..._styleHr}}></hr>\r\n        <div style={STYLE.ERR_MSG}>\r\n          {errorInput}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getValue(){\r\n    return String(this.state.value).trim();\r\n  }\r\n  isValid(){\r\n    return this.props.onTest(this.state.value);\r\n  }\r\n  focusInput(){\r\n    this.inputPattern.focus()\r\n  }\r\n}\r\n\r\nexport default InputPattern\r\n"]}