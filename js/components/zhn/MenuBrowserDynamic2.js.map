{"version":3,"sources":["../../../src/components/zhn/MenuBrowserDynamic2.jsx"],"names":["SEARCH_PLACEHOLDER","CL","BROWSER","BROWSER_WITH_SEARCH","ROW_ITEM","STYLE","paddingRight","paddingBottom","minWidth","CAPTION","top","WRAPPER_SEARCH","width","SPINNER_LOADING","position","display","height","margin","marginTop","textAlign","MenuBrowserDynamic2","props","_loadMenu","browserType","caption","sourceMenuUrl","onLoadMenu","_onStore","actionType","data","showAction","loadCompletedAction","_handleShow","setState","menuItems","json","isLoaded","_handleHide","isShow","_handleClickInfo","descrUrl","onClickInfo","_handleClickSearch","isShowSearch","is","scrollClass","_handleClickItem","item","modalDialogType","chartContainerType","onShowLoadDialog","onShowContainer","onShow","isInitShow","toolbarButtons","title","onClick","bind","state","componentDidMount","unsubscribe","store","listen","componentDidUpdate","componentWillUnmount","render","children","ItemOptionComp","ItemComp","_isMenuEmpty","length","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Browser from './Browser';\r\nimport BrowserCaption from './BrowserCaption';\r\nimport ToolbarButtonCircle from '../dialogs/ToolbarButtonCircle';\r\n\r\nimport ShowHide from './ShowHide';\r\nimport WrapperInputSearch from '../zhn-select/WrapperInputSearch';\r\n\r\nimport ScrollPane from './ScrollPane';\r\nimport SpinnerLoading from './SpinnerLoading';\r\nimport MenuListType2 from './MenuListType2';\r\n\r\nconst SEARCH_PLACEHOLDER = \"Search By Symbol Or Name\"\r\n\r\nconst CL = {\r\n  BROWSER : \"scroll-browser-by\",\r\n  BROWSER_WITH_SEARCH : \"scroll-browser-by--search\",\r\n  ROW_ITEM: 'row__type2-topic not-selected'\r\n}\r\n\r\nconst STYLE = {\r\n  BROWSER : {\r\n    paddingRight: 0,\r\n    paddingBottom: 4,\r\n    minWidth: 300\r\n  },\r\n  CAPTION: {\r\n    top: 9\r\n  },\r\n  WRAPPER_SEARCH : {\r\n     width: '100%',\r\n     paddingBottom: 8,\r\n     paddingRight: 24\r\n  },\r\n  SPINNER_LOADING : {\r\n    position: 'relative',\r\n    display: 'block',\r\n    width: 32,\r\n    height: 32,\r\n    margin: '0 auto',\r\n    marginTop: 32,\r\n    textAlign: 'middle'\r\n  }\r\n};\r\n\r\nclass MenuBrowserDynamic2 extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    const { isInitShow } = props;\r\n    this.toolbarButtons = [\r\n      { caption: 'S', title: 'Click to toggle input search', onClick: this._handleClickSearch.bind(this) },\r\n      { caption: 'A', title: 'About Datasources', onClick: this._handleClickInfo.bind(this) }\r\n    ];\r\n    this.state = {\r\n      isShow: !!isInitShow,\r\n      isShowSearch : false,\r\n      scrollClass : CL.BROWSER,\r\n      isLoaded : false,\r\n      menuItems: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n    this._loadMenu()\r\n  }\r\n  componentDidUpdate(){\r\n    const {isLoaded, isShow} = this.state;\r\n    if (!isLoaded && isShow) {\r\n      this._loadMenu()\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  _loadMenu = () => {\r\n    const { browserType, caption, sourceMenuUrl, onLoadMenu } = this.props;\r\n    onLoadMenu({ browserType, caption, sourceMenuUrl });\r\n  }\r\n\r\n  _onStore = (actionType, data) => {\r\n    const { browserType, showAction, loadCompletedAction } = this.props;\r\n    if (actionType === showAction && data === browserType){\r\n      this._handleShow();\r\n    } else if (actionType === loadCompletedAction && data.browserType === browserType){\r\n      this.setState({ menuItems: data.json, isLoaded : true });\r\n    }\r\n  }\r\n\r\n  _handleHide = () => {\r\n    this.setState({isShow : false});\r\n  }\r\n  _handleShow = () => {\r\n    this.setState({isShow : true});\r\n  }\r\n\r\n  _handleClickInfo = () => {\r\n    const {descrUrl, onClickInfo} = this.props;\r\n    onClickInfo({ descrUrl });\r\n  }\r\n  _handleClickSearch = () => {\r\n    this.setState(({isShowSearch}) => {\r\n      const [is, scrollClass] = isShowSearch\r\n        ? [false, CL.BROWSER]\r\n        : [true, CL.BROWSER_WITH_SEARCH];\r\n      return { isShowSearch: is, scrollClass };\r\n    })\r\n  }\r\n\r\n  _handleClickItem = (item) => {\r\n    const {\r\n      modalDialogType, browserType, chartContainerType,\r\n      onShowLoadDialog, onShowContainer\r\n    } = this.props;\r\n\r\n    onShowLoadDialog(modalDialogType, {\r\n      item, browserType, chartContainerType,\r\n      onShow : onShowContainer\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const {\r\n        caption, children,\r\n        ItemOptionComp, ItemComp\r\n      } = this.props\r\n    , {\r\n      menuItems,\r\n      isShow, isShowSearch,\r\n      scrollClass\r\n    } = this.state\r\n    , _isMenuEmpty = menuItems.length === 0;\r\n\r\n    return (\r\n       <Browser isShow={isShow} style={STYLE.BROWSER}>\r\n           <BrowserCaption\r\n              caption={caption}\r\n              captionStyle={STYLE.CAPTION}\r\n              onClose={this._handleHide}\r\n           />\r\n          <ToolbarButtonCircle\r\n            buttons={this.toolbarButtons}\r\n          />\r\n          {!_isMenuEmpty && <ShowHide isShow={isShowSearch}>\r\n              <WrapperInputSearch\r\n                style={STYLE.WRAPPER_SEARCH}\r\n                placeholder={SEARCH_PLACEHOLDER}\r\n                data={menuItems}\r\n                ItemOptionComp={ItemOptionComp}\r\n                onSelect={this._handleClickItem}\r\n              />\r\n            </ShowHide>\r\n          }\r\n          <ScrollPane className={scrollClass}>\r\n            {_isMenuEmpty && <SpinnerLoading\r\n               style={STYLE.SPINNER_LOADING}/>\r\n            }\r\n            <MenuListType2\r\n               model={menuItems}\r\n               ItemComp={ItemComp}\r\n               itemClassName={CL.ROW_ITEM}\r\n               onClickItem={this._handleClickItem}\r\n            />\r\n            {children}\r\n          </ScrollPane>\r\n       </Browser>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MenuBrowserDynamic2;\r\n"],"file":"MenuBrowserDynamic2.js"}