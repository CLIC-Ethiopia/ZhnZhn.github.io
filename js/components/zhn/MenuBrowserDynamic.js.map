{"version":3,"sources":["../../../src/components/zhn/MenuBrowserDynamic.jsx"],"names":["CL_SCROLL","S","BROWSER","paddingRight","MenuBrowserDynamic","props","_loadMenu","browserType","caption","sourceMenuUrl","onLoadMenu","_onStore","actionType","data","store","showAction","updateAction","loadCompletedAction","_handleShow","setState","menuItems","isLoaded","getBrowserMenu","_handleHide","isShow","_renderMenuParts","map","menuPart","index","state","isInitShow","componentDidMount","unsubscribe","listen","componentDidUpdate","componentWillUnmount","render","children","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Browser from './Browser';\r\nimport BrowserCaption from './BrowserCaption';\r\nimport ScrollPane from './ScrollPane';\r\nimport MenuPart from './MenuPart';\r\n\r\nconst CL_SCROLL = 'scroll-container-y scroll-menu';\r\n\r\nconst S = {\r\n  BROWSER: {\r\n    paddingRight: '0'\r\n  }\r\n};\r\n\r\nclass MenuBrowserDynamic extends Component{\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      isShow: props.isInitShow ? true : false,\r\n      isLoaded: false,\r\n      menuItems: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n    this._loadMenu()\r\n  }\r\n  componentDidUpdate(){\r\n    const {isLoaded, isShow} = this.state;\r\n    if (!isLoaded && isShow) {\r\n      this._loadMenu()\r\n    }\r\n  }  \r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  _loadMenu = () => {\r\n    const { browserType, caption, sourceMenuUrl, onLoadMenu } = this.props;\r\n    onLoadMenu({ browserType, caption, sourceMenuUrl });\r\n  }\r\n\r\n  _onStore = (actionType, data) => {\r\n    const { browserType, store, showAction, updateAction, loadCompletedAction } = this.props;\r\n    if (actionType === showAction && data === browserType){\r\n      this._handleShow();\r\n    } else if (actionType === loadCompletedAction && data.browserType === browserType){\r\n      this.setState({ menuItems: data.menuItems, isLoaded : true });\r\n    } else if (actionType === updateAction && data === browserType){\r\n      this.setState({ menuItems: store.getBrowserMenu(browserType) });\r\n    }\r\n  }\r\n\r\n  _handleHide = () => {\r\n    this.setState({ isShow : false });\r\n  }\r\n  _handleShow = () => {\r\n    this.setState({ isShow : true });\r\n  }\r\n\r\n  _renderMenuParts = (menuItems=[]) => {\r\n    return menuItems.map((menuPart, index) => {\r\n      return (<MenuPart key={index} {...menuPart} />)\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const {caption, children} = this.props\r\n        , {menuItems, isShow} = this.state;\r\n\r\n    return (\r\n       <Browser isShow={isShow} style={S.BROWSER}>\r\n         <BrowserCaption\r\n            caption={caption}\r\n            onClose={this._handleHide}\r\n         />\r\n          <ScrollPane className={CL_SCROLL}>\r\n            {this._renderMenuParts(menuItems)}\r\n            {children}\r\n          </ScrollPane>\r\n       </Browser>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MenuBrowserDynamic;\r\n"],"file":"MenuBrowserDynamic.js"}