{"version":3,"sources":["../../../src/components/zhn/MenuBrowserDynamic.jsx"],"names":["Styles","browser","paddingRight","scrollDiv","overflowY","height","paddingBottom","MenuBrowserDynamic","props","_loadMenu","browserType","caption","sourceMenuUrl","onLoadMenu","_onStore","actionType","data","store","showAction","updateAction","loadCompletedAction","_handleShow","setState","menuItems","isLoaded","getBrowserMenu","_handleHide","isShow","_renderMenuParts","map","menuPart","index","state","isInitShow","unsubscribe","listen","nextProps","nextState","children"],"mappings":"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","file":"MenuBrowserDynamic.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Browser from './Browser';\r\nimport BrowserCaption from './BrowserCaption';\r\nimport ScrollPane from './ScrollPane';\r\nimport MenuPart from './MenuPart';\r\n\r\nconst Styles = {\r\n  browser : {\r\n    paddingRight: '0'\r\n  },\r\n  scrollDiv : {\r\n    overflowY: 'auto',\r\n    height: '92%',\r\n    paddingRight: '10px',\r\n    paddingBottom: '4px'\r\n  }\r\n};\r\n\r\nclass MenuBrowserDynamic extends Component{\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      isShow: props.isInitShow ? true : false,\r\n      isLoaded : false,\r\n      menuItems: []\r\n    }\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  }\r\n  componentDidMount(){\r\n    this._loadMenu();\r\n  }\r\n  componentWillUpdate(nextProps, nextState){\r\n     if (!nextState.isLoaded && nextState.isShow){\r\n       this._loadMenu();\r\n     }\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  _loadMenu = () => {\r\n    const { browserType, caption, sourceMenuUrl, onLoadMenu } = this.props;\r\n    onLoadMenu({ browserType, caption, sourceMenuUrl });\r\n  }\r\n\r\n  _onStore = (actionType, data) => {\r\n    const { browserType, store, showAction, updateAction, loadCompletedAction } = this.props;\r\n    if (actionType === showAction && data === browserType){\r\n      this._handleShow();\r\n    } else if (actionType === loadCompletedAction && data.browserType === browserType){\r\n      this.setState({ menuItems: data.menuItems, isLoaded : true });\r\n    } else if (actionType === updateAction && data === browserType){\r\n      this.setState({ menuItems: store.getBrowserMenu(browserType) });\r\n    }\r\n  }\r\n\r\n  _handleHide = () => {\r\n    this.setState({ isShow : false });\r\n  }\r\n  _handleShow = () => {\r\n    this.setState({ isShow : true });\r\n  }\r\n\r\n  _renderMenuParts = (menuItems=[]) => {\r\n    return menuItems.map((menuPart, index) => {\r\n      return (<MenuPart key={index} {...menuPart} />)\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const {caption, children} = this.props\r\n        , {menuItems, isShow} = this.state;\r\n\r\n    return (\r\n       <Browser isShow={isShow} style={Styles.browser}>\r\n         <BrowserCaption\r\n            caption={caption}\r\n            onClose={this._handleHide}\r\n         />\r\n          <ScrollPane style={Styles.scrollDiv}>\r\n            {this._renderMenuParts(menuItems)}\r\n            {children}\r\n          </ScrollPane>\r\n       </Browser>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MenuBrowserDynamic;\r\n"]}