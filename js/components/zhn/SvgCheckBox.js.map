{"version":3,"sources":["../../../src/components/zhn/SvgCheckBox.jsx"],"names":["S","DIV","display","width","height","cursor","SVG","E","KEY","KEY_CODE","C_GREY","SvgChecked","stroke","C","BLANK","_isFn","fn","_getInitStateFrom","initValue","value","isChecked","SvgCheckBox","props","_hClick","_isOnCheck","_isOnUnCheck","state","onCheck","onUnCheck","setState","_hKeyDown","evt","key","keyCode","preventDefault","setUnchecked","getDerivedStateFromProps","render","style","checkedRestStroke","checkedRestFill","checkedColor","_restStroke","_restFill","Component","defaultProps","YELLOW"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport C from '../styles/Color';\r\n\r\nconst S = {\r\n  DIV: {\r\n    display: 'inline-block',\r\n    width: '16px',\r\n    height: '16px',\r\n    cursor: 'pointer'\r\n  },\r\n  SVG: {\r\n    display: 'inline-block'\r\n  }\r\n};\r\n\r\nconst E = {\r\n  KEY: \" \",\r\n  KEY_CODE: 32\r\n};\r\n\r\nconst C_GREY = \"#777777\";\r\n\r\nconst SvgChecked = ({ stroke }) => (\r\n  <path\r\n      d=\"M 2,5 L 8,14 14,1\"\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      stroke={stroke}\r\n      fill={C.BLANK}\r\n  />\r\n);\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nconst _getInitStateFrom = ({ initValue, value }) => ({\r\n  initValue: initValue,\r\n  isChecked: !!value\r\n});\r\n\r\nclass SvgCheckBox extends Component {\r\n  /*\r\n  static propTypes = {\r\n    initValue: PropTypes.bool,\r\n    value: PropTypes.bool,\r\n    style: PropTypes.object,\r\n    checkedRestStroke: PropTypes.string,\r\n    checkedRestFill: PropTypes.string,\r\n    checkedColor: PropTypes.string,\r\n    onCheck: PropTypes.func,\r\n    onUnCheck: PropTypes.func\r\n  }\r\n  */\r\n  static defaultProps = {\r\n    checkedRestStroke: C_GREY,\r\n    checkedRestFill: C.BLANK,\r\n    checkedColor: C.YELLOW\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    const { onCheck, onUnCheck } = props;\r\n    this._isOnCheck = _isFn(onCheck)\r\n    this._isOnUnCheck = _isFn(onUnCheck)\r\n\r\n    this.state = _getInitStateFrom(props)\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return props.initValue !== state.initValue\r\n      ? _getInitStateFrom(props)\r\n      : null;\r\n  }\r\n\r\n  _hClick = () => {\r\n    const {\r\n       _isOnCheck, _isOnUnCheck,\r\n        state, props\r\n      } = this\r\n    , { onCheck, onUnCheck } = props\r\n    , { isChecked } = state;\r\n\r\n    if (!isChecked && _isOnCheck){\r\n      onCheck(this);\r\n    } else if (_isOnUnCheck){\r\n      onUnCheck(this);\r\n    }\r\n\r\n    this.setState({ isChecked: !isChecked });\r\n  }\r\n\r\n  _hKeyDown = (evt) => {\r\n    if (evt.key === E.KEY || evt.keyCode === E.KEY_CODE) {\r\n      evt.preventDefault()\r\n      this._hClick()\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      style,\r\n      checkedRestStroke,\r\n      checkedRestFill,\r\n      checkedColor,\r\n      value=this.state.isChecked\r\n    } = this.props\r\n    , _restStroke = value ? checkedRestStroke : C_GREY\r\n    , _restFill = value ? checkedRestFill : C.BLANK;\r\n    return (\r\n      <div\r\n         role=\"checkbox\"\r\n         tabIndex=\"0\"\r\n         aria-checked={value}\r\n         //aria-labelledby\r\n         style={{ ...S.DIV, ...style }}\r\n         onClick={this._hClick}\r\n         onKeyDown={this._hKeyDown}\r\n      >\r\n        <svg\r\n          viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\"\r\n          preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\r\n          style={S.SVG}\r\n        >\r\n          <rect\r\n             x=\"1\" y=\"1\"\r\n             height=\"14\" width=\"14\"\r\n             strokeWidth=\"2\" rx=\"3\"\r\n             stroke={_restStroke}\r\n             fill={_restFill}\r\n          />\r\n          { value\r\n             ? <SvgChecked stroke={checkedColor} />\r\n             : null\r\n          }\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setUnchecked = () => {\r\n    this.setState({ isChecked: false });\r\n  }\r\n}\r\n\r\nexport default SvgCheckBox\r\n"],"file":"SvgCheckBox.js"}