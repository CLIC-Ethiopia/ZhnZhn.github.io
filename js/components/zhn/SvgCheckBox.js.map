{"version":3,"sources":["../../../src/components/zhn/SvgCheckBox.jsx"],"names":["styles","rootDiv","display","width","height","cursor","rootSvg","SvgCheckBox","props","chartType","value","onCheck","onUnCheck","isOnCheck","isOnUnCheck","state","isChecked","nextProps","setState","rootStyle","pathCheckedEl","Object","assign","_handleClick","setUnchecked","propTypes","bool","string","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAAS;AACbC,WAAU;AACRC,aAAS,cADD;AAERC,WAAO,MAFC;AAGRC,YAAQ,MAHA;AAIRC,YAAQ;AAJA,GADG;AAObC,WAAU;AACRJ,aAAS;AADD;AAPG,CAAf;;IAYMK,W;;;AAQJ,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA;;AAAA,QAGRC,SAHQ,GAGiCD,KAHjC,CAGRC,SAHQ;AAAA,QAGGC,KAHH,GAGiCF,KAHjC,CAGGE,KAHH;AAAA,QAGUC,OAHV,GAGiCH,KAHjC,CAGUG,OAHV;AAAA,QAGmBC,SAHnB,GAGiCJ,KAHjC,CAGmBI,SAHnB;AAAA,QAIVC,SAJU,GAIG,OAAOF,OAAP,KAAmB,UAApB,GAAkC,IAAlC,GAAyC,KAJ3C;AAAA,QAKVG,WALU,GAKK,OAAOF,SAAP,KAAqB,UAAtB,GAAoC,IAApC,GAA2C,KAL/C;;;AAOhB,UAAKH,SAAL,GAAkBA,SAAD,GAAcA,SAAd,GAA0B,SAA3C;;AAEA,UAAKM,KAAL,GAAa;AACT;AACAC,iBAAW,CAAC,CAACN,KAFJ;AAGTG,0BAHS;AAITC;AAJS,KAAb;AATgB;AAejB;;;;8CAEyBG,S,EAAU;AAClC,UAAI,KAAKT,KAAL,KAAeS,SAAf,IACG,OAAOA,UAAUP,KAAjB,KAA2B,WADlC,EAEA;AACE,aAAKQ,QAAL,CAAc,EAAEF,WAAW,CAAC,CAACC,UAAUP,KAAzB,EAAd;AACD;AACF;;;6BAYO;AACA,UAAES,SAAF,GAAgB,KAAKX,KAArB,CAAEW,SAAF;AAAA,UACJC,aADI,GACa,KAAKL,KAAL,CAAWC,SAAZ,GAEV;AACI,WAAE,mBADN;AAEI,qBAAY,GAFhB;AAGI,gBAAO,QAHX;AAII,cAAK;AAJT,QAFU,GAUZ,IAXA;;;AAaN,aACE;AAAA;AAAA;AACK,iBAAOK,OAAOC,MAAP,CAAc,EAAd,EAAkBtB,OAAOC,OAAzB,EAAkCkB,SAAlC,CADZ;AAEK,mBAAS,KAAKI;AAFnB;AAIE;AAAA;AAAA,YAAK,SAAQ,WAAb,EAAyB,OAAM,MAA/B,EAAsC,QAAO,MAA7C;AACK,iCAAoB,MADzB,EACgC,OAAM,4BADtC;AAEK,mBAAOvB,OAAOM;AAFnB;AAIE;AACM,eAAE,GADR,EACY,GAAE,GADd;AAEM,oBAAO,IAFb,EAEkB,OAAM,IAFxB;AAGM,yBAAY,GAHlB,EAGsB,QAAO,SAH7B;AAIM,kBAAK,SAJX,EAIqB,IAAG;AAJxB,YAJF;AAWGc;AAXH;AAJF,OADF;AAqBD;;;;;;OA7CDG,Y,GAAe,YAAM;AAAA,iBACyB,OAAKR,KAD9B;AAAA,QACZC,SADY,UACZA,SADY;AAAA,QACDH,SADC,UACDA,SADC;AAAA,QACUC,WADV,UACUA,WADV;;AAEnB,QAAI,CAACE,SAAD,IAAcH,SAAlB,EAA4B;AAC1B,aAAKL,KAAL,CAAWG,OAAX;AACD,KAFD,MAEO,IAAIG,WAAJ,EAAgB;AACrB,aAAKN,KAAL,CAAWI,SAAX;AACD;AACD,WAAKM,QAAL,CAAc,EAAEF,WAAW,CAACA,SAAd,EAAd;AACD,G;;OAuCDQ,Y,GAAe,YAAM;AACnB,WAAKN,QAAL,CAAc,EAAEF,WAAY,KAAd,EAAd;AACD,G;;AAlFGT,W,CACGkB,S,2CAAY;AACjBf,SAAO,oBAAUgB,IADA;AAEjBjB,aAAW,oBAAUkB,MAFJ;AAGjBhB,WAAS,oBAAUiB,IAHF;AAIjBhB,aAAW,oBAAUgB;AAJJ,C;kBAoFNrB,W","file":"SvgCheckBox.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles = {\r\n  rootDiv : {\r\n    display: 'inline-block',\r\n    width: '16px',\r\n    height: '16px',\r\n    cursor: 'pointer'\r\n  },\r\n  rootSvg : {\r\n    display: 'inline-block'\r\n  }\r\n}\r\n\r\nclass SvgCheckBox extends Component {\r\n  static propTypes = {\r\n    value: PropTypes.bool,\r\n    chartType: PropTypes.string,\r\n    onCheck: PropTypes.func,\r\n    onUnCheck: PropTypes.func\r\n  }\r\n\r\n  constructor(props){\r\n    super();\r\n\r\n    const { chartType, value, onCheck, onUnCheck } = props\r\n        , isOnCheck = (typeof onCheck === 'function') ? true : false\r\n        , isOnUnCheck = (typeof onUnCheck === 'function') ? true : false;\r\n\r\n    this.chartType = (chartType) ? chartType : 'Unknown';\r\n\r\n    this.state = {\r\n        //isChecked: false,\r\n        isChecked: !!value,\r\n        isOnCheck,\r\n        isOnUnCheck\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if (this.props !== nextProps\r\n        && typeof nextProps.value !== 'undefined')\r\n    {\r\n      this.setState({ isChecked: !!nextProps.value })\r\n    }\r\n  }\r\n\r\n  _handleClick = () => {\r\n    const {isChecked, isOnCheck, isOnUnCheck} = this.state;\r\n    if (!isChecked && isOnCheck){\r\n      this.props.onCheck(this);\r\n    } else if (isOnUnCheck){\r\n      this.props.onUnCheck(this);\r\n    }\r\n    this.setState({ isChecked: !isChecked });\r\n  }\r\n\r\n  render(){\r\n    const { rootStyle } = this.props\r\n    , pathCheckedEl = (this.state.isChecked)\r\n        ? (\r\n            <path\r\n                d=\"M 2,3 L 8,14 14,3\"\r\n                strokeWidth=\"2\"\r\n                stroke=\"yellow\"\r\n                fill=\"#4D4D4D\"\r\n            >\r\n            </path>\r\n          )\r\n        : null;\r\n\r\n    return (\r\n      <div\r\n           style={Object.assign({}, styles.rootDiv, rootStyle)}\r\n           onClick={this._handleClick}\r\n      >\r\n        <svg viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\"\r\n             preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\r\n             style={styles.rootSvg}\r\n        >\r\n          <rect\r\n                x=\"1\" y=\"1\"\r\n                height=\"14\" width=\"14\"\r\n                strokeWidth=\"2\" stroke=\"#777777\"\r\n                fill=\"#4D4D4D\" rx=\"3\"\r\n          >\r\n          </rect>\r\n          {pathCheckedEl}\r\n        </svg>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  setUnchecked = () => {\r\n    this.setState({ isChecked : false });\r\n  }\r\n}\r\n\r\nexport default SvgCheckBox\r\n"]}