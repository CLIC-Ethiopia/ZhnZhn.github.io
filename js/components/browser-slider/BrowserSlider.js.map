{"version":3,"sources":["../../../src/components/browser-slider/BrowserSlider.jsx"],"names":["CL_SCROLL","S","BROWSER","paddingRight","SCROLL_PANE","height","BrowserSlider","React","memo","props","isInitShow","caption","store","browserType","showAction","isShow","setIsShow","_hHide","actionType","data"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AAEA,IAAMA,SAAS,GAAG,oBAAlB;AAEA,IAAMC,CAAC,GAAG;AACRC,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAE;AADP,GADD;AAIRC,EAAAA,WAAW,EAAE;AACXC,IAAAA,MAAM,EAAE;AADG;AAJL,CAAV;;AASA,IAAMC,aAAa,gBAAGC,kBAAMC,IAAN,CAAW,UAACC,KAAD,EAAW;AAAA,MAExCC,UAFwC,GAItCD,KAJsC,CAExCC,UAFwC;AAAA,MAE5BC,OAF4B,GAItCF,KAJsC,CAE5BE,OAF4B;AAAA,MAGxCC,KAHwC,GAItCH,KAJsC,CAGxCG,KAHwC;AAAA,MAGjCC,WAHiC,GAItCJ,KAJsC,CAGjCI,WAHiC;AAAA,MAGpBC,UAHoB,GAItCL,KAJsC,CAGpBK,UAHoB;;AAAA,kBAKd,qBAAS,CAAC,CAACJ,UAAX,CALc;AAAA,MAKnCK,MALmC;AAAA,MAK3BC,SAL2B;AAAA,MAMxCC,MANwC,GAM/B,wBAAY,YAAI;AAAED,IAAAA,SAAS,CAAC,KAAD,CAAT;AAAkB,GAApC,EAAsC,EAAtC,CAN+B;;AAQ1C,6BAAUJ,KAAV,EAAiB,UAACM,UAAD,EAAaC,IAAb,EAAsB;AACrC,QAAID,UAAU,KAAKJ,UAAf,IAA6BK,IAAI,KAAKN,WAA1C,EAAsD;AACpDG,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAJD;AAMA,sBACE,gCAAC,gBAAD,CAAG,OAAH;AAAW,IAAA,MAAM,EAAED,MAAnB;AAA2B,IAAA,KAAK,EAAEd,CAAC,CAACC;AAApC,kBACE,gCAAC,gBAAD,CAAG,cAAH;AACG,IAAA,OAAO,EAAES,OADZ;AAEG,IAAA,OAAO,EAAEM;AAFZ,IADF,eAKG,gCAAC,gBAAD,CAAG,UAAH;AACE,IAAA,SAAS,EAAEjB,SADb;AAEE,IAAA,KAAK,EAAEC,CAAC,CAACG;AAFX,kBAIE,gCAAC,sBAAD,EAAgBK,KAAhB,CAJF,CALH,CADF;AAcD,CA5BqB,CAAtB;;eA8BeH,a","sourcesContent":["import React, { useState, useCallback } from 'react'\r\n\r\nimport useListen from '../hooks/useListen'\r\nimport A from '../Comp'\r\n\r\nimport MenuSlider from './MenuSlider'\r\n\r\nconst CL_SCROLL = 'scroll-container-y';\r\n\r\nconst S = {\r\n  BROWSER: {\r\n    paddingRight: 0\r\n  },\r\n  SCROLL_PANE: {\r\n    height: '92%'\r\n  }\r\n};\r\n\r\nconst BrowserSlider = React.memo((props) => {\r\n  const {\r\n    isInitShow, caption,\r\n    store, browserType, showAction\r\n  } = props\r\n  const [isShow, setIsShow] = useState(!!isInitShow)\r\n  , _hHide = useCallback(()=>{ setIsShow(false) }, []);\r\n\r\n  useListen(store, (actionType, data) => {\r\n    if (actionType === showAction && data === browserType){\r\n      setIsShow(true)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <A.Browser isShow={isShow} style={S.BROWSER}>\r\n      <A.BrowserCaption\r\n         caption={caption}\r\n         onClose={_hHide}\r\n      />\r\n       <A.ScrollPane\r\n         className={CL_SCROLL}\r\n         style={S.SCROLL_PANE}\r\n       >\r\n         <MenuSlider {...props} />\r\n       </A.ScrollPane>\r\n    </A.Browser>\r\n  );\r\n})\r\n\r\nexport default BrowserSlider\r\n"],"file":"BrowserSlider.js"}