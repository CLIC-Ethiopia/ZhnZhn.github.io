{"version":3,"sources":["../../../../src/components/dialogs/rows/DatesFragment.jsx"],"names":["FORMAT_ERR_MSG","NEAR_ERR_MSG","DatesFragment","_refFromDate","c","fromDate","_refToDate","toDate","render","props","isShowLabels","placeholder","fromCaption","initFromDate","toCaption","initToDate","dateStyle","nForecastDate","errMsg","onTestDate","onEnter","rowStyle","labelStyle","getValues","getValue","getValidation","msgOnNotValidFormat","isPeriodValid","datesMsg","isValid","push","length","trim","focusInput","focusNotValidInput","setFromTo","fromStr","toStr","_setFromDate","_setToDate","dateStr","setValue","Component","defaultProps","item","from","to"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateField from '../../zhn/DateField';\r\nimport useRowStyle from './useRowStyle'\r\n\r\nconst FORMAT_ERR_MSG = \"YYYY-MM-DD format must be\";\r\nconst NEAR_ERR_MSG = \"From Date is near that To Date\";\r\n\r\nclass DatesFragment extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isShowLabels: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    initFromDate: PropTypes.string,\r\n    initToDate: PropTypes.string,\r\n    fromCaption: PropTypes.string,\r\n    toCaption: PropTypes.string,\r\n    errMsg: PropTypes.string,\r\n    nForecastDate: PropTypes.number,\r\n    onTestDate: PropTypes.func,\r\n    msgOnNotValidFormat: PropTypes.func,\r\n    onEnter: PropTypes.func\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    isShowLabels: true,\r\n    fromCaption: 'From Date:',\r\n    toCaption: 'To Date:',\r\n    errMsg: FORMAT_ERR_MSG,\r\n    msgOnNotValidFormat: (item='Date') => `${item} is not in valid format`,\r\n    isPeriodValid: (from, to) => from<=to\r\n  }\r\n\r\n  _refFromDate = c => this.fromDate = c\r\n  _refToDate = c => this.toDate = c\r\n\r\n  render(){\r\n    const {\r\n        isShowLabels,\r\n        placeholder,\r\n        fromCaption, initFromDate,\r\n        toCaption, initToDate,\r\n        dateStyle,\r\n        nForecastDate,\r\n        errMsg,\r\n        onTestDate,\r\n        onEnter\r\n      } = this.props\r\n    , {\r\n        rowStyle, labelStyle\r\n      } = useRowStyle({ isShowLabels })\r\n\r\n    return (\r\n        <div>\r\n          <div style={rowStyle}>\r\n            <span style={labelStyle}>\r\n               {fromCaption}\r\n            </span>\r\n            <DateField\r\n               ref={this._refFromDate}\r\n               rootStyle={dateStyle}\r\n               placeholder={placeholder}\r\n               initValue={initFromDate}\r\n               errorMsg={errMsg}\r\n               onTest={onTestDate}\r\n               onEnter={onEnter}\r\n            />\r\n         </div>\r\n         <div style={rowStyle}>\r\n            <span style={labelStyle}>\r\n              {toCaption}\r\n            </span>\r\n            <DateField\r\n               ref={this._refToDate}\r\n               rootStyle={dateStyle}\r\n               placeholder={placeholder}\r\n               initValue={initToDate}\r\n               nForecastDate={nForecastDate}\r\n               errorMsg={errMsg}\r\n               onTest={onTestDate}\r\n               onEnter={onEnter}\r\n            />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n\r\n  getValues() {\r\n    return {\r\n      fromDate: this.fromDate.getValue(),\r\n      toDate: this.toDate.getValue()\r\n    }\r\n  }\r\n\r\n  getValidation() {\r\n    const {\r\n      fromDate,\r\n      toDate\r\n    } = this\r\n    , {\r\n      msgOnNotValidFormat,\r\n      isPeriodValid\r\n    } = this.props\r\n    , datesMsg = [];\r\n\r\n    if (!fromDate.isValid()) { datesMsg.push(msgOnNotValidFormat('From Date')); }\r\n    if (!toDate.isValid())   { datesMsg.push(msgOnNotValidFormat('To Date')); }\r\n\r\n    if (datesMsg.length === 0 && !isPeriodValid(\r\n          fromDate.getValue().trim(),\r\n          toDate.getValue().trim()\r\n        )) {\r\n      datesMsg.push(NEAR_ERR_MSG);\r\n    }\r\n\r\n    if (datesMsg.length>0){\r\n      return { isValid: false, datesMsg };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  focusInput() {\r\n    this.fromDate.focusInput();\r\n  }\r\n\r\n  focusNotValidInput() {\r\n    if (!this.fromDate.isValid()){\r\n      this.fromDate.focusInput();\r\n      return true;\r\n    }\r\n    if (!this.toDate.isValid()){\r\n      this.toDate.focusInput();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  setFromTo(fromStr, toStr){\r\n    this._setFromDate(fromStr)\r\n    this._setToDate(toStr)\r\n  }\r\n\r\n  _setFromDate(dateStr) {\r\n    if (this.fromDate){\r\n      this.fromDate.setValue(dateStr)\r\n    }\r\n  }\r\n  _setToDate(dateStr) {\r\n    if (this.toDate){\r\n      this.toDate.setValue(dateStr)\r\n    }\r\n  }\r\n}\r\n\r\nexport default DatesFragment\r\n"],"file":"DatesFragment.js"}