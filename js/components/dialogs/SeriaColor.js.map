{"version":3,"sources":["../../../src/components/dialogs/SeriaColor.jsx"],"names":["C_TRANSPARENT","N_SHORT","COLORS1","COLORS2","S","ROOT","paddingTop","paddingBottom","ROW2","ROW2_PADDING","paddingLeft","BT_COUNTER","marginLeft","marginRight","TO_CELL","CELL","position","display","height","width","borderRadius","verticalAlign","boxShadow","_initColor","props","initColor","_hasLineWidth","chartType","value","SeriaColor","_hReset","setState","color","_hClick","_renderColors","colors","isLong","_max","length","map","c","i","filter","Boolean","_refLineWidth","React","createRef","state","componentDidMount","onReg","render","_isLineWidth","_rowStyle","getConf","seriaColor","seriaWidth","current","getValue","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport CellColor from '../zhn-moleculs/CellColor'\r\nimport BtCounter from './BtCounter'\r\n\r\nconst C_TRANSPARENT = \"transparent\";\r\nconst N_SHORT = 5;\r\n\r\nconst COLORS1 = [\r\n  '#8abb5d','#f7a35c','#795548','#f15c80','#f45b5b',\r\n  '#d2b772', '#dda0dd','#fffafa'\r\n];\r\nconst COLORS2 = [\r\n  '#f1d600','#008b8b','#2f7ed8','#673ab7','#000000',\r\n  '#607d8b','#7092be','#c3c3c3'\r\n];\r\n\r\nconst S = {\r\n  ROOT: {\r\n    paddingTop: 6,\r\n    paddingBottom: 4\r\n  },\r\n  ROW2: {\r\n    paddingTop: 4\r\n  },\r\n  ROW2_PADDING: {\r\n    paddingLeft: 56,\r\n  },\r\n  BT_COUNTER: {\r\n    marginLeft: 14,\r\n    marginRight: 16\r\n  },\r\n  TO_CELL: {\r\n    marginLeft: 12,\r\n    marginRight: 12,\r\n  },\r\n  CELL: {\r\n  marginRight: 4,\r\n  position: 'relative',\r\n  display: 'inline-block',\r\n  height: 32,\r\n  width: 32,\r\n  borderRadius: 2,\r\n  verticalAlign: 'bottom',\r\n  boxShadow: '0 2px 2px 0 rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.1)'\r\n  }\r\n};\r\n\r\nconst _initColor = (props) => props.initColor || C_TRANSPARENT;\r\nconst _hasLineWidth = (chartType) => {\r\n  const { value } = chartType || {};\r\n  if (!value\r\n    || value === 'SPLINE'\r\n    || value === 'LINE'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nclass SeriaColor extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this._refLineWidth = React.createRef()\r\n    this.state = {\r\n      color: _initColor(props)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { onReg } = this.props;\r\n    if (typeof onReg === 'function'){\r\n      onReg(this)\r\n    }\r\n  }\r\n\r\n  _hReset = () => {\r\n    this.setState({\r\n      color: _initColor(this.props)\r\n    })\r\n  }\r\n\r\n  _hClick = (color) => {\r\n     if (color) {\r\n       this.setState({ color })\r\n     }\r\n  }\r\n\r\n  _renderColors = (colors, isLong) => {\r\n    const _max = isLong ? colors.length : N_SHORT;\r\n    return colors.map((c, i) => {\r\n      return i < _max ? (\r\n        <CellColor\r\n          key={c}\r\n          color={c}\r\n          style={S.CELL}\r\n          onClick={this._hClick}\r\n        />\r\n      ) : null ;\r\n    }).filter(Boolean);\r\n  }\r\n\r\n  render(){\r\n    const { isLong, chartType } = this.props\r\n    , { color } = this.state\r\n    , _isLineWidth = _hasLineWidth(chartType)\r\n    , _rowStyle = _isLineWidth\r\n         ? S.ROW2\r\n         : {...S.ROW2, ...S.ROW2_PADDING };\r\n    return (\r\n      <div style={S.ROOT}>\r\n        <div>\r\n          <CellColor\r\n            color={color}\r\n            style={{ ...S.CELL, ...S.TO_CELL }}\r\n            onClick={this._hReset}\r\n          />\r\n          {this._renderColors(COLORS1, isLong)}\r\n        </div>\r\n        <div style={_rowStyle}>\r\n           <BtCounter\r\n              ref={this._refLineWidth}\r\n              isShow={_isLineWidth}\r\n              style={S.BT_COUNTER}\r\n              title=\"Line Width\"\r\n            />\r\n          {this._renderColors(COLORS2, isLong)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  getConf(){\r\n    const { chartType } = this.props\r\n    , { color } = this.state;\r\n    return {\r\n      seriaColor: color !== C_TRANSPARENT\r\n         ? color\r\n         : void 0,\r\n      seriaWidth: _hasLineWidth(chartType)\r\n        ? this._refLineWidth.current?.getValue()\r\n        : void 0\r\n    };\r\n  }\r\n}\r\n\r\nexport default SeriaColor\r\n"],"file":"SeriaColor.js"}