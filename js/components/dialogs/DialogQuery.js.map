{"version":3,"sources":["../../../src/components/dialogs/DialogQuery.jsx"],"names":["ERR_MSG","_testId","value","split","length","DialogQuery","Decor","withToolbar","withLoad","props","_handleLoad","_idInput","isValid","onLoad","loadFn","one","getValue","caption","_refIdInput","c","_refDates","datesFragment","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","noDate","toolbarButtons","_createType2WithToolbar","_commandButtons","_crCommandsWithLoad","state","isToolbar","isShowLabels","isShowDate","shouldComponentUpdate","nextProps","nextState","isShow","render","onShow","onFront","onClose","oneCaption","onePlaceholder","initFromDate","initToDate","msgOnNotValidFormat","onTestDate","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport D from './DialogCell'\r\nimport crMenuMore from './MenuMore'\r\nimport Decor from './decorators/Decorators'\r\n\r\nconst ERR_MSG = 'Empty or Id format is not valid';\r\n\r\nconst _testId = (value) => {\r\n  if (typeof value !== 'string' || !value ) {\r\n    return false;\r\n  } else if ( value.split('/').length !== 3 ){\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n@Decor.withToolbar\r\n@Decor.withLoad\r\nclass DialogQuery extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n    const { noDate } = props;\r\n    this.toolbarButtons = this._createType2WithToolbar(\r\n       props, { noDate }\r\n    )\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n\r\n    this.state = {\r\n       isToolbar: true,\r\n       isShowLabels: true,\r\n       isShowDate: true,\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    if (this._idInput && this._idInput.isValid()) {\r\n      const { onLoad, loadFn } = this.props;\r\n      onLoad(loadFn(this.props, {\r\n        one: {\r\n          value: this._idInput.getValue(),\r\n          caption: \"seriaId\"\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  _refIdInput = c => this._idInput = c\r\n  _refDates = c => this.datesFragment = c\r\n\r\n  render(){\r\n    const { caption, isShow,\r\n            onShow, onFront, onClose,\r\n            oneCaption, onePlaceholder,\r\n            noDate, initFromDate, initToDate,\r\n            msgOnNotValidFormat, onTestDate\r\n          } = this.props\r\n        , { isToolbar,\r\n            isShowLabels, isShowDate,\r\n          } = this.state;\r\n    return (\r\n      <D.DraggableDialog\r\n          isShow={isShow}\r\n          menuModel={this._menuMore}\r\n          caption={caption}\r\n          commandButtons={this._commandButtons}\r\n          onShowChart={onShow}\r\n          onFront={onFront}\r\n          onClose={onClose}\r\n      >\r\n        <D.Toolbar\r\n          isShow={isToolbar}\r\n          buttons={this.toolbarButtons}\r\n        />\r\n        <D.RowPattern\r\n          ref={this._refIdInput}\r\n          isShow={isShow}\r\n          isShowLabels={isShowLabels}\r\n          placeholder={onePlaceholder}\r\n          caption={oneCaption}\r\n          onTest={_testId}\r\n          errorMsg={ERR_MSG}\r\n        />\r\n        {\r\n          !noDate &&\r\n          <D.ShowHide isShow={isShowDate}>\r\n            <D.DatesFragment\r\n               ref={this._refDates}\r\n               isShowLabels={isShowLabels}\r\n               initFromDate={initFromDate}\r\n               initToDate={initToDate}\r\n               msgOnNotValidFormat={msgOnNotValidFormat}\r\n               onTestDate={onTestDate}\r\n            />\r\n          </D.ShowHide>\r\n        }\r\n     </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogQuery\r\n"],"file":"DialogQuery.js"}