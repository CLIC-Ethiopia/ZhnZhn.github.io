{"version":3,"sources":["../../../src/components/dialogs/DialogType3.jsx"],"names":["DialogType3","props","state","validationMessages","_handleClickInfo","descrUrl","onClickInfo","_handleSelectStock","stock","_handleLoad","event","target","focus","_handleWithValidationLoad","_createValidationMessages","_createLoadOption","itemCaption","msg","push","msgOnNotSelected","datesFragment","getValidation","isValid","datesMsg","concat","length","getValues","fromDate","toDate","_handleClose","_handleWithValidationClose","onClose","undefined","toolbarButtons","caption","onClick","nextProps","nextState","isShow","onShow","optionURI","optionsJsonProp","optionNames","initFromDate","initToDate","msgOnNotValidFormat","onTestDate","_commandButtons","c","displayName"],"mappings":"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","file":"DialogType3.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport createLoadOptions from '../../flux/creaters/type3';\r\n\r\nimport DraggableDialog from '../zhn-moleculs/DraggableDialog';\r\nimport ToolbarButtonCircle from './ToolbarButtonCircle';\r\nimport SelectWithLoad from './SelectWithLoad';\r\nimport ActionButton from '../zhn/ActionButton';\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment';\r\nimport ValidationMessages from '../zhn/ValidationMessages';\r\n\r\nimport withValidationLoad from './decorators/withValidationLoad';\r\n\r\n@withValidationLoad\r\nclass DialogType3 extends Component {\r\n\r\n  state = {\r\n    validationMessages: []\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.stock = undefined;\r\n    this.toolbarButtons = (props.descrUrl)\r\n         ?  [{ caption: 'I', onClick: this._handleClickInfo }]\r\n         : [];\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _handleClickInfo = () => {\r\n    const {descrUrl, onClickInfo} = this.props;\r\n    onClickInfo({ descrUrl });\r\n  }\r\n\r\n  _handleSelectStock = (stock) => {\r\n    this.stock = stock;\r\n  }\r\n\r\n  _handleLoad = (event) => {\r\n    event.target.focus();\r\n    this._handleWithValidationLoad(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    );\r\n  }\r\n  _createValidationMessages = () => {\r\n    const { itemCaption='Stock' } = this.props;\r\n    let msg = [];\r\n    if (!this.stock) { msg.push(this.props.msgOnNotSelected(itemCaption));}\r\n    const {isValid, datesMsg} = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg); }\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  }\r\n  _createLoadOption = () => {\r\n    const { fromDate, toDate } = this.datesFragment.getValues()\r\n    return createLoadOptions(\r\n        this.props,\r\n        { stock : this.stock, fromDate, toDate }\r\n    );\r\n  }\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose(this._createValidationMessages);\r\n    this.props.onClose();\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            caption, isShow, onShow,\r\n            optionURI, optionsJsonProp,\r\n            itemCaption='Stock:', optionNames='Stocks',\r\n            initFromDate, initToDate, msgOnNotValidFormat, onTestDate\r\n          } = this.props\r\n        , { validationMessages } = this.state\r\n        , _commandButtons = [\r\n       <ActionButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Load\"\r\n          onClick={this._handleLoad}\r\n       />\r\n    ];\r\n\r\n    return (\r\n       <DraggableDialog\r\n           caption={caption}\r\n           isShow={isShow}\r\n           commandButtons={_commandButtons}\r\n           onShowChart={onShow}\r\n           onClose={this._handleClose}\r\n       >\r\n         <ToolbarButtonCircle\r\n           buttons={this.toolbarButtons}\r\n         />\r\n         <SelectWithLoad\r\n           isShow={isShow}\r\n           uri={optionURI}\r\n           jsonProp={optionsJsonProp}\r\n           caption={itemCaption}\r\n           optionNames={optionNames}\r\n           onSelect={this._handleSelectStock}\r\n         />\r\n\r\n         <DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            msgOnNotValidFormat={msgOnNotValidFormat}\r\n            onTestDate={onTestDate}\r\n         />\r\n         <ValidationMessages\r\n            validationMessages={validationMessages}\r\n         />\r\n      </DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nDialogType3.displayName = 'DialogType3';\r\n\r\nexport default DialogType3;\r\n"]}