{"version":3,"sources":["../../../src/components/dialogs/UsStocksBySectorDialog.jsx"],"names":["STYLE","CAPTION_SPAN","display","maxWidth","sourceOptions","caption","UsStocksBySectorDialog","props","dataSource","undefined","data","fromDate","initToDate","onTestDate","_initFromDate","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","_commandButtons","_handleLoad","onShow","state","initFromDate","validationMessages","nextProps","nextState","isShow","item","text","_handleClose","_handleSelectDataSource","datesFragment","c","defaultProps","_getValidationMessages","isValid","onClose","chartContainerType","browserType","id","getValues","toDate","_dataSource","value","_value","option","title","loadId","WL","columnName","seriaColumnNames","loadStock","chartType","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","setState"],"mappings":"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","file":"UsStocksBySectorDialog.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport { LoadType } from '../../constants/Type';\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog';\r\nimport D from './DialogCell'\r\n\r\nimport withValidationLoad from './decorators/withValidationLoad';\r\n\r\nconst STYLE = {\r\n  CAPTION_SPAN : {\r\n    display: 'inline-block',\r\n    maxWidth: '295px'\r\n  }\r\n};\r\n\r\nconst sourceOptions = [\r\n  { caption: \"WIKI\" , \"value\" : \"WIKI/\" }\r\n]\r\n\r\n@withValidationLoad\r\nclass UsStocksBySectorDialog extends Component {\r\n  /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool.isRequired,\r\n     data: PropTypes.object.isRequired,\r\n     store: PropTypes.object,\r\n     onClose: PropTypes.func.isRequired\r\n   }\r\n   */\r\n   static defaultProps = {\r\n     data: {}\r\n   }\r\n\r\n   constructor(props){\r\n     super();\r\n     this.dataSource = undefined;\r\n\r\n     const { fromDate, initToDate, onTestDate } = props.data\r\n         , _initFromDate = (fromDate) ? fromDate : DateUtils.getFromDate(2)\r\n         , _initToDate = (initToDate) ? initToDate : DateUtils.getToDate()\r\n         , _onTestDate = (onTestDate) ? onTestDate : DateUtils.isValidDate;\r\n\r\n     this._commandButtons = [\r\n       <D.Button.Load onClick={this._handleLoad} />,\r\n       <D.Button.Show onClick={props.data.onShow} />\r\n     ]\r\n     this.state = {\r\n       initFromDate : _initFromDate,\r\n       initToDate : _initToDate,\r\n       onTestDate : _onTestDate,\r\n       validationMessages : []\r\n     }\r\n\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n   _handleSelectDataSource = (dataSource) => {\r\n     this.dataSource = dataSource\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { item={}, chartContainerType, browserType } = data\r\n          , { id, text } = item\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , _dataSource = (this.dataSource)\r\n                  ? this.dataSource.value\r\n                  : 'WIKI/'\r\n          , _value = `${_dataSource}${id}`\r\n          , option = {\r\n             title : text,\r\n             value : _value,\r\n             item: _value,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id : _value,\r\n             columnName : 'Close',\r\n             seriaColumnNames : [ 'Open', 'High', 'Low', 'Volume', 'Adjusted Close', 'Adj. Close' ],\r\n             dataSource : `(Code: ${_dataSource})`\r\n           };\r\n\r\n      ChartActions.loadStock(\r\n        { chartType: chartContainerType, browserType },\r\n        option\r\n      )\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _getValidationMessages = () => {\r\n    let   msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    if (this.state.validationMessages.length > 0){\r\n      this.setState({ validationMessages : this._getValidationMessages() })\r\n    }\r\n    this.props.onClose()\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data={} } = this.props\r\n        , { item={} } = data\r\n        , { text } = item\r\n        , {\r\n            initFromDate, initToDate,\r\n            onTestDate, validationMessages\r\n          } = this.state;\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption={text}\r\n         styleCaption={STYLE.CAPTION_SPAN}\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <D.RowInputSelect\r\n           caption=\"Source\"\r\n           placeholder=\"Default: WIKI\"\r\n           options={sourceOptions}\r\n           onSelect={this._handleSelectDataSource}\r\n        />\r\n        <D.DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <D.ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsStocksBySectorDialog\r\n"]}