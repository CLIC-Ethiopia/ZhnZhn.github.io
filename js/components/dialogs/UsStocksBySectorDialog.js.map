{"version":3,"sources":["../../../src/components/dialogs/UsStocksBySectorDialog.jsx"],"names":["STYLE","CAPTION_SPAN","display","maxWidth","sourceOptions","caption","UsStocksBySectorDialog","props","dataSource","undefined","data","fromDate","initToDate","onTestDate","_initFromDate","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","state","initFromDate","validationMessages","nextProps","nextState","isShow","item","onShow","text","_commandButtons","_handleLoad","_handleClose","_handleSelectDataSource","datesFragment","c","_getValidationMessages","isValid","onClose","chartContainerType","browserType","id","getValues","toDate","_dataSource","value","_value","option","title","stock","loadId","WL","columnName","seriaColumnNames","loadStock","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","setState","propTypes","bool","isRequired","object","store","func","defaultProps","displaName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,QAAQ;AACZC,gBAAe;AACbC,aAAS,cADI;AAEbC,cAAU;AAFG;AADH,CAAd;;AAOA,IAAMC,gBAAgB,CACpB,EAAEC,SAAS,OAAX,EAAqB,SAAU,QAA/B,EADoB,EAEpB,EAAEA,SAAS,MAAX,EAAoB,SAAU,OAA9B,EAFoB,EAGpB,EAAEA,SAAS,WAAX,EAAyB,SAAU,YAAnC,EAHoB,EAIpB,EAAEA,SAAS,aAAX,EAA2B,SAAU,cAArC,EAJoB,CAAtB;;IASMC,sB;;;AAEH,kCAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA;;AAEhB,UAAKC,UAAL,GAAkBC,SAAlB;;AAFgB,sBAI6BF,MAAMG,IAJnC;AAAA,QAIRC,QAJQ,eAIRA,QAJQ;AAAA,QAIEC,UAJF,eAIEA,UAJF;AAAA,QAIcC,UAJd,eAIcA,UAJd;AAAA,QAKVC,aALU,GAKOH,QAAD,GAAaA,QAAb,GAAwB,oBAAUI,WAAV,CAAsB,CAAtB,CAL9B;AAAA,QAMVC,WANU,GAMKJ,UAAD,GAAeA,UAAf,GAA4B,oBAAUK,SAAV,EANhC;AAAA,QAOVC,WAPU,GAOKL,UAAD,GAAeA,UAAf,GAA4B,oBAAUM,WAP1C;;AAShB,UAAKC,KAAL,GAAa;AACXC,oBAAeP,aADJ;AAEXF,kBAAaI,WAFF;AAGXH,kBAAaK,WAHF;AAIXI,0BAAqB;AAJV,KAAb;;AATgB;AAgBjB;;;;0CAEqBC,S,EAAWC,S,EAAU;AACzC,UAAID,cAAc,KAAKhB,KAAnB,IAA4BgB,UAAUE,MAAV,KAAqB,KAAKlB,KAAL,CAAWkB,MAAhE,EAAwE;AACtE,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;6BAmDM;AAAA;;AAAA,mBACsB,KAAKlB,KAD3B;AAAA,UACEkB,MADF,UACEA,MADF;AAAA,gCACUf,IADV;AAAA,UACUA,IADV,gCACe,EADf;AAAA,uBAEsBA,IAFtB,CAEEgB,IAFF;AAAA,UAEEA,IAFF,8BAEO,EAFP;AAAA,UAEWC,MAFX,GAEsBjB,IAFtB,CAEWiB,MAFX;AAAA,UAGEC,IAHF,GAGWF,IAHX,CAGEE,IAHF;AAAA,mBAI+D,KAAKR,KAJpE;AAAA,UAIEC,YAJF,UAIEA,YAJF;AAAA,UAIgBT,UAJhB,UAIgBA,UAJhB;AAAA,UAI4BC,UAJ5B,UAI4BA,UAJ5B;AAAA,UAIwCS,kBAJxC,UAIwCA,kBAJxC;AAAA,UAKAO,eALA,GAKkB,CACrB;AACG,aAAI,GADP;AAEG,cAAK,OAFR;AAGG,iBAAQ,MAHX;AAIG,iBAAS,KAAKC;AAJjB,QADqB,EAOrB;AACG,aAAI,GADP;AAEG,cAAK,OAFR;AAGG,iBAAQ,MAHX;AAIG,iBAASH;AAJZ,QAPqB,CALlB;;;AAoBN,aACE;AAAA;AAAA;AACG,mBAASC,IADZ;AAEG,wBAAc5B,MAAMC,YAFvB;AAGG,kBAAQwB,MAHX;AAIG,0BAAgBI,eAJnB;AAKG,mBAAS,KAAKE;AALjB;AAOE;AACG,mBAAQ,aADX;AAEG,uBAAY,gBAFf;AAGG,mBAAS3B,aAHZ;AAIG,oBAAU,KAAK4B;AAJlB,UAPF;AAaE;AACI,eAAK;AAAA,mBAAK,OAAKC,aAAL,GAAqBC,CAA1B;AAAA,WADT;AAEI,wBAAcb,YAFlB;AAGI,sBAAYT,UAHhB;AAII,sBAAYC;AAJhB,UAbF;AAmBE;AACI,8BAAoBS;AADxB;AAnBF,OADF;AAyBD;;;;;;OA9FAU,uB,GAA0B,UAACxB,UAAD,EAAgB;AACxC,WAAKA,UAAL,GAAkBA,UAAlB;AACD,G;;OAEFsB,W,GAAc,YAAM;AAClB,QAAMR,qBAAqB,OAAKa,sBAAL,EAA3B;AACA,QAAIb,mBAAmBc,OAAvB,EAA+B;AAAA,oBACH,OAAK7B,KADF;AAAA,UACrBG,IADqB,WACrBA,IADqB;AAAA,UACf2B,OADe,WACfA,OADe;AAAA,wBAEwB3B,IAFxB,CAErBgB,IAFqB;AAAA,UAErBA,IAFqB,+BAEhB,EAFgB;AAAA,UAEZY,kBAFY,GAEwB5B,IAFxB,CAEZ4B,kBAFY;AAAA,UAEQC,WAFR,GAEwB7B,IAFxB,CAEQ6B,WAFR;AAAA,UAGrBC,EAHqB,GAGRd,IAHQ,CAGrBc,EAHqB;AAAA,UAGjBZ,IAHiB,GAGRF,IAHQ,CAGjBE,IAHiB;AAAA,kCAIA,OAAKK,aAAL,CAAmBQ,SAAnB,EAJA;AAAA,UAIrB9B,QAJqB,yBAIrBA,QAJqB;AAAA,UAIX+B,MAJW,yBAIXA,MAJW;AAAA,UAKvBC,WALuB,GAKR,OAAKnC,UAAN,GACN,OAAKA,UAAL,CAAgBoC,KADV,GAEN,QAPe;AAAA,UAQvBC,MARuB,QAQXF,WARW,GAQGH,EARH;AAAA,UASvBM,MATuB,GASd;AACRC,eAAQnB,IADA;AAER;AACAgB,eAAQC,MAHA;AAIRG,eAAOH,MAJC;AAKRlC,kBAAUA,QALF;AAMR+B,gBAAQA,MANA;AAORO,gBAAS,eAASC,EAPV;AAQRV,YAAKK,MARG;AASRM,oBAAa,OATL;AAURC,0BAAmB,CAAE,MAAF,EAAU,MAAV,EAAkB,KAAlB,EAAyB,QAAzB,EAAmC,gBAAnC,EAAqD,YAArD;AAVX,OATc;;AAsB7B,6BAAaC,SAAb,CAAuBf,kBAAvB,EAA2CC,WAA3C,EAAwDO,MAAxD;AACAT;AACD;AACD,WAAKiB,yBAAL,CAA+BhC,kBAA/B;AACD,G;;OAEDa,sB,GAAyB,YAAM;AAC7B,QAAMoB,MAAM,EAAZ;;AAD6B,iCAEC,OAAKtB,aAAL,CAAmBuB,aAAnB,EAFD;AAAA,QAErBpB,OAFqB,0BAErBA,OAFqB;AAAA,QAEZqB,QAFY,0BAEZA,QAFY;;AAG7B,QAAI,CAACrB,OAAL,EAAc;AAAEmB,YAAMA,IAAIG,MAAJ,CAAWD,QAAX,CAAN;AAA6B;AAC7CF,QAAInB,OAAJ,GAAemB,IAAII,MAAJ,KAAe,CAAhB,GAAqB,IAArB,GAA4B,KAA1C;AACA,WAAOJ,GAAP;AACD,G;;OAEDxB,Y,GAAe,YAAM;AACnB,QAAI,OAAKX,KAAL,CAAWE,kBAAX,CAA8BqC,MAA9B,GAAuC,CAA3C,EAA6C;AAC3C,aAAKC,QAAL,CAAc,EAACtC,oBAAqB,OAAKa,sBAAL,EAAtB,EAAd;AACD;AACD,WAAK5B,KAAL,CAAW8B,OAAX;AACD,G;;;AAkDH,+DAAuBwB,SAAvB,GAAmC;AACjCpC,UAAU,iBAAUqC,IAAV,CAAeC,UADQ;AAEjCrD,QAAU,iBAAUsD,MAAV,CAAiBD,UAFM;AAGjCE,SAAU,iBAAUD,MAHa;AAIjC3B,WAAU,iBAAU6B,IAAV,CAAeH;AAJQ,CAAnC;AAMAzD,uBAAuB6D,YAAvB,GAAsC;AACpCzD,QAAO;AAD6B,CAAtC;AAGAJ,uBAAuB8D,UAAvB,GAAoC,wBAApC;;kBAEe9D,sB","file":"UsStocksBySectorDialog.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport { LoadType } from '../../constants/Type';\r\n\r\nimport ModalDialog from '../zhn/ModalDialog';\r\nimport ActionButton from '../zhn/ActionButton';\r\nimport RowInputSelect from './RowInputSelect';\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment';\r\nimport ValidationMessages from '../zhn/ValidationMessages';\r\n\r\nimport withValidationLoad from './decorators/withValidationLoad';\r\n\r\nconst STYLE = {\r\n  CAPTION_SPAN : {\r\n    display: 'inline-block',\r\n    maxWidth: '295px'\r\n  }\r\n};\r\n\r\nconst sourceOptions = [\r\n  { caption: \"YAHOO\" , \"value\" : \"YAHOO/\" },\r\n  { caption: \"WIKI\" , \"value\" : \"WIKI/\" },\r\n  { caption: \"GOOG/NYSE\" , \"value\" : \"GOOG/NYSE_\" },\r\n  { caption: \"GOOG/NASDAQ\" , \"value\" : \"GOOG/NASDAQ_\" }\r\n]\r\n\r\n\r\n@withValidationLoad\r\nclass UsStocksBySectorDialog extends Component {\r\n\r\n   constructor(props){\r\n     super();\r\n     this.dataSource = undefined;\r\n\r\n     const { fromDate, initToDate, onTestDate } = props.data\r\n         , _initFromDate = (fromDate) ? fromDate : DateUtils.getFromDate(2)\r\n         , _initToDate = (initToDate) ? initToDate : DateUtils.getToDate()\r\n         , _onTestDate = (onTestDate) ? onTestDate : DateUtils.isValidDate;\r\n\r\n     this.state = {\r\n       initFromDate : _initFromDate,\r\n       initToDate : _initToDate,\r\n       onTestDate : _onTestDate,\r\n       validationMessages : []\r\n     }\r\n\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n   _handleSelectDataSource = (dataSource) => {\r\n     this.dataSource = dataSource\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { item={}, chartContainerType, browserType } = data\r\n          , { id, text } = item\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , _dataSource = (this.dataSource)\r\n                  ? this.dataSource.value\r\n                  : 'YAHOO/'\r\n          , _value = `${_dataSource}${id}`\r\n          , option = {\r\n             title : text,\r\n             //subtitle : subtitle,\r\n             value : _value,\r\n             stock: _value,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id : _value,\r\n             columnName : 'Close',\r\n             seriaColumnNames : [ 'Open', 'High', 'Low', 'Volume', 'Adjusted Close', 'Adj. Close' ]\r\n          }\r\n\r\n      ChartActions.loadStock(chartContainerType, browserType, option);\r\n      onClose();\r\n    }\r\n    this._updateValidationMessages(validationMessages);\r\n  }\r\n\r\n  _getValidationMessages = () => {\r\n    let   msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg); }\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    if (this.state.validationMessages.length > 0){\r\n      this.setState({validationMessages : this._getValidationMessages()});\r\n    }\r\n    this.props.onClose();\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data={} } = this.props\r\n        , { item={}, onShow } = data\r\n        , { text } = item\r\n        , { initFromDate, initToDate, onTestDate, validationMessages } = this.state\r\n        , _commandButtons = [\r\n       <ActionButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Load\"\r\n          onClick={this._handleLoad}\r\n       />,\r\n       <ActionButton\r\n          key=\"b\"\r\n          type=\"TypeC\"\r\n          caption=\"Show\"\r\n          onClick={onShow}\r\n       />\r\n    ];\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption={text}\r\n         styleCaption={STYLE.CAPTION_SPAN}\r\n         isShow={isShow}\r\n         commandButtons={_commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <RowInputSelect\r\n           caption=\"Data Source\"\r\n           placeholder=\"Default: YAHOO\"\r\n           options={sourceOptions}\r\n           onSelect={this._handleSelectDataSource}\r\n        />\r\n        <DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    )\r\n  }\r\n}\r\n\r\nUsStocksBySectorDialog.propTypes = {\r\n  isShow  : PropTypes.bool.isRequired,\r\n  data    : PropTypes.object.isRequired,\r\n  store   : PropTypes.object,\r\n  onClose : PropTypes.func.isRequired\r\n};\r\nUsStocksBySectorDialog.defaultProps = {\r\n  data : {}\r\n};\r\nUsStocksBySectorDialog.displaName = 'UsStocksBySectorDialog';\r\n\r\nexport default UsStocksBySectorDialog\r\n"]}