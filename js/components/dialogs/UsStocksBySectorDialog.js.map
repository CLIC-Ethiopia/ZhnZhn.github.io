{"version":3,"sources":["../../../src/components/dialogs/UsStocksBySectorDialog.jsx"],"names":["getFromDate","DateUtils","getToDate","isYmd","STYLE","CAPTION_SPAN","display","maxWidth","sourceOptions","caption","UsStocksBySectorDialog","withValidationLoad","props","_handleSelectDataSource","dataSource","_handleLoad","validationMessages","_getValidationMessages","isValid","data","onClose","item","chartContainerType","browserType","id","text","datesFragment","getValues","fromDate","toDate","_dataSource","value","_value","option","title","loadId","LoadType","WL","columnName","seriaColumnNames","ChartActions","loadStock","chartType","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","_handleClose","state","setState","undefined","initToDate","onTestDate","_commandButtons","onShow","initFromDate","shouldComponentUpdate","nextProps","nextState","isShow","render","c","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport { LoadType } from '../../constants/Type';\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog';\r\nimport D from './DialogCell'\r\n\r\nimport withValidationLoad from './decorators/withValidationLoad';\r\n\r\nconst {\r\n  getFromDate,\r\n  getToDate,\r\n  isYmd\r\n} = DateUtils;\r\n\r\nconst STYLE = {\r\n  CAPTION_SPAN : {\r\n    display: 'inline-block',\r\n    maxWidth: '295px'\r\n  }\r\n};\r\n\r\nconst sourceOptions = [\r\n  { caption: \"WIKI\" , \"value\" : \"WIKI/\" }\r\n]\r\n\r\n@withValidationLoad\r\nclass UsStocksBySectorDialog extends Component {\r\n  /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool.isRequired,\r\n     data: PropTypes.object.isRequired,\r\n     store: PropTypes.object,\r\n     onClose: PropTypes.func.isRequired\r\n   }\r\n   */\r\n   static defaultProps = {\r\n     data: {}\r\n   }\r\n\r\n   constructor(props){\r\n     super();\r\n     this.dataSource = undefined;\r\n\r\n     const {\r\n       fromDate,\r\n       initToDate,\r\n       onTestDate\r\n     } = props.data;\r\n\r\n     this._commandButtons = [\r\n       <D.Button.Load\r\n         key=\"load\"\r\n         onClick={this._handleLoad}\r\n       />,\r\n       <D.Button.Show\r\n         key=\"show\"\r\n         onClick={props.data.onShow}\r\n       />\r\n     ]\r\n     \r\n     this.state = {\r\n       initFromDate: fromDate || getFromDate(2),\r\n       initToDate: initToDate || getToDate(),\r\n       onTestDate: onTestDate || isYmd,\r\n       validationMessages: []\r\n     }\r\n\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n   _handleSelectDataSource = (dataSource) => {\r\n     this.dataSource = dataSource\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { item={}, chartContainerType, browserType } = data\r\n          , { id, text } = item\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , _dataSource = (this.dataSource)\r\n                  ? this.dataSource.value\r\n                  : 'WIKI/'\r\n          , _value = `${_dataSource}${id}`\r\n          , option = {\r\n             title : text,\r\n             value : _value,\r\n             item: _value,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id : _value,\r\n             columnName : 'Close',\r\n             seriaColumnNames : [ 'Open', 'High', 'Low', 'Volume', 'Adjusted Close', 'Adj. Close' ],\r\n             dataSource : `(Code: ${_dataSource})`\r\n           };\r\n\r\n      ChartActions.loadStock(\r\n        { chartType: chartContainerType, browserType },\r\n        option\r\n      )\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _getValidationMessages = () => {\r\n    let   msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    if (this.state.validationMessages.length > 0){\r\n      this.setState({ validationMessages : this._getValidationMessages() })\r\n    }\r\n    this.props.onClose()\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data={} } = this.props\r\n        , { item={} } = data\r\n        , { text } = item\r\n        , {\r\n            initFromDate, initToDate,\r\n            onTestDate, validationMessages\r\n          } = this.state;\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption={text}\r\n         styleCaption={STYLE.CAPTION_SPAN}\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <D.RowInputSelect\r\n           caption=\"Source\"\r\n           placeholder=\"Default: WIKI\"\r\n           options={sourceOptions}\r\n           onSelect={this._handleSelectDataSource}\r\n        />\r\n        <D.DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <D.ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsStocksBySectorDialog\r\n"],"file":"UsStocksBySectorDialog.js"}