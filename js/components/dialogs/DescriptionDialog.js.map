{"version":3,"sources":["../../../src/components/dialogs/DescriptionDialog.jsx"],"names":["DESCR_EMPTY","S","DIALOG","top","left","width","marginLeft","maxWidth","DIV","padding","Description","_html","__html","_isNewShow","prevProps","props","isShow","_isUpdateDescr","state","isLoadFailed","data","descrUrl","DescriptionDialog","isLoading","errMsg","descrHtml","_loadDescr","setState","uri","onFetch","_setDescrHtml","onCatch","_onFailed","json","text","error","message","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","render","onClose","DOMPurify","sanitize","_el","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport DOMPurify from 'dompurify';\r\n\r\nimport { fetchTxt } from '../../utils/fnFetch';\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog';\r\nimport Load from '../zhn/Load';\r\n\r\nconst DESCR_EMPTY = '<p class=\"descr__part\">Description Empty for this Datasource</p>';\r\nconst S = {\r\n  DIALOG: {\r\n    top: 54,\r\n    left: 20,\r\n    width: 'auto',\r\n    marginLeft: 0,\r\n    maxWidth: '89%'\r\n  },\r\n  DIV: {\r\n    padding: 16\r\n  }\r\n};\r\n\r\nconst Description = ({ _html }) => (\r\n <div\r\n    style={S.DIV}\r\n    dangerouslySetInnerHTML={{ __html: _html }}\r\n  />\r\n);\r\n\r\nconst _isNewShow = (prevProps, props ) => prevProps !== props\r\n && prevProps.isShow !== props.isShow;\r\n\r\nconst _isUpdateDescr = (\r\n  prevProps, props, state\r\n) => {\r\n  if (_isNewShow(prevProps, props)\r\n      && props.isShow\r\n      && state.isLoadFailed) {\r\n    return true;\r\n  }\r\n  return _isNewShow(prevProps, props)\r\n    && prevProps.data.descrUrl !== props.data.descrUrl;\r\n};\r\n\r\nclass DescriptionDialog extends Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  state = {\r\n    isLoading: false,\r\n    isLoadFailed: false,\r\n    errMsg: '',\r\n    descrHtml: '',\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (nextProps !== this.props\r\n      && nextProps.isShow === this.props.isShow) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this._loadDescr(this.props.data.descrUrl)\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if ( _isUpdateDescr(prevProps, this.props, this.state) ) {\r\n      const { data } = this.props\r\n      , { descrUrl } = data;\r\n      this._loadDescr(descrUrl)\r\n    }\r\n  }\r\n\r\n  _loadDescr = (descrUrl='') => {\r\n     if (descrUrl) {\r\n       this.setState({\r\n         isLoading: true\r\n       }, () => fetchTxt({\r\n         uri: descrUrl,\r\n         onFetch: this._setDescrHtml,\r\n         onCatch: this._onFailed\r\n       }))\r\n     } else {\r\n       this._setDescrHtml();\r\n     }\r\n  }\r\n  _setDescrHtml = ({ json:text=DESCR_EMPTY }={}) => {\r\n    this.setState({\r\n      isLoading: false,\r\n      isLoadFailed: false,\r\n      errMsg: '',\r\n      descrHtml: text\r\n    })\r\n  }\r\n  _onFailed = ({ error }={}) => {\r\n    this.setState({\r\n      isLoading: false,\r\n      isLoadFailed: true,\r\n      errMsg: error.message\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      isShow,\r\n      onClose\r\n    } = this.props\r\n    , {\r\n      isLoading,\r\n      isLoadFailed,\r\n      errMsg,\r\n      descrHtml\r\n    } = this.state\r\n    , _html = DOMPurify.sanitize(descrHtml)\r\n    , _el = isLoading ? <Load.Loading />\r\n        : isLoadFailed ? <Load.LoadFailed errMsg={errMsg} />\r\n        : <Description _html={_html} />\r\n    return (\r\n       <ModalDialog\r\n         caption=\"Description for Datasource\"\r\n         isShow={isShow}\r\n         style={S.DIALOG}\r\n         onClose={onClose}\r\n       >\r\n         {_el}\r\n       </ModalDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DescriptionDialog\r\n"],"file":"DescriptionDialog.js"}