{"version":3,"sources":["../../../src/components/dialogs/DialogContainer.jsx"],"names":["_hmDialogs","DialogContainer","state","isShow","inits","shows","data","dialogs","currentDialog","_onStore","actionType","option","SHOW_MODAL_DIALOG","modalDialogType","type","setState","push","comp","_handleClose","_renderDialogs","store","props","map","dialog","index","createElement","key","onClose","bind","unsubscribe","listen","propTypes","shape","func"],"mappings":"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","file":"DialogContainer.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport ModalDialogContainer from '../zhn/ModalDialogContainer';\r\nimport {ComponentActionTypes} from '../../flux/actions/ComponentActions';\r\n\r\nimport RouterModalDialog from './RouterModalDialog';\r\nconst _hmDialogs = RouterModalDialog;\r\n\r\nclass DialogContainer extends Component {\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    })\r\n  }\r\n\r\n  state = {\r\n    isShow : false,\r\n    inits : {},\r\n    shows : {},\r\n    data : {},\r\n    dialogs : [],\r\n    currentDialog : null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n  _onStore = (actionType, option) => {\r\n     if (actionType === ComponentActionTypes.SHOW_MODAL_DIALOG){\r\n       const type = option.modalDialogType\r\n           , { inits, shows, data, dialogs } = this.state;\r\n\r\n       data[type] = option;\r\n       shows[type] = true;\r\n       if (inits[type]){\r\n         this.setState({isShow: true, currentDialog: type, shows, data})\r\n       } else {\r\n         dialogs.push({type : type, comp : _hmDialogs[type]});\r\n         inits[type] = true\r\n         this.setState({isShow: true, currentDialog: type, shows, data, dialogs});\r\n       }\r\n     }\r\n  }\r\n\r\n  _handleClose = (type) => {\r\n    this.state.shows[type] = false;\r\n    this.setState({isShow : false, currentDialog: null, shows : this.state.shows})\r\n  }\r\n\r\n  _renderDialogs = () => {\r\n    const {store} = this.props\r\n        , {shows, data} = this.state;\r\n\r\n    return this.state.dialogs.map((dialog, index) => {\r\n      const {type, comp} = dialog\r\n      return React.createElement(comp, {\r\n           key: type,\r\n           isShow: shows[type],\r\n           data: data[type],\r\n           store : store,\r\n           onClose: this._handleClose.bind(null, type)})\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {isShow, currentDialog} = this.state;\r\n\r\n    return (\r\n      <ModalDialogContainer\r\n          isShow={isShow}\r\n          onClose={this._handleClose.bind(null, currentDialog)}\r\n      >\r\n         {this._renderDialogs()}\r\n     </ModalDialogContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DialogContainer\r\n"]}