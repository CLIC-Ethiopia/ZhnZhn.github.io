{"version":3,"sources":["../../../src/components/dialogs/DialogContainer.jsx"],"names":["DialogContainer","state","isShow","inits","shows","data","dialogs","currentDialog","_setTypeTo","prevState","type","option","_onStore","actionType","CAT","SHOW_MODAL_DIALOG","modalDialogType","setState","RouterModalDialog","getDialog","then","comp","push","_handleClose","_renderDialogs","store","props","map","dialog","React","createElement","key","onClose","bind","componentDidMount","unsubscribe","listen","componentWillUnmount","render","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport ModalDialogContainer from '../zhn-containers/ModalDialogContainer';\r\nimport { ComponentActionTypes as CAT } from '../../flux/actions/ComponentActions';\r\n\r\nimport RouterModalDialog from './RouterModalDialog';\r\n\r\nclass DialogContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    })\r\n  }\r\n  */\r\n\r\n  state = {\r\n    isShow: false,\r\n    inits: {},\r\n    shows: {},\r\n    data: {},\r\n    dialogs: [],\r\n    currentDialog: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  _setTypeTo = (prevState, type, option) => {\r\n      prevState.shows[type] = true\r\n      prevState.data[type] = option\r\n      prevState.isShow = true\r\n      prevState.currentDialog = type\r\n      return prevState;\r\n  }\r\n  _onStore = (actionType, option) => {\r\n     if (actionType === CAT.SHOW_MODAL_DIALOG){\r\n       const type = option.modalDialogType\r\n          , { inits } = this.state;\r\n\r\n       if (inits[type]){\r\n         this.setState(prevState => this._setTypeTo(\r\n           prevState, type, option\r\n         ))\r\n       } else {\r\n         RouterModalDialog.getDialog(type)\r\n           .then(comp => this.setState(prevState => {\r\n               prevState.dialogs.push({ type, comp })\r\n               prevState.inits[type] = true\r\n               return this._setTypeTo(\r\n                 prevState, type, option\r\n               );\r\n             })\r\n           )\r\n       }\r\n     }\r\n  }\r\n\r\n  _handleClose = (type) => {\r\n    this.setState(prevState => {\r\n      prevState.shows[type] = false\r\n      prevState.isShow = false\r\n      prevState.currentDialog = null\r\n      return prevState;\r\n    })\r\n  }\r\n\r\n  _renderDialogs = () => {\r\n    const { store } = this.props\r\n        , {\r\n            shows, data, dialogs,\r\n          } = this.state;\r\n\r\n    return dialogs\r\n      .map(dialog => {\r\n        const { type, comp } = dialog;\r\n        return React.createElement(comp, {\r\n           key: type,\r\n           isShow: shows[type],\r\n           data: data[type],\r\n           store: store,\r\n           onClose: this._handleClose.bind(null, type)\r\n        });\r\n      });\r\n  }\r\n\r\n  render(){\r\n    const { isShow, currentDialog } = this.state;\r\n    return (\r\n      <ModalDialogContainer\r\n         isShow={isShow}\r\n         onClose={this._handleClose.bind(null, currentDialog)}\r\n      >\r\n         {this._renderDialogs()}\r\n     </ModalDialogContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DialogContainer\r\n"],"file":"DialogContainer.js"}