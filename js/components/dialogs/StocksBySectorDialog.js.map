{"version":3,"sources":["../../../src/components/dialogs/StocksBySectorDialog.jsx"],"names":["ABSENT","ABSENT_VALIDATION_MSG","STYLE","CAPTION_SPAN","display","maxWidth","SOURCE_ROOT","lineHeight","marginBottom","LINK_SHOW_HIDE","LINK_ROOT","marginTop","fontWeight","LINK_CAPTION","color","textAlign","width","paddingRight","fontSize","StocksBySectorDialog","props","toolbarButtons","caption","onClick","_handleClickLink","_commandButtons","_handleLoad","data","onShow","state","_createInitialState","nextProps","setState","nextState","isShow","item","text","isShowLink","initFromDate","initToDate","onTestDate","validationMessages","_source","_getItemSource","_handleClose","datesFragment","c","id","arr","split","length","fromDate","_isShowLink","_initFromDate","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","_getValidationMessages","isValid","onClose","browserType","chartContainerType","dialogProps","getValues","toDate","option","title","value","loadId","WL","linkFn","columnName","seriaColumnNames","dataSource","loadStock","chartType","_updateValidationMessages","msg","push","getValidation","datesMsg","concat"],"mappings":"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","file":"StocksBySectorDialog.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport { LoadType } from '../../constants/Type';\r\n\r\nimport D from './DialogCell'\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog';\r\nimport NasdaqLink from '../native-links/NasdaqLink';\r\n\r\nimport withValidationLoad from './decorators/withValidationLoad';\r\n\r\nconst ABSENT = \"Absent\"\r\n    , ABSENT_VALIDATION_MSG = \"Data Source for this item Absent\";\r\n\r\nconst STYLE = {\r\n  CAPTION_SPAN : {\r\n    display: 'inline-block',\r\n    maxWidth: '295px'\r\n  },\r\n  SOURCE_ROOT : {\r\n    lineHeight: 1.5,\r\n    marginBottom: '0px'\r\n  },\r\n  LINK_SHOW_HIDE : {\r\n    marginBottom: '10px'\r\n  },\r\n  LINK_ROOT: {\r\n    marginTop: '0px',\r\n    marginBottom : '0px',\r\n    lineHeight: 1.5,\r\n    fontWeight: 'bold'\r\n  },\r\n  LINK_CAPTION : {\r\n    color: '#1B75BB',\r\n    display: 'inline-block',\r\n    textAlign: 'right',\r\n    width: '100px',\r\n    paddingRight: '5px',\r\n    fontSize: '16px'\r\n  }\r\n}\r\n\r\n@withValidationLoad\r\nclass StocksBySectorDialog extends Component {\r\n  /*\r\n   static propTypes = {\r\n     isShow  : PropTypes.bool.isRequired,\r\n     data    : PropTypes.object.isRequired,\r\n     store   : PropTypes.object,\r\n     onClose : PropTypes.func.isRequired\r\n   }\r\n  */ \r\n\r\n   constructor(props){\r\n     super()\r\n     this.toolbarButtons =  [\r\n       { caption: 'L', onClick: this._handleClickLink }\r\n     ]\r\n     this._commandButtons = [\r\n       <D.Button.Load onClick={this._handleLoad} />,\r\n       <D.Button.Show onClick={props.data.onShow} />\r\n     ]\r\n     this.state = this._createInitialState(props)\r\n   }\r\n\r\n   _getItemSource = (props) => {\r\n     const { data={} } = props\r\n         , { item={} } = data\r\n         , { id='' } = item\r\n         , arr = id.split('/');\r\n      if (arr.length<2){\r\n        return ABSENT;\r\n      } else {\r\n        return arr[0];\r\n      }\r\n   }\r\n\r\n   _createInitialState = (props) => {\r\n     const { data={} } = props\r\n         , { fromDate, initToDate, onTestDate } = data\r\n         , _isShowLink = (this._getItemSource(props) !== ABSENT)\r\n              ? false\r\n              : true\r\n         , _initFromDate = (fromDate) ? fromDate : DateUtils.getFromDate(2)\r\n         , _initToDate = (initToDate) ? initToDate : DateUtils.getToDate()\r\n         , _onTestDate = (onTestDate) ? onTestDate : DateUtils.isValidDate;\r\n\r\n      return {\r\n        isShowLink : _isShowLink,\r\n        initFromDate : _initFromDate,\r\n        initToDate : _initToDate,\r\n        onTestDate : _onTestDate,\r\n        validationMessages : []\r\n      };\r\n   }\r\n\r\n   componentWillReceiveProps(nextProps){\r\n     if ( this.props.data !== nextProps.data) {\r\n       this.setState(this._createInitialState(nextProps))\r\n     }\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n  _handleClickLink = () => {\r\n     this.setState({ isShowLink: !this.state.isShowLink })\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { item={}, browserType, chartContainerType, dialogProps } = data\r\n          , { id, text } = item\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , _source = this._getItemSource(this.props)\r\n          , option = {\r\n             title : text,\r\n             value : id,\r\n             item: item,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id : id,\r\n             linkFn : 'NASDAQ',\r\n             columnName : 'Close',\r\n             seriaColumnNames : [ 'Open', 'High', 'Low', 'Volume', 'Adjusted Close', 'Adj. Close' ],\r\n             dataSource : `(Code: ${_source})`,\r\n             ...dialogProps\r\n           };\r\n\r\n      ChartActions.loadStock(\r\n        { chartType: chartContainerType, browserType },\r\n        option\r\n      )\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _getValidationMessages = () => {\r\n    let  msg = [];\r\n\r\n    if (this._getItemSource(this.props) === ABSENT) {\r\n      msg.push(ABSENT_VALIDATION_MSG)\r\n    }\r\n\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    if (this.state.validationMessages.length > 0){\r\n      this.setState({ validationMessages : this._getValidationMessages() })\r\n    }\r\n    this.props.onClose()\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data={} } = this.props\r\n        , { item={} } = data\r\n        , { text } = item\r\n        , {\r\n            isShowLink,\r\n            initFromDate, initToDate, onTestDate,\r\n            validationMessages\r\n          } = this.state\r\n        , _source = this._getItemSource(this.props);\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption={text}\r\n         styleCaption={STYLE.CAPTION_SPAN}\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <D.ToolbarButtonCircle\r\n          buttons={this.toolbarButtons}\r\n        />\r\n        <D.Row.Text\r\n          styleRoot={STYLE.SOURCE_ROOT}\r\n          caption=\"Source:\"\r\n          text={_source}\r\n        />\r\n        <D.ShowHide isShow={isShowLink} style={STYLE.LINK_SHOW_HIDE}>\r\n          <D.Row.Plain style={STYLE.LINK_ROOT}>\r\n            <span style={STYLE.LINK_CAPTION}>\r\n              Link:\r\n            </span>\r\n            <NasdaqLink item={item} caption=\"NASDAQ\" />\r\n          </D.Row.Plain>\r\n        </D.ShowHide>\r\n        <D.DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <D.ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StocksBySectorDialog\r\n"]}