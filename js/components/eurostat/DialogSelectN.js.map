{"version":3,"sources":["../../../src/components/eurostat/DialogSelectN.jsx"],"names":["DF_MAP_FREQUENCY","_crIsId","id","_crIsToggleInit","selectProps","_isToggleInit","forEach","item","DialogSelectN","Decor","dialog","withForDate","props","_toggleStateBy","propName","setState","prevState","_isCategory","RouterOptions","isCategory","chartType","_updateForDate","date","dfProps","mapFrequency","mapDateDf","_frequency","dateConfig","isShowDate","_hSelectChartType","_onRegColor","comp","colorComp","_hSelectDate","_handleLoad","_handleWithValidationLoad","_createValidationMessages","_createLoadOption","msgOnNotSelected","_max","length","msg","i","_items","push","caption","isValid","dialogOptions","seriaColor","getColor","_getDateWithForDate","items","slice","loadFn","_hClose","_handleWithValidationClose","_hSelect","index","_refSelect","_compSelect","_renderSelects","isShow","isShowLabels","map","restItem","_isShow","state","bind","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","_toggleChart","_toggleDate","toolbarButtons","_createType2WithToolbar","noDate","isOptions","isToggle","_commandButtons","_crCommandsWithLoad","_chartOptions","crOptions","_isWithInitialState","isShowChart","shouldComponentUpdate","nextProps","nextState","render","onShow","onFront","noForDate","isToolbar","dateDefault","dateOptions","validationMessages","_toggleOptionWithToolbar","_hideOptionsWithToolbar","_hideToggleWithToolbar","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAGA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,IAAOA,gBAAgB,GAAG,GAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,EAAE;AAAA,gBAASA,EAAT;AAAA,CAAlB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACvC,MAAMC,aAAa,GAAG,EAAtB;AACAD,EAAAA,WAAW,CAACE,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BF,IAAAA,aAAa,CAACJ,OAAO,CAACM,IAAI,CAACL,EAAN,CAAR,CAAb,GAAkC,IAAlC;AACD,GAFD;AAGA,SAAOG,aAAP;AACD,CAND;;IAWMG,a,WAFLC,uBAAMC,M,oBACNC,uB;;;;;AAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,yBAAYC,KAAZ,EAAkB;AAAA;;AAChB,kCAAMA,KAAN;;AADgB,UA2ClBC,cA3CkB,GA2CD,UAACC,QAAD,EAAc;AAC7B,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA;;AAAA,+BACpBF,QADoB,IACT,CAACE,SAAS,CAACF,QAAD,CADD;AAAA,OAAvB;AAGD,KA/CiB;;AAAA,UAiDlBG,WAjDkB,GAiDJ,YAAM;AAClB,aAAOC,0BAAcC,UAAd,CAAyB,MAAKC,SAA9B,CAAP;AACD,KAnDiB;;AAAA,UAqDlBC,cArDkB,GAqDD,YAAM;AACrB,YAAKC,IAAL,GAAY,KAAK,CAAjB;;AADqB,gCAEE,MAAKV,KAFP,CAEbW,OAFa;AAAA,UAEbA,OAFa,oCAEL,EAFK;AAAA,UAGjBC,YAHiB,GAGWD,OAHX,CAGjBC,YAHiB;AAAA,UAGHC,SAHG,GAGWF,OAHX,CAGHE,SAHG;AAAA,UAInBC,UAJmB,GAINF,YAAY,IAAIxB,gBAJV;AAAA,UAKnB2B,UALmB,GAKN,8BAAaD,UAAb,EAAyBD,SAAzB,CALM;;AAOrB,YAAKV,QAAL;AACGa,QAAAA,UAAU,EAAE;AADf,SAEMD,UAFN;AAID,KAhEiB;;AAAA,UAmElBE,iBAnEkB,GAmEE,UAACT,SAAD,EAAe;AACjC,YAAKA,SAAL,GAAiBA,SAAjB;;AACA,UAAI,MAAKH,WAAL,EAAJ,EAAwB;AACtB,cAAKI,cAAL;AACD,OAFD,MAEO;AACL,cAAKN,QAAL,CAAc;AAAEa,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD;AACF,KA1EiB;;AAAA,UA2ElBE,WA3EkB,GA2EJ,UAACC,IAAD,EAAU;AACtB,YAAKC,SAAL,GAAiBD,IAAjB;AACD,KA7EiB;;AAAA,UA+ElBE,YA/EkB,GA+EH,UAACX,IAAD,EAAU;AACvB,YAAKA,IAAL,GAAYA,IAAZ;AACD,KAjFiB;;AAAA,UAmFlBY,WAnFkB,GAmFJ,YAAM;AAClB,YAAKC,yBAAL,CACE,MAAKC,yBAAL,EADF,EAEE,MAAKC,iBAFP;AAID,KAxFiB;;AAAA,UAyFlBD,yBAzFkB,GAyFU,YAAM;AAAA,wBAI5B,MAAKxB,KAJuB;AAAA,UAE9B0B,gBAF8B,eAE9BA,gBAF8B;AAAA,UAG9BlC,WAH8B,eAG9BA,WAH8B;AAAA,UAK9BmC,IAL8B,GAKvBnC,WAAW,CAACoC,MALW;AAAA,UAM9BC,GAN8B,GAMxB,EANwB;AAQhC,UAAIC,CAAC,GAAG,MAAKzB,WAAL,KAAqB,CAArB,GAAyB,CAAjC;;AACA,aAAOyB,CAAC,GAACH,IAAT,EAAeG,CAAC,EAAhB,EAAoB;AAClB,YAAI,CAAC,MAAKC,MAAL,CAAYD,CAAZ,CAAL,EAAqB;AACnBD,UAAAA,GAAG,CAACG,IAAJ,CAASN,gBAAgB,CAAClC,WAAW,CAACsC,CAAD,CAAX,CAAeG,OAAhB,CAAzB;AACD;AACF;;AAEDJ,MAAAA,GAAG,CAACK,OAAJ,GAAeL,GAAG,CAACD,MAAJ,KAAe,CAAhB,GACT,IADS,GACF,KADZ;AAEA,aAAOC,GAAP;AACD,KA3GiB;;AAAA,UA6GlBJ,iBA7GkB,GA6GE,YAAM;AAAA;AAAA,UAEtBjB,SAFsB,yBAEtBA,SAFsB;AAAA,UAGtBY,SAHsB,yBAGtBA,SAHsB;AAAA,UAItBe,aAJsB,yBAItBA,aAJsB;AAAA,UAMtBC,UANsB,GAMThB,SAAS,GAClBA,SAAS,CAACiB,QAAV,EADkB,GAElB,KAAK,CARa;AAAA,UAStB3B,IATsB,GASf,MAAK4B,mBAAL,EATe;AAAA,UAUtB/B,UAVsB,GAUTD,0BAAcC,UAAd,CAAyBC,SAAzB,CAVS;AAAA,UAWtB+B,KAXsB,GAWdhC,UAAU,GACd,MAAKwB,MAAL,CAAYS,KAAZ,CAAkB,CAAlB,CADc,GAEd,MAAKT,MAba;;AAexB,aAAO,MAAK/B,KAAL,CAAWyC,MAAX,CACL,MAAKzC,KADA,EACO;AACVuC,QAAAA,KAAK,EAALA,KADU;AAEVJ,QAAAA,aAAa,EAAbA,aAFU;AAGV3B,QAAAA,SAAS,EAATA,SAHU;AAGC4B,QAAAA,UAAU,EAAVA,UAHD;AAIV7B,QAAAA,UAAU,EAAVA,UAJU;AAKVG,QAAAA,IAAI,EAAJA;AACA;;;;;;;AANU,OADP,CAAP;AAeD,KA3IiB;;AAAA,UA6IlBgC,OA7IkB,GA6IR,YAAM;AACd,YAAKC,0BAAL;AACD,KA/IiB;;AAAA,UAkJlBC,QAlJkB,GAkJP,UAACtD,EAAD,EAAKuD,KAAL,EAAYlD,IAAZ,EAAqB;AAC9B,UAAIA,IAAJ,EAAU;AAAEA,QAAAA,IAAI,CAACL,EAAL,GAAUA,EAAV;AAAc;;AAC1B,YAAKyC,MAAL,CAAYc,KAAZ,IAAqBlD,IAArB;AACD,KArJiB;;AAAA,UAsJlBmD,UAtJkB,GAsJL,UAACxD,EAAD,EAAK6B,IAAL,EAAc;AACzB,YAAK4B,WAAL,CAAiBzD,EAAjB,IAAuB6B,IAAvB;AACD,KAxJiB;;AAAA,UA0JlB6B,cA1JkB,GA0JD,UAACxD,WAAD,EAAcyD,MAAd,EAAsBC,YAAtB,EAAuC;AACpD,aAAO1D,WAAW,CAAC2D,GAAZ,CAAgB,UAACxD,IAAD,EAAOkD,KAAP,EAAiB;AAAA,YAEpCvD,EAFoC,GAKlCK,IALkC,CAEpCL,EAFoC;AAAA,YAIjC8D,QAJiC,kDAKlCzD,IALkC;;AAMtC,YAAM0D,OAAO,GAAG,MAAKC,KAAL,CAAWjE,OAAO,CAACC,EAAD,CAAlB,CAAhB;;AACA,eACE,gCAAC,sBAAD,CAAG,QAAH;AAAY,UAAA,GAAG,EAAEA,EAAjB;AAAqB,UAAA,MAAM,EAAE+D;AAA7B,WACE,gCAAC,sBAAD,CAAG,cAAH,gCACMD,QADN;AAEE,UAAA,GAAG,EAAE,MAAKN,UAAL,CAAgBS,IAAhB,CAAqB,IAArB,EAA2BjE,EAA3B,CAFP;AAGE,UAAA,MAAM,EAAE2D,MAHV;AAIE,UAAA,YAAY,EAAEC,YAJhB;AAKE,UAAA,QAAQ,EAAE,MAAKN,QAAL,CAAcW,IAAd,CAAmB,IAAnB,EAAyBjE,EAAzB,EAA6BuD,KAA7B;AALZ,WADF,CADF;AAWD,OAlBM,CAAP;AAmBH,KA9KiB;;AAGhB,UAAKd,MAAL,GAAc,EAAd;AACA,UAAKgB,WAAL,GAAmB,EAAnB,CAJgB,CAKhB;AACA;;AAEA,UAAKS,SAAL,GAAiB,0EAAiB;AAChCC,MAAAA,aAAa,EAAE,MAAKC,kBADY;AAEhCC,MAAAA,OAAO,EAAE,MAAKC;AAFkB,KAAjB,CAAjB;AAIA,UAAKC,YAAL,GAAoB,MAAK5D,cAAL,CACjBsD,IADiB,iDACN,aADM,CAApB;AAEA,UAAKO,WAAL,GAAmB,MAAK7D,cAAL,CAChBsD,IADgB,iDACL,YADK,CAAnB;AAGA,UAAKQ,cAAL,GAAsB,MAAKC,uBAAL,CACpBhE,KADoB,EACb;AAAEiE,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,SAAS,EAAE,IAA3B;AAAiCC,MAAAA,QAAQ,EAAE;AAA3C,KADa,CAAtB;AAGA,UAAKC,eAAL,GAAuB,MAAKC,mBAAL,gDAAvB;AACA,UAAKC,aAAL,GAAqBhE,0BAAciE,SAAd,CAAwBvE,KAAxB,CAArB;AAEA,UAAKsD,KAAL,iCACK,MAAKkB,mBAAL,EADL;AAEEN,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,QAAQ,EAAE,KAHZ;AAIEM,MAAAA,WAAW,EAAE,IAJf;AAKEzD,MAAAA,UAAU,EAAE;AALd,OAMK,8BAAa,OAAb,CANL,MAOKzB,eAAe,CAACS,KAAK,CAACR,WAAP,CAPpB;AAvBgB;AAgCjB;;;;SAEDkF,qB,GAAA,+BAAsBC,SAAtB,EAAiCC,SAAjC,EAA2C;AACzC,QAAI,KAAK5E,KAAL,KAAe2E,SAAnB,EAA6B;AAC1B,UAAI,KAAK3E,KAAL,CAAWiD,MAAX,KAAsB0B,SAAS,CAAC1B,MAApC,EAA2C;AACxC,eAAO,KAAP;AACF;AACH;;AACD,WAAO,IAAP;AACD,G;;SAuID4B,M,GAAA,kBAAQ;AAAA,uBAMF,KAAK7E,KANH;AAAA,QAEJiC,OAFI,gBAEJA,OAFI;AAAA,QAEKgB,MAFL,gBAEKA,MAFL;AAAA,QAGJ6B,MAHI,gBAGJA,MAHI;AAAA,QAGIC,OAHJ,gBAGIA,OAHJ;AAAA,QAIJvF,WAJI,gBAIJA,WAJI;AAAA,QAKJyE,MALI,gBAKJA,MALI;AAAA,QAKIe,SALJ,gBAKIA,SALJ;AAAA,sBAaF,KAAK1B,KAbH;AAAA,QAQJ2B,SARI,eAQJA,SARI;AAAA,QAQOf,SARP,eAQOA,SARP;AAAA,QAQkBC,QARlB,eAQkBA,QARlB;AAAA,QASJjB,YATI,eASJA,YATI;AAAA,QAUJuB,WAVI,eAUJA,WAVI;AAAA,QAUSzD,UAVT,eAUSA,UAVT;AAAA,QAWJkE,WAXI,eAWJA,WAXI;AAAA,QAWSC,WAXT,eAWSA,WAXT;AAAA,QAYJC,kBAZI,eAYJA,kBAZI;AAeN,WACE,gCAAC,sBAAD,CAAG,eAAH;AACG,MAAA,MAAM,EAAEnC,MADX;AAEG,MAAA,OAAO,EAAEhB,OAFZ;AAGG,MAAA,SAAS,EAAE,KAAKuB,SAHnB;AAIG,MAAA,cAAc,EAAE,KAAKY,eAJxB;AAKG,MAAA,WAAW,EAAEU,MALhB;AAMG,MAAA,OAAO,EAAEC,OANZ;AAOG,MAAA,OAAO,EAAE,KAAKrC;AAPjB,OASK,gCAAC,sBAAD,CAAG,OAAH;AACE,MAAA,MAAM,EAAEuC,SADV;AAEE,MAAA,OAAO,EAAE,KAAKlB;AAFhB,MATL,EAaK,gCAAC,wBAAD;AACE,MAAA,MAAM,EAAEG,SADV;AAEE,MAAA,YAAY,EAAE,KAAKmB,wBAFrB;AAGE,MAAA,OAAO,EAAE,KAAKC;AAHhB,MAbL,EAkBK,gCAAC,uBAAD;AACE,MAAA,MAAM,EAAEnB,QADV;AAEE,MAAA,SAAS,EAAEa,SAFb;AAGE,MAAA,WAAW,EAAExF,WAHf;AAIE,MAAA,WAAW,EAAEiF,WAJf;AAKE,MAAA,UAAU,EAAEzD,UALd;AAME,MAAA,MAAM,EAAE3B,OANV;AAOE,MAAA,QAAQ,EAAE,KAAKY,cAPjB;AAQE,MAAA,WAAW,EAAE,KAAK4D,YARpB;AASE,MAAA,UAAU,EAAE,KAAKC,WATnB;AAUE,MAAA,OAAO,EAAE,KAAKyB;AAVhB,MAlBL,EA8BM,KAAKvC,cAAL,CAAoBxD,WAApB,EAAiCyD,MAAjC,EAAyCC,YAAzC,CA9BN,EA+BK,gCAAC,sBAAD,CAAG,QAAH;AAAY,MAAA,MAAM,EAAEuB;AAApB,OACE,gCAAC,sBAAD,CAAG,QAAH;AACE,MAAA,YAAY,EAAEvB,YADhB;AAEE,MAAA,OAAO,EAAE,KAAKoB,aAFhB;AAGE,MAAA,aAAa,EAAE,KAAKrD,iBAHtB;AAIE,MAAA,UAAU,EAAE,KAAKC;AAJnB,MADF,CA/BL,EAwCO,CAAC+C,MAAD,IACA,gCAAC,sBAAD,CAAG,QAAH;AAAY,MAAA,MAAM,EAAEjD;AAApB,OACE,gCAAC,sBAAD,CAAG,cAAH;AACG,MAAA,YAAY,EAAEkC,YADjB;AAEG,MAAA,OAAO,EAAC,UAFX;AAGG,MAAA,WAAW,EAAEgC,WAHhB;AAIG,MAAA,OAAO,EAAEC,WAJZ;AAKG,MAAA,QAAQ,EAAE,KAAK9D;AALlB,MADF,CAzCP,EAmDK,gCAAC,sBAAD,CAAG,kBAAH;AACI,MAAA,kBAAkB,EAAE+D;AADxB,MAnDL,CADF;AAyDD,G;;;EA/RyBI,gB,WAmCpBC,Y,GAAe;AACpBjG,EAAAA,WAAW,EAAE;AADO,C;eA+PRI,a","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport crDateConfig from './crDateConfig'\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport crMenuMore from '../dialogs/MenuMore'\r\nimport Decor from '../dialogs/decorators/Decorators'\r\nimport withForDate from './withForDate'\r\n\r\nimport RouterOptions from './RouterOptions'\r\nimport ModalOptions from './ModalOptions'\r\nimport ModalToggle from './ModalToggle'\r\n\r\nconst  DF_MAP_FREQUENCY = 'M';\r\n\r\nconst _crIsId = id => `is${id}Select`;\r\n\r\nconst _crIsToggleInit = (selectProps) => {\r\n  const _isToggleInit = {};\r\n  selectProps.forEach(item => {\r\n    _isToggleInit[_crIsId(item.id)] = true\r\n  })\r\n  return _isToggleInit;\r\n};\r\n\r\n\r\n@Decor.dialog\r\n@withForDate\r\nclass DialogSelectN extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isShow: PropTypes.bool,\r\n    caption: PropTypes.string,\r\n    selectProps: PropTypes.arrayOf(\r\n       PropTypes.shape({\r\n          id: PropTypes.string,\r\n          caption: PropTypes.string,\r\n          uri: PropTypes.string,\r\n          jsonProp: PropTypes.string\r\n       })\r\n    ),\r\n\r\n    noDate: PropTypes.string,\r\n    dfProps: PropTypes.shape({\r\n      mapFrequency: PropTypes.oneOf(['M', 'Q', 'Y']),\r\n      mapDateDf: PropTypes.number,\r\n    }),\r\n    msgOnNotSelected: PropTypes.func,\r\n\r\n    onShow: PropTypes.func,\r\n    onFront: PropTypes.func,\r\n    loadFn: PropTypes.func,\r\n\r\n    descrUrl: PropTypes.string,\r\n    onClickInfo: PropTypes.func,\r\n\r\n    onClose: PropTypes.func,\r\n    onLoad: PropTypes.func\r\n\r\n\r\n  }\r\n */\r\n\r\n static defaultProps = {\r\n   selectProps: []\r\n }\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._items = []\r\n    this._compSelect = {}\r\n    //this.date = undefined;\r\n    //this.chartType = undefined;\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n    this._toggleChart = this._toggleStateBy\r\n      .bind(this, 'isShowChart')\r\n    this._toggleDate = this._toggleStateBy\r\n      .bind(this, 'isShowDate')\r\n\r\n    this.toolbarButtons = this._createType2WithToolbar(\r\n      props, { noDate: true, isOptions: true, isToggle: true }\r\n    )\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n    this._chartOptions = RouterOptions.crOptions(props)\r\n\r\n    this.state = {\r\n      ...this._isWithInitialState(),\r\n      isOptions: false,\r\n      isToggle: false,\r\n      isShowChart: true,\r\n      isShowDate: false,\r\n      ...crDateConfig('EMPTY'),\r\n      ..._crIsToggleInit(props.selectProps)\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _toggleStateBy = (propName) => {\r\n    this.setState(prevState => ({\r\n      [propName]: !prevState[propName]\r\n    }))\r\n  }\r\n\r\n  _isCategory = () => {\r\n    return RouterOptions.isCategory(this.chartType)\r\n  }\r\n\r\n  _updateForDate = () => {\r\n    this.date = void 0;\r\n    const { dfProps={} } = this.props\r\n    , { mapFrequency, mapDateDf } = dfProps\r\n    , _frequency = mapFrequency || DF_MAP_FREQUENCY\r\n    , dateConfig = crDateConfig(_frequency, mapDateDf);\r\n\r\n    this.setState({\r\n       isShowDate: true,\r\n       ...dateConfig\r\n    });\r\n  }\r\n\r\n\r\n  _hSelectChartType = (chartType) => {\r\n    this.chartType = chartType;\r\n    if (this._isCategory()) {\r\n      this._updateForDate();\r\n    } else {\r\n      this.setState({ isShowDate: false });\r\n    }\r\n  }\r\n  _onRegColor = (comp) => {\r\n    this.colorComp = comp\r\n  }\r\n\r\n  _hSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    this._handleWithValidationLoad(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    );\r\n  }\r\n  _createValidationMessages = () => {\r\n    const {\r\n      msgOnNotSelected,\r\n      selectProps\r\n    } = this.props\r\n    , _max = selectProps.length\r\n    , msg = [];\r\n\r\n    let i = this._isCategory() ? 1 : 0;\r\n    for( ; i<_max; i++) {\r\n      if (!this._items[i]) {\r\n        msg.push(msgOnNotSelected(selectProps[i].caption))\r\n      }\r\n    }\r\n\r\n    msg.isValid = (msg.length === 0)\r\n       ? true : false;\r\n    return msg;\r\n  }\r\n\r\n  _createLoadOption = () => {\r\n    const {\r\n      chartType,\r\n      colorComp,\r\n      dialogOptions\r\n    } = this\r\n    , seriaColor = colorComp\r\n        ? colorComp.getColor()\r\n        : void 0\r\n    , date = this._getDateWithForDate()\r\n    , isCategory = RouterOptions.isCategory(chartType)\r\n    , items = isCategory\r\n        ? this._items.slice(1)\r\n        : this._items;\r\n\r\n    return this.props.loadFn(\r\n      this.props, {\r\n        items,\r\n        dialogOptions,\r\n        chartType, seriaColor,\r\n        isCategory,\r\n        date\r\n        /*\r\n        selectOptions: [\r\n          compSelect1.getOptions(),\r\n          compSelect2.getOptions()\r\n        ]\r\n        */\r\n      }\r\n    );\r\n  }\r\n\r\n  _hClose = () => {\r\n    this._handleWithValidationClose()\r\n  }\r\n\r\n\r\n  _hSelect = (id, index, item) => {\r\n    if (item) { item.id = id }\r\n    this._items[index] = item\r\n  }\r\n  _refSelect = (id, comp) => {\r\n    this._compSelect[id] = comp\r\n  }\r\n\r\n  _renderSelects = (selectProps, isShow, isShowLabels) => {\r\n      return selectProps.map((item, index) => {\r\n        const {\r\n          id,\r\n          //uri, jsonProp, caption, isWithInput\r\n          ...restItem\r\n        } = item;\r\n        const _isShow = this.state[_crIsId(id)];\r\n        return (\r\n          <D.ShowHide key={id} isShow={_isShow}>\r\n            <D.SelectWithLoad\r\n              {...restItem}\r\n              ref={this._refSelect.bind(null, id)}\r\n              isShow={isShow}\r\n              isShowLabels={isShowLabels}\r\n              onSelect={this._hSelect.bind(null, id, index)}\r\n            />\r\n          </D.ShowHide>\r\n        );\r\n      });\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      caption, isShow,\r\n      onShow, onFront,\r\n      selectProps,\r\n      noDate, noForDate\r\n    } = this.props\r\n    , {\r\n      isToolbar, isOptions, isToggle,\r\n      isShowLabels,\r\n      isShowChart, isShowDate,\r\n      dateDefault, dateOptions,\r\n      validationMessages\r\n    } = this.state;\r\n\r\n    return(\r\n      <D.DraggableDialog\r\n         isShow={isShow}\r\n         caption={caption}\r\n         menuModel={this._menuMore}\r\n         commandButtons={this._commandButtons}\r\n         onShowChart={onShow}\r\n         onFront={onFront}\r\n         onClose={this._hClose}\r\n      >\r\n           <D.Toolbar\r\n             isShow={isToolbar}\r\n             buttons={this.toolbarButtons}\r\n           />\r\n           <ModalOptions\r\n             isShow={isOptions}\r\n             toggleOption={this._toggleOptionWithToolbar}\r\n             onClose={this._hideOptionsWithToolbar}\r\n           />\r\n           <ModalToggle\r\n             isShow={isToggle}\r\n             noForDate={noForDate}\r\n             selectProps={selectProps}\r\n             isShowChart={isShowChart}\r\n             isShowDate={isShowDate}\r\n             crIsId={_crIsId}\r\n             onToggle={this._toggleStateBy}\r\n             toggleChart={this._toggleChart}\r\n             toggleDate={this._toggleDate}\r\n             onClose={this._hideToggleWithToolbar}\r\n           />\r\n           {this._renderSelects(selectProps, isShow, isShowLabels)}\r\n           <D.ShowHide isShow={isShowChart}>\r\n             <D.RowChart\r\n               isShowLabels={isShowLabels}\r\n               options={this._chartOptions}\r\n               onSelectChart={this._hSelectChartType}\r\n               onRegColor={this._onRegColor}\r\n             />\r\n           </D.ShowHide>\r\n           {\r\n             !noDate &&\r\n             <D.ShowHide isShow={isShowDate}>\r\n               <D.RowInputSelect\r\n                  isShowLabels={isShowLabels}\r\n                  caption=\"For Date\"\r\n                  placeholder={dateDefault}\r\n                  options={dateOptions}\r\n                  onSelect={this._hSelectDate}\r\n               />\r\n             </D.ShowHide>\r\n           }\r\n           <D.ValidationMessages\r\n               validationMessages={validationMessages}\r\n           />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogSelectN\r\n"],"file":"DialogSelectN.js"}