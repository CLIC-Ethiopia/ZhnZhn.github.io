{"version":3,"sources":["../../../src/components/eurostat/DialogSelectN.jsx"],"names":["DF_INIT_FROM_DATE","DF_MAP_FREQUENCY","TABLE_ID","crOptions","ChartTypes","isCategory","_crIsId","id","_crIsToggleInit","selectProps","_isToggleInit","forEach","item","_getDfFrequencyConfig","props","dfProps","mapFrequency","mapDateDf","_isRequireChartOptionsUpdate","oldFrequency","DialogSelectN","Decor","dialog","withForDate","_toggleStateBy","propName","setState","prevState","_checkCaptionBy","index","_titles","push","_uncheckCaption","filter","v","_crDateConfig","_mapFrequency","_mapDateDf","_updateForDate","chartType","date","isShowFd","isShowDate","_hSelectChartType","_onRegColor","comp","colorComp","_hSelectDate","_handleLoad","_handleWithValidationLoad","_createValidationMessages","_createLoadOption","msgOnNotSelected","state","_max","length","msg","i","_items","caption","isValid","dialogOptions","getConf","seriaColor","seriaWidth","_getDateWithForDate","_isCategory","items","slice","_compFd","_refFromDate","current","fromDate","getValue","loadFn","titles","_hClose","_handleWithValidationClose","_crFrequencyConfig","_frequency","_dateDf","_checkForTableId","_conf","_chartOptions","_setFrequencyConfig","_hSelect","_refSelect","_compSelect","_renderSelects","isShow","isShowLabels","map","restItem","_isShow","bind","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","toolbarButtons","_createType2WithToolbar","noDate","isOptions","isCh","isToggle","React","createRef","_commandButtons","_crCommandsWithLoad","_isWithInitialState","isShowChart","shouldComponentUpdate","nextProps","nextState","render","onShow","onFront","isFd","noForDate","initFromDate","errNotYmdOrEmpty","isYmdOrEmpty","isToolbar","dateDefault","dateOptions","validationMessages","_isRowFd","_noForDate","_toggleOptionWithToolbar","_hideOptionsWithToolbar","_hideToggleWithToolbar","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport crDateConfig from './crDateConfig'\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport crMenuMore from '../dialogs/MenuMore'\r\nimport Decor from '../dialogs/decorators/Decorators'\r\nimport ChartTypes from '../dialogs/ChartTypes'\r\nimport withForDate from './withForDate'\r\n\r\nimport ModalOptions from './ModalOptions'\r\nimport ModalToggle from './ModalToggle'\r\nimport RowChart from './RowChart'\r\n\r\nconst DF_INIT_FROM_DATE = '2010-01-01'\r\nconst DF_MAP_FREQUENCY = 'M';\r\nconst TABLE_ID = 'table';\r\n\r\nconst {\r\n  crOptions,\r\n  isCategory\r\n} = ChartTypes;\r\n\r\nconst _crIsId = id => `is${id}Select`;\r\n\r\nconst _crIsToggleInit = (selectProps) => {\r\n  const _isToggleInit = {};\r\n  selectProps.forEach(item => {\r\n    _isToggleInit[_crIsId(item.id)] = true\r\n  })\r\n  return _isToggleInit;\r\n};\r\n\r\nconst _getDfFrequencyConfig = (props) => {\r\n  const { dfProps={} } = props\r\n  , {\r\n    mapFrequency=DF_MAP_FREQUENCY,\r\n    mapDateDf\r\n  } = dfProps;\r\n  return { mapFrequency, mapDateDf };\r\n};\r\n\r\nconst _isRequireChartOptionsUpdate = (\r\n  oldFrequency,\r\n  { mapFrequency }\r\n) => oldFrequency !== mapFrequency\r\n  && (oldFrequency === 'M' || mapFrequency === 'M');\r\n\r\n@Decor.dialog\r\n@withForDate\r\nclass DialogSelectN extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isCh: PropTypes.bool,\r\n    isShow: PropTypes.bool,\r\n    caption: PropTypes.string,\r\n    selectProps: PropTypes.arrayOf(\r\n       PropTypes.shape({\r\n          id: PropTypes.string,\r\n          caption: PropTypes.string,\r\n          uri: PropTypes.string,\r\n          jsonProp: PropTypes.string\r\n       })\r\n    ),\r\n\r\n    noDate: PropTypes.string,\r\n    dfProps: PropTypes.shape({\r\n      mapFrequency: PropTypes.oneOf(['M', 'Q', 'Y']),\r\n      mapDateDf: PropTypes.number,\r\n    }),\r\n    msgOnNotSelected: PropTypes.func,\r\n\r\n    onShow: PropTypes.func,\r\n    onFront: PropTypes.func,\r\n    loadFn: PropTypes.func,\r\n\r\n    descrUrl: PropTypes.string,\r\n    onClickInfo: PropTypes.func,\r\n\r\n    onClose: PropTypes.func,\r\n    onLoad: PropTypes.func\r\n  }\r\n */\r\n\r\n static defaultProps = {\r\n   isCh: true,\r\n   selectProps: [],\r\n   initFromDate: DF_INIT_FROM_DATE\r\n }\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._items = []\r\n    this._titles = [ 0 ]\r\n    this._compSelect = {}\r\n    //this.date = undefined;\r\n\r\n    this._setFrequencyConfig(\r\n      _getDfFrequencyConfig(props)\r\n    )\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n    this.toolbarButtons = this._createType2WithToolbar(\r\n      props, { noDate: true, isOptions: props.isCh, isToggle: true }\r\n    )\r\n    this._refFromDate = React.createRef()\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n    this._chartOptions = crOptions(props)\r\n\r\n    this.state = {\r\n      ...this._isWithInitialState(),\r\n      isOptions: false,\r\n      isToggle: false,\r\n      isShowFd: true,\r\n      isShowChart: true,\r\n      isShowDate: false,\r\n      ...crDateConfig('EMPTY'),\r\n      ..._crIsToggleInit(props.selectProps)\r\n      //chartType\r\n    }\r\n  }\r\n\r\n  _setFrequencyConfig({ mapFrequency, mapDateDf }){\r\n    this._mapFrequency = mapFrequency\r\n    this._mapDateDf = mapDateDf\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _toggleStateBy = (propName) => {\r\n    this.setState(prevState => ({\r\n      [propName]: !prevState[propName]\r\n    }))\r\n  }\r\n\r\n  _checkCaptionBy = (index) => {\r\n    this._titles.push(index)\r\n  }\r\n  _uncheckCaption = (index) => {\r\n     this._titles = this._titles\r\n       .filter(v => v !== index)\r\n  }\r\n\r\n  _crDateConfig = () => {\r\n    const { _mapFrequency, _mapDateDf } = this;\r\n    return crDateConfig(_mapFrequency, _mapDateDf);\r\n  }\r\n\r\n  _updateForDate = (chartType) => {\r\n    this.date = void 0;\r\n    this.setState({\r\n       isShowFd: false,\r\n       isShowDate: true,\r\n       chartType,\r\n       ...this._crDateConfig()\r\n    });\r\n  }\r\n\r\n\r\n  _hSelectChartType = (chartType) => {\r\n    if (isCategory(chartType)) {\r\n      this._updateForDate(chartType);\r\n    } else {\r\n      this.setState({\r\n        chartType,\r\n        isShowDate: false\r\n      });\r\n    }\r\n  }\r\n  _onRegColor = (comp) => {\r\n    this.colorComp = comp\r\n  }\r\n\r\n  _hSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    this._handleWithValidationLoad(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    );\r\n  }\r\n  _createValidationMessages = () => {\r\n    const {\r\n      msgOnNotSelected,\r\n      selectProps\r\n    } = this.props\r\n    , { chartType } = this.state\r\n    , _max = selectProps.length\r\n    , msg = [];\r\n\r\n    let i = isCategory(chartType) ? 1 : 0;\r\n    for( ; i<_max; i++) {\r\n      if (!this._items[i]) {\r\n        msg.push(msgOnNotSelected(selectProps[i].caption))\r\n      }\r\n    }\r\n\r\n    msg.isValid = (msg.length === 0)\r\n    return msg;\r\n  }\r\n\r\n  _createLoadOption = () => {\r\n    const {\r\n      colorComp,\r\n      dialogOptions\r\n    } = this\r\n    , { chartType } = this.state\r\n    , { seriaColor, seriaWidth } = colorComp\r\n        ? colorComp.getConf()\r\n        : {}\r\n    , date = this._getDateWithForDate()\r\n    , _isCategory = isCategory(chartType)\r\n    , items = _isCategory\r\n        ? this._items.slice(1)\r\n        : [...this._items]\r\n    , _compFd = this._refFromDate.current\r\n    , fromDate = _compFd && _compFd.isValid()\r\n       ? _compFd.getValue()\r\n       : '';\r\n\r\n    return this.props.loadFn(\r\n      this.props, {\r\n        items,\r\n        titles: this._titles,\r\n        dialogOptions,\r\n        chartType, seriaColor, seriaWidth,\r\n        isCategory: _isCategory,\r\n        fromDate, date\r\n        /*\r\n        selectOptions: [\r\n          compSelect1.getOptions(),\r\n          compSelect2.getOptions()\r\n        ]\r\n        */\r\n      }\r\n    );\r\n  }\r\n\r\n  _hClose = () => {\r\n    this._handleWithValidationClose()\r\n  }\r\n\r\n\r\n  _crFrequencyConfig = (item) => {\r\n    const { mapFrequency, mapDateDf } = _getDfFrequencyConfig(this.props)\r\n    , _frequency = item.mapFrequency || mapFrequency\r\n    , _dateDf = item.mapDateDf || mapDateDf;\r\n    return this._mapFrequency !== _frequency\r\n      || this._mapDateDf !== _dateDf\r\n      ? {\r\n          mapFrequency: _frequency,\r\n          mapDateDf: _dateDf\r\n        }\r\n      : void 0;\r\n  }\r\n\r\n  _checkForTableId = (id, item) => {\r\n    if (id === TABLE_ID) {\r\n      const _conf = this._crFrequencyConfig(item);\r\n      if (_conf) {\r\n       if(_isRequireChartOptionsUpdate(this._mapFrequency, _conf)){\r\n         this._chartOptions = crOptions(this.props, _conf)\r\n       }\r\n       this._setFrequencyConfig(_conf)\r\n       this.setState(this._crDateConfig())\r\n      }\r\n    }\r\n  }\r\n\r\n  _hSelect = (id, index, item) => {\r\n    this._items[index] = item\r\n    if (item) {\r\n      item.id = id\r\n      this._checkForTableId(id, item)\r\n    }\r\n  }\r\n  _refSelect = (id, comp) => {\r\n    this._compSelect[id] = comp\r\n  }\r\n\r\n  _renderSelects = (selectProps, isShow, isShowLabels) => {\r\n      return selectProps.map((item, index) => {\r\n        const {\r\n          id,\r\n          //uri, jsonProp, caption, isWithInput\r\n          ...restItem\r\n        } = item;\r\n        const _isShow = this.state[_crIsId(id)];\r\n        return (\r\n          <D.ShowHide key={id} isShow={_isShow}>\r\n            <D.SelectWithLoad\r\n              {...restItem}\r\n              ref={this._refSelect.bind(null, id)}\r\n              isShow={isShow}\r\n              isShowLabels={isShowLabels}\r\n              onSelect={this._hSelect.bind(null, id, index)}\r\n            />\r\n          </D.ShowHide>\r\n        );\r\n      });\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      caption, isShow,\r\n      onShow, onFront,\r\n      selectProps,\r\n      isFd, isCh, noDate, noForDate,\r\n      initFromDate,\r\n      errNotYmdOrEmpty,\r\n      isYmdOrEmpty\r\n    } = this.props\r\n    , {\r\n      chartType,\r\n      isToolbar, isOptions, isToggle,\r\n      isShowLabels,\r\n      isShowFd, isShowChart, isShowDate,\r\n      dateDefault, dateOptions,\r\n      validationMessages\r\n    } = this.state\r\n    , _isCategory = isCategory(chartType)\r\n    , _isRowFd = isFd && !_isCategory\r\n    , _noForDate = noForDate || !_isCategory;\r\n    return(\r\n      <D.DraggableDialog\r\n         isShow={isShow}\r\n         caption={caption}\r\n         menuModel={this._menuMore}\r\n         commandButtons={this._commandButtons}\r\n         onShowChart={onShow}\r\n         onFront={onFront}\r\n         onClose={this._hClose}\r\n      >\r\n           <D.Toolbar\r\n             isShow={isToolbar}\r\n             buttons={this.toolbarButtons}\r\n           />\r\n           <ModalOptions\r\n             isShow={isOptions}\r\n             toggleOption={this._toggleOptionWithToolbar}\r\n             onClose={this._hideOptionsWithToolbar}\r\n           />\r\n           <ModalToggle\r\n             isShow={isToggle}\r\n             noForDate={_noForDate}\r\n             selectProps={selectProps}\r\n             isFd={_isRowFd}\r\n             isShowFd={isShowFd}\r\n             isCh={isCh}\r\n             isShowChart={isShowChart}\r\n             isShowDate={isShowDate}\r\n             crIsId={_crIsId}\r\n             onToggle={this._toggleStateBy}\r\n             onCheckCaption={this._checkCaptionBy}\r\n             onUnCheckCaption={this._uncheckCaption}\r\n             onClose={this._hideToggleWithToolbar}\r\n           />\r\n           {this._renderSelects(selectProps, isShow, isShowLabels)}\r\n           {_isRowFd && <D.ShowHide isShow={isShowFd}>\r\n               <D.RowDate\r\n                innerRef={this._refFromDate}\r\n                isShowLabels={isShowLabels}\r\n                labelTitle=\"From Date:\"\r\n                initValue={initFromDate}\r\n                errorMsg={errNotYmdOrEmpty}\r\n                onTestDate={isYmdOrEmpty}\r\n               />\r\n             </D.ShowHide>\r\n           }\r\n           { isCh && <RowChart\r\n               chartType={chartType}\r\n               isShowLabels={isShowLabels}\r\n               isShowChart={isShowChart}\r\n               chartOptions={this._chartOptions}\r\n               onSelectChart={this._hSelectChartType}\r\n               onRegColor={this._onRegColor}\r\n               noDate={noDate}\r\n               isShowDate={isShowDate}\r\n               dateDefault={dateDefault}\r\n               dateOptions={dateOptions}\r\n               onSelecDate={this._hSelectDate}\r\n             />\r\n           }\r\n           <D.ValidationMessages\r\n               validationMessages={validationMessages}\r\n           />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogSelectN\r\n"],"file":"DialogSelectN.js"}