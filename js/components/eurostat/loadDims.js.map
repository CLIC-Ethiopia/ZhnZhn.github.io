{"version":3,"sources":["../../../src/components/eurostat/loadDims.js"],"names":["MSG_STILL_LOADING","MSG_403","MSG_HTTP_CODE","C","SELECTION_ALL","selection","filter","values","TID_DIM","code","_crUrl","proxy","baseMeta","id","_crSelectDim","_crOption","dims","noTime","arrQuery","map","dim","v","push","method","body","JSON","stringify","query","response","format","_crSelectOptions","ds","arr","_id","c","Dimension","len","length","i","caption","Category","label","slice","IS_LOADING","URL_LOADING","ID_TIMEOUT","_fClearLoading","url","_markStartLoading","setTimeout","_markStopLoading","clearTimeout","loadDims","_url","_option","fetch","then","res","status","json","Error","_ds","Dataset","configs","options","err","errMsg","message","Promise","resolve"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\n\r\nconst MSG_STILL_LOADING = \"Another dims are still loading\";\r\nconst MSG_403 = 'HTTP Code 403: Forbitten.\\nMaybe, require API key.';\r\nconst MSG_HTTP_CODE = 'HTTP Code';\r\n\r\nconst C = {\r\n  SELECTION_ALL: {\r\n    selection: {\r\n      filter: 'all',\r\n      values: ['*']\r\n    }\r\n  },\r\n  TID_DIM: {\r\n      code: \"Tid\",\r\n      selection: {\r\n        filter: \"top\",\r\n        values: [ \"1\" ]\r\n      }\r\n  }\r\n};\r\n\r\nconst _crUrl = (proxy, baseMeta, id) => {\r\n  if (proxy) {\r\n    return `${proxy}${baseMeta}/${id}`;\r\n  }\r\n  return `${baseMeta}/${id}`;\r\n}\r\n\r\nconst _crSelectDim = (code) => {\r\n  return { code, ...C.SELECTION_ALL };\r\n}\r\n\r\nconst _crOption = (dims, noTime) => {\r\n  const arrQuery = dims\r\n    .map(dim => _crSelectDim(dim.v));\r\n\r\n  if (!noTime) {\r\n   arrQuery.push(C.TID_DIM);\r\n  }\r\n\r\n  return  {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n       query: arrQuery,\r\n       response: {\r\n          format: \"json-stat\"\r\n       }\r\n    })\r\n  };\r\n}\r\n\r\nconst _crSelectOptions = (ds, dim) => {\r\n  const arr = []\r\n      , _id = dim.v\r\n      , c = ds.Dimension(_id)\r\n      , len = c.length;\r\n  let i = 0;\r\n  for(;i<len; i++){\r\n    arr.push({\r\n      caption: c.Category(i).label,\r\n      slice: {\r\n        [_id]: c.id[i]\r\n      }\r\n    })\r\n  }\r\n  return arr;\r\n}\r\n\r\n\r\nlet IS_LOADING = false;\r\nlet URL_LOADING;\r\nlet ID_TIMEOUT;\r\nconst _fClearLoading = (url) => () => {\r\n  if (url === URL_LOADING) {\r\n    IS_LOADING = false\r\n  }\r\n}\r\nconst _markStartLoading = (url) => {\r\n  URL_LOADING = url\r\n  ID_TIMEOUT = setTimeout(_fClearLoading(url), 5000);\r\n  IS_LOADING = true;\r\n}\r\nconst _markStopLoading = () => {\r\n  IS_LOADING = false;\r\n  clearTimeout(ID_TIMEOUT)\r\n}\r\n\r\nconst loadDims = ({ proxy, baseMeta, id, dims, noTime }) => {\r\n  if (!IS_LOADING) {\r\n    const _url = _crUrl(proxy, baseMeta, id)\r\n        , _option = _crOption(dims, noTime);\r\n    _markStartLoading(_url)\r\n    return fetch(_url, _option)\r\n      .then(res => {\r\n        const { status } = res;\r\n        if (status>=200 && status<400) {\r\n          return res.json();\r\n        } else {\r\n          if (status === 403 ) {\r\n            throw Error(MSG_403);\r\n          }\r\n          throw Error(`${MSG_HTTP_CODE}: ${status}`);\r\n        }\r\n      })\r\n      .then(json => {\r\n        const _ds = JSONstat(json).Dataset(0)\r\n            , configs = dims.map(dim => ({\r\n                id: dim.v,\r\n                caption: dim.c,\r\n                options: _crSelectOptions(_ds, dim)\r\n              }));\r\n        _markStopLoading()\r\n        return { configs };\r\n      })\r\n      .catch(err => {\r\n        _markStopLoading()\r\n        return { errMsg: err.message };\r\n      });\r\n   } else {\r\n     return Promise\r\n       .resolve({ errMsg: MSG_STILL_LOADING });\r\n   }\r\n}\r\n\r\nexport default loadDims\r\n"],"file":"loadDims.js"}