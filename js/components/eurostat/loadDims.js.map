{"version":3,"sources":["../../../src/components/eurostat/loadDims.js"],"names":["MSG_STILL_LOADING","C","SELECTION_ALL","selection","filter","values","TID_DIM","code","_crUrl","proxy","baseMeta","id","_crSelectDim","_crOption","dims","arrQuery","map","dim","v","push","method","body","JSON","stringify","query","response","format","_crSelectOptions","ds","arr","_id","c","Dimension","len","length","i","caption","Category","label","slice","IS_LOADING","URL_LOADING","ID_TIMEOUT","_fClearLoading","url","_markStartLoading","setTimeout","_markStopLoading","clearTimeout","loadDims","_url","_option","fetch","then","status","res","statusText","json","Error","_ds","Dataset","configs","options","catch","errMsg","err","message","Promise","resolve"],"mappings":"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","file":"loadDims.js","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\n\r\nconst MSG_STILL_LOADING = \"Another dims are still loading.\";\r\n\r\nconst C = {\r\n  SELECTION_ALL: {\r\n    selection: {\r\n      filter: 'all',\r\n      values: ['*']\r\n    }\r\n  },\r\n  TID_DIM: {\r\n      code: \"Tid\",\r\n      selection: {\r\n        filter: \"top\",\r\n        values: [ \"1\" ]\r\n      }\r\n  }\r\n};\r\n\r\nconst _crUrl = (proxy, baseMeta, id) => {\r\n  if (proxy) {\r\n    return `${proxy}${baseMeta}/${id}`;\r\n  }\r\n  return `${baseMeta}/${id}`;\r\n}\r\n\r\nconst _crSelectDim = (code) => {\r\n  return { code, ...C.SELECTION_ALL };\r\n}\r\n\r\nconst _crOption = (dims) => {\r\n  const arrQuery = dims\r\n    .map(dim => _crSelectDim(dim.v));\r\n\r\n  arrQuery.push(C.TID_DIM);\r\n\r\n  return  {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n       query: arrQuery,\r\n       response: {\r\n          format: \"json-stat\"\r\n       }\r\n    })\r\n  };\r\n}\r\n\r\nconst _crSelectOptions = (ds, dim) => {\r\n  const arr = []\r\n      , _id = dim.v\r\n      , c = ds.Dimension(_id)\r\n      , len = c.length;\r\n  let i = 0;\r\n  for(;i<len; i++){\r\n    arr.push({\r\n      caption: c.Category(i).label,\r\n      slice: {\r\n        [_id]: c.id[i]\r\n      }\r\n    })\r\n  }\r\n  return arr;\r\n}\r\n\r\n\r\nlet IS_LOADING = false;\r\nlet URL_LOADING;\r\nlet ID_TIMEOUT;\r\nconst _fClearLoading = (url) => () => {\r\n  if (url === URL_LOADING) {\r\n    IS_LOADING = false\r\n  }\r\n}\r\nconst _markStartLoading = (url) => {\r\n  URL_LOADING = url\r\n  ID_TIMEOUT = setTimeout(_fClearLoading(url), 5000);\r\n  IS_LOADING = true;\r\n}\r\nconst _markStopLoading = () => {\r\n  IS_LOADING = false;\r\n  clearTimeout(ID_TIMEOUT)\r\n}\r\n\r\nconst loadDims = ({ proxy, baseMeta, id, dims }) => {\r\n  if (!IS_LOADING) {\r\n    const _url = _crUrl(proxy, baseMeta, id)\r\n        , _option = _crOption(dims);\r\n    _markStartLoading(_url)\r\n    return fetch(_url, _option)\r\n      .then(res => {\r\n        const { status, statusText } = res;\r\n        if (status>=200 && status<400) {\r\n          return res.json();\r\n        } else {\r\n          throw Error(statusText);\r\n        }\r\n      })\r\n      .then(json => {\r\n        const _ds = JSONstat(json).Dataset(0)\r\n            , configs = dims.map(dim => ({\r\n                id: dim.v,\r\n                caption: dim.c,\r\n                options: _crSelectOptions(_ds, dim)\r\n              }));\r\n        _markStopLoading()\r\n        return { configs };\r\n      })\r\n      .catch(err => {\r\n        _markStopLoading()\r\n        return { errMsg: err.message };\r\n      });\r\n   } else {\r\n     return Promise\r\n       .resolve({ errMsg: MSG_STILL_LOADING });\r\n   }\r\n}\r\n\r\nexport default loadDims\r\n"]}