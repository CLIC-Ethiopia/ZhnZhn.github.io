{"version":3,"sources":["../../../src/components/eurostat/DialogStatN.jsx"],"names":["MAP_FREQUENCY_DF","MSG_DIMS_NOT_LOADED","S","SPINNER_LOADING","position","display","textAlign","margin","width","height","SPINNER_FAILED","borderColor","animation","_isOpenAndPrevLoadFailed","prevProps","props","state","isShow","isLoadFailed","_fNotTimeDimension","timeId","config","id","DialogStatN","Decor","dialog","_loadDims","proxy","baseMeta","dims","dfProps","noTime","dfId","then","result","configs","errMsg","_configs","filter","_selectOptions","map","options","setState","isLoading","validationMessages","_isCategory","RouterOptions","isCategory","chartType","_updateForDate","date","frequency","_items","mapFrequency","two","mapDateDf","dateConfig","isShowDate","_handleLoad","_crValidationMessages","length","colorComp","seriaColor","getColor","undefined","dateDefault","loadOpt","loadFn","items","selectOptions","onLoad","msg","forEach","index","caption","push","msgOnNotSelected","_handleClose","_handleWithValidationClose","_hSelectChartType","_onRegColor","comp","_fSelect","item","_hSelectDate","_renderSelectInputs","isShowLabels","conf","rest","bind","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","toolbarButtons","_createType2WithToolbar","_commandButtons","_crCommandsWithLoad","_chartOptions","crOptions","_isWithInitialState","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","render","onShow","onFront","isToolbar","dateOptions","_spinnerStyle","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport crDateConfig from './crDateConfig'\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport crMenuMore from '../dialogs/MenuMore'\r\nimport Decor from '../dialogs/decorators/Decorators';\r\nimport SpinnerLoading from '../zhn/SpinnerLoading'\r\n\r\nimport RouterOptions from './RouterOptions'\r\nimport loadDims from './loadDims'\r\n\r\nconst MAP_FREQUENCY_DF = 'M'\r\n    , MSG_DIMS_NOT_LOADED = \"Dims for request haven't been loaded.\\nClose, open dialog for trying load again.\";\r\n\r\nconst S = {\r\n  SPINNER_LOADING : {\r\n    position: 'relative',\r\n    display: 'block',\r\n    textAlign: 'middle',\r\n    margin: '16px auto 32px',\r\n    width: 32,\r\n    height: 32\r\n  },\r\n  SPINNER_FAILED: {\r\n    borderColor: '#f44336',\r\n    animation: 'none'\r\n  }\r\n};\r\n\r\nconst _isOpenAndPrevLoadFailed = (\r\n  prevProps, props, state\r\n) => props !== prevProps\r\n  && !prevProps.isShow\r\n  && props.isShow\r\n  && state.isLoadFailed;\r\n\r\nconst _fNotTimeDimension = timeId => config => config.id !== timeId;\r\n\r\n@Decor.dialog\r\nclass DialogStatN extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n\r\n    this.toolbarButtons = this._createType2WithToolbar(props)\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n    this._chartOptions = RouterOptions.crOptions(props)\r\n    this._items = []\r\n    this._selectOptions = []\r\n\r\n    this.state = {\r\n      ...this._isWithInitialState(),\r\n      isLoading: true,\r\n      isLoadFailed: false,\r\n      isShowDate: false,\r\n      ...crDateConfig('EMPTY')\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadDims()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if ( _isOpenAndPrevLoadFailed(\r\n      prevProps, this.props, this.state\r\n    )) {\r\n      this.setState({\r\n        isLoading: true,\r\n        isLoadFailed: false\r\n      })\r\n      this._loadDims()\r\n    }\r\n  }\r\n\r\n _loadDims = () => {\r\n    const {\r\n      proxy, baseMeta,\r\n      dims, timeId, dfProps={}, noTime\r\n    } = this.props\r\n    , { dfId } = dfProps;\r\n    loadDims({ id: dfId, proxy, baseMeta, dims, noTime, timeId })\r\n      .then(result => {\r\n         const { configs, errMsg } = result;\r\n         if (configs) {\r\n           //id\r\n           const _configs = configs.filter(_fNotTimeDimension(timeId));\r\n           this._selectOptions = _configs\r\n             .map(config => config.options)\r\n           this.setState({\r\n              isLoading: false,\r\n              isLoadFailed: false,\r\n              configs: _configs\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            isLoadFailed: true,\r\n            validationMessages: [ errMsg ]\r\n          })\r\n        }\r\n      })\r\n  }\r\n\r\n  _isCategory = () => {\r\n    return RouterOptions.isCategory(this.chartType)\r\n  }\r\n\r\n  _updateForDate = () => {\r\n    this.date = null;\r\n    const frequency = (this._items[1])\r\n             ? (this.props.mapFrequency)\r\n                  ? this.props.mapFrequency\r\n                  : (this.two.mapFrequency)\r\n                       ? this.two.mapFrequency\r\n                       : MAP_FREQUENCY_DF\r\n             : null\r\n         , { mapDateDf } = this.props\r\n         , dateConfig = (frequency)\r\n              ? crDateConfig(frequency, mapDateDf)\r\n              : crDateConfig('Y', mapDateDf)\r\n\r\n    this.setState({\r\n       isShowDate: true,\r\n       ...dateConfig\r\n    });\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._crValidationMessages();\r\n    if (validationMessages.length === 0){\r\n      const {\r\n             _items,\r\n             chartType, colorComp,\r\n             date\r\n            } = this\r\n          , seriaColor = colorComp\r\n              ? colorComp.getColor()\r\n              : undefined\r\n          , { dateDefault } = this.state;\r\n\r\n      const loadOpt = this.props.loadFn(\r\n        this.props, {\r\n          //one, two, chartType, date, dateDefault,\r\n          chartType, seriaColor,\r\n          date, dateDefault,\r\n          items: _items,\r\n          selectOptions: this._selectOptions\r\n        }\r\n      );\r\n      this.props.onLoad(loadOpt)\r\n   }\r\n   this.setState({ validationMessages })\r\n  }\r\n\r\n  _crValidationMessages = () => {\r\n    const msg = []\r\n        , { configs, isLoadFailed } = this.state;\r\n    if (!isLoadFailed) {\r\n      configs.forEach((config, index) => {\r\n         const { caption } = config;\r\n         if (!this._items[index]) {\r\n           msg.push(this.props.msgOnNotSelected(caption))\r\n         }\r\n      })\r\n    } else {\r\n      msg.push(MSG_DIMS_NOT_LOADED)\r\n    }\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose();\r\n  }\r\n\r\n  _hSelectChartType = (chartType) => {\r\n    this.chartType = chartType;\r\n    if (this._isCategory()) {\r\n      this._updateForDate();\r\n    } else {\r\n      this.setState({ isShowDate : false });\r\n    }\r\n  }\r\n  _onRegColor = (comp) => {\r\n    this.colorComp = comp\r\n  }\r\n\r\n\r\n  _fSelect = (index) => {\r\n    return function(item) {\r\n      this._items[index] = item\r\n    };\r\n  }\r\n\r\n  _hSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _renderSelectInputs = () => {\r\n    const { isShowLabels, configs } = this.state\r\n    return configs.map((conf, index) => {\r\n      const { id, caption, options } = conf\r\n         , rest = { isShowLabels, caption, options };\r\n      return (\r\n        <D.RowInputSelect\r\n          key={id}\r\n          {...rest}\r\n          onSelect={this._fSelect(index).bind(this)}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            caption, isShow, onShow, onFront,\r\n          } = this.props\r\n        , {\r\n            isToolbar,\r\n            isShowLabels,\r\n            isLoading, isLoadFailed,\r\n            isShowDate, dateDefault, dateOptions,\r\n            validationMessages\r\n          } = this.state\r\n        , _spinnerStyle = !isLoadFailed\r\n             ? S.SPINNER_LOADING\r\n             : { ...S.SPINNER_LOADING, ...S.SPINNER_FAILED};\r\n\r\n    return (\r\n      <D.DraggableDialog\r\n           isShow={isShow}\r\n           caption={caption}\r\n           menuModel={this._menuMore}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onFront={onFront}\r\n           onClose={this._handleClose}\r\n       >\r\n         <D.Toolbar\r\n           isShow={isToolbar}\r\n           buttons={this.toolbarButtons}\r\n         />\r\n         {\r\n           (isLoading || isLoadFailed) &&\r\n           <SpinnerLoading\r\n             style={_spinnerStyle}\r\n           />\r\n         }\r\n         {\r\n           !isLoading &&\r\n           !isLoadFailed &&\r\n           this._renderSelectInputs()\r\n         }\r\n\r\n         <D.RowChart\r\n           isShowLabels={isShowLabels}\r\n           options={this._chartOptions}\r\n           onSelectChart={this._hSelectChartType}\r\n           onRegColor={this._onRegColor}\r\n         />\r\n         <D.ShowHide isShow={isShowDate}>\r\n           <D.RowInputSelect\r\n              isShowLabels={isShowLabels}\r\n              caption=\"For Date\"\r\n              placeholder={dateDefault}\r\n              options={dateOptions}\r\n              onSelect={this._hSelectDate}\r\n           />\r\n         </D.ShowHide>\r\n         <D.ValidationMessages\r\n             validationMessages={validationMessages}\r\n         />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogStatN\r\n"],"file":"DialogStatN.js"}