{"version":3,"sources":["../../../src/components/eurostat/DialogStatN.jsx"],"names":["DATE_PLACEHOLDER","MAP_FREQUENCY_DF","MSG_DIMS_NOT_LOADED","S","SPINNER_LOADING","position","display","textAlign","margin","width","height","SPINNER_FAILED","borderColor","animation","DialogStatN","withToolbar","withValidationLoad","props","_loadDims","proxy","baseMeta","dims","dfProps","dfId","id","then","configs","result","errMsg","_selectOptions","map","config","options","setState","isLoading","isLoadFailed","validationMessages","_isCategory","isCategory","chartType","_updateForDate","date","_items","mapFrequency","two","mapDateDf","frequency","createEurostatSelect","isShowDate","dateDefault","dateOptions","_handleLoad","_crValidationMessages","length","state","loadOpt","loadFn","items","selectOptions","onLoad","forEach","index","caption","msg","push","msgOnNotSelected","_handleClose","_handleWithValidationClose","_hSelectChartType","_fSelect","item","_hSelectDate","_renderSelectInputs","isShowLabels","conf","rest","bind","toolbarButtons","_createType2WithToolbar","_commandButtons","_chartOptions","crOptions","nextProps","isShow","nextState","onShow","onFront","_spinnerStyle"],"mappings":"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","file":"DialogStatN.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport Decor from '../dialogs/decorators/Decorators';\r\nimport SpinnerLoading from '../zhn/SpinnerLoading'\r\n\r\nimport RouterOptions from './RouterOptions'\r\nimport loadDims from './loadDims'\r\n\r\nconst  DATE_PLACEHOLDER = 'Before Select Metric'\r\n     , MAP_FREQUENCY_DF = 'M'\r\n     , MSG_DIMS_NOT_LOADED = \"Dims for request haven't been loaded.\\nClose, open dialog for trying load again.\";\r\n\r\n\r\nconst S = {\r\n  SPINNER_LOADING : {\r\n    position: 'relative',\r\n    display: 'block',\r\n    textAlign: 'middle',\r\n    margin: '16px auto 32px',\r\n    width: '32px',\r\n    height: '32px'\r\n  },\r\n  SPINNER_FAILED: {\r\n    borderColor: '#f44336',\r\n    animation: 'none'\r\n  }\r\n};\r\n\r\n@Decor.withToolbar\r\n@Decor.withValidationLoad\r\nclass DialogStatN extends Component {\r\n\r\n  constructor(props){\r\n    super()\r\n\r\n    this.toolbarButtons = this._createType2WithToolbar(props)\r\n    this._commandButtons = [\r\n      <D.Button.Load onClick={this._handleLoad} />\r\n    ];\r\n    this._chartOptions = RouterOptions.crOptions(props)\r\n    this._items = []\r\n    this._selectOptions = []\r\n\r\n    this.state = {\r\n      isShowLabels: true,\r\n      isLoading: true,\r\n      isLoadFailed: false,\r\n      isShowDate: false,\r\n      dateDefault: DATE_PLACEHOLDER,\r\n      dateOptions: [],\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if (this.props !== nextProps &&\r\n        !this.props.isShow &&\r\n        nextProps.isShow &&\r\n        this.state.isLoadFailed\r\n    ){\r\n      this.setState({\r\n        isLoading: true,\r\n        isLoadFailed: false\r\n      })\r\n      this._loadDims()\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadDims()\r\n  }\r\n\r\n  _loadDims = () => {\r\n    const { proxy, baseMeta, dims, dfProps={} } = this.props\r\n        , { dfId } = dfProps;\r\n\r\n    loadDims({ id: dfId, proxy, baseMeta, dims })\r\n      .then(result => {\r\n         const { configs, errMsg } = result;\r\n         if (configs) {\r\n           this._selectOptions = configs\r\n             .map(config => config.options)\r\n           this.setState({\r\n              isLoading: false,\r\n              isLoadFailed: false,\r\n              configs: configs\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            isLoadFailed: true,\r\n            validationMessages: [ errMsg ]\r\n          })\r\n        }\r\n      })\r\n  }\r\n\r\n  _isCategory = () => {\r\n    return RouterOptions.isCategory(this.chartType)\r\n  }\r\n\r\n  _updateForDate = () => {\r\n    this.date = null;\r\n    const frequency = (this._items[1])\r\n             //(this.two)\r\n             ? (this.props.mapFrequency)\r\n                  ? this.props.mapFrequency\r\n                  : (this.two.mapFrequency)\r\n                       ? this.two.mapFrequency\r\n                       : MAP_FREQUENCY_DF\r\n             : null\r\n         , { mapDateDf } = this.props\r\n         , config = (frequency)\r\n             ? DateUtils.createEurostatSelect(frequency, mapDateDf)\r\n             : DateUtils.createEurostatSelect('Y', mapDateDf)\r\n             //: { dateDefault : DATE_PLACEHOLDER , options : [] };\r\n\r\n    this.setState({\r\n       isShowDate : true,\r\n       dateDefault : config.dateDefault,\r\n       dateOptions : config.options\r\n    });\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._crValidationMessages();\r\n    if (validationMessages.length === 0){\r\n      const { _items, chartType, date } = this\r\n          , { dateDefault } = this.state;\r\n\r\n      const loadOpt = this.props.loadFn(\r\n        this.props, {\r\n          //one, two, chartType, date, dateDefault,\r\n          chartType, date, dateDefault,\r\n          items: _items,\r\n          selectOptions: this._selectOptions\r\n        }\r\n      );\r\n      this.props.onLoad(loadOpt)\r\n   }\r\n   this.setState({ validationMessages })\r\n  }\r\n\r\n  _crValidationMessages = () => {\r\n    const msg = []\r\n        , { configs, isLoadFailed } = this.state;\r\n    if (!isLoadFailed) {\r\n      configs.forEach((config, index) => {\r\n         const { caption } = config;\r\n         if (!this._items[index]) {\r\n           msg.push(this.props.msgOnNotSelected(caption))\r\n         }\r\n      })\r\n    } else {\r\n      msg.push(MSG_DIMS_NOT_LOADED)\r\n    }\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose();\r\n  }\r\n\r\n  _hSelectChartType = (chartType) => {\r\n    this.chartType = chartType;\r\n    if (this._isCategory()) {\r\n      this._updateForDate();\r\n    } else {\r\n      this.setState({ isShowDate : false });\r\n    }\r\n  }\r\n\r\n\r\n  _fSelect = (index) => {\r\n    return function(item) {\r\n      this._items[index] = item\r\n    };\r\n  }\r\n\r\n  _hSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _renderSelectInputs = () => {\r\n    const { isShowLabels, configs } = this.state\r\n    return configs.map((conf, index) => {\r\n      const { id, caption, options } = conf\r\n         , rest = { isShowLabels, caption, options };\r\n      return (\r\n        <D.RowInputSelect\r\n          key={id}\r\n          {...rest}\r\n          onSelect={this._fSelect(index).bind(this)}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            caption, isShow, onShow, onFront,\r\n          } = this.props\r\n        , {\r\n            isShowLabels,\r\n            isLoading, isLoadFailed,\r\n            isShowDate, dateDefault, dateOptions,\r\n            validationMessages\r\n          } = this.state\r\n        , _spinnerStyle = !isLoadFailed\r\n             ? S.SPINNER_LOADING\r\n             : { ...S.SPINNER_LOADING, ...S.SPINNER_FAILED};\r\n        \r\n    return (\r\n      <D.DraggableDialog\r\n           caption={caption}\r\n           isShow={isShow}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onFront={onFront}\r\n           onClose={this._handleClose}\r\n       >\r\n         <D.ToolbarButtonCircle\r\n           buttons={this.toolbarButtons}\r\n         />\r\n         {\r\n           (isLoading || isLoadFailed) &&\r\n           <SpinnerLoading\r\n             style={_spinnerStyle}\r\n           />\r\n         }\r\n         {\r\n           !isLoading &&\r\n           !isLoadFailed &&\r\n           this._renderSelectInputs()\r\n         }\r\n\r\n         <D.RowInputSelect\r\n           isShowLabels={isShowLabels}\r\n           caption=\"Chart\"\r\n           placeholder=\"Default: Area\"\r\n           options={this._chartOptions}\r\n           onSelect={this._hSelectChartType}\r\n         />\r\n         <D.ShowHide isShow={isShowDate}>\r\n           <D.RowInputSelect\r\n              isShowLabels={isShowLabels}\r\n              caption=\"For Date\"\r\n              placeholder={dateDefault}\r\n              options={dateOptions}\r\n              onSelect={this._hSelectDate}\r\n           />\r\n         </D.ShowHide>\r\n         <D.ValidationMessages\r\n             validationMessages={validationMessages}\r\n         />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogStatN\r\n"]}