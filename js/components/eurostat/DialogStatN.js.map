{"version":3,"sources":["../../../src/components/eurostat/DialogStatN.jsx"],"names":["MAP_FREQUENCY_DF","MSG_DIMS_NOT_LOADED","S","SPINNER_LOADING","position","display","textAlign","margin","width","height","SPINNER_FAILED","borderColor","animation","isCategory","ChartTypes","crOptions","_crIsId","id","_isOpenAndPrevLoadFailed","prevProps","props","state","isShow","isLoadFailed","DialogStatN","Decor","dialog","_toggleStateBy","propName","setState","prevState","_checkCaptionBy","index","_titles","push","_uncheckCaption","filter","v","_setConfigs","configs","timeId","mF","mapFrequency","errMsg","chartsType","isLoading","selectOptions","map","config","options","chartOptions","validationMessages","_loadDims","dims","proxy","baseMeta","dfProps","then","err","message","_updateForDate","chartType","date","mapDateDf","_frequency","dateConfig","isShowDate","_handleLoad","_crValidationMessages","length","_items","dialogOptions","colorComp","getConf","seriaColor","seriaWidth","dateDefault","_props","loadOpt","loadFn","items","titles","onLoad","msg","_isCategory","dim","forEach","caption","msgOnNotSelected","_handleClose","_handleWithValidationClose","_hSelectChartType","_onRegColor","comp","_fSelect","item","_hSelectDate","_renderSelectInputs","isShowLabels","conf","_isShow","bind","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","toolbarButtons","_createType2WithToolbar","noDate","isOptions","isToggle","_commandButtons","_crCommandsWithLoad","_isWithInitialState","isShowChart","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","render","onShow","onFront","isToolbar","dateOptions","_spinnerStyle","_toggleOptionWithToolbar","_hideOptionsWithToolbar","_hideToggleWithToolbar","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport crDateConfig from './crDateConfig'\r\n\r\nimport loadConfigs from './loadConfigs'\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport crMenuMore from '../dialogs/MenuMore'\r\nimport Decor from '../dialogs/decorators/Decorators';\r\nimport ChartTypes from '../dialogs/ChartTypes'\r\nimport SpinnerLoading from '../zhn/SpinnerLoading'\r\n\r\nimport ModalOptions from './ModalOptions'\r\nimport ModalToggle from './ModalToggle'\r\nimport RowChart from './RowChart'\r\n\r\nconst MAP_FREQUENCY_DF = 'M'\r\n    , MSG_DIMS_NOT_LOADED = \"Dims for request haven't been loaded.\\nClose, open dialog for trying load again.\";\r\n\r\nconst S = {\r\n  SPINNER_LOADING : {\r\n    position: 'relative',\r\n    display: 'block',\r\n    textAlign: 'middle',\r\n    margin: '16px auto 32px',\r\n    width: 32,\r\n    height: 32\r\n  },\r\n  SPINNER_FAILED: {\r\n    borderColor: '#f44336',\r\n    animation: 'none'\r\n  }\r\n};\r\n\r\nconst {\r\n  isCategory,\r\n  crOptions\r\n } = ChartTypes;\r\n\r\nconst _crIsId = id => `is${id}Select`;\r\n\r\nconst _isOpenAndPrevLoadFailed = (\r\n  prevProps, props, state\r\n) => props !== prevProps\r\n  && !prevProps.isShow\r\n  && props.isShow\r\n  && state.isLoadFailed;\r\n\r\n@Decor.dialog\r\nclass DialogStatN extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n    this.toolbarButtons = this._createType2WithToolbar(props, {\r\n      noDate: true, isOptions: true, isToggle: true\r\n    })\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n    this._items = []\r\n    this._titles = []\r\n\r\n    this.state = {\r\n      ...this._isWithInitialState(),\r\n      isLoading: true,\r\n      isLoadFailed: false,\r\n      isShowChart: true,\r\n      isShowDate: false,\r\n      ...crDateConfig('EMPTY'),\r\n      isOptions: false,\r\n      isToggle: false,\r\n      configs: [],\r\n      selectOptions: [],\r\n      mapFrequency: props.mapFrequency,\r\n      chartOptions: crOptions(props)\r\n      //chartType\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadDims()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if ( _isOpenAndPrevLoadFailed(\r\n      prevProps, this.props, this.state\r\n    )) {\r\n      this.setState({\r\n        isLoading: true,\r\n        isLoadFailed: false\r\n      })\r\n      this._loadDims()\r\n    }\r\n  }\r\n\r\n  _toggleStateBy = (propName) => {\r\n    this.setState(prevState => ({\r\n      [propName]: !prevState[propName]\r\n    }))\r\n  }\r\n  _checkCaptionBy = (index) => {\r\n    this._titles.push(index)\r\n  }\r\n  _uncheckCaption = (index) => {\r\n     this._titles = this._titles\r\n       .filter(v => v !== index)\r\n  }\r\n\r\n  _setConfigs = ({\r\n    configs,\r\n    timeId,\r\n    mapFrequency:mF,\r\n    errMsg\r\n  }) => {\r\n    if (configs) {\r\n      const { chartsType, mapFrequency } = this.props;\r\n      this.setState({\r\n       isLoading: false,\r\n       isLoadFailed: false,\r\n       timeId,\r\n       configs,\r\n       mapFrequency: mF || mapFrequency,\r\n       selectOptions: configs\r\n         .map(config => config.options),\r\n       chartOptions: crOptions({ configs, chartsType })\r\n      })\r\n    } else {\r\n      this.setState({\r\n       isLoading: false,\r\n       isLoadFailed: true,\r\n       validationMessages: [errMsg]\r\n     })\r\n   }\r\n  }\r\n\r\n _loadDims = () => {\r\n    const {\r\n      dims, proxy, baseMeta,\r\n      dfProps\r\n    } = this.props;\r\n    loadConfigs({ dims, proxy, baseMeta, ...dfProps })\r\n      .then(this._setConfigs)\r\n      .catch(err => {\r\n        this._setConfigs({ errMsg: err.message })\r\n      })\r\n  }\r\n\r\n\r\n  _updateForDate = (chartType) => {\r\n    this.date = null;\r\n\r\n    const { mapDateDf } = this.props\r\n    , { mapFrequency } = this.state\r\n    , _frequency = mapFrequency || MAP_FREQUENCY_DF\r\n    , dateConfig = crDateConfig(_frequency, mapDateDf);\r\n\r\n    this.setState({\r\n       isShowDate: true,\r\n       ...dateConfig,\r\n       chartType\r\n    });\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._crValidationMessages();\r\n    if (validationMessages.length === 0){\r\n      const {\r\n         _items,\r\n         dialogOptions,\r\n         colorComp,\r\n         date\r\n        } = this\r\n      , {\r\n          timeId,\r\n          chartType, selectOptions\r\n        } = this.state\r\n      , { seriaColor, seriaWidth } = colorComp\r\n           ? colorComp.getConf()\r\n           : {}\r\n      , { dateDefault } = this.state\r\n      , _props = { ...this.props, timeId }\r\n      , loadOpt = this.props.loadFn(\r\n         _props, {\r\n          dialogOptions,\r\n          chartType, seriaColor, seriaWidth,\r\n          date, dateDefault,\r\n          items: _items,\r\n          titles: this._titles,\r\n          selectOptions: selectOptions\r\n        }\r\n      );\r\n      this.props.onLoad(loadOpt)\r\n   }\r\n   this.setState({ validationMessages })\r\n  }\r\n\r\n  _crValidationMessages = () => {\r\n    const msg = []\r\n    , { configs, isLoadFailed, chartType={} } = this.state\r\n    , _isCategory = isCategory(chartType)\r\n    , { dim } = chartType;\r\n    if (!isLoadFailed) {\r\n      configs.forEach((config, index) => {\r\n         const { caption } = config;\r\n         if (!(_isCategory && caption === dim)) {\r\n           if (!this._items[index]) {\r\n             msg.push(this.props.msgOnNotSelected(caption))\r\n           }\r\n         }\r\n      })\r\n    } else {\r\n      msg.push(MSG_DIMS_NOT_LOADED)\r\n    }\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose();\r\n  }\r\n\r\n  _hSelectChartType = (chartType) => {\r\n    if (isCategory(chartType)) {\r\n      this._updateForDate(chartType);\r\n    } else {\r\n      this.setState({\r\n        chartType,\r\n        isShowDate: false\r\n      });\r\n    }\r\n  }\r\n  _onRegColor = (comp) => {\r\n    this.colorComp = comp\r\n  }\r\n\r\n\r\n  _fSelect = (index) => {\r\n    return function(item) {\r\n      this._items[index] = item\r\n    };\r\n  }\r\n\r\n  _hSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _renderSelectInputs = () => {\r\n    const { isShowLabels, configs } = this.state;\r\n    return configs.map((conf, index) => {\r\n      const { id, caption, options } = conf\r\n      , _isShow = !this.state[_crIsId(id)];\r\n      return (\r\n        <D.ShowHide key={id} isShow={_isShow}>\r\n          <D.RowInputSelect\r\n            isShowLabels={isShowLabels}\r\n            caption={caption}\r\n            options={options}\r\n            onSelect={this._fSelect(index).bind(this)}\r\n          />\r\n        </D.ShowHide>\r\n      );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            caption, isShow, onShow, onFront,\r\n          } = this.props\r\n        , {\r\n            chartType,\r\n            isToolbar,\r\n            isOptions, isToggle,\r\n            isShowLabels,\r\n            isLoading, isLoadFailed,\r\n            isShowChart,\r\n            isShowDate, dateDefault, dateOptions,\r\n            configs,\r\n            chartOptions,\r\n            validationMessages\r\n          } = this.state\r\n        , _spinnerStyle = !isLoadFailed\r\n             ? S.SPINNER_LOADING\r\n             : { ...S.SPINNER_LOADING, ...S.SPINNER_FAILED};\r\n\r\n    return (\r\n      <D.DraggableDialog\r\n           isShow={isShow}\r\n           caption={caption}\r\n           menuModel={this._menuMore}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onFront={onFront}\r\n           onClose={this._handleClose}\r\n       >\r\n         <D.Toolbar\r\n           isShow={isToolbar}\r\n           buttons={this.toolbarButtons}\r\n         />\r\n         <ModalOptions\r\n           isShow={isOptions}\r\n           toggleOption={this._toggleOptionWithToolbar}\r\n           onClose={this._hideOptionsWithToolbar}\r\n         />\r\n         <ModalToggle\r\n           isShow={isToggle}\r\n           selectProps={configs}\r\n           isShowChart={isShowChart}\r\n           isShowDate={isShowDate}\r\n           crIsId={_crIsId}\r\n           onToggle={this._toggleStateBy}\r\n           onCheckCaption={this._checkCaptionBy}\r\n           onUnCheckCaption={this._uncheckCaption}\r\n           onClose={this._hideToggleWithToolbar}\r\n         />\r\n         {\r\n           (isLoading || isLoadFailed) &&\r\n           <SpinnerLoading\r\n             style={_spinnerStyle}\r\n           />\r\n         }\r\n         {\r\n           !isLoading &&\r\n           !isLoadFailed &&\r\n           this._renderSelectInputs()\r\n         }\r\n         <RowChart\r\n           chartType={chartType}\r\n           isShowLabels={isShowLabels}\r\n           isShowChart={isShowChart}\r\n           chartOptions={chartOptions}\r\n           onSelectChart={this._hSelectChartType}\r\n           onRegColor={this._onRegColor}\r\n           isShowDate={isShowDate}\r\n           dateDefault={dateDefault}\r\n           dateOptions={dateOptions}\r\n           onSelecDate={this._hSelectDate}\r\n         />\r\n         <D.ValidationMessages\r\n             validationMessages={validationMessages}\r\n         />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogStatN\r\n"],"file":"DialogStatN.js"}