{"version":3,"sources":["../../../src/components/eurostat/DialogEurostat2.jsx"],"names":["DATE_PLACEHOLDER","MAP_FREQUENCY_DF","DialogEurostat2","withToolbar","withValidationLoad","props","_isCategory","isCategory","chartType","_updateForDate","date","two","mapFrequency","mapDateDf","config","frequency","createEurostatSelect","dateDefault","options","setState","isShowDate","dateOptions","_handleSelectOne","one","_handleSelectTwo","_handleSelectChartType","_handleSelectDate","_handleLoad","_handleWithValidationLoad","_createValidationMessages","_createLoadOption","oneCaption","twoCaption","msg","push","msgOnNotSelected","isValid","length","compSelect1","compSelect2","state","loadFn","selectOptions","getOptions","_handleClose","_handleWithValidationClose","_refSelect1","comp","_refSelect2","undefined","toolbarButtons","_createType2WithToolbar","_commandButtons","_chartOptions","crOptions","isShowLabels","validationMessages","nextProps","nextState","isShow","caption","onShow","onFront","oneURI","oneJsonProp","twoURI","twoJsonProp","defaultProps"],"mappings":"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","file":"DialogEurostat2.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport Decor from '../dialogs/decorators/Decorators';\r\n\r\nimport RouterOptions from './RouterOptions';\r\n\r\nconst  DATE_PLACEHOLDER = 'Before Select Metric'\r\n     , MAP_FREQUENCY_DF = 'M';\r\n\r\n@Decor.withToolbar\r\n@Decor.withValidationLoad\r\nclass DialogEurostat2 extends Component {\r\n  static defaultProps = {\r\n    oneCaption: 'Item',\r\n    oneJsonProp: 'items',\r\n    twoCaption: 'Metric',\r\n    twoJsonProp: 'metrics',\r\n  }\r\n\r\n  /*\r\n  static propTypes = {\r\n    isShow: PropTypes.bool,\r\n    caption: PropTypes.string,\r\n\r\n    oneCaption: PropTypes.string,\r\n    oneURI: PropTypes.string,\r\n    oneJsonProp: PropTypes.string,\r\n\r\n    twoCaption: PropTypes.string,\r\n    twoURI: PropTypes.string,\r\n    twoJsonProp: PropTypes.string,\r\n\r\n    mapFrequency: PropTypes.oneOf(['M', 'Q', 'Y']),\r\n    mapDateDf: PropTypes.number,\r\n\r\n    msgOnNotSelected: PropTypes.func,\r\n    onShow: PropTypes.func,\r\n    loadFn: PropTypes.func\r\n  }\r\n */\r\n  constructor(props){\r\n    super();\r\n    this.one = undefined;\r\n    this.two = undefined;\r\n    this.date = undefined;\r\n    this.chartType = undefined;\r\n\r\n    this.toolbarButtons = this._createType2WithToolbar(props)\r\n\r\n    this._commandButtons = [\r\n      <D.Button.Load onClick={this._handleLoad} />\r\n    ];\r\n\r\n    this._chartOptions = RouterOptions.crOptions(props)\r\n\r\n    this.state = {\r\n      isShowLabels: true,\r\n      isShowDate: false,\r\n      dateDefault: DATE_PLACEHOLDER,\r\n      dateOptions: [],\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _isCategory = () => {\r\n    return RouterOptions.isCategory(this.chartType)\r\n  }\r\n\r\n  _updateForDate = () => {\r\n    this.date = null;\r\n    const frequency = (this.two)\r\n             ? (this.props.mapFrequency)\r\n                  ? this.props.mapFrequency\r\n                  : (this.two.mapFrequency)\r\n                       ? this.two.mapFrequency\r\n                       : MAP_FREQUENCY_DF\r\n             : null\r\n         , { mapDateDf } = this.props\r\n         , config = (frequency)\r\n             ? DateUtils.createEurostatSelect(frequency, mapDateDf)\r\n             : { dateDefault : DATE_PLACEHOLDER , options : [] };\r\n\r\n    this.setState({\r\n       isShowDate : true,\r\n       dateDefault : config.dateDefault,\r\n       dateOptions : config.options\r\n    });\r\n  }\r\n\r\n  _handleSelectOne = (one) => {\r\n    this.one = one;\r\n  }\r\n\r\n  _handleSelectTwo = (two) => {\r\n    this.two = two;\r\n    if (this._isCategory()) {\r\n      this._updateForDate();\r\n    }\r\n  }\r\n\r\n  _handleSelectChartType = (chartType) => {\r\n    this.chartType = chartType;\r\n    if (this._isCategory()) {\r\n      this._updateForDate();\r\n    } else {\r\n      this.setState({ isShowDate : false });\r\n    }\r\n  }\r\n\r\n  _handleSelectDate = (date) => {\r\n    this.date = date;\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    this._handleWithValidationLoad(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    );\r\n  }\r\n  _createValidationMessages = () => {\r\n     const { oneCaption, twoCaption } = this.props;\r\n     const msg = [];\r\n\r\n     if (!this._isCategory()) {\r\n        if (!this.one) { msg.push(this.props.msgOnNotSelected(oneCaption)); }\r\n     }\r\n     if (!this.two) { msg.push(this.props.msgOnNotSelected(twoCaption)); }\r\n\r\n     msg.isValid = (msg.length === 0) ? true : false;\r\n     return msg;\r\n  }\r\n  _createLoadOption = () => {\r\n    const {\r\n            one, two, chartType, date,\r\n            compSelect1, compSelect2\r\n          } = this\r\n        , { dateDefault } = this.state;\r\n    return this.props.loadFn(\r\n      this.props, {\r\n        one, two, chartType, date, dateDefault,\r\n        selectOptions: [\r\n          compSelect1.getOptions(),\r\n          compSelect2.getOptions()\r\n        ]\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose()\r\n  }\r\n\r\n  _refSelect1 = (comp) => {\r\n    this.compSelect1 = comp\r\n  }\r\n  _refSelect2 = (comp) => {\r\n    this.compSelect2 = comp\r\n  }\r\n\r\n  render(){\r\n    const {\r\n           caption, isShow, onShow, onFront,\r\n           oneCaption, oneURI, oneJsonProp,\r\n           twoCaption, twoURI, twoJsonProp\r\n          } = this.props\r\n        , {\r\n            isShowLabels, isShowDate,\r\n            dateDefault, dateOptions,\r\n            validationMessages\r\n          } = this.state;\r\n\r\n    return(\r\n        <D.DraggableDialog\r\n             caption={caption}\r\n             isShow={isShow}\r\n             commandButtons={this._commandButtons}\r\n             onShowChart={onShow}\r\n             onFront={onFront}\r\n             onClose={this._handleClose}\r\n         >\r\n             <D.ToolbarButtonCircle\r\n               buttons={this.toolbarButtons}\r\n             />\r\n             <D.SelectWithLoad\r\n               ref={this._refSelect1}\r\n               isShow={isShow}\r\n               isShowLabels={isShowLabels}\r\n               uri={oneURI}\r\n               jsonProp={oneJsonProp}\r\n               caption={oneCaption}\r\n               optionNames=\"Items\"\r\n               onSelect={this._handleSelectOne}\r\n             />\r\n             <D.SelectWithLoad\r\n               ref={this._refSelect2}\r\n               isShow={isShow}\r\n               isShowLabels={isShowLabels}\r\n               uri={twoURI}\r\n               jsonProp={twoJsonProp}\r\n               caption={twoCaption}\r\n               optionNames=\"Metrics\"\r\n               onSelect={this._handleSelectTwo}\r\n             />\r\n             <D.RowInputSelect\r\n               isShowLabels={isShowLabels}\r\n               caption=\"Chart\"\r\n               placeholder=\"Default: Area\"\r\n               options={this._chartOptions}\r\n               onSelect={this._handleSelectChartType}\r\n             />\r\n             <D.ShowHide isShow={isShowDate}>\r\n               <D.RowInputSelect\r\n                  isShowLabels={isShowLabels}\r\n                  caption=\"For Date\"\r\n                  placeholder={dateDefault}\r\n                  options={dateOptions}\r\n                  onSelect={this._handleSelectDate}\r\n               />\r\n             </D.ShowHide>\r\n             <D.ValidationMessages\r\n                 validationMessages={validationMessages}\r\n             />\r\n        </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogEurostat2\r\n"]}