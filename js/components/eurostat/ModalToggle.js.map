{"version":3,"sources":["../../../src/components/eurostat/ModalToggle.jsx"],"names":["CHECKED_COLOR","CheckBoxList","selectProps","crIsId","onToggle","map","item","id","STYLE","ROW_CB","caption","ModalToggle","isShow","style","className","CL","isShowDate","isShowChart","noForDate","toggleChart","toggleDate","onClose","ROOT"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA,IAAMA,aAAa,GAAG,SAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MACnBC,WADmB,QACnBA,WADmB;AAAA,MACNC,MADM,QACNA,MADM;AAAA,MACEC,SADF,QACEA,QADF;AAAA,SAEfF,WAAW,CACfG,GADI,CACA,UAAAC,IAAI;AAAA,WACN,gCAAC,sBAAD,CAAG,WAAH;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,EADZ;AAEE,MAAA,SAAS,EAAE,IAFb;AAGE,MAAA,SAAS,EAAEC,kBAAMC,MAHnB;AAIE,MAAA,YAAY,EAAET,aAJhB;AAKE,MAAA,OAAO,EAAEM,IAAI,CAACI,OALhB;AAME,MAAA,QAAQ,EAAE;AAAA,eAAMN,SAAQ,CAACD,MAAM,CAACG,IAAI,CAACC,EAAN,CAAP,CAAd;AAAA;AANZ,MADM;AAAA,GADJ,CAFe;AAAA,CAArB;;AAcA,IAAMI,WAAW,GAAG,SAAdA,WAAc;AAAA,MAClBC,MADkB,SAClBA,MADkB;AAAA,MACVC,KADU,SACVA,KADU;AAAA,8BACHC,SADG;AAAA,MACHA,SADG,gCACON,kBAAMO,EADb;AAAA,gCAElBb,WAFkB;AAAA,MAElBA,WAFkB,kCAEN,EAFM;AAAA,MAGlBc,UAHkB,SAGlBA,UAHkB;AAAA,MAGNC,WAHM,SAGNA,WAHM;AAAA,MAIlBC,SAJkB,SAIlBA,SAJkB;AAAA,MAKlBf,MALkB,SAKlBA,MALkB;AAAA,MAMlBC,QANkB,SAMlBA,QANkB;AAAA,MAMRe,WANQ,SAMRA,WANQ;AAAA,MAMKC,UANL,SAMKA,UANL;AAAA,MAOlBC,OAPkB,SAOlBA,OAPkB;AAAA,SASlB,gCAAC,sBAAD;AACE,IAAA,MAAM,EAAET,MADV;AAEE,IAAA,KAAK,gCAAMJ,kBAAMc,IAAZ,MAAqBT,KAArB,CAFP;AAGE,IAAA,SAAS,EAAEC,SAHb;AAIE,IAAA,OAAO,EAAEO;AAJX,KAME,gCAAC,YAAD;AACE,IAAA,WAAW,EAAEnB,WADf;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,QAAQ,EAAEC;AAHZ,IANF,EAWE,gCAAC,sBAAD,CAAG,WAAH;AACE,IAAA,GAAG,EAAC,aADN;AAEE,IAAA,KAAK,EAAEa,WAFT;AAGE,IAAA,SAAS,EAAET,kBAAMC,MAHnB;AAIE,IAAA,YAAY,EAAET,aAJhB;AAKE,IAAA,OAAO,EAAC,OALV;AAME,IAAA,QAAQ,EAAEmB;AANZ,IAXF,EAmBI,CAACD,SAAD,IAAc,gCAAC,sBAAD,CAAG,WAAH;AACZ,IAAA,GAAG,EAAC,WADQ;AAEZ,IAAA,KAAK,EAAEF,UAFK;AAGZ,IAAA,SAAS,EAAER,kBAAMC,MAHL;AAIZ,IAAA,YAAY,EAAET,aAJF;AAKZ,IAAA,OAAO,EAAC,UALI;AAMZ,IAAA,QAAQ,EAAEoB;AANE,IAnBlB,CATkB;AAAA,CAApB;;eAwCeT,W","sourcesContent":["import React from 'react'\r\n\r\nimport ModalPopup from '../zhn-moleculs/ModalPopup'\r\nimport D from '../dialogs/DialogCell'\r\nimport STYLE from './Modal.Style'\r\n\r\nconst CHECKED_COLOR = '#1b75bb';\r\n\r\nconst CheckBoxList = ({\r\n  selectProps, crIsId, onToggle\r\n}) => selectProps\r\n .map(item => (\r\n    <D.RowCheckBox\r\n      key={item.id}\r\n      initValue={true}\r\n      rootStyle={STYLE.ROW_CB}\r\n      checkedColor={CHECKED_COLOR}\r\n      caption={item.caption}\r\n      onToggle={() => onToggle(crIsId(item.id))}\r\n    />\r\n));\r\n\r\nconst ModalToggle = ({\r\n  isShow, style, className=STYLE.CL,\r\n  selectProps=[],\r\n  isShowDate, isShowChart,\r\n  noForDate,\r\n  crIsId,\r\n  onToggle, toggleChart, toggleDate,\r\n  onClose\r\n}) => (\r\n  <ModalPopup\r\n    isShow={isShow}\r\n    style={{...STYLE.ROOT, ...style}}\r\n    className={className}\r\n    onClose={onClose}\r\n  >\r\n    <CheckBoxList\r\n      selectProps={selectProps}\r\n      crIsId={crIsId}\r\n      onToggle={onToggle}\r\n    />\r\n    <D.RowCheckBox\r\n      key=\"isShowChart\"\r\n      value={isShowChart}\r\n      rootStyle={STYLE.ROW_CB}\r\n      checkedColor={CHECKED_COLOR}\r\n      caption=\"Chart\"\r\n      onToggle={toggleChart}\r\n    />\r\n    { !noForDate && <D.RowCheckBox\r\n        key=\"isForDate\"\r\n        value={isShowDate}\r\n        rootStyle={STYLE.ROW_CB}\r\n        checkedColor={CHECKED_COLOR}\r\n        caption=\"For Date\"\r\n        onToggle={toggleDate}\r\n      />\r\n    }\r\n  </ModalPopup>\r\n);\r\n\r\nexport default ModalToggle\r\n"],"file":"ModalToggle.js"}