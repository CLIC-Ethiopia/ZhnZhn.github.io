{"version":3,"sources":["../../../../../src/components/zhn-sparklines/dataProcessing/__tests__/median.test.js"],"names":["describe","test","expect","toBe","data"],"mappings":"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","sourcesContent":["import median from '../median'\r\n\r\n//fork https://github.com/borisyankov/react-sparklines/blob/master/__tests__/median.js\r\n\r\ndescribe('median', ()=>{\r\n  test('should return median of values', () => {\r\n        expect(median([0])).toBe(0)\r\n        expect(median([0, 1])).toBe(1)\r\n        expect(median([1, 2, 3])).toBe(2)\r\n        expect(median([5, 4, 3, 2, 1])).toBe(3)\r\n        expect(median([2, 4, 1, 3, 5])).toBe(3)\r\n  });\r\n\r\n  test('should calculate median by correctly sorting numbers, not lexicographically', () => {\r\n        expect(median([0, 20, 100])).toBe(20)\r\n        expect(median([1, 3, 5, 7, 100, 1000, 10000])).toBe(7)\r\n  });\r\n\r\n  test('should calculate median for real-world data', () => {\r\n        const data = [6161.719669666667,4995.179579999999,4040.0326529999998,3776.188567,2969.1544076666664,4701.473427,3128.7432525,3299.3572713333333,4272.681012,3422.561293333333,3462.3769910000005,4303.3568116666665,12118.759180333333,5272.167418666666,3130.953679666666,3830.7221036666665,4253.371313333333,6885.048253666668,4065.784471333334,4051.3181206666673,3312.486034666667,3519.332053333333,3578.4504983333336,3061.1413410000005,82353.92672433333,3166.496492,3962.746236333333,3355.8355669999996,3234.4706403333334,3319.0170516666667,3334.766027666667,7453.3247703333345,3356.1106466666665,7517.256305666666,6227.504952666667,2999.276804666666,3185.139871,2740.3619040000003,3554.696368,3908.206846,3055.0123826666663,3224.6066153333336,3576.984728,4848.392336666667,5388.439963000001,3662.7132256666664,6323.533573333332,3432.6356856666666,6223.385519666666,3137.5223516666665,4890.759132333333,3131.3128269999997,3814.362825333333,3452.1440953333336,2932.7764999999995,2816.087773333333,3989.263918666667,3113.313537,4504.276532333333,3561.8186296666663,3505.547739666667,4404.111484,4417.891140666666,4269.754091666667,3434.4542200000005,5476.430249666667,6312.4283306666675,5366.578057333334,3830.2674359999996,4812.407597333333,3376.3011166666674,3358.902772,6465.302481,3668.810244,2920.755890666667,4098.664499333333,3245.7028793333334,3443.5763826666666,3053.3344556666666,5223.266786,4993.329616000001,4095.5644090000005,3369.0089953333336,4341.683867,3377.744091666667,6399.325108333333,3453.0122806666664,2891.474329333333,4122.205589333334,4019.51985,3977.8773416666663,3615.6507353333336,4873.987182666668,3638.5405246666664,2889.41178];\r\n        expect(median(data)).toBe(3668.810244)\r\n  });\r\n\r\n})\r\n"],"file":"median.test.js"}