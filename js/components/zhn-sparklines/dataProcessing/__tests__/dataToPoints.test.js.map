{"version":3,"sources":["../../../../../src/components/zhn-sparklines/dataProcessing/__tests__/dataToPoints.test.js"],"names":["describe","test","expect","Array","isArray","data","toBe","undefined","length","limit","toEqual","x","y","width","height","max","min"],"mappings":"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","sourcesContent":["import dataToPoints from '../dataToPoints'\r\n\r\n//fork https://github.com/borisyankov/react-sparklines/blob/master/__tests__/dataToPoints.js\r\n\r\ndescribe('dataToPoints', ()=>{\r\n\r\n  test('should return an array', () => {\r\n        expect(Array.isArray(dataToPoints({ data: [] }))).toBe(true)\r\n        expect(Array.isArray(dataToPoints({ data: [1, 2, 3] }))).toBe(true)\r\n        expect(Array.isArray(dataToPoints({ data: [1, null, undefined] }))).toBe(true)\r\n  });\r\n\r\n  test('should return only `limit` items', () => {\r\n        expect(dataToPoints({ data: [1,2,3,4,5] }).length).toBe(5);\r\n        expect(dataToPoints({ data: [1,2,3,4,5], limit: 2 }).length).toBe(2);\r\n        expect(dataToPoints({ data: [1,2,3,4,5], limit: 5 }).length).toBe(5);\r\n        expect(dataToPoints({ data: [1,2,3,4,5], limit: 10 }).length).toBe(5);\r\n    });\r\n\r\n  test('should return proper values for 1 value', () => {\r\n       expect(dataToPoints({ data: [1] })).toEqual([\r\n         { x: 0, y: 0.5 }\r\n        ])\r\n   });\r\n\r\n   test('should return proper values 2+ values', () => {\r\n        expect(dataToPoints({ data: [1,1] })).toEqual([\r\n            {x: 0, y: 0.5},\r\n            {x: 1, y: 0.5}\r\n        ])\r\n\r\n        expect(dataToPoints({ data: [0,1] })).toEqual([\r\n            {x: 0, y: 1},\r\n            {x: 1, y: 0}\r\n        ])\r\n\r\n        expect(dataToPoints({ data: [1,0] })).toEqual([\r\n            {x: 0, y: 0},\r\n            {x: 1, y: 1}\r\n        ])\r\n\r\n        expect(dataToPoints({ data: [0,1,2] })).toEqual([\r\n            {x: 0, y: 1},\r\n            {x: 0.5, y: 0.5},\r\n            {x: 1, y: 0}\r\n        ])\r\n    });\r\n\r\n    test('should inerpolate values properly', () => {\r\n        expect(dataToPoints({data: [0,1,2], width: 10, height: 10 })).toEqual([\r\n            {x: 0, y: 10},\r\n            {x: 5, y: 5},\r\n            {x: 10, y: 0}\r\n        ])\r\n    });\r\n\r\n    test('should take min and max into account', () => {\r\n       expect(dataToPoints({ data: [1,2,3,4], width: 6, height: 10, max: 2, min: 3 })).toEqual([\r\n           {x: 0, y: -10},\r\n           {x: 2, y: 0},\r\n           {x: 4, y: 10},\r\n           {x: 6, y: 20}\r\n       ])\r\n   });\r\n\r\n   test('should return y == height for 0 and null values', () => {\r\n        expect(dataToPoints({ data: [0] })).toEqual([\r\n            {x: 0, y: 0.5}\r\n        ])\r\n        expect(dataToPoints({ data: [0, null, 0] })).toEqual([\r\n            {x: 0, y: 0.5},\r\n            {x: 0.5, y: 0.5},\r\n            {x: 1, y: 0.5}\r\n        ])\r\n    });\r\n})\r\n"],"file":"dataToPoints.test.js"}