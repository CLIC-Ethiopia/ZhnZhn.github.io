{"version":3,"sources":["../../../src/components/watch-browser/GroupEditPane.jsx"],"names":["GroupEditPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","_handleClear","setState","groupOptions","getWatchGroups","validationMessages","messages","_handleSelectGroup","item","captionFrom","caption","inputText","setValue","state","length","_handleRename","onRename","msgOnNotSelect","msgOnIsEmptyName","captionTo","getValue","msg","push","_refInputText","c","_primaryBt","componentDidMount","unsubscribe","listen","componentWillUnmount","render","onClose","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass GroupEditPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    actionFailed: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    msgOnIsEmptyName: PropTypes.func,\r\n    msgOnNotSelect: PropTypes.func,\r\n    onRename: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.captionFrom = null\r\n    this._primaryBt = <A.Button.Primary\r\n       caption=\"Edit\"\r\n       title=\"Edit Group Name\"\r\n       onClick={this._handleRename}\r\n    />\r\n    this.state = {\r\n      groupOptions: props.store.getWatchGroups(),\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType, store } = this.props\r\n    if (actionType === actionCompleted){\r\n      if (data.forActionType === forActionType){\r\n        this._handleClear()\r\n      }\r\n      this.setState({\r\n        groupOptions: store.getWatchGroups()\r\n      })\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({\r\n        validationMessages: data.messages\r\n      })\r\n    }\r\n  }\r\n\r\n  _handleSelectGroup = (item) => {\r\n     this.captionFrom = (item && item.caption) || null;\r\n  }\r\n\r\n  _handleClear = () => {\r\n    this.inputText.setValue('')\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({ validationMessages: [] })\r\n    }\r\n  }\r\n  _handleRename = () => {\r\n     const { onRename, msgOnNotSelect, msgOnIsEmptyName } = this.props\r\n         , captionTo = this.inputText.getValue();\r\n     if (captionTo && this.captionFrom) {\r\n       onRename({ captionFrom: this.captionFrom, captionTo })\r\n     } else {\r\n       const msg = [];\r\n       if (!this.captionFrom){\r\n         msg.push(msgOnNotSelect('Group From'))\r\n       }\r\n       if (!captionTo){\r\n         msg.push(msgOnIsEmptyName('Group To'))\r\n       }\r\n       this.setState({ validationMessages: msg })\r\n     }\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const { onClose } = this.props\r\n        , {\r\n            groupOptions, validationMessages\r\n          } = this.state;\r\n\r\n    return (\r\n       <div>\r\n          <A.RowInputSelect\r\n             caption=\"Group From:\"\r\n             options={groupOptions}\r\n             onSelect={this._handleSelectGroup}\r\n          />\r\n         <A.RowInputText\r\n            ref={this._refInputText}\r\n            caption=\"Group To:\"\r\n         />\r\n         <A.ValidationMessages\r\n            validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n            Primary={this._primaryBt}\r\n            onClear={this._handleClear}\r\n            onClose={onClose}\r\n         />\r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupEditPane\r\n"],"file":"GroupEditPane.js"}