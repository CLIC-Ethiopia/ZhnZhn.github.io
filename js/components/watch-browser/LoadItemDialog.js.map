{"version":3,"sources":["../../../src/components/watch-browser/LoadItemDialog.jsx"],"names":["S_DIALOG","width","S_DIALOG_SHORT","S_ITEM_TEXT","display","maxWidth","height","verticalAlign","textOverflow","overflow","_crValue","x","y","trim","LoadItemDialog","Decor","dialog","Component","constructor","props","_handleLoad","validationMessages","_createValidationMessages","isValid","data","onClose","id","title","subtitle","caption","columnName","dataColumn","seriaColumnNames","itemConf","fromDate","toDate","datesFragment","getValues","option","value","item","loadId","LT_WL","ChartActions","CHAT_LOAD","chartType","LT_WATCH_LIST","browserType","BT_WATCH_LIST","_updateValidationMessages","msg","datesMsg","getValidation","concat","length","_handleClose","_handleWithValidationClose","_refDates","c","initToDate","onTestDate","isValue","toolbarButtons","_createType2WithToolbar","_commandButtons","state","_isWithInitialState","isShowDate","initFromDate","isYmd","shouldComponentUpdate","nextProps","nextState","isShow","render","dataSource","isShowLabels","_style","_value","defaultProps"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  getFromDate,\r\n  getToDate,\r\n  isYmd,\r\n  mlsToDmy\r\n} from '../../utils/DateUtils';\r\nimport formatNumber from '../../utils/formatNumber'\r\n\r\nimport ChartActions, {CHAT_LOAD} from '../../flux/actions/ChartActions'\r\nimport {\r\n  LT_WL,\r\n  LT_WATCH_LIST\r\n } from '../../constants/LoadType'\r\nimport { BT_WATCH_LIST } from '../../constants/BrowserType';\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog'\r\nimport D from '../dialogs/DialogCell'\r\nimport ValidationMessages from '../zhn/ValidationMessages'\r\n\r\nimport Decor from '../dialogs/decorators/Decorators'\r\n\r\nconst S_DIALOG = { width: 365 }\r\n, S_DIALOG_SHORT = { width: 265 }\r\n, S_ITEM_TEXT = {\r\n  display: 'inline-block',\r\n  maxWidth: 250,\r\n  height: 32,\r\n  verticalAlign: 'middle',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden'\r\n};\r\n\r\n\r\nconst _crValue = (x='', y='') => (`${formatNumber(y)} ${mlsToDmy(x)}`).trim();\r\n\r\n@Decor.dialog\r\nclass LoadItemDialog extends Component {\r\n   /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool,\r\n     data: PropTypes.shape({\r\n       fromDate: PropTypes.string,\r\n       initToDate: PropTypes.string,\r\n       onTestDate: PropTypes.func\r\n     }),\r\n     store: PropTypes.object,\r\n     onClose: PropTypes.func\r\n   }\r\n   */\r\n\r\n   static defaultProps = {\r\n     data: {}\r\n   }\r\n\r\n   constructor(props){\r\n     super(props)\r\n     const {\r\n       fromDate,\r\n       initToDate,\r\n       onTestDate,\r\n       itemConf={}\r\n     } = props.data\r\n     , isValue = !!itemConf.x;\r\n\r\n     this.toolbarButtons = this._createType2WithToolbar(props, {\r\n       isValue\r\n     })\r\n\r\n     this._commandButtons = [\r\n       <D.Button.Load\r\n         key=\"load\"\r\n         onClick={this._handleLoad}\r\n       />\r\n     ]\r\n\r\n    this.state = {\r\n       ...this._isWithInitialState(),\r\n       isShowDate: false,\r\n       isValue,\r\n       initFromDate: fromDate || getFromDate(2),\r\n       initToDate: initToDate || getToDate(),\r\n       onTestDate: onTestDate || isYmd\r\n    }\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._createValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , {\r\n              id,\r\n              title, subtitle, caption,\r\n              columnName, dataColumn, seriaColumnNames,\r\n              itemConf={}\r\n              /*\r\n              _itemKey, url, loadId,\r\n              optionFetch, items,\r\n              itemCaption, seriaType,\r\n              dataSource, dfId, timeId\r\n              */\r\n             } = data\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , option = {\r\n             id, title, subtitle,\r\n             value: caption,\r\n             item: caption,\r\n             fromDate, toDate,\r\n             columnName, dataColumn, seriaColumnNames,\r\n             loadId: itemConf.loadId || LT_WL,\r\n             ...itemConf\r\n           };\r\n      ChartActions[CHAT_LOAD]({\r\n        chartType: LT_WATCH_LIST,\r\n        browserType: BT_WATCH_LIST\r\n      }, option);\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _createValidationMessages = () => {\r\n    let msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose(this._createValidationMessages)\r\n    this.props.onClose()\r\n  }\r\n\r\n  _refDates = c => this.datesFragment = c\r\n\r\n  render(){\r\n    const { isShow, data } = this.props\r\n    , { caption, itemConf={} } = data\r\n    , { dataSource, x, y } = itemConf\r\n    , {\r\n        isShowLabels, isShowDate, isValue,\r\n        initFromDate, initToDate,\r\n        onTestDate, validationMessages\r\n      } = this.state\r\n    , _style = isShowLabels ? S_DIALOG : S_DIALOG_SHORT\r\n    , _value = _crValue(x, y);\r\n\r\n    return (\r\n      <ModalDialog\r\n         style={_style}\r\n         isShow={isShow}\r\n         caption=\"Load Item\"\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <D.Toolbar\r\n          isShow={true}\r\n          buttons={this.toolbarButtons}\r\n        />\r\n        <D.Row.Text\r\n          isShowLabels={isShowLabels}\r\n          styleText={S_ITEM_TEXT}\r\n          caption=\"Item:\"\r\n          text={caption}\r\n        />\r\n        <D.ShowHide isShow={isValue}>\r\n          <D.Row.Text\r\n            isShowLabels={isShowLabels}\r\n            styleText={S_ITEM_TEXT}\r\n            caption=\"Value:\"\r\n            text={_value}\r\n          />\r\n        </D.ShowHide>\r\n        <D.ShowHide isShow={isShowDate}>\r\n          <D.DatesFragment\r\n              ref={this._refDates}\r\n              isShowLabels={isShowLabels}\r\n              initFromDate={initFromDate}\r\n              initToDate={initToDate}\r\n              onTestDate={onTestDate}\r\n          />\r\n        </D.ShowHide>\r\n        <D.Row.Text\r\n          isShowLabels={isShowLabels}\r\n          styleText={S_ITEM_TEXT}\r\n          caption=\"Source:\"\r\n          text={dataSource}\r\n        />\r\n        <ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadItemDialog\r\n"],"file":"LoadItemDialog.js"}