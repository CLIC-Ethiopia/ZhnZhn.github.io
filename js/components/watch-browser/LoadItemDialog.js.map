{"version":3,"sources":["../../../src/components/watch-browser/LoadItemDialog.jsx"],"names":["LoadItemDialog","props","data","fromDate","initToDate","onTestDate","_initFromDate","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","_commandButtons","_handleLoad","state","initFromDate","validationMessages","nextProps","nextState","isShow","caption","_handleClose","datesFragment","c","_createValidationMessages","isValid","onClose","id","title","subtitle","columnName","dataColumn","seriaColumnNames","getValues","toDate","option","value","item","loadId","WL","loadStock","chartType","WATCH_LIST","browserType","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","_handleWithValidationClose"],"mappings":"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","file":"LoadItemDialog.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\n\r\nimport ChartActions from '../../flux/actions/ChartActions'\r\nimport { BrowserType, LoadType } from '../../constants/Type'\r\nimport ChartType from '../../constants/ChartType'\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog'\r\nimport Button from '../dialogs/Button'\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment'\r\nimport ValidationMessages from '../zhn/ValidationMessages'\r\nimport Row from '../dialogs/Row'\r\n\r\nimport withValidationLoad from '../dialogs/decorators/withValidationLoad'\r\n\r\n@withValidationLoad\r\nclass LoadItemDialog extends Component {\r\n   /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool,\r\n     data: PropTypes.shape({\r\n       fromDate: PropTypes.string,\r\n       initToDate: PropTypes.string,\r\n       onTestDate: PropTypes.func\r\n     }),\r\n     store: PropTypes.object,\r\n     onClose: PropTypes.func\r\n   }\r\n   */\r\n\r\n   constructor(props){\r\n     super()\r\n     const { fromDate, initToDate, onTestDate } = props.data\r\n         , _initFromDate = (fromDate) ? fromDate : DateUtils.getFromDate(2)\r\n         , _initToDate = (initToDate) ? initToDate : DateUtils.getToDate()\r\n         , _onTestDate = (onTestDate) ? onTestDate : DateUtils.isValidDate;\r\n\r\n    this._commandButtons = [\r\n       <Button.Load onClick={this._handleLoad} />\r\n    ]\r\n\r\n    this.state = {\r\n       initFromDate : _initFromDate,\r\n       initToDate : _initToDate,\r\n       onTestDate : _onTestDate,\r\n       validationMessages : []\r\n    }\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._createValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { id, title, subtitle, caption, columnName, dataColumn, seriaColumnNames } = data\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , option = {\r\n             title : title,\r\n             subtitle : subtitle,\r\n             value : caption,             \r\n             item: caption,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id,\r\n             columnName,\r\n             dataColumn,\r\n             seriaColumnNames\r\n           };\r\n      ChartActions.loadStock(\r\n        {\r\n          chartType: ChartType.WATCH_LIST,\r\n          browserType: BrowserType.WATCH_LIST\r\n        },\r\n        option\r\n      );\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _createValidationMessages = () => {\r\n    let msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose(this._createValidationMessages)\r\n    this.props.onClose()\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data } = this.props\r\n        , { caption } = data\r\n        , {\r\n            initFromDate, initToDate,\r\n            onTestDate, validationMessages\r\n          } = this.state;\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption=\"Load Item\"\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <Row.Text\r\n          caption=\"Item:\"\r\n          text={caption}\r\n        />\r\n        <DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadItemDialog\r\n"]}