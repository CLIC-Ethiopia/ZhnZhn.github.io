{"version":3,"sources":["../../../src/components/watch-browser/LoadItemDialog.jsx"],"names":["getFromDate","DateUtils","getToDate","isYmd","LoadItemDialog","withValidationLoad","props","_handleLoad","validationMessages","_createValidationMessages","isValid","data","onClose","id","title","subtitle","caption","columnName","dataColumn","seriaColumnNames","datesFragment","getValues","fromDate","toDate","option","value","item","loadId","LoadType","WL","ChartActions","loadStock","chartType","ChartType","WATCH_LIST","browserType","BrowserType","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","_handleClose","_handleWithValidationClose","initToDate","onTestDate","_commandButtons","state","initFromDate","shouldComponentUpdate","nextProps","nextState","isShow","render","c","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\n\r\nimport ChartActions from '../../flux/actions/ChartActions'\r\nimport { BrowserType, LoadType } from '../../constants/Type'\r\nimport ChartType from '../../constants/ChartType'\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog'\r\nimport D from '../dialogs/DialogCell'\r\nimport ValidationMessages from '../zhn/ValidationMessages'\r\n\r\nimport withValidationLoad from '../dialogs/decorators/withValidationLoad'\r\n\r\nconst {\r\n  getFromDate,\r\n  getToDate,\r\n  isYmd\r\n} = DateUtils;\r\n\r\n@withValidationLoad\r\nclass LoadItemDialog extends Component {\r\n   /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool,\r\n     data: PropTypes.shape({\r\n       fromDate: PropTypes.string,\r\n       initToDate: PropTypes.string,\r\n       onTestDate: PropTypes.func\r\n     }),\r\n     store: PropTypes.object,\r\n     onClose: PropTypes.func\r\n   }\r\n   */\r\n\r\n   static defaultProps = {\r\n     data: {}\r\n   }\r\n\r\n   constructor(props){\r\n     super()\r\n     const {\r\n             fromDate,\r\n             initToDate,\r\n             onTestDate\r\n           } = props.data;\r\n\r\n    this._commandButtons = [\r\n       <D.Button.Load\r\n         key=\"load\"\r\n         onClick={this._handleLoad}\r\n       />\r\n    ]\r\n\r\n    this.state = {\r\n       initFromDate: fromDate || getFromDate(2),\r\n       initToDate: initToDate || getToDate(),\r\n       onTestDate: onTestDate || isYmd,\r\n       validationMessages : []\r\n    }\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   }\r\n\r\n  _handleLoad = () => {\r\n    const validationMessages = this._createValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { id, title, subtitle, caption, columnName, dataColumn, seriaColumnNames } = data\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , option = {\r\n             title : title,\r\n             subtitle : subtitle,\r\n             value : caption,\r\n             item: caption,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id,\r\n             columnName,\r\n             dataColumn,\r\n             seriaColumnNames\r\n           };\r\n      ChartActions.loadStock(\r\n        {\r\n          chartType: ChartType.WATCH_LIST,\r\n          browserType: BrowserType.WATCH_LIST\r\n        },\r\n        option\r\n      );\r\n      onClose()\r\n    }\r\n    this._updateValidationMessages(validationMessages)\r\n  }\r\n\r\n  _createValidationMessages = () => {\r\n    let msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg) }\r\n    msg.isValid = (msg.length === 0) ? true : false\r\n    return msg;\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this._handleWithValidationClose(this._createValidationMessages)\r\n    this.props.onClose()\r\n  }\r\n\r\n  render(){\r\n    const { isShow, data } = this.props\r\n        , { caption } = data\r\n        , {\r\n            initFromDate, initToDate,\r\n            onTestDate, validationMessages\r\n          } = this.state;\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption=\"Load Item\"\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handleClose}\r\n      >\r\n        <D.Row.Text\r\n          caption=\"Item:\"\r\n          text={caption}\r\n        />\r\n        <D.DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadItemDialog\r\n"],"file":"LoadItemDialog.js"}