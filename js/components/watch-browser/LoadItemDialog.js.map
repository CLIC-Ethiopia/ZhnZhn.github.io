{"version":3,"sources":["../../../src/components/watch-browser/LoadItemDialog.jsx"],"names":["styles","LoadItemDialog","createClass","propTypes","isShow","PropTypes","bool","isRequired","data","object","store","onClose","func","getInitialState","props","fromDate","initToDate","onTestDate","_initFromDate","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","initFromDate","validationMessages","shouldComponentUpdate","nextProps","nextState","_handlerLoad","_getValidationMessages","isValid","id","title","subtitle","caption","columnName","dataColumn","seriaColumnNames","datesFragment","getValues","toDate","option","value","stock","loadId","WL","loadStock","WATCH_LIST","_updateValidationMessages","msg","getValidation","datesMsg","concat","length","render","state","_commandButtons","_handlerClose","Object","assign","rowDiv","lineHeight","labelSpan","fontWeight","c"],"mappings":"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","file":"LoadItemDialog.js","sourcesContent":["import React from 'react';\r\n\r\nimport WithValidation from '../dialogs/WithValidation';\r\n\r\nimport DateUtils from '../../utils/DateUtils';\r\n\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport {BrowserType, LoadType} from '../../constants/Type';\r\nimport ChartType from '../../constants/ChartType';\r\n\r\nimport ModalDialog from '../zhn/ModalDialog';\r\nimport ActionButton from '../zhn/ActionButton';\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment';\r\nimport ValidationMessages from '../zhn/ValidationMessages';\r\n\r\nimport DialogStyles from '../styles/DialogStyles'\r\n\r\nconst styles = DialogStyles;\r\n\r\nconst LoadItemDialog = React.createClass({\r\n   ...WithValidation,\r\n   propTypes : {\r\n     isShow  : React.PropTypes.bool.isRequired,\r\n     data    : React.PropTypes.object.isRequired,\r\n     store   : React.PropTypes.object,\r\n     onClose : React.PropTypes.func.isRequired\r\n   },\r\n\r\n   getInitialState(){\r\n     const { fromDate, initToDate, onTestDate } = this.props.data\r\n         , _initFromDate = (fromDate) ? fromDate : DateUtils.getFromDate(2)\r\n         , _initToDate = (initToDate) ? initToDate : DateUtils.getToDate()\r\n         , _onTestDate = (onTestDate) ? onTestDate : DateUtils.isValidDate\r\n\r\n    return {\r\n      initFromDate : _initFromDate,\r\n      initToDate : _initToDate,\r\n      onTestDate : _onTestDate,\r\n      validationMessages : []\r\n      }\r\n   },\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n       return false;\r\n     }\r\n     return true;\r\n   },\r\n\r\n  _handlerLoad(){\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      const { data, onClose } = this.props\r\n          , { id, title, subtitle, caption, columnName, dataColumn, seriaColumnNames } = data\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , option = {\r\n             title : title,\r\n             subtitle : subtitle,\r\n             value : caption,\r\n             stock: caption,\r\n             fromDate: fromDate,\r\n             toDate: toDate,\r\n             loadId : LoadType.WL,\r\n             id,\r\n             columnName,\r\n             dataColumn,\r\n             seriaColumnNames\r\n          }\r\n      ChartActions.loadStock(ChartType.WATCH_LIST, BrowserType.WATCH_LIST, option);\r\n      onClose();\r\n    }\r\n    this._updateValidationMessages(validationMessages);\r\n  },\r\n\r\n  _getValidationMessages(){\r\n    let   msg = [];\r\n    const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n    if (!isValid) { msg = msg.concat(datesMsg); }\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  },\r\n\r\n  render(){\r\n    const { isShow, data } = this.props\r\n        , { caption } = data\r\n        , { initFromDate, initToDate, onTestDate, validationMessages } = this.state\r\n        , _commandButtons = [\r\n       <ActionButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Load\"\r\n          onClick={this._handlerLoad}\r\n       />\r\n    ];\r\n    return (\r\n      <ModalDialog\r\n         caption=\"Load Item\"\r\n         isShow={isShow}\r\n         commandButtons={_commandButtons}\r\n         onClose={this._handlerClose}\r\n      >\r\n        <div style={Object.assign({}, styles.rowDiv, {lineHeight: 2})} key=\"1\">\r\n          <span style={styles.labelSpan}>\r\n            Item:\r\n          </span>\r\n          <span style={{fontWeight: 'bold'}}>\r\n             {caption}\r\n          </span>\r\n        </div>\r\n        <DatesFragment\r\n            ref={c => this.datesFragment = c}\r\n            initFromDate={initFromDate}\r\n            initToDate={initToDate}\r\n            onTestDate={onTestDate}\r\n        />\r\n        <ValidationMessages\r\n            validationMessages={validationMessages}\r\n        />\r\n      </ModalDialog>\r\n    )\r\n  }\r\n});\r\n\r\nexport default LoadItemDialog\r\n"]}