{"version":3,"sources":["../../../src/components/watch-browser/ListEditPane.jsx"],"names":["ListEditPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","_handleClear","setState","groupOptions","getWatchGroups","validationMessages","messages","inputText","setValue","state","length","_handleRename","onRename","msgOnIsEmptyName","msgOnNotSelect","selectGroupList","getValue","captionGroup","captionList","captionListTo","captionListFrom","msg","push","_primaryBt","listOptions","unsubscribe","listen","onClose","c"],"mappings":"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","file":"ListEditPane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass ListEditPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    onRename: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this._primaryBt = <A.Button.Primary\r\n                         caption=\"Edit\"\r\n                         title=\"Edit List Name\"\r\n                         onClick={this._handleRename}\r\n                      />\r\n    this.state = {\r\n      groupOptions : props.store.getWatchGroups(),\r\n      listOptions : [],\r\n      validationMessages : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType, store } = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType){\r\n          this._handleClear()\r\n        }\r\n        this.setState({ groupOptions : store.getWatchGroups() })\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({ validationMessages:data.messages })\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages:[] })\r\n     }\r\n  }\r\n\r\n  _handleRename = () => {\r\n    const { onRename, msgOnIsEmptyName, msgOnNotSelect } = this.props\r\n        , { captionGroup, captionList } = this.selectGroupList.getValue()\r\n        , captionListTo = this.inputText.getValue();\r\n    if (captionGroup && captionList && captionListTo){\r\n      onRename({\r\n        captionGroup : captionGroup,\r\n        captionListFrom : captionList,\r\n        captionListTo : captionListTo\r\n      })\r\n    } else {\r\n      const msg = [];\r\n      if (!captionGroup) { msg.push(msgOnNotSelect('Group')) }\r\n      if (!captionList)  { msg.push(msgOnNotSelect('List From')) }\r\n      if (!captionListTo){ msg.push(msgOnIsEmptyName('List To')) }\r\n      this.setState({ validationMessages:msg })\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { store, onClose } = this.props\r\n        , { groupOptions, validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n         <A.FragmentSelectGroupList\r\n           ref={c => this.selectGroupList = c}\r\n           store={store}\r\n           groupCaption=\"In Group:\"\r\n           groupOptions={groupOptions}\r\n           listCaption=\"List From:\"\r\n         />\r\n         <A.RowInputText\r\n            ref={c => this.inputText = c}\r\n            caption=\"List To:\"\r\n         />\r\n         <A.ValidationMessages\r\n           validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n            Primary={this._primaryBt}\r\n            onClear={this._handleClear}\r\n            onClose={onClose}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListEditPane\r\n"]}