{"version":3,"sources":["../../../src/components/watch-browser/GroupDeletePane.jsx"],"names":["GroupDeletePane","props","_onStore","actionType","data","actionCompleted","forActionType","store","_handleClear","setState","groupOptions","getWatchGroups","_handleSelectGroup","item","caption","state","validationMessages","length","_handleDeleteGroup","onDelete","msgOnNotSelect","_primaryBt","unsubscribe","listen","onClose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;;;;;IAEMA,e;;;AACJ;;;;;;;;;;;;;;AAcA,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,UAoBlBC,QApBkB,GAoBP,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAAA,wBACmB,MAAKH,KADxB;AAAA,UACvBI,eADuB,eACvBA,eADuB;AAAA,UACNC,aADM,eACNA,aADM;AAAA,UACSC,KADT,eACSA,KADT;;AAE/B,UAAIJ,eAAeE,eAAnB,EAAoC;AAClC,YAAID,KAAKE,aAAL,KAAuBA,aAA3B,EAAyC;AACvC,gBAAKE,YAAL;AACD;AACD,cAAKC,QAAL,CAAc,EAAEC,cAAeH,MAAMI,cAAN,EAAjB,EAAd;AACD;AACF,KA5BiB;;AAAA,UA8BlBC,kBA9BkB,GA8BG,UAACC,IAAD,EAAU;AAC5B,UAAIA,QAAQA,KAAKC,OAAjB,EAAyB;AACvB,cAAKA,OAAL,GAAeD,KAAKC,OAApB;AACD,OAFD,MAEO;AACL,cAAKA,OAAL,GAAe,IAAf;AACD;AACH,KApCiB;;AAAA,UAsClBN,YAtCkB,GAsCH,YAAM;AACnB,UAAI,MAAKO,KAAL,CAAWC,kBAAX,CAA8BC,MAA9B,GAAqC,CAAzC,EAA2C;AACzC,cAAKR,QAAL,CAAc,EAAEO,oBAAmB,EAArB,EAAd;AACD;AACF,KA1CiB;;AAAA,UA4ClBE,kBA5CkB,GA4CG,YAAM;AAAA,yBACa,MAAKjB,KADlB;AAAA,UAChBkB,QADgB,gBAChBA,QADgB;AAAA,UACNC,cADM,gBACNA,cADM;;AAExB,UAAI,MAAKN,OAAT,EAAiB;AACfK,iBAAS,EAAEL,SAAQ,MAAKA,OAAf,EAAT;AACD,OAFD,MAEO;AACL,cAAKL,QAAL,CAAc,EAAEO,oBAAmB,CAACI,eAAe,OAAf,CAAD,CAArB,EAAd;AACD;AACH,KAnDiB;;AAEhB,UAAKN,OAAL,GAAe,IAAf;AACA,UAAKO,UAAL,GAAkB,8CAAG,MAAH,CAAU,OAAV;AACG,eAAQ,QADX;AAEG,aAAM,cAFT;AAGG,eAAS,MAAKH;AAHjB,MAAlB;AAKA,UAAKH,KAAL,GAAa;AACXL,oBAAeT,MAAMM,KAAN,CAAYI,cAAZ,EADJ;AAEXK,0BAAqB;AAFV,KAAb;AARgB;AAYjB;;;;wCAEkB;AACjB,WAAKM,WAAL,GAAmB,KAAKrB,KAAL,CAAWM,KAAX,CAAiBgB,MAAjB,CAAwB,KAAKrB,QAA7B,CAAnB;AACD;;;2CACqB;AACpB,WAAKoB,WAAL;AACD;;;6BAkCO;AACE,UAAEE,OAAF,GAAc,KAAKvB,KAAnB,CAAEuB,OAAF;AAAA,mBAGI,KAAKT,KAHT;AAAA,UAEEL,YAFF,UAEEA,YAFF;AAAA,UAEgBM,kBAFhB,UAEgBA,kBAFhB;;;AAKN,aACG;AAAA;AAAA;AACE,sDAAG,cAAH;AACE,mBAAQ,QADV;AAEE,mBAASN,YAFX;AAGE,oBAAU,KAAKE;AAHjB,UADF;AAME,sDAAG,kBAAH;AACE,8BAAoBI;AADtB,UANF;AASE,sDAAG,UAAH;AACE,mBAAS,KAAKK,UADhB;AAEE,wBAAc,IAFhB;AAGE,mBAASG;AAHX;AATF,OADH;AAiBH;;;;AA/FH;;kBAkGexB,e","file":"GroupDeletePane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass GroupDeletePane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    msgOnNotSelect: PropTypes.func,\r\n    onDelete: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.caption = null\r\n    this._primaryBt = <A.Button.Primary\r\n                         caption=\"Delete\"\r\n                         title=\"Delete Group\"\r\n                         onClick={this._handleDeleteGroup}\r\n                      />\r\n    this.state = {\r\n      groupOptions : props.store.getWatchGroups(),\r\n      validationMessages : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, forActionType, store } = this.props;\r\n    if (actionType === actionCompleted) {\r\n      if (data.forActionType === forActionType){\r\n        this._handleClear()\r\n      }\r\n      this.setState({ groupOptions : store.getWatchGroups() })\r\n    }\r\n  }\r\n\r\n  _handleSelectGroup = (item) => {\r\n     if (item && item.caption){\r\n       this.caption = item.caption\r\n     } else {\r\n       this.caption = null\r\n     }\r\n  }\r\n\r\n  _handleClear = () => {\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({ validationMessages:[] })\r\n    }\r\n  }\r\n\r\n  _handleDeleteGroup = () => {\r\n     const { onDelete, msgOnNotSelect } = this.props;\r\n     if (this.caption){\r\n       onDelete({ caption:this.caption })\r\n     } else {\r\n       this.setState({ validationMessages:[msgOnNotSelect('Group')] })\r\n     }\r\n  }\r\n\r\n  render(){\r\n      const { onClose } = this.props\r\n          , {\r\n              groupOptions, validationMessages\r\n            } = this.state;\r\n\r\n      return (\r\n         <div>\r\n           <A.RowInputSelect\r\n             caption=\"Group:\"\r\n             options={groupOptions}\r\n             onSelect={this._handleSelectGroup}\r\n           />\r\n           <A.ValidationMessages\r\n             validationMessages={validationMessages}\r\n           />\r\n           <A.RowButtons\r\n             Primary={this._primaryBt}\r\n             withoutClear={true}\r\n             onClose={onClose}\r\n           />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupDeletePane\r\n"]}