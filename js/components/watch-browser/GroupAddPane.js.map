{"version":3,"sources":["../../../src/components/watch-browser/GroupAddPane.jsx"],"names":["GroupAddPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","_handleClear","setState","validationMessages","messages","inputText","setValue","state","length","_handleCreate","onCreate","msgOnIsEmptyName","caption","getValue","_primaryBt","componentDidMount","unsubscribe","store","listen","componentWillUnmount","render","onClose","c","Component"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AAFA;IAIMA,Y;;;AACJ;;;;;;;;;;;;;AAcA,wBAAYC,KAAZ,EAAkB;AAAA;;AAChB;;AADgB,UAkBlBC,QAlBkB,GAkBP,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAAA,wBAC0B,MAAKH,KAD/B;AAAA,UACvBI,eADuB,eACvBA,eADuB;AAAA,UACNC,YADM,eACNA,YADM;AAAA,UACQC,aADR,eACQA,aADR;;AAE/B,UAAIJ,UAAU,KAAKE,eAAf,IAAkCD,IAAI,CAACG,aAAL,KAAuBA,aAA7D,EAA2E;AACxE,cAAKC,YAAL;AACF,OAFD,MAEO,IAAIL,UAAU,KAAKG,YAAf,IAA+BF,IAAI,CAACG,aAAL,KAAuBA,aAA1D,EAAwE;AAC5E,cAAKE,QAAL,CAAc;AAAEC,UAAAA,kBAAkB,EAAEN,IAAI,CAACO;AAA3B,SAAd;AACF;AACF,KAzBiB;;AAAA,UA2BlBH,YA3BkB,GA2BH,YAAM;AACnB,YAAKI,SAAL,CAAeC,QAAf,CAAwB,EAAxB;;AACA,UAAI,MAAKC,KAAL,CAAWJ,kBAAX,CAA8BK,MAA9B,GAAqC,CAAzC,EAA2C;AACxC,cAAKN,QAAL,CAAc;AAAEC,UAAAA,kBAAkB,EAAE;AAAtB,SAAd;AACF;AACF,KAhCiB;;AAAA,UAkClBM,aAlCkB,GAkCF,YAAM;AAAA,yBACoB,MAAKf,KADzB;AAAA,UACXgB,QADW,gBACXA,QADW;AAAA,UACDC,gBADC,gBACDA,gBADC;AAAA,UAEZC,OAFY,GAEF,MAAKP,SAAL,CAAeQ,QAAf,EAFE;;AAGnB,UAAID,OAAJ,EAAY;AACVF,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,OAAO,EAAPA;AAAF,SAAD,CAAR;AACD,OAFD,MAEO;AACL,cAAKP,SAAL,CAAeC,QAAf,CAAwB,EAAxB;;AACA,cAAKJ,QAAL,CAAc;AAAEC,UAAAA,kBAAkB,EAAC,CAACQ,gBAAgB,CAAC,OAAD,CAAjB;AAArB,SAAd;AACD;AACH,KA3CiB;;AAEhB,UAAKG,UAAL,gBAAkB,gCAAC,iBAAD,CAAG,MAAH,CAAU,OAAV;AACG,MAAA,OAAO,EAAC,QADX;AAEG,MAAA,KAAK,EAAC,kBAFT;AAGG,MAAA,OAAO,EAAE,MAAKL;AAHjB,MAAlB;AAKA,UAAKF,KAAL,GAAa;AACXJ,MAAAA,kBAAkB,EAAG;AADV,KAAb;AAPgB;AAUjB;;;;SAEDY,iB,GAAA,6BAAmB;AACjB,SAAKC,WAAL,GAAmB,KAAKtB,KAAL,CAAWuB,KAAX,CAAiBC,MAAjB,CAAwB,KAAKvB,QAA7B,CAAnB;AACD,G;;SACDwB,oB,GAAA,gCAAsB;AACpB,SAAKH,WAAL;AACD,G;;SA4BDI,M,GAAA,kBAAQ;AAAA;;AACA,QAAEC,OAAF,GAAc,KAAK3B,KAAnB,CAAE2B,OAAF;AAAA,QACElB,kBADF,GACyB,KAAKI,KAD9B,CACEJ,kBADF;AAEN,wBACE,0DACE,gCAAC,iBAAD,CAAG,YAAH;AACG,MAAA,GAAG,EAAE,aAAAmB,CAAC;AAAA,eAAI,MAAI,CAACjB,SAAL,GAAiBiB,CAArB;AAAA,OADT;AAEG,MAAA,OAAO,EAAC;AAFX,MADF,eAKE,gCAAC,iBAAD,CAAG,kBAAH;AACG,MAAA,kBAAkB,EAAEnB;AADvB,MALF,eAQG,gCAAC,iBAAD,CAAG,UAAH;AACG,MAAA,OAAO,EAAE,KAAKW,UADjB;AAEG,MAAA,OAAO,EAAE,KAAKb,YAFjB;AAGG,MAAA,OAAO,EAAEoB;AAHZ,MARH,CADF;AAgBD,G;;;EA/EwBE,gB;;eAkFZ9B,Y","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass GroupAddPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    actionFailed: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    msgOnIsEmptyName: PropTypes.func,\r\n    onCreate: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this._primaryBt = <A.Button.Primary\r\n                         caption=\"Create\"\r\n                         title=\"Create New Group\"\r\n                         onClick={this._handleCreate}\r\n                      />\r\n    this.state = {\r\n      validationMessages : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType } = this.props;\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       this._handleClear()\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({ validationMessages: data.messages })\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n    this.inputText.setValue('')\r\n    if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages: [] })\r\n    }\r\n  }\r\n\r\n  _handleCreate = () => {\r\n     const { onCreate, msgOnIsEmptyName } = this.props\r\n          , caption = this.inputText.getValue();\r\n     if (caption){\r\n       onCreate({ caption })\r\n     } else {\r\n       this.inputText.setValue('')\r\n       this.setState({ validationMessages:[msgOnIsEmptyName('Group')] })\r\n     }\r\n  }\r\n\r\n  render(){\r\n    const { onClose } = this.props\r\n        , { validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n        <A.RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption=\"Group:\"\r\n        />\r\n        <A.ValidationMessages\r\n           validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n            Primary={this._primaryBt}\r\n            onClear={this._handleClear}\r\n            onClose={onClose}\r\n         />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GroupAddPane\r\n"],"file":"GroupAddPane.js"}