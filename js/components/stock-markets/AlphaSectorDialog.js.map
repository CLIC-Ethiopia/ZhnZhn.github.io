{"version":3,"sources":["../../../src/components/stock-markets/AlphaSectorDialog.jsx"],"names":["S","ROW_TEXT","paddingRight","AlphaIndicatorDialog","Decor","withToolbar","withLoad","props","_handleLoad","loadId","onLoad","option","indicator","_handleClose","onClose","_menuMore","toggleToolBar","_toggleWithToolbar","onAbout","_clickInfoWithToolbar","toolbarButtons","_createType2WithToolbar","noDate","noLabels","_commandButtons","_crCommandsWithLoad","state","isToolbar","shouldComponentUpdate","nextProps","nextState","isShow","render","caption","onShow","onFront","Component"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,IAAMA,CAAC,GAAG;AACRC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE;AADN;AADF,CAAV;IAQMC,oB,WAFLC,uBAAMC,W,UACND,uBAAME,Q;;;;;AAGL,gCAAYC,KAAZ,EAAkB;AAAA;;AAChB,kCAAMA,KAAN;;AADgB,UA2BlBC,WA3BkB,GA2BJ,YAAM;AAAA,wBACS,MAAKD,KADd;AAAA,UACVE,MADU,eACVA,MADU;AAAA,UACFC,MADE,eACFA,MADE;AAElB,UAAMC,MAAM,GAAG;AACbF,QAAAA,MAAM,EAAEA,MADK;AAEbG,QAAAA,SAAS,EAAE,QAFE,CAGb;;AAHa,OAAf;AAKAF,MAAAA,MAAM,CAACC,MAAD,CAAN;AACD,KAnCiB;;AAAA,UAqClBE,YArCkB,GAqCH,YAAM;AACnB,YAAKN,KAAL,CAAWO,OAAX;AACD,KAvCiB;;AAGhB,UAAKC,SAAL,GAAiB,0EAAiB;AAChCC,MAAAA,aAAa,EAAE,MAAKC,kBADY;AAEhCC,MAAAA,OAAO,EAAE,MAAKC;AAFkB,KAAjB,CAAjB;AAKA,UAAKC,cAAL,GAAsB,MAAKC,uBAAL,CACpBd,KADoB,EACb;AAAEe,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,QAAQ,EAAE;AAA1B,KADa,CAAtB;AAGA,UAAKC,eAAL,GAAuB,MAAKC,mBAAL,gDAAvB;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAbgB;AAgBjB;;;;SAEDC,qB,GAAA,+BAAsBC,SAAtB,EAAiCC,SAAjC,EAA2C;AACzC,QAAI,KAAKvB,KAAL,KAAesB,SAAnB,EAA6B;AAC1B,UAAI,KAAKtB,KAAL,CAAWwB,MAAX,KAAsBF,SAAS,CAACE,MAApC,EAA2C;AACxC,eAAO,KAAP;AACF;AACH;;AACD,WAAO,IAAP;AACD,G;;SAgBDC,M,GAAA,kBAAS;AAAA,uBAIG,KAAKzB,KAJR;AAAA,QAECwB,MAFD,gBAECA,MAFD;AAAA,QAESE,OAFT,gBAESA,OAFT;AAAA,QAGCC,MAHD,gBAGCA,MAHD;AAAA,QAGSC,OAHT,gBAGSA,OAHT;AAAA,QAKCR,SALD,GAKe,KAAKD,KALpB,CAKCC,SALD;AAOP,WACE,gCAAC,sBAAD,CAAG,eAAH;AACK,MAAA,MAAM,EAAEI,MADb;AAEK,MAAA,OAAO,EAAEE,OAFd;AAGK,MAAA,SAAS,EAAE,KAAKlB,SAHrB;AAIK,MAAA,cAAc,EAAE,KAAKS,eAJ1B;AAKK,MAAA,WAAW,EAAEU,MALlB;AAMK,MAAA,OAAO,EAAEC,OANd;AAOK,MAAA,OAAO,EAAE,KAAKtB;AAPnB,OASK,gCAAC,sBAAD,CAAG,OAAH;AACG,MAAA,MAAM,EAAEc,SADX;AAEG,MAAA,OAAO,EAAE,KAAKP;AAFjB,MATL,EAaK,gCAAC,sBAAD,CAAG,GAAH,CAAO,IAAP;AACE,MAAA,SAAS,EAAEpB,CAAC,CAACC,QADf;AAEE,MAAA,OAAO,EAAC,KAFV;AAGE,MAAA,IAAI,EAAC;AAHP,MAbL,CADF;AAqBD,G;;;EAvEgCmC,gB;eA0EpBjC,oB","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport Decor from '../dialogs/decorators/Decorators'\r\nimport crMenuMore from '../dialogs/MenuMore'\r\n\r\nconst S = {\r\n  ROW_TEXT: {\r\n    paddingRight: 16\r\n  }\r\n};\r\n\r\n@Decor.withToolbar\r\n@Decor.withLoad\r\nclass AlphaIndicatorDialog extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleToolBar: this._toggleWithToolbar,\r\n      onAbout: this._clickInfoWithToolbar\r\n    })\r\n\r\n    this.toolbarButtons = this._createType2WithToolbar(\r\n      props, { noDate: true, noLabels: true }\r\n    )\r\n    this._commandButtons = this._crCommandsWithLoad(this)\r\n\r\n    this.state = {\r\n      isToolbar: true\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _handleLoad = () => {\r\n    const { loadId, onLoad } = this.props;\r\n    const option = {\r\n      loadId: loadId,\r\n      indicator: 'SECTOR',\r\n      //value: _value, //for label\r\n    };\r\n    onLoad(option)\r\n  }\r\n\r\n  _handleClose = () => {\r\n    this.props.onClose()\r\n  }\r\n\r\n  render() {\r\n    const {\r\n            isShow, caption,\r\n            onShow, onFront\r\n          } = this.props\r\n        , { isToolbar } = this.state;\r\n\r\n    return (\r\n      <D.DraggableDialog\r\n           isShow={isShow}\r\n           caption={caption}\r\n           menuModel={this._menuMore}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onFront={onFront}\r\n           onClose={this._handleClose}\r\n       >\r\n           <D.Toolbar\r\n              isShow={isToolbar}\r\n              buttons={this.toolbarButtons}\r\n           />\r\n           <D.Row.Text\r\n             styleRoot={S.ROW_TEXT}\r\n             caption=\"AV:\"\r\n             text=\"Sector Performances\"\r\n           />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlphaIndicatorDialog\r\n"],"file":"AlphaSectorDialog.js"}