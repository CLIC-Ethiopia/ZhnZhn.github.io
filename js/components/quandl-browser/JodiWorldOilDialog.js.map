{"version":3,"sources":["../../../src/components/quandl-browser/JodiWorldOilDialog.jsx"],"names":["unitOptions","chartTypes","caption","value","JodiWorldOilDialog","withToolbar","withValidationLoad","props","_hClickOptions","setState","isShowOptions","state","_hSelectCountry","country","_hSelectUnits","units","_hSelectChartType","chartType","_handleLoad","_handleWithValidationLoad","_createValidationMessages","_createLoadOption","msgOnNotSelected","msg","push","productFlow","getValidation","isValid1","isValid","msg1","concat","datesFragment","datesMsg","length","getValues","product","parent","flow","child","fromDate","toDate","seriaType","undefined","fnValue","dataColumn","loadId","dataSource","title","subtitle","_handleClose","_handleWithValidationClose","toolbarButtons","_createType2WithToolbar","onClick","_commandButtons","isShowLabels","isShowDate","validationMessages","nextProps","nextState","isShow","onShow","onFront","oneCaption","oneURI","oneJsonProp","parentCaption","parentChildURI","parentJsonProp","childCaption","initFromDate","initToDate","msgOnNotValidFormat","onTestDate","c"],"mappings":"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","file":"JodiWorldOilDialog.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport D from '../dialogs/DialogCell'\r\nimport Decor from '../dialogs/decorators/Decorators'\r\n\r\nconst unitOptions = [\r\n  { \"caption\" : \"Thousand Barrels per day (kb/d)\", \"value\" : \"KD\" },\r\n  { \"caption\" : \"Thousand Barrels (kbbl)\", \"value\" : \"KB\" },\r\n  { \"caption\" : \"Thousand Kilolitres (kl)\", \"value\" : \"KL\" },\r\n  { \"caption\" : \"Thousand Metric Tons (kmt)\", \"value\" : \"KT\" },\r\n  { \"caption\" : \"Conversion factor barrels/ktons\", \"value\" : \"BK\" }\r\n];\r\n\r\nconst chartTypes = [\r\n  { caption: \"AreaSpline\", value: \"AREA\" },\r\n  { caption: \"Yearly by Month\", value: \"YEARLY\" }\r\n];\r\n\r\n@Decor.withToolbar\r\n@Decor.withValidationLoad\r\nclass JodiWorldOilDialog extends Component {\r\n\r\n   constructor(props){\r\n     super()\r\n     this.country = null\r\n     this.product = null\r\n     this.flow = null\r\n     this.units = null\r\n     this.chartType = undefined\r\n\r\n     this.toolbarButtons = this._createType2WithToolbar(props)\r\n     this.toolbarButtons.push({\r\n       caption: 'O', title: 'Toggle Options Input',\r\n       onClick: this._hClickOptions\r\n     })\r\n\r\n     this._commandButtons = [\r\n       <D.Button.Load onClick={this._handleLoad} />\r\n     ]\r\n     this.state = {\r\n       isShowLabels: true,\r\n       isShowDate: false,\r\n       isShowOptions: false,\r\n       validationMessages : []\r\n     }\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (this.props !== nextProps){\r\n        if (this.props.isShow === nextProps.isShow){\r\n           return false;\r\n        }\r\n     }\r\n     return true;\r\n   }\r\n\r\n   _hClickOptions = () => {\r\n     this.setState({ isShowOptions: !this.state.isShowOptions })\r\n   }\r\n\r\n   _hSelectCountry = (country) => {\r\n     this.country = country\r\n   }\r\n   _hSelectUnits = (units) => {\r\n     this.units = units\r\n   }\r\n   _hSelectChartType = (chartType) => {\r\n     this.chartType = chartType\r\n   }\r\n\r\n   _handleLoad = () => {\r\n     this._handleWithValidationLoad(\r\n       this._createValidationMessages(),\r\n       this._createLoadOption\r\n     );\r\n   }\r\n   _createValidationMessages = () => {\r\n     const { msgOnNotSelected } = this.props;\r\n     let msg = [];\r\n\r\n     if (!this.country) { msg.push(msgOnNotSelected('Country')); }\r\n\r\n     const { isValid:isValid1, msg:msg1 } = this.productFlow.getValidation();\r\n     if (!isValid1) { msg = msg.concat(msg1); }\r\n\r\n     if (!this.units) {\r\n       this.units = unitOptions[0];\r\n     }\r\n\r\n     const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n     if (!isValid) { msg = msg.concat(datesMsg); }\r\n\r\n     msg.isValid = (msg.length === 0) ? true : false;\r\n     return msg;\r\n   }\r\n   _createLoadOption = () => {\r\n      const { parent:product, child:flow } = this.productFlow.getValues()\r\n          , { fromDate, toDate } = this.datesFragment.getValues()\r\n          , seriaType = this.chartType ? this.chartType.value: undefined\r\n          , { fnValue, dataColumn, loadId, dataSource } = this.props;\r\n      return {\r\n        value : fnValue(this.country.value, product.value, flow.value, this.units.value),\r\n        title : `${this.country.caption}: ${product.caption}`,\r\n        subtitle : `${flow.caption}: ${this.units.caption}`,\r\n        fromDate, toDate,\r\n        dataColumn, seriaType, loadId,\r\n        dataSource\r\n      };\r\n   }\r\n   _handleClose = () => {\r\n     this._handleWithValidationClose()     \r\n   }\r\n\r\n   render(){\r\n     const {\r\n             caption, isShow, onShow, onFront,\r\n             oneCaption, oneURI, oneJsonProp,\r\n             parentCaption, parentChildURI, parentJsonProp, childCaption, msgOnNotSelected,\r\n             initFromDate, initToDate, msgOnNotValidFormat, onTestDate\r\n           } = this.props\r\n         , {\r\n             isShowLabels,\r\n             isShowDate, isShowOptions,\r\n             validationMessages\r\n           } = this.state;\r\n\r\n     return (\r\n       <D.DraggableDialog\r\n         caption={caption}\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onShowChart={onShow}\r\n         onFront={onFront}\r\n         onClose={this._handleClose}\r\n       >\r\n          <D.ToolbarButtonCircle\r\n            buttons={this.toolbarButtons}\r\n          />\r\n\r\n          <D.SelectWithLoad\r\n             isShow={isShow}\r\n             isShowLabels={isShowLabels}\r\n             uri={oneURI}\r\n             jsonProp={oneJsonProp}\r\n             caption={oneCaption}\r\n             optionNames=\"Items\"\r\n             onSelect={this._hSelectCountry}\r\n          />\r\n          <D.SelectParentChild\r\n             ref={c => this.productFlow = c}\r\n             isShow={isShow}\r\n             isShowLabels={isShowLabels}\r\n             uri={parentChildURI}\r\n             parentCaption={parentCaption}\r\n             parentOptionNames=\"Items\"\r\n             parentJsonProp={parentJsonProp}\r\n             childCaption={childCaption}\r\n             msgOnNotSelected={msgOnNotSelected}\r\n          />\r\n          <D.RowInputSelect\r\n            isShowLabels={isShowLabels}\r\n            caption=\"Units\"\r\n            options={unitOptions}\r\n            onSelect={this._hSelectUnits}\r\n          />\r\n\r\n          <D.ShowHide isShow={isShowDate}>\r\n            <D.DatesFragment\r\n              ref={c => this.datesFragment = c}\r\n              isShowLabels={isShowLabels}\r\n              initFromDate={initFromDate}\r\n              initToDate={initToDate}\r\n              msgOnNotValidFormat={msgOnNotValidFormat}\r\n              onTestDate={onTestDate}\r\n            />\r\n          </D.ShowHide>\r\n\r\n          <D.ShowHide isShow={isShowOptions}>\r\n            <D.RowInputSelect\r\n              isShowLabels={isShowLabels}\r\n              caption=\"Chart Type\"\r\n              placeholder=\"Default: AreaSpline\"\r\n              options={chartTypes}\r\n              onSelect={this._hSelectChartType}\r\n            />\r\n          </D.ShowHide>\r\n\r\n          <D.ValidationMessages\r\n              validationMessages={validationMessages}\r\n          />\r\n       </D.DraggableDialog>\r\n     );\r\n   }\r\n}\r\n\r\nexport default JodiWorldOilDialog\r\n"]}