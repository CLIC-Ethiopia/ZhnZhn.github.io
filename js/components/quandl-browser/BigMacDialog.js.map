{"version":3,"sources":["../../../src/components/quandl-browser/BigMacDialog.jsx"],"names":["BigMacDialog","createClass","getInitialState","country","metric","toolbarButtons","_createType2WithToolbar","isShowDate","optionMetrics","caption","value","validationMessages","shouldComponentUpdate","nextProps","nextState","props","isShow","_handlerSelectCountry","_handlerSelectMetric","_handlerLoad","_handlerWithValidationLoad","_createValidationMessages","_createLoadOption","msg","push","msgOnNotSelected","datesFragment","getValidation","isValid","datesMsg","concat","length","getValues","fromDate","toDate","_dataColumn","_subtitle","state","loadId","fnValue","dataColumn","itemCaption","title","subtitle","_handlerClose","_handlerWithValidationClose","onClose","render","onShow","countryURI","countryJsonProp","initFromDate","initToDate","msgOnNotValidFormat","onTestDate","_commandButtons","c"],"mappings":"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","file":"BigMacDialog.js","sourcesContent":["import React from 'react';\r\n\r\nimport DraggableDialog from '../zhn-moleculs/DraggableDialog';\r\nimport WithToolbar from '../dialogs/WithToolbar';\r\nimport WithValidation from '../dialogs/WithValidation';\r\nimport ToolbarButtonCircle from '../dialogs/ToolbarButtonCircle';\r\nimport SelectWithLoad from '../dialogs/SelectWithLoad';\r\nimport RowInputSelect from '../dialogs/RowInputSelect';\r\nimport ActionButton from '../zhn/ActionButton';\r\nimport ShowHide from '../zhn/ShowHide';\r\n\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment';\r\nimport ValidationMessages from '../zhn/ValidationMessages';\r\n\r\nconst BigMacDialog = React.createClass({\r\n  ...WithToolbar,\r\n  ...WithValidation,\r\n\r\n  getInitialState(){\r\n     this.country = null;\r\n     this.metric =null;\r\n\r\n     this.toolbarButtons = this._createType2WithToolbar();\r\n\r\n     return {\r\n        isShowDate : true,\r\n        optionMetrics : [\r\n          { caption : 'Local Price', value : 1},\r\n          { caption : 'Dollar Exchange', value : 2},\r\n          { caption : 'Dollar Price', value : 3},\r\n          { caption : 'Dollar PPP', value : 4},\r\n          { caption : 'Dollar Valuation', value : 5}\r\n        ],\r\n\r\n        validationMessages: []\r\n     }\r\n  },\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  },\r\n\r\n  _handlerSelectCountry(country){\r\n    this.country = country;\r\n  },\r\n  _handlerSelectMetric(metric){\r\n    this.metric = metric;\r\n  },\r\n  _handlerLoad(){\r\n    this._handlerWithValidationLoad(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    );\r\n  },\r\n  _createValidationMessages(){\r\n     let msg = [];\r\n     if (!this.country) { msg.push(this.props.msgOnNotSelected('Country'));}\r\n     const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n     if (!isValid) { msg = msg.concat(datesMsg); }\r\n     msg.isValid = (msg.length === 0) ? true : false;\r\n     return msg;\r\n  },\r\n  _createLoadOption(){\r\n    const {fromDate, toDate} = this.datesFragment.getValues()\r\n        , _dataColumn = (this.metric) ? this.metric.value : 1\r\n        , _subtitle = (this.metric)\r\n              ? this.metric.caption\r\n              : this.state.optionMetrics[0].caption\r\n        , {loadId, fnValue} = this.props;\r\n    return {\r\n       value : fnValue(this.country.value),\r\n       fromDate: fromDate,\r\n       toDate: toDate,\r\n       dataColumn : _dataColumn,\r\n       itemCaption : this.country.caption,\r\n       loadId : loadId,\r\n       title : this.country.caption,\r\n       subtitle : _subtitle\r\n    }\r\n  },\r\n  _handlerClose(){\r\n    this._handlerWithValidationClose(this._createValidationMessages);\r\n    this.props.onClose();\r\n  },\r\n\r\n  render(){\r\n    const {\r\n           isShow, onShow,\r\n           countryURI, countryJsonProp,\r\n           initFromDate, initToDate, msgOnNotValidFormat, onTestDate\r\n          } = this.props\r\n        , { isShowDate, optionMetrics, validationMessages } = this.state\r\n        , _commandButtons = [\r\n       <ActionButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Load\"\r\n          onClick={this._handlerLoad}\r\n       />\r\n    ];\r\n\r\n    return (\r\n      <DraggableDialog\r\n           caption=\"Economist Big Mac Index\"\r\n           isShow={isShow}\r\n           commandButtons={_commandButtons}\r\n           onShowChart={onShow}\r\n           onClose={this._handlerClose}\r\n       >\r\n           <ToolbarButtonCircle\r\n             buttons={this.toolbarButtons}\r\n           />\r\n\r\n           <SelectWithLoad\r\n             isShow={isShow}\r\n             uri={countryURI}\r\n             jsonProp={countryJsonProp}\r\n             caption={'Country:'}\r\n             optionNames={'Countries'}\r\n             onSelect={this._handlerSelectCountry}\r\n           />\r\n           <RowInputSelect\r\n              caption={'Metric:'}\r\n              options={optionMetrics}\r\n              onSelect={this._handlerSelectMetric}\r\n           />\r\n           <ShowHide isShow={isShowDate}>\r\n             <DatesFragment\r\n                 ref={c => this.datesFragment = c}\r\n                 initFromDate={initFromDate}\r\n                 initToDate={initToDate}\r\n                 msgOnNotValidFormat={msgOnNotValidFormat}\r\n                 onTestDate={onTestDate}\r\n             />\r\n           </ShowHide>\r\n           <ValidationMessages\r\n               validationMessages={validationMessages}\r\n           />\r\n      </DraggableDialog>\r\n    );\r\n  }\r\n})\r\n\r\nexport default BigMacDialog\r\n"]}