{"version":3,"sources":["../../../src/components/quandl-browser/UNCommodityTradeDialog.jsx"],"names":["Placeholder","TRADE","INIT","SELECT","Filter","DEFAULT","IMPORT","EXPORT","REIMPORT","REEXPORT","UNCommodityTradeDialog","createClass","getInitialState","country","chapter","tradeFilter","subheading","optionTrades","chartType","toolbarButtons","caption","onClick","_handlerClickInfo","_handlerClickAll","_handlerClickFilter","_handlerClickDate","_handlerClickChartType","isShowFilter","isShowDate","isShowChartType","optionTradeFilter","value","isLoadingTrade","isLoadingTradeFailed","placeholderTrade","optionChartTypes","AREA","SEMI_DONUT","STACKED_AREA","STACKED_AREA_PERCENT","STACKED_COLUMN","STACKED_COLUMN_PERCENT","TREE_MAP","validationMessages","shouldComponentUpdate","nextProps","nextState","props","isShow","_initTrade","setState","_filterTrade","options","filterValue","filter","item","index","indexOf","showModalDialog","DESCRIPTION","descrUrl","state","_isShow","_handlerSelectCountry","_handlerSelectChapter","_handlerSelectTradeFilter","_handlerSelectTrade","trade","_handlerSelectChartType","_handlerLoadMeta","_handlerWithValidationLoad","_createMetaValidationMessages","_createLoadMetaOption","_loadMeta","option","onLoad","msg","push","msgOnNotSelected","datesFragment","getValidation","isValid","datesMsg","concat","length","getValues","fromDate","toDate","loadId","fnValue","isLoadMeta","_setOptionTrades","onCancel","_loadMetaOptionCancel","onFailed","_loadMetaOptionFailed","_handlerLoadData","_createDataValidationMessages","_createLoadDataOption","_dataColumn","dataColumn","_chartType","_title","_sliceItems","_createSpliceItems","undefined","seriaType","sliceItems","title","subtitle","_filterLength","map","substring","_handlerClose","_handlerWithValidationClose","onClose","render","onShow","countryURI","countryJsonProp","commodityURI","commodityJsonProp","initFromDate","initToDate","msgOnNotValidFormat","onTestDate","_commandButtons","c"],"mappings":"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","file":"UNCommodityTradeDialog.js","sourcesContent":["import React from 'react';\r\n\r\nimport {ChartType, ModalDialog} from '../../constants/Type';\r\nimport ComponentActions from '../../flux/actions/ComponentActions';\r\n\r\nimport DraggableDialog from '../zhn-moleculs/DraggableDialog';\r\nimport WithValidation from '../dialogs/WithValidation';\r\nimport ToolbarButtonCircle from '../dialogs/ToolbarButtonCircle';\r\nimport SelectWithLoad from '../dialogs/SelectWithLoad';\r\nimport RowInputSelect from '../dialogs/RowInputSelect';\r\nimport ShowHide from '../zhn/ShowHide';\r\nimport ActionButton from '../zhn/ActionButton';\r\n\r\nimport DatesFragment from '../zhn-moleculs/DatesFragment';\r\nimport ValidationMessages from '../zhn/ValidationMessages';\r\n\r\nconst Placeholder = {\r\n  TRADE : {\r\n    INIT : 'First Load Meta',\r\n    SELECT : 'Select...'\r\n  }\r\n};\r\nconst Filter = {\r\n  DEFAULT : 'Default Empty',\r\n  IMPORT : 'Import - Trade (USD)',\r\n  EXPORT : 'Export - Trade (USD)',\r\n  REIMPORT : 'Re-Import - Trade (USD)',\r\n  REEXPORT : 'Re-Export - Trade (USD)'\r\n};\r\n\r\nconst UNCommodityTradeDialog = React.createClass({\r\n  ...WithValidation,\r\n\r\n  getInitialState(){\r\n    this.country = null;\r\n    this.chapter = null;\r\n    this.tradeFilter = null;\r\n    this.subheading = null;\r\n    this.optionTrades = null;\r\n    this.chartType = null;\r\n\r\n    this.toolbarButtons = [\r\n      { caption:'I', onClick: this._handlerClickInfo },\r\n      { caption:'A', onClick: this._handlerClickAll },\r\n      { caption:'F', onClick: this._handlerClickFilter },\r\n      { caption:'D', onClick: this._handlerClickDate },\r\n      { caption:'C', onClick: this._handlerClickChartType }\r\n    ];\r\n\r\n    return {\r\n      isShowFilter : false,\r\n      isShowDate : true,\r\n      isShowChartType : false,\r\n\r\n      optionTradeFilter : [\r\n        {caption: 'Default : Empty Filter', value: Filter.DEFAULT},\r\n        {caption: 'Import - Trade (USD)', value: 'Import - Trade (USD)'},\r\n        {caption: 'Import - Weight (Kg)', value: 'Import - Weight (Kg)'},\r\n        {caption: 'Export - Trade (USD)', value: 'Export - Trade (USD)'},\r\n        {caption: 'Export - Weight (Kg)', value: 'Export - Weight (Kg)'},\r\n        {caption: 'Re-Import - Trade (USD)', value: 'Re-Import - Trade (USD)'},\r\n        {caption: 'Re-Export - Trade (USD)', value: 'Re-Export - Trade (USD)'}\r\n      ],\r\n      isLoadingTrade : false,\r\n      isLoadingTradeFailed : false,\r\n      optionTrades : [],\r\n      placeholderTrade : Placeholder.TRADE.INIT,\r\n\r\n      optionChartTypes : [\r\n        {caption : 'Default : Area', value: ChartType.AREA},\r\n        {caption : 'Semi Donut : Total Top90, On Every Year : Recent 2 Years', value: ChartType.SEMI_DONUT},\r\n        {caption : 'Stacked Area : Total Top90, On Recent Year', value: ChartType.STACKED_AREA},\r\n        {caption : 'Stacked Area Percent : Total Top90, On Recent Year', value: ChartType.STACKED_AREA_PERCENT},\r\n        {caption : 'Stacked Column : Total Top90, On Recent Year', value: ChartType.STACKED_COLUMN},\r\n        {caption : 'Stacked Column Percent : Total Top90, On Recent Year', value: ChartType.STACKED_COLUMN_PERCENT},\r\n        {caption : 'Tree Map : On Recent Year', value: ChartType.TREE_MAP}\r\n      ],\r\n\r\n      validationMessages: []\r\n    }\r\n  },\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  },\r\n\r\n  _initTrade(){\r\n    this.subheading = null;\r\n    this.optionTrades = null;\r\n    this.setState({\r\n      optionTrades: [],\r\n      placeholderTrade: Placeholder.TRADE.INIT,\r\n      isLoadingTradeFailed : false\r\n    });\r\n  },\r\n\r\n  _filterTrade(){\r\n    let options;\r\n    if (this.tradeFilter && this.optionTrades){\r\n      const filterValue = this.tradeFilter.value;\r\n      if (filterValue !== Filter.DEFAULT){\r\n        options = this.optionTrades.filter((item,index)=>{\r\n           return item.caption.indexOf(filterValue) !== -1;\r\n        })\r\n        if (filterValue === Filter.IMPORT){\r\n           options = options.filter((item,index)=>{\r\n              return item.caption.indexOf(Filter.REIMPORT) === -1;\r\n           })\r\n        }\r\n        if (filterValue === Filter.EXPORT){\r\n           options = options.filter((item,index)=>{\r\n             return item.caption.indexOf(Filter.REEXPORT) === -1;\r\n           })\r\n        }\r\n      } else {\r\n        options = this.optionTrades;\r\n      }\r\n    } else {\r\n      options = this.optionTrades;\r\n    }\r\n    return options;\r\n  },\r\n\r\n  _handlerClickInfo(){\r\n    ComponentActions.showModalDialog(ModalDialog.DESCRIPTION, {\r\n      descrUrl: this.props.descrUrl\r\n    });\r\n  },\r\n\r\n  _handlerClickAll(){\r\n    const {isShowFilter, isShowDate, isShowChartType} = this.state\r\n        , _isShow = (isShowFilter || isShowDate || isShowChartType) ? false : true;\r\n    this.setState({\r\n        isShowFilter : _isShow,\r\n        isShowDate : _isShow,\r\n        isShowChartType : _isShow\r\n      })\r\n  },\r\n  _handlerClickFilter(){\r\n    this.setState({isShowFilter: !this.state.isShowFilter});\r\n  },\r\n  _handlerClickDate(){\r\n    this.setState({isShowDate: !this.state.isShowDate});\r\n  },\r\n  _handlerClickChartType(){\r\n    this.setState({isShowChartType: !this.state.isShowChartType});\r\n  },\r\n\r\n  _handlerSelectCountry(country){\r\n    this.country = country;\r\n    this._initTrade();\r\n  },\r\n  _handlerSelectChapter(chapter){\r\n    this.chapter = chapter;\r\n    this._initTrade();\r\n  },\r\n  _handlerSelectTradeFilter(filter){\r\n     this.tradeFilter = filter;\r\n     this.setState({ optionTrades: this._filterTrade() });\r\n  },\r\n  _handlerSelectTrade(trade){\r\n    this.subheading = trade;\r\n  },\r\n  _handlerSelectChartType(chartType){\r\n    this.chartType = chartType;\r\n  },\r\n  _handlerLoadMeta(){\r\n    this._handlerWithValidationLoad(\r\n      this._createMetaValidationMessages(),\r\n      this._createLoadMetaOption,\r\n      this._loadMeta\r\n    );\r\n  },\r\n  _loadMeta(option){\r\n    this.props.onLoad(option);\r\n    this.setState({ isLoadingTrade: true });\r\n  },\r\n  _createMetaValidationMessages(){\r\n     let msg = [];\r\n     if (!this.country)  { msg.push(this.props.msgOnNotSelected('Country'));}\r\n     if (!this.chapter)  { msg.push(this.props.msgOnNotSelected('Subheading'));}\r\n     const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n     if (!isValid) { msg = msg.concat(datesMsg); }\r\n     msg.isValid = (msg.length === 0) ? true : false;\r\n     return msg;\r\n  },\r\n  _createLoadMetaOption(){\r\n    const { fromDate, toDate } = this.datesFragment.getValues()\r\n        , { loadId, fnValue } = this.props;\r\n    return {\r\n       value : fnValue(this.chapter.value, this.country.value),\r\n       fromDate: fromDate,\r\n       toDate: toDate,\r\n       isLoadMeta : true,\r\n       onLoad : this._setOptionTrades,\r\n       onCancel : this._loadMetaOptionCancel,\r\n       onFailed : this._loadMetaOptionFailed,\r\n       loadId : loadId\r\n    }\r\n  },\r\n  _setOptionTrades(optionTrades){\r\n    this.optionTrades = optionTrades;\r\n    this.setState({\r\n      optionTrades: this._filterTrade(),\r\n      isLoadingTrade: false,\r\n      isLoadingTradeFailed: false,\r\n      placeholderTrade: Placeholder.TRADE.SELECT\r\n    });\r\n  },\r\n  _loadMetaOptionCancel(){\r\n    this.setState({\r\n      isLoadingTrade: false,\r\n      isLoadingTradeFailed: false,\r\n      placeholderTrade: Placeholder.TRADE.SELECT\r\n    })\r\n  },\r\n  _loadMetaOptionFailed(){\r\n    this.setState({ isLoadingTrade:false, isLoadingTradeFailed:true })\r\n  },\r\n  _handlerLoadData(){\r\n    this._handlerWithValidationLoad(\r\n      this._createDataValidationMessages(),\r\n      this._createLoadDataOption\r\n    );\r\n  },\r\n  _createDataValidationMessages(){\r\n     let msg = [];\r\n     if ( !this.chartType || this.chartType.value === ChartType.AREA){\r\n       if (!this.subheading)  {\r\n         msg.push(this.props.msgOnNotSelected('Subheading'));\r\n       }\r\n     } else {\r\n       const { placeholderTrade } = this.state;\r\n       if (placeholderTrade === Placeholder.TRADE.INIT){\r\n         msg.push(Placeholder.TRADE.INIT);\r\n       }\r\n       if (!this.tradeFilter) {\r\n         msg.push(this.props.msgOnNotSelected('Trade Filter'));\r\n       }\r\n     }\r\n     msg.isValid = (msg.length === 0) ? true : false;\r\n     return msg;\r\n  },\r\n  _createLoadDataOption(){\r\n    const {fromDate, toDate} = this.datesFragment.getValues()\r\n        , _dataColumn = (this.subheading) ? this.subheading.value : this.props.dataColumn\r\n        , {loadId, fnValue} = this.props\r\n        , _chartType = (this.chartType) ? this.chartType.value : ChartType.AREA\r\n        , _title = (this.tradeFilter) ?\r\n                   `${this.country.caption}:${this.tradeFilter.caption}` :\r\n                   `${this.country.caption}`\r\n        , _sliceItems = ( !(!this.chartType || this.chartType.value === ChartType.AREA) )\r\n              ? this._createSpliceItems()\r\n              : undefined\r\n    return {\r\n       value : fnValue(this.chapter.value, this.country.value),\r\n       fromDate: fromDate,\r\n       toDate: toDate,\r\n       dataColumn : _dataColumn,\r\n       seriaType : _chartType,\r\n       sliceItems : _sliceItems,\r\n       title : _title,\r\n       subtitle: this.chapter.caption,\r\n       loadId : loadId\r\n    }\r\n  },\r\n  _createSpliceItems(){\r\n     const _filterLength = this.tradeFilter.value.length + 2;\r\n     return this.state.optionTrades.map((item, index) => {\r\n        let {value, caption} = item;\r\n        caption = caption.substring( 0, (caption.length - _filterLength) );\r\n        return { caption, value }\r\n    })\r\n  },\r\n  _handlerClose(){\r\n    this._handlerWithValidationClose(this._createMetaValidationMessages);\r\n    this.props.onClose();\r\n  },\r\n\r\n\r\n  render(){\r\n    const {\r\n           isShow, onShow,\r\n           countryURI, countryJsonProp,\r\n           commodityURI, commodityJsonProp,\r\n           initFromDate, initToDate, msgOnNotValidFormat, onTestDate\r\n          } = this.props\r\n        , {\r\n           isShowFilter, isShowDate, isShowChartType,\r\n           optionTradeFilter,\r\n           isLoadingTrade, isLoadingTradeFailed, optionTrades, placeholderTrade,\r\n           optionChartTypes,\r\n           validationMessages\r\n         } = this.state\r\n        , _commandButtons = [\r\n       <ActionButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Load Meta\"\r\n          onClick={this._handlerLoadMeta}\r\n       />,\r\n       <ActionButton\r\n          key=\"b\"\r\n          type=\"TypeC\"\r\n          caption=\"Load Data\"\r\n          onClick={this._handlerLoadData}\r\n       />\r\n    ];\r\n\r\n    return(\r\n        <DraggableDialog\r\n             caption=\"United Nations Commodity Trade\"\r\n             isShow={isShow}\r\n             commandButtons={_commandButtons}\r\n             onShowChart={onShow}\r\n             onClose={this._handlerClose}\r\n         >\r\n             <ToolbarButtonCircle\r\n               buttons={this.toolbarButtons}\r\n             />\r\n\r\n             <SelectWithLoad\r\n               isShow={isShow}\r\n               uri={countryURI}\r\n               jsonProp={countryJsonProp}\r\n               caption={'Country:'}\r\n               optionNames={'Countries'}\r\n               onSelect={this._handlerSelectCountry}\r\n             />\r\n             <SelectWithLoad\r\n               isShow={isShow}\r\n               uri={commodityURI}\r\n               jsonProp={commodityJsonProp}\r\n               caption={'Chapter:'}\r\n               optionNames={'Chapters'}\r\n               onSelect={this._handlerSelectChapter}\r\n             />\r\n\r\n             <ShowHide isShow={isShowFilter}>\r\n               <RowInputSelect\r\n                 caption={'Filter Trade:'}\r\n                 options={optionTradeFilter}\r\n                 placeholder={'Filter...'}\r\n                 onSelect={this._handlerSelectTradeFilter}\r\n               />\r\n             </ShowHide>\r\n             <RowInputSelect\r\n               caption={'Subheading:'}\r\n               options={optionTrades}\r\n               optionNames={'Meta'}\r\n               isLoading={isLoadingTrade}\r\n               isLoadingFailed={isLoadingTradeFailed}\r\n               placeholder={placeholderTrade}\r\n               onLoadOption={this._handlerLoadMeta}\r\n               onSelect={this._handlerSelectTrade}\r\n\r\n             />\r\n             <ShowHide isShow={isShowDate}>\r\n               <DatesFragment\r\n                   ref={c => this.datesFragment = c}\r\n                   initFromDate={initFromDate}\r\n                   initToDate={initToDate}\r\n                   msgOnNotValidFormat={msgOnNotValidFormat}\r\n                   onTestDate={onTestDate}\r\n               />\r\n             </ShowHide>\r\n             <ShowHide isShow={isShowChartType}>\r\n               <RowInputSelect\r\n                 caption={'Chart Type:'}\r\n                 options={optionChartTypes}\r\n                 onSelect={this._handlerSelectChartType}\r\n               />\r\n             </ShowHide>\r\n             <ValidationMessages\r\n                 validationMessages={validationMessages}\r\n             />\r\n        </DraggableDialog>\r\n    );\r\n  }\r\n});\r\n\r\nexport default UNCommodityTradeDialog\r\n"]}