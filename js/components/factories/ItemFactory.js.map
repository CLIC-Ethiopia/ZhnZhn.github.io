{"version":3,"sources":["../../../src/components/factories/ItemFactory.jsx"],"names":["_createAreaChartItem","store","config","index","option","props","zhConfig","id","key","chartType","setActiveCheckbox","showOptionDialog","bind","showModalDialog","ADD_TO_WATCH","crValueMoving","copy","PASTE_TO","getCopyFromChart","_createMapChartItem","_crSectorItem","_rCreateItem","DEFAULT","EUROSTAT_MAP","ItemFactory","createItem","zhCompType","_fnCreate"],"mappings":"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","file":"ItemFactory.js","sourcesContent":["import React from 'react';\r\n\r\nimport ChartFn from '../../charts/ChartFn';\r\n\r\nimport ComponentActions from '../../flux/actions/ComponentActions';\r\nimport ChartActions from '../../flux/actions/ChartActions';\r\nimport { ModalDialog, CompItemType } from '../../constants/Type';\r\n\r\nimport AreaChartItem from '../items/AreaChartItem';\r\nimport MapChartItem from '../items/MapChartItem';\r\nimport SectorItem from '../items/SectorItem';\r\n\r\nconst _createAreaChartItem = function({\r\n  store, config, index, option, props\r\n}) {\r\n  const { zhConfig={} } = config\r\n     ,  { id=`Id:${index}`, key=index } = zhConfig\r\n     ,  { chartType } = option;\r\n  return (\r\n       <AreaChartItem\r\n           ref={'chart' + index}\r\n           key={key}\r\n           chartType={chartType}\r\n           caption={id}\r\n           config={config}\r\n           onSetActive={ComponentActions.setActiveCheckbox}\r\n           onShowConfigDialog={ComponentActions.showOptionDialog.bind(null, 'ChartConfigDialog')}\r\n           onAddToWatch={ComponentActions.showModalDialog.bind(null, ModalDialog.ADD_TO_WATCH)}\r\n           {...props}\r\n           crValueMoving={ChartFn.crValueMoving}\r\n\r\n           onCopy={ChartActions.copy}\r\n           onPasteToDialog={ComponentActions.showModalDialog.bind(null, ModalDialog.PASTE_TO)}\r\n           getCopyFromChart={store.getCopyFromChart.bind(store)}           \r\n           ChartFn={ChartFn}\r\n       />\r\n     );\r\n};\r\n\r\nconst _createMapChartItem = function({\r\n  store, config, index, option, props\r\n}) {\r\n  const { zhConfig={} } = config\r\n     ,  { id=`Id:${index}`, key=index } = zhConfig\r\n     ,  { chartType } = option;\r\n\r\n  return(\r\n    <MapChartItem\r\n       ref={'chart' + index}\r\n       key={key}\r\n       chartType={chartType}\r\n       caption={id}\r\n       config={config}\r\n       {...props}\r\n    />\r\n  )\r\n};\r\n\r\nconst _crSectorItem = ({\r\n  store, config, index, option, props\r\n}) => {\r\n  return (\r\n    <SectorItem\r\n       key=\"key\"\r\n       config={config}\r\n     />\r\n  );\r\n}\r\n\r\nconst _rCreateItem = {\r\n  DEFAULT : _createAreaChartItem,\r\n\r\n  [CompItemType.EUROSTAT_MAP] : _createMapChartItem,\r\n  SECTOR : _crSectorItem\r\n}\r\n\r\nconst ItemFactory = {\r\n  createItem({ store, config, index, option, props }){\r\n    const { zhCompType } = config\r\n        , _fnCreate = (zhCompType && _rCreateItem[zhCompType])\r\n               ? _rCreateItem[zhCompType]\r\n               : _rCreateItem.DEFAULT;\r\n\r\n    return _fnCreate({ store, config, index, option, props });\r\n  }\r\n};\r\n\r\nexport default ItemFactory\r\n"]}