{"version":3,"sources":["../../../src/components/toolbars/RowSma.jsx"],"names":["addSmaTo","IndicatorBuilder","removeSeriaFrom","_isArray","Array","isArray","SMA","MONTH","YEAR","_findInitSma","config","_d","series","data","length","_isInArrObjWithId","arrObj","id","find","obj","_crId","period","RowSma","getChart","_refInitialSma","_initialSma","_refPeriod","smaConfs","setSmaConfs","_onAddSma","current","getValue","chart","color","isPlus","_onRemoveSma","filter","d"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport useRefInit from '../hooks/useRefInit'\r\n\r\nimport IndicatorBuilder from '../../charts/IndicatorBuilder';\r\n\r\nimport RowCaptionInput from './RowCaptionInput'\r\nimport SeriaConfigs from './SeriaConfigs'\r\n\r\nconst {\r\n  addSmaTo,\r\n  removeSeriaFrom\r\n } = IndicatorBuilder;\r\n\r\nconst _isArray = Array.isArray;\r\n\r\nconst SMA = {\r\n  MONTH: '12',\r\n  YEAR: '50'\r\n};\r\nconst _findInitSma = (config) => {\r\n  const _d = (((config || {}).series || [])[0] || {}).data;\r\n  return !_isArray(_d)\r\n    ? '0'\r\n    : _d.length > 150\r\n         ? SMA.YEAR : SMA.MONTH;\r\n};\r\n\r\nconst _isInArrObjWithId = (arrObj, id) => {\r\n  return !!arrObj.find(obj => obj.id === id);\r\n};\r\n\r\nconst _crId = period => `SMA(${period})`;\r\n\r\nconst RowSma = ({\r\n  config,\r\n  getChart\r\n}) => {\r\n  const _refInitialSma = useRef(null)\r\n  , _initialSma = useRefInit(_refInitialSma, () => _findInitSma(config))\r\n  , _refPeriod = useRef()\r\n  , [ smaConfs, setSmaConfs ] = useState([])\r\n  , _onAddSma = () => {\r\n      const period = _refPeriod.current.getValue()\r\n      , id = _crId(period);\r\n      if ( !_isInArrObjWithId(smaConfs, id)  ){\r\n        const chart = getChart()\r\n        , color = addSmaTo(chart, {\r\n             id, period, isPlus: false\r\n          });\r\n        if (color){\r\n          setSmaConfs([...smaConfs, { id, color }])\r\n        }\r\n      }\r\n    }\r\n  , _onRemoveSma = (id) => {\r\n    const chart = getChart();\r\n    if ( removeSeriaFrom(chart, id) ){\r\n      setSmaConfs(smaConfs.filter(d => d.id !== id))\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RowCaptionInput\r\n        caption=\"SMA\"\r\n        forwardRef={_refPeriod}\r\n        initValue={_initialSma}\r\n        onAdd={_onAddSma}\r\n      />\r\n      <SeriaConfigs\r\n        configs={smaConfs}\r\n        onRemove={_onRemoveSma}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RowSma\r\n"],"file":"RowSma.js"}