{"version":3,"sources":["../../../src/utils/__tests__/getPropertyFn.test.js"],"names":["describe","fn","getC","test","expect","caption","toBe","c","getV","value","v","option","isUpper","dfValue"],"mappings":"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","sourcesContent":["import {\r\n  getC,\r\n  getV\r\n} from '../getPropertyFn';\r\n\r\ndescribe('getC', ()=> {\r\n  const fn = getC;\r\n  test('should return string item caption', ()=>{\r\n    expect(fn({ caption: 'Abc' })).toBe('Abc')\r\n    expect(fn({ caption: '0' })).toBe('0')\r\n    expect(fn({ caption: 0 })).toBe('0')\r\n    expect(fn({})).toBe('')\r\n    expect(fn()).toBe('')\r\n    expect(fn(null)).toBe('')\r\n  })\r\n  test('should return string item caption by item short prop name c', () => {\r\n    expect(fn({ c: 'Abc' })).toBe('Abc')\r\n    expect(fn({ c: '0' })).toBe('0')\r\n    expect(fn({ c: 0 })).toBe('0')\r\n  })\r\n})\r\n\r\ndescribe('getV', ()=>{\r\n  const fn = getV;\r\n  test('should return string item value', ()=>{\r\n    expect(fn({ value: 'Abc'})).toBe('Abc')\r\n    expect(fn({ value: '0'})).toBe('0')\r\n    expect(fn({ value: 0})).toBe('0')\r\n  })\r\n  test('should return string item value by item short prop name v', ()=>{\r\n    expect(fn({ v: 'Abc'})).toBe('Abc')\r\n    expect(fn({ v: '0'})).toBe('0')\r\n    expect(fn({ v: 0})).toBe('0')\r\n  })\r\n\r\n  test('should return string upperCase in case isUpper option', ()=>{\r\n    const option = { isUpper: true };\r\n    expect(fn({ value: 'Abc'}, option)).toBe('ABC')\r\n    expect(fn({ value: '0'}, option)).toBe('0')\r\n    expect(fn({ value: 0}, option)).toBe('0')\r\n  })\r\n  test('should return option dfValue or empty str in case value null or undefined', ()=>{\r\n    const option = { dfValue: 'dfValue' };\r\n    expect(fn({ value: void 0 }, option)).toBe('dfValue')\r\n    expect(fn({ v: void 0 }, option)).toBe('dfValue')\r\n    expect(fn({ value: null }, option)).toBe('dfValue')\r\n    expect(fn({ v: null }, option)).toBe('dfValue')\r\n\r\n    expect(fn({ value: void 0 })).toBe('')\r\n    expect(fn({ v: void 0 })).toBe('')\r\n    expect(fn({ value: null })).toBe('')\r\n    expect(fn({ v: null })).toBe('')\r\n  })\r\n\r\n  test('should retun empty string for edge case', () => {\r\n    const option = { isUpper: true };\r\n    expect(fn({})).toBe('')\r\n    expect(fn()).toBe('')\r\n    expect(fn(null)).toBe('')\r\n\r\n    expect(fn({}, option)).toBe('')\r\n    expect(fn(void 0, option)).toBe('')\r\n    expect(fn(null, option)).toBe('')\r\n  })\r\n})\r\n"],"file":"getPropertyFn.test.js"}