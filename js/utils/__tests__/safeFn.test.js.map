{"version":3,"sources":["../../../src/utils/__tests__/safeFn.test.js"],"names":["describe","obj","fn","test","expect","toBe","undefined","NaN","dfValue"],"mappings":";;;;AAAA;;AAEAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvB,MAAMC,GAAG,GAAG;AACVC,IAAAA,EAAE,EAAE,cAAM,CAAE;AADF,GAAZ;AAGAC,EAAAA,IAAI,CAAC,8BAAD,EAAiC,YAAM;AACzCC,IAAAA,MAAM,CAAC,wBAAOH,GAAP,EAAY,IAAZ,CAAD,CAAN,CAA0BI,IAA1B,CAA+BJ,GAAG,CAACC,EAAnC;AACD,GAFG,CAAJ;AAIAC,EAAAA,IAAI,CAAC,+BAAD,EAAkC,YAAM;AAC1CC,IAAAA,MAAM,CAAC,OAAO,wBAAO,IAAP,EAAa,IAAb,CAAR,CAAN,CAAkCC,IAAlC,CAAuC,UAAvC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAOE,SAAP,EAAkB,IAAlB,CAAR,CAAN,CAAuCD,IAAvC,CAA4C,UAA5C;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAO,EAAP,EAAW,IAAX,CAAR,CAAN,CAAgCC,IAAhC,CAAqC,UAArC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAO,IAAP,EAAa,IAAb,CAAR,CAAN,CAAkCC,IAAlC,CAAuC,UAAvC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAO,CAAP,EAAU,IAAV,CAAR,CAAN,CAA+BC,IAA/B,CAAoC,UAApC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAOG,GAAP,EAAY,IAAZ,CAAR,CAAN,CAAiCF,IAAjC,CAAsC,UAAtC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAO,EAAP,EAAW,IAAX,CAAR,CAAN,CAAgCC,IAAhC,CAAqC,UAArC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAOH,GAAP,EAAY,cAAZ,CAAR,CAAN,CAA2CI,IAA3C,CAAgD,UAAhD;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAO,IAAP,CAAR,CAAN,CAA4BC,IAA5B,CAAiC,UAAjC;AACD,GAVG,CAAJ;AAYAF,EAAAA,IAAI,CAAC,qDAAD,EAAwD,YAAK;AAC/DC,IAAAA,MAAM,CAAC,OAAO,wBAAOH,GAAP,EAAY,YAAZ,GAAR,CAAN,CAA2CI,IAA3C,CAAgD,WAAhD;AACD,GAFG,CAAJ;AAIAF,EAAAA,IAAI,CAAC,kEAAD,EAAqE,YAAM;AAC7E,QAAMK,OAAO,GAAG,SAAhB;AAAA,QACKN,EAAE,GAAG,wBAAOD,GAAP,EAAY,YAAZ,EAA0BO,OAA1B,CADV;AAEAJ,IAAAA,MAAM,CAACF,EAAE,EAAH,CAAN,CAAaG,IAAb,CAAkBG,OAAlB;AACD,GAJG,CAAJ;AAKD,CA7BO,CAAR","sourcesContent":["import safeFn from '../safeFn'\r\n\r\ndescribe('safeFn', () => {\r\n  const obj = {\r\n    fn: () => {}\r\n  }\r\n  test('should return fn by propName', () => {\r\n    expect(safeFn(obj, 'fn')).toBe(obj.fn)\r\n  })\r\n\r\n  test('should return fn in edge case', () => {\r\n    expect(typeof safeFn(null, 'fn')).toBe('function')\r\n    expect(typeof safeFn(undefined, 'fn')).toBe('function')\r\n    expect(typeof safeFn('', 'fn')).toBe('function')\r\n    expect(typeof safeFn(true, 'fn')).toBe('function')\r\n    expect(typeof safeFn(1, 'fn')).toBe('function')\r\n    expect(typeof safeFn(NaN, 'fn')).toBe('function')\r\n    expect(typeof safeFn([], 'fn')).toBe('function')\r\n    expect(typeof safeFn(obj, 'fnNotExisted')).toBe('function')\r\n    expect(typeof safeFn('fn')).toBe('function')\r\n  })\r\n\r\n  test('should return fn in edge case that return undefined', ()=> {\r\n    expect(typeof safeFn(obj, 'notExisted')()).toBe('undefined')\r\n  })\r\n\r\n  test('should return, with dfValue, fn in edge case that return dfValue', () => {\r\n    const dfValue = 'dfValue'\r\n       , fn = safeFn(obj, 'notExisted', dfValue);\r\n    expect(fn()).toBe(dfValue)\r\n  })\r\n})\r\n"],"file":"safeFn.test.js"}