{"version":3,"sources":["../../../src/utils/__tests__/safeFn.test.js"],"names":["describe","obj","fn","test","expect","toBe","undefined","NaN","dfValue"],"mappings":";;;;AAAA;;AAEAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvB,MAAMC,GAAG,GAAG;AACVC,IAAAA,EAAE,EAAE,cAAM,CAAE;AADF,GAAZ;AAGAC,EAAAA,IAAI,CAAC,8BAAD,EAAiC,YAAM;AACzCC,IAAAA,MAAM,CAAC,wBAAGH,GAAH,EAAQ,IAAR,CAAD,CAAN,CAAsBI,IAAtB,CAA2BJ,GAAG,CAACC,EAA/B;AACD,GAFG,CAAJ;AAIAC,EAAAA,IAAI,CAAC,+BAAD,EAAkC,YAAM;AAC1CC,IAAAA,MAAM,CAAC,OAAO,wBAAG,IAAH,EAAS,IAAT,CAAR,CAAN,CAA8BC,IAA9B,CAAmC,UAAnC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAGE,SAAH,EAAc,IAAd,CAAR,CAAN,CAAmCD,IAAnC,CAAwC,UAAxC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAG,EAAH,EAAO,IAAP,CAAR,CAAN,CAA4BC,IAA5B,CAAiC,UAAjC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAG,IAAH,EAAS,IAAT,CAAR,CAAN,CAA8BC,IAA9B,CAAmC,UAAnC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAG,CAAH,EAAM,IAAN,CAAR,CAAN,CAA2BC,IAA3B,CAAgC,UAAhC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAGG,GAAH,EAAQ,IAAR,CAAR,CAAN,CAA6BF,IAA7B,CAAkC,UAAlC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAG,EAAH,EAAO,IAAP,CAAR,CAAN,CAA4BC,IAA5B,CAAiC,UAAjC;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAGH,GAAH,EAAQ,cAAR,CAAR,CAAN,CAAuCI,IAAvC,CAA4C,UAA5C;AACAD,IAAAA,MAAM,CAAC,OAAO,wBAAG,IAAH,CAAR,CAAN,CAAwBC,IAAxB,CAA6B,UAA7B;AACD,GAVG,CAAJ;AAWAF,EAAAA,IAAI,CAAC,mDAAD,EAAsD,YAAI;AAC5D,QAAMK,OAAO,GAAG,SAAhB;AACAJ,IAAAA,MAAM,CAAC,wBAAG,IAAH,EAAS,IAAT,EAAeI,OAAf,GAAD,CAAN,CAAkCH,IAAlC,CAAuCG,OAAvC;AACAJ,IAAAA,MAAM,CAAC,wBAAG,IAAH,EAAS,IAAT,GAAD,CAAN,CAAyBC,IAAzB,CAA8BC,SAA9B;AACD,GAJG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,qDAAD,EAAwD,YAAK;AAC/DC,IAAAA,MAAM,CAAC,OAAO,wBAAGH,GAAH,EAAQ,YAAR,GAAR,CAAN,CAAuCI,IAAvC,CAA4C,WAA5C;AACD,GAFG,CAAJ;AAIAF,EAAAA,IAAI,CAAC,kEAAD,EAAqE,YAAM;AAC7E,QAAMK,OAAO,GAAG,SAAhB;AACAJ,IAAAA,MAAM,CAAC,wBAAGH,GAAH,EAAQ,YAAR,EAAsBO,OAAtB,GAAD,CAAN,CAAyCH,IAAzC,CAA8CG,OAA9C;AACD,GAHG,CAAJ;AAID,CAjCO,CAAR","sourcesContent":["import fn from '../safeFn'\r\n\r\ndescribe('safeFn', () => {\r\n  const obj = {\r\n    fn: () => {}\r\n  }\r\n  test('should return fn by propName', () => {\r\n    expect(fn(obj, 'fn')).toBe(obj.fn)\r\n  })\r\n\r\n  test('should return fn in edge case', () => {\r\n    expect(typeof fn(null, 'fn')).toBe('function')\r\n    expect(typeof fn(undefined, 'fn')).toBe('function')\r\n    expect(typeof fn('', 'fn')).toBe('function')\r\n    expect(typeof fn(true, 'fn')).toBe('function')\r\n    expect(typeof fn(1, 'fn')).toBe('function')\r\n    expect(typeof fn(NaN, 'fn')).toBe('function')\r\n    expect(typeof fn([], 'fn')).toBe('function')\r\n    expect(typeof fn(obj, 'fnNotExisted')).toBe('function')\r\n    expect(typeof fn('fn')).toBe('function')\r\n  })\r\n  test('should return fn that return dfValue in edge case', ()=>{\r\n    const dfValue = 'dfValue'\r\n    expect(fn(null, 'fn', dfValue)()).toBe(dfValue)\r\n    expect(fn(null, 'fn')()).toBe(undefined)\r\n  })\r\n\r\n  test('should return fn in edge case that return undefined', ()=> {\r\n    expect(typeof fn(obj, 'notExisted')()).toBe('undefined')\r\n  })\r\n\r\n  test('should return, with dfValue, fn in edge case that return dfValue', () => {\r\n    const dfValue = 'dfValue'\r\n    expect(fn(obj, 'notExisted', dfValue)()).toBe(dfValue)\r\n  })\r\n})\r\n"],"file":"safeFn.test.js"}