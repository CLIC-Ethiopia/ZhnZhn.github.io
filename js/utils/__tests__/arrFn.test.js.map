{"version":3,"sources":["../../../src/utils/__tests__/arrFn.test.js"],"names":["propName","propValue1","propValue2","arr","describe","fn","test","expect","toBe","fnEdgeCase","isTest","_isTest1","_isTest2"],"mappings":"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","sourcesContent":["import {\r\n  arrFactoryFindIndexByProp,\r\n  arrFactoryIsSameByProp,\r\n  isInArrStr\r\n} from '../arrFn';\r\n\r\nconst propName = 'caption'\r\n, propValue1 = 'caption1'\r\n, propValue2 = 'caption2'\r\n, arr = [\r\n  { [propName] : propValue1 },\r\n  { [propName]:  propValue2 }\r\n];\r\n\r\ndescribe('arrFactoryFindIndexByProp', ( )=> {\r\n   const fn = arrFactoryFindIndexByProp(propName)\r\n\r\n   test('should return function', () => {\r\n     expect(typeof fn).toBe('function')\r\n   })\r\n\r\n   test('should return index by prop', () => {\r\n      expect(fn(arr, propValue1)).toBe(0)\r\n      expect(fn(arr, propValue2)).toBe(1)\r\n   })\r\n\r\n   test('should return -1 in edge cases', () => {\r\n      const fnEdgeCase = arrFactoryFindIndexByProp('notexist')\r\n      expect(fn(arr, 'notexist')).toBe(-1)\r\n      expect(fnEdgeCase(arr, propValue1)).toBe(-1)\r\n      expect(fnEdgeCase({}, propValue1)).toBe(-1)\r\n   })\r\n})\r\n\r\ndescribe('arrFactoryIsSameByProp', () => {\r\n   const fn = arrFactoryIsSameByProp(propName)\r\n\r\n   test('should return function', () => {\r\n     expect(typeof fn).toBe('function')\r\n   })\r\n\r\n   test('should return is same by prop', ()=> {\r\n     expect(fn(arr, propValue1)).toBe(true)\r\n     expect(fn(arr, propValue2)).toBe(true)\r\n     expect(fn(arr, 'notexist')).toBe(false)\r\n   })\r\n\r\n   test('should return false in edge cases', () => {\r\n      const fnEdgeCase = arrFactoryIsSameByProp('notexist')\r\n      expect(fn(arr, 'notexist')).toBe(false)\r\n      expect(fnEdgeCase(arr, propValue1)).toBe(false)\r\n      expect(fnEdgeCase({}, propValue1)).toBe(false)\r\n   })\r\n})\r\n\r\ndescribe('isInArrStr', () => {\r\n  const arr = ['test1', 'test2', 'test3']\r\n      , isTest = isInArrStr(arr);\r\n\r\n   test('should return function', () => {\r\n      expect(typeof isTest).toBe('function')\r\n   })\r\n   test('should return true if str in array', ()=> {\r\n     expect(isTest('test1')).toBe(true)\r\n     expect(isTest('test3')).toBe(true)\r\n   })\r\n   test('should return false if str not in array', ()=> {\r\n     expect(isTest('test5')).toBe(false)\r\n     expect(isTest('7')).toBe(false)\r\n   })\r\n   test('should return false in edge case', () => {\r\n      const _isTest1 = isInArrStr()\r\n          , _isTest2 = isInArrStr({})\r\n      expect(_isTest1('test1')).toBe(false)\r\n      expect(_isTest2('test1')).toBe(false)\r\n   })\r\n})\r\n"],"file":"arrFn.test.js"}