{"version":3,"sources":["../../../src/utils/__tests__/fnImArr.test.js"],"names":["push","fnImArr","insertItem","filterByPropFn","editByPropFn","describe","fn","obj","b","test","arr","a","result","maxIndex","length","expect","not","toBe","toEqual","c","d","index"],"mappings":"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","sourcesContent":["import fnImArr from '../fnImArr';\r\n\r\nconst {\r\n  push,\r\n  insertItem,\r\n  filterByPropFn,\r\n  editByPropFn\r\n} = fnImArr;\r\n\r\ndescribe('push', () => {\r\n  const fn = push\r\n  , obj = {b:2};\r\n  test('should push obj', () => {\r\n     const arr = [ {a:1} ]\r\n         , result = fn(arr, obj)\r\n         , maxIndex = result.length-1;\r\n\r\n     expect(result).not.toBe(arr)\r\n     expect(result[maxIndex]).not.toBe(obj)\r\n     expect(result[maxIndex]).toEqual(obj)\r\n  })\r\n  test('should use empty arr in case arr not Array', ()=>{\r\n     const result = push(void 0, obj);\r\n\r\n     expect(result[0]).not.toBe(obj)\r\n     expect(result[0]).toEqual(obj)\r\n     expect(result.length).toEqual(1)\r\n\r\n  })\r\n})\r\n\r\ndescribe('filterByPropFn', ()=> {\r\n  test('should filter by propName arr and propValue', () => {\r\n     const arr = [ {a:1}, {a:2}, {a:3}, {a:1} ]\r\n         , fn = filterByPropFn('a')\r\n         , result = fn(arr, 1)\r\n\r\n      expect(typeof fn).toBe('function')\r\n      expect(result).not.toBe(arr)\r\n      expect(result.length).toBe(2)\r\n  })\r\n})\r\n\r\ndescribe('insertItem', () => {\r\n  const fn = insertItem\r\n  , arr = [ {a:1}, {b:2}, {c:3} ]\r\n  , obj = {d:4};\r\n  test('should insert obj to arr, index=0', () => {\r\n      const result = fn(obj, 0, arr);\r\n\r\n      expect(result).not.toBe(arr)\r\n      expect(result[0]).not.toBe(obj)\r\n      expect(result[0]).toEqual(obj)\r\n      expect(result.length).toBe(arr.length+1)\r\n  })\r\n  test('should insert obj to arr, index=length', () => {\r\n      const index = arr.length\r\n          , result = fn(obj, index, arr);\r\n\r\n      expect(result).not.toBe(arr)\r\n      expect(result[index]).not.toBe(obj)\r\n      expect(result[index]).toEqual(obj)\r\n      expect(result.length).toBe(arr.length+1)\r\n  })\r\n  test('should use empty arr in case arr not Array', () => {\r\n    const result = fn(obj, 2)\r\n\r\n    expect(result[0]).not.toBe(obj)\r\n    expect(result[0]).toEqual(obj)\r\n    expect(result.length).toBe(1)\r\n  })\r\n})\r\n\r\ndescribe('editByPropFn', () => {\r\n  test('should edit obj in arr by propName and index', () => {\r\n    const arr = [ {a:1}, {a:2}, {a:3}]\r\n        , fn = editByPropFn('a')\r\n        , result = fn(arr, 0, 4)\r\n\r\n       expect(typeof fn).toBe('function')\r\n       expect(result).not.toBe(arr)\r\n       expect(result[0]).toEqual({a:4})\r\n  })\r\n})\r\n"],"file":"fnImArr.test.js"}