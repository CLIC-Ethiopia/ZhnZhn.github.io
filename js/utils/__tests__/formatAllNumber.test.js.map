{"version":3,"sources":["../../../src/utils/__tests__/formatAllNumber.test.js"],"names":["describe","test","str1","expect","toBe","str2","str3","str4","NaN"],"mappings":";;;;AAAA;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,YAAI;AAC9BC,EAAAA,IAAI,CAAC,yDAAD,EAA4D,YAAI;AAClE,QAAMC,IAAI,GAAG,iCAAG,GAAH,CAAb;AACAC,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,IAAb,CAAkB,KAAlB;AACAD,IAAAA,MAAM,CAAC,OAAOD,IAAR,CAAN,CAAoBE,IAApB,CAAyB,QAAzB;AAEA,QAAMC,IAAI,GAAG,iCAAG,MAAH,CAAb;AACAF,IAAAA,MAAM,CAACE,IAAD,CAAN,CAAaD,IAAb,CAAkB,SAAlB;AACAD,IAAAA,MAAM,CAAC,OAAOE,IAAR,CAAN,CAAoBD,IAApB,CAAyB,QAAzB;AAEA,QAAME,IAAI,GAAG,iCAAG,SAAH,CAAb;AACAH,IAAAA,MAAM,CAACG,IAAD,CAAN,CAAaF,IAAb,CAAkB,aAAlB;AACAD,IAAAA,MAAM,CAAC,OAAOG,IAAR,CAAN,CAAoBF,IAApB,CAAyB,QAAzB;AACD,GAZG,CAAJ;AAcAH,EAAAA,IAAI,CAAC,uDAAD,EAA0D,YAAI;AAChE,QAAMC,IAAI,GAAG,iCAAG,OAAH,CAAb;AACAC,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,IAAb,CAAkB,SAAlB;AACAD,IAAAA,MAAM,CAAC,OAAOD,IAAR,CAAN,CAAoBE,IAApB,CAAyB,QAAzB;AAEA,QAAMC,IAAI,GAAG,iCAAG,UAAH,CAAb;AACAF,IAAAA,MAAM,CAACE,IAAD,CAAN,CAAaD,IAAb,CAAkB,aAAlB;AACAD,IAAAA,MAAM,CAAC,OAAOE,IAAR,CAAN,CAAoBD,IAApB,CAAyB,QAAzB;AACD,GARG,CAAJ;AAUAH,EAAAA,IAAI,CAAC,mDAAD,EAAuD,YAAM;AAC/D,QAAMC,IAAI,GAAG,SAAb;AAAA,QACEG,IAAI,GAAG,SADT;AAAA,QAEEC,IAAI,GAAG,aAFT;AAAA,QAGEC,IAAI,GAAG,aAHT;AAKAJ,IAAAA,MAAM,CAAC,iCAAGD,IAAH,CAAD,CAAN,CAAiBE,IAAjB,CAAsBF,IAAtB;AACAC,IAAAA,MAAM,CAAC,iCAAGE,IAAH,CAAD,CAAN,CAAiBD,IAAjB,CAAsBC,IAAtB;AACAF,IAAAA,MAAM,CAAC,iCAAGG,IAAH,CAAD,CAAN,CAAiBF,IAAjB,CAAsBE,IAAtB;AACAH,IAAAA,MAAM,CAAC,iCAAGI,IAAH,CAAD,CAAN,CAAiBH,IAAjB,CAAsBG,IAAtB;AAED,GAXG,CAAJ;AAaAN,EAAAA,IAAI,CAAC,sCAAD,EAAyC,YAAM;AACjDE,IAAAA,MAAM,CAAC,iCAAG,IAAH,CAAD,CAAN,CAAiBC,IAAjB,CAAsB,GAAtB;AACAD,IAAAA,MAAM,CAAC,kCAAD,CAAN,CAAaC,IAAb,CAAkB,GAAlB;AACAD,IAAAA,MAAM,CAAC,iCAAG,CAAH,CAAD,CAAN,CAAcC,IAAd,CAAmB,GAAnB;AACAD,IAAAA,MAAM,CAAC,iCAAGK,GAAH,CAAD,CAAN,CAAgBJ,IAAhB,CAAqB,GAArB;AACAD,IAAAA,MAAM,CAAC,iCAAG,KAAH,CAAD,CAAN,CAAkBC,IAAlB,CAAuB,GAAvB;AACAD,IAAAA,MAAM,CAAC,iCAAG,EAAH,CAAD,CAAN,CAAeC,IAAf,CAAoB,GAApB;AACD,GAPG,CAAJ;AAQD,CA9CO,CAAR","sourcesContent":["import fn from '../formatAllNumber'\r\n\r\ndescribe('formatAllNumber', ()=>{\r\n  test('should format value without decimals to str with blanks', ()=>{\r\n    const str1 = fn(100)\r\n    expect(str1).toBe('100')\r\n    expect(typeof str1).toBe('string')\r\n\r\n    const str2 = fn(100000)\r\n    expect(str2).toBe('100 000')\r\n    expect(typeof str2).toBe('string')\r\n\r\n    const str3 = fn(100000000)\r\n    expect(str3).toBe('100 000 000')\r\n    expect(typeof str3).toBe('string')\r\n  })\r\n\r\n  test('should format value with decimals for str with blanks', ()=>{\r\n    const str1 = fn(100.001)\r\n    expect(str1).toBe('100.001')\r\n    expect(typeof str1).toBe('string')\r\n\r\n    const str2 = fn(100000.001)\r\n    expect(str2).toBe('100 000.001')\r\n    expect(typeof str2).toBe('string')\r\n  })\r\n\r\n  test('should return same value for already formated str',  () => {\r\n    const str1 = '100 000'\r\n    , str2 = '100.001'\r\n    , str3 = '100 000.001'\r\n    , str4 = '100 000 000';\r\n\r\n    expect(fn(str1)).toBe(str1)\r\n    expect(fn(str2)).toBe(str2)\r\n    expect(fn(str3)).toBe(str3)\r\n    expect(fn(str4)).toBe(str4)\r\n\r\n  })\r\n\r\n  test('should return for falsy values str 0', () => {\r\n    expect(fn(null)).toBe('0')\r\n    expect(fn()).toBe('0')\r\n    expect(fn(0)).toBe('0')\r\n    expect(fn(NaN)).toBe('0')\r\n    expect(fn(false)).toBe('0')\r\n    expect(fn('')).toBe('0')\r\n  })\r\n})\r\n"],"file":"formatAllNumber.test.js"}