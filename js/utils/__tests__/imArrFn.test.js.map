{"version":3,"sources":["../../../src/utils/__tests__/imArrFn.test.js"],"names":["describe","fn","imArrPush","obj","b","test","arr","a","result","maxIndex","length","expect","not","toBe","toEqual","imArrInsertItem","c","d","index"],"mappings":"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","sourcesContent":["import {\r\n  imArrPush,\r\n  imArrFactoryFilterByProp,\r\n  imArrFactoryEditByProp,\r\n  imArrInsertItem\r\n} from '../imArrFn';\r\n\r\ndescribe('imArrPush', () => {\r\n  const fn = imArrPush\r\n  , obj = {b:2};\r\n  test('should push obj', () => {\r\n    const arr = [ {a:1} ]\r\n    , result = fn(arr, obj)\r\n    , maxIndex = result.length-1;\r\n\r\n    expect(result).not.toBe(arr)\r\n    expect(result[maxIndex]).not.toBe(obj)\r\n    expect(result[maxIndex]).toEqual(obj)\r\n  })\r\n  test('should use empty arr in case arr not Array', ()=>{\r\n    const result = imArrPush(void 0, obj);\r\n\r\n    expect(result[0]).not.toBe(obj)\r\n    expect(result[0]).toEqual(obj)\r\n    expect(result.length).toEqual(1)\r\n  })\r\n})\r\n\r\ndescribe('imArrFactoryFilterByProp', ()=> {\r\n  test('should filter by propName arr and propValue', () => {\r\n    const arr = [ {a:1}, {a:2}, {a:3}, {a:1} ]\r\n    , fn = imArrFactoryFilterByProp('a')\r\n    , result = fn(arr, 1);\r\n\r\n    expect(typeof fn).toBe('function')\r\n    expect(result).not.toBe(arr)\r\n    expect(result.length).toBe(2)\r\n  })\r\n})\r\n\r\ndescribe('imArrInsertItem', () => {\r\n  const fn = imArrInsertItem\r\n  , arr = [ {a:1}, {b:2}, {c:3} ]\r\n  , obj = {d:4};\r\n  test('should insert obj to arr, index=0', () => {\r\n    const result = fn(obj, 0, arr);\r\n\r\n    expect(result).not.toBe(arr)\r\n    expect(result[0]).not.toBe(obj)\r\n    expect(result[0]).toEqual(obj)\r\n    expect(result.length).toBe(arr.length+1)\r\n  })\r\n  test('should insert obj to arr, index=length', () => {\r\n    const index = arr.length\r\n    , result = fn(obj, index, arr);\r\n\r\n    expect(result).not.toBe(arr)\r\n    expect(result[index]).not.toBe(obj)\r\n    expect(result[index]).toEqual(obj)\r\n    expect(result.length).toBe(arr.length+1)\r\n  })\r\n  test('should use empty arr in case arr not Array', () => {\r\n    const result = fn(obj, 2);\r\n\r\n    expect(result[0]).not.toBe(obj)\r\n    expect(result[0]).toEqual(obj)\r\n    expect(result.length).toBe(1)\r\n  })\r\n})\r\n\r\ndescribe('imArrFactoryEditByProp', () => {\r\n  test('should edit obj in arr by propName and index', () => {\r\n    const arr = [ {a:1}, {a:2}, {a:3}]\r\n    , fn = imArrFactoryEditByProp('a')\r\n    , result = fn(arr, 0, 4);\r\n\r\n    expect(typeof fn).toBe('function')\r\n    expect(result).not.toBe(arr)\r\n    expect(result[0]).toEqual({a:4})\r\n  })\r\n})\r\n"],"file":"imArrFn.test.js"}