{"version":3,"sources":["../../../src/utils/__tests__/getV.test.js"],"names":["describe","fn","getV","test","expect","value","toBe","v","option","isUpper","dfValue"],"mappings":"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","sourcesContent":["import getV from '../getV'\r\n\r\ndescribe('getV', ()=>{\r\n  const fn = getV;\r\n  test('should return string item value', ()=>{\r\n    expect(fn({ value: 'Abc'})).toBe('Abc')\r\n    expect(fn({ value: '0'})).toBe('0')\r\n    expect(fn({ value: 0})).toBe('0')\r\n  })\r\n  test('should return string item value by item short prop name v', ()=>{\r\n    expect(fn({ v: 'Abc'})).toBe('Abc')\r\n    expect(fn({ v: '0'})).toBe('0')\r\n    expect(fn({ v: 0})).toBe('0')\r\n  })\r\n\r\n  test('should return string upperCase in case isUpper option', ()=>{\r\n    const option = { isUpper: true };\r\n    expect(fn({ value: 'Abc'}, option)).toBe('ABC')\r\n    expect(fn({ value: '0'}, option)).toBe('0')\r\n    expect(fn({ value: 0}, option)).toBe('0')\r\n  })\r\n  test('should return option dfValue or empty str in case value null or undefined', ()=>{\r\n    const option = { dfValue: 'dfValue' };\r\n    expect(fn({ value: void 0 }, option)).toBe('dfValue')\r\n    expect(fn({ v: void 0 }, option)).toBe('dfValue')\r\n    expect(fn({ value: null }, option)).toBe('dfValue')\r\n    expect(fn({ v: null }, option)).toBe('dfValue')\r\n\r\n    expect(fn({ value: void 0 })).toBe('')\r\n    expect(fn({ v: void 0 })).toBe('')\r\n    expect(fn({ value: null })).toBe('')\r\n    expect(fn({ v: null })).toBe('')\r\n  })\r\n\r\n  test('should retun empty string for edge case', () => {\r\n    const option = { isUpper: true };\r\n    expect(fn({})).toBe('')\r\n    expect(fn()).toBe('')\r\n    expect(fn(null)).toBe('')\r\n\r\n    expect(fn({}, option)).toBe('')\r\n    expect(fn(void 0, option)).toBe('')\r\n    expect(fn(null, option)).toBe('')\r\n  })\r\n\r\n})\r\n"],"file":"getV.test.js"}