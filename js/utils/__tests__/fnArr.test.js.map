{"version":3,"sources":["../../../src/utils/__tests__/fnArr.test.js"],"names":["findIndexByProp","fnArr","isSameByProp","isInArrStr","propName","propValue1","propValue2","arr","describe","fn","test","expect","toBe","fnEdgeCase","isTest","_isTest1","_isTest2"],"mappings":"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","sourcesContent":["import fnArr from '../fnArr';\r\n\r\nconst {\r\n  findIndexByProp,\r\n  isSameByProp,\r\n  isInArrStr\r\n  //isStrInArr\r\n} = fnArr;\r\n\r\nconst propName = 'caption'\r\n    , propValue1 = 'caption1'\r\n    , propValue2 = 'caption2'\r\n    , arr = [\r\n      { [propName] : propValue1 },\r\n      { [propName]:  propValue2 }\r\n    ]\r\n\r\ndescribe('findIndexByProp', ( )=> {\r\n   const fn = findIndexByProp(propName)\r\n\r\n   test('should return function', () => {\r\n     expect(typeof fn).toBe('function')\r\n   })\r\n\r\n   test('should return index by prop', () => {\r\n      expect(fn(arr, propValue1)).toBe(0)\r\n      expect(fn(arr, propValue2)).toBe(1)\r\n   })\r\n\r\n   test('should return -1 in edge cases', () => {\r\n      const fnEdgeCase = findIndexByProp('notexist')\r\n      expect(fn(arr, 'notexist')).toBe(-1)\r\n      expect(fnEdgeCase(arr, propValue1)).toBe(-1)\r\n      expect(fnEdgeCase({}, propValue1)).toBe(-1)\r\n   })\r\n\r\n})\r\n\r\ndescribe('isSameByProp', () => {\r\n   const fn = isSameByProp(propName)\r\n\r\n   test('should return function', () => {\r\n     expect(typeof fn).toBe('function')\r\n   })\r\n\r\n   test('should return is same by prop', ()=> {\r\n     expect(fn(arr, propValue1)).toBe(true)\r\n     expect(fn(arr, propValue2)).toBe(true)\r\n     expect(fn(arr, 'notexist')).toBe(false)\r\n   })\r\n\r\n   test('should return false in edge cases', () => {\r\n      const fnEdgeCase = isSameByProp('notexist')\r\n      expect(fn(arr, 'notexist')).toBe(false)\r\n      expect(fnEdgeCase(arr, propValue1)).toBe(false)\r\n      expect(fnEdgeCase({}, propValue1)).toBe(false)\r\n   })\r\n})\r\n\r\ndescribe('isInArrStr', () => {\r\n  const arr = [ 'test1', 'test2', 'test3' ]\r\n      , isTest = isInArrStr(arr)\r\n\r\n   test('should return function', () => {\r\n      expect(typeof isTest).toBe('function')\r\n   })\r\n   test('should return true if str in array', ()=> {\r\n     expect(isTest('test1')).toBe(true)\r\n     expect(isTest('test3')).toBe(true)\r\n   })\r\n   test('should return false if str not in array', ()=> {\r\n     expect(isTest('test5')).toBe(false)\r\n     expect(isTest('7')).toBe(false)\r\n   })\r\n   test('should return false in edge case', () => {\r\n      const _isTest1 = isInArrStr()\r\n          , _isTest2 = isInArrStr({})\r\n      expect(_isTest1('test1')).toBe(false)\r\n      expect(_isTest2('test1')).toBe(false)\r\n   })\r\n})\r\n\r\n/*\r\ndescribe('isStrInArr', () => {\r\n  const arr = [ 'test1', 'test2', 'test3' ]\r\n      , fnTrue = isStrInArr('test1')\r\n      , fnFalse = isStrInArr('test4')\r\n\r\n   test('should return function', () => {\r\n      expect(typeof fnTrue).toBe('function')\r\n      expect(typeof fnFalse).toBe('function')\r\n   })\r\n   test('should return bool is str in array', ()=> {\r\n     expect(fnTrue(arr)).toBe(true)\r\n     expect(fnFalse(arr)).toBe(false)\r\n   })\r\n   test('should return false in edge case', () => {\r\n      expect(fnTrue({})).toBe(false)\r\n      expect(fnFalse('')).toBe(false)\r\n   })\r\n})\r\n*/\r\n"],"file":"fnArr.test.js"}