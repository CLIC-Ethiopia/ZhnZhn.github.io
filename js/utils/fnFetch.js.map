{"version":3,"sources":["../../src/utils/fnFetch.js"],"names":["C","LIMIT_REMAINING","REQ_ERR","RESP_ERR","_isFn","fn","_fnMsg400","option","loadId","_fnMsg404","_fnMsg429","_fnMsg503","_crErr","message","errCaption","_fFetch","propName","type","uri","optionFetch","onCheckResponse","onFetch","onCompleted","onFailed","onCatch","_fnFetch","fetch","then","status","response","statusText","headers","ok","get","Promise","all","resolve","undefined","limitRemaining","json","catch","error","console","log","fetchJson","fetchTxt","fetchJsonp"],"mappings":"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","file":"fnFetch.js","sourcesContent":["import fetchJsonpImpl from 'fetch-jsonp'\r\n\r\nconst C = {\r\n  LIMIT_REMAINING: 'X-RateLimit-Remaining',\r\n  REQ_ERR: 'Request Error',\r\n  RESP_ERR: 'Response Error'\r\n}\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nconst _fnMsg400 = (option) => {\r\n  if (option.loadId === \"EU_STAT\"){\r\n    return '400: Bad request.\\nDataset contains no data. One or more filtering elements (query parameters) are probably invalid.\\nMaybe try request with older date.';\r\n  } else {\r\n    return '400: Bad request.';\r\n  }\r\n};\r\n\r\nconst _fnMsg404 = () => {\r\n  return '404: Resource is not existed.';\r\n};\r\nconst _fnMsg429 = () => {\r\n  return '429: Too many request in a given amount of time (rate limiting).';\r\n};\r\nconst _fnMsg503 = () => {\r\n  return '503: Back-end server is at capacity.'\r\n}\r\n\r\n\r\nconst _crErr = (message, errCaption=C.REQ_ERR) => {\r\n  return { errCaption, message };\r\n};\r\n\r\nconst _fFetch = (propName, type) => function({\r\n   uri, option={},\r\n   optionFetch,\r\n   onCheckResponse,\r\n   onFetch, onCompleted,\r\n   onFailed, onCatch\r\n }){\r\n  const _fnFetch = (type !== 'jsonp')\r\n          ? fetch\r\n          : fetchJsonpImpl;  \r\n  _fnFetch(uri, optionFetch)\r\n    .then(response => {\r\n      const { status, statusText, headers={}, ok } = response;\r\n      if ((status>=200 && status<400) || ok) {\r\n          if (_isFn(headers.get)){\r\n            return Promise.all([\r\n               Promise.resolve(headers.get(C.LIMIT_REMAINING)),\r\n               response[propName]()\r\n            ]);\r\n          } else {\r\n            return Promise.all([\r\n               Promise.resolve(undefined),\r\n               response[propName]()\r\n            ]);\r\n          }\r\n      } else if (status === 400) {\r\n         throw _crErr(_fnMsg400(option));\r\n      } else if (status === 404) {\r\n         throw _crErr(_fnMsg404(option));\r\n      } else if (status === 429) {\r\n         throw _crErr(_fnMsg429(option));\r\n      } else if (status>400 && status<500){\r\n         throw _crErr(`${status}: ${statusText}`);\r\n      } else if (status === 503) {\r\n         throw _crErr(_fnMsg503(option));\r\n      } else if (status>=500 && status<600){\r\n         throw _crErr(`${status}: ${statusText}`, C.RESP_ERR);\r\n      } else {\r\n        return [undefined, {}];\r\n      }\r\n    })\r\n    .then(([limitRemaining, json]) => {\r\n       if (_isFn(onCheckResponse)){\r\n         if (onCheckResponse(json, option)) {\r\n           option.limitRemaining = limitRemaining;\r\n           onFetch({ json, option, onCompleted });\r\n         }\r\n      } else {\r\n        option.limitRemaining = limitRemaining;\r\n        onFetch({ json, option, onCompleted });\r\n      }\r\n    })\r\n    .catch(error => {\r\n       if (_isFn(onCatch)) {\r\n          onCatch({ error, option, onFailed })\r\n       } else {\r\n         console.log(error)\r\n       }\r\n    })\r\n};\r\n\r\nexport const fetchJson = _fFetch('json');\r\nexport const fetchTxt = _fFetch('text');\r\nexport const fetchJsonp = _fFetch('json', 'jsonp');\r\n"]}