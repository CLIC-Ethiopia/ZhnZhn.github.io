{"version":3,"sources":["../../../src/flux/creaters/eurostat2.js"],"names":["COUNTRY_CAPTION_DF","AREA","createLoadOptions","props","options","loadId","group","one","two","chartType","date","dateDefault","value","chartTypeValue","_countryValue","_countryCaption","caption","_zhCompType","undefined","_time","_mapValue","mapValue","_mapSlice","mapSlice","compType","createMapValue","createMapSlice","geo","metric","itemCaption","title","subtitle","alertItemId","alertGeo","alertMetric","seriaType","zhCompType","zhMapSlice","time"],"mappings":";;;;;;;;AACA;;;;;;AAEA,IAAMA,qBAAqB,IAA3B;AAAA,IACMC,OAAO,MADb;;AAGA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAA0B;AAAA,MAAzBC,KAAyB,uEAAnB,EAAmB;AAAA,MAAfC,OAAe,uEAAP,EAAO;;AAAA,MAC1CC,MAD0C,GACxBF,KADwB,CAC1CE,MAD0C;AAAA,MAClCC,KADkC,GACxBH,KADwB,CAClCG,KADkC;AAAA,MAE1CC,GAF0C,GAEOH,OAFP,CAE1CG,GAF0C;AAAA,qBAEOH,OAFP,CAErCI,GAFqC;AAAA,MAErCA,GAFqC,gCAEjC,EAFiC;AAAA,2BAEOJ,OAFP,CAE7BK,SAF6B;AAAA,MAE7BA,SAF6B,sCAEnB,EAFmB;AAAA,MAEfC,IAFe,GAEON,OAFP,CAEfM,IAFe;AAAA,MAETC,WAFS,GAEOP,OAFP,CAETO,WAFS;AAAA,yBAGVF,SAHU,CAG1CG,KAH0C;AAAA,MAGpCC,cAHoC,oCAGrB,MAHqB;AAAA,MAK5CC,aAL4C,GAK3BP,GAAD,GACZA,IAAIK,KADQ,GAEZZ,kBAPwC;AAAA,MAQ5Ce,eAR4C,GAQzBR,GAAD,GACdA,IAAIS,OADU,GAEdhB,kBAVwC;;AAYlD,MAAIiB,cAAcC,SAAlB;AAAA,MACEC,QAAQD,SADV;AAAA,MAEEE,YAAYZ,IAAIa,QAFlB;AAAA,MAGEC,YAAYd,IAAIe,QAHlB;;AAKA,MAAId,aAAaA,UAAUG,KAAV,KAAoBX,IAArC,EAA0C;AACxCgB,kBAAcR,UAAUe,QAAxB;AACAL,YAAST,IAAD,GAASA,KAAKE,KAAd,GAAsBD,WAA9B;;AAEA,QAAI,CAACS,SAAL,EAAgB;AAAEA,kBAAY,qBAAWK,cAAX,CAA0BtB,KAA1B,EAAiCK,GAAjC,CAAZ;AAAoD;AACtE,QAAI,CAACc,SAAL,EAAgB;AAAEA,kBAAY,qBAAWI,cAAX,CAA0BvB,KAA1B,EAAiCK,GAAjC,CAAZ;AAAoD;AACvE;;AAED,SAAO;AACLmB,SAAMb,aADD;AAELR,WAAQA,KAFH;AAGLsB,YAASpB,IAAII,KAHR;AAILP,YAASA,MAJJ;AAKLwB,iBAAad,eALR;AAMLe,WAAQf,eANH;AAOLgB,cAAWvB,IAAIQ,OAPV;AAQLgB,iBAAiBjB,eAAjB,SAAoCP,IAAIQ,OARnC;AASLiB,cAAWlB,eATN;AAULmB,iBAAc1B,IAAIQ,OAVb;AAWLmB,eAAYtB,cAXP;AAYLuB,gBAAanB,WAZR;AAaLI,cAAWD,SAbN;AAcLiB,6BAAkBf,SAAlB,IAA6BgB,MAAOnB,KAApC,GAdK;AAeLmB,UAAOnB;AAfF,GAAP;AAiBD,CA1CD;;kBA4CejB,iB","file":"eurostat2.js","sourcesContent":["\r\nimport EuroStatFn from '../../adapters/eurostat/EuroStatFn';\r\n\r\nconst COUNTRY_CAPTION_DF = 'EU'\r\n    , AREA = 'AREA'\r\n\r\nconst createLoadOptions = (props={}, options={}) => {\r\n  const { loadId, group } = props\r\n      , { one, two={}, chartType={}, date, dateDefault } = options\r\n      , { value:chartTypeValue='AREA' } = chartType\r\n\r\n      , _countryValue = (one)\r\n          ? one.value\r\n          : COUNTRY_CAPTION_DF\r\n      , _countryCaption = (one)\r\n          ? one.caption\r\n          : COUNTRY_CAPTION_DF\r\n\r\n  let _zhCompType = undefined\r\n  , _time = undefined\r\n  , _mapValue = two.mapValue\r\n  , _mapSlice = two.mapSlice;\r\n  \r\n  if (chartType && chartType.value !== AREA){\r\n    _zhCompType = chartType.compType;\r\n    _time = (date) ? date.value : dateDefault;\r\n\r\n    if (!_mapValue) { _mapValue = EuroStatFn.createMapValue(props, two); }\r\n    if (!_mapSlice) { _mapSlice = EuroStatFn.createMapSlice(props, two); }\r\n  }\r\n\r\n  return {\r\n    geo : _countryValue,\r\n    group : group,\r\n    metric : two.value,\r\n    loadId : loadId,\r\n    itemCaption: _countryCaption,\r\n    title : _countryCaption,\r\n    subtitle : two.caption,\r\n    alertItemId : `${_countryCaption}:${two.caption}`,\r\n    alertGeo : _countryCaption,\r\n    alertMetric : two.caption,\r\n    seriaType : chartTypeValue,\r\n    zhCompType : _zhCompType,\r\n    mapValue : _mapValue,\r\n    zhMapSlice : { ..._mapSlice, time : _time },\r\n    time : _time\r\n  }\r\n};\r\n\r\nexport default createLoadOptions\r\n"]}