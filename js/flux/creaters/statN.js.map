{"version":3,"sources":["../../../src/flux/creaters/statN.js"],"names":["_toIds","items","dfId","_arr","forEach","slice","value","push","Object","keys","createLoadOptions","props","options","loadId","dataSource","dfProps","timeId","time","dfC","dfTitle","titles","dialogOptions","chartType","seriaColor","seriaWidth","selectOptions","seriaType","compType","zhCompType","itemCaption","title","subtitle","_items","_itemKey"],"mappings":";;;;;AAAA;;AAKA,MAAMA,MAAM,GAAG,OAAWC,KAAX,KAAqB;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AAClC,QAAMC,IAAI,GAAG,CAACD,IAAD,CAAb;AACAD,EAAAA,KAAK,CAACG,OAAN,CAAc,iBAAyB;AAAA,QAAxB;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAwB,sBAAP,EAAO;;AACrC,QAAID,KAAJ,EAAW;AACTF,MAAAA,IAAI,CAACI,IAAL,CAAUF,KAAK,CAACG,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmB,CAAnB,CAAD,CAAf;AACD,KAFD,MAEO,IAAIC,KAAJ,EAAW;AAChB;AACAH,MAAAA,IAAI,CAACI,IAAL,CAAUD,KAAV;AACD;AACF,GAPD;AAQA,SAAOH,IAAP;AACD,CAXD;;AAaA,MAAMO,iBAAiB,GAAG,CACxBC,KADwB,EAExBC,OAFwB,KAGrB;AACH,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,OAAO,GAAC;AAHJ,MAIFJ,KAAK,IAAI,EAJb;AAAA,QAKE;AACEK,IAAAA,MADF;AAEEC,IAAAA,IAFF;AAGEC,IAAAA,GAHF;AAIEC,IAAAA,OAJF;AAKElB,IAAAA,KAAK,GAAC,EALR;AAMEmB,IAAAA,MANF;AAOEC,IAAAA,aAPF;AAQEC,IAAAA,SARF;AASEC,IAAAA,UATF;AAUEC,IAAAA,UAVF;AAWEC,IAAAA;AAXF,MAYIb,OAAO,IAAI,EAjBjB;AAAA,QAkBE;AAAEN,IAAAA,KAAK,EAACoB,SAAR;AAAmBC,IAAAA,QAAQ,EAAEC;AAA7B,MAA4CN,SAAS,IAAI,EAlB3D;AAAA,QAmBE;AAAEO,IAAAA,WAAF;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAmC,2BAAU9B,KAAV,EAAiBmB,MAAjB,CAnBrC;AAAA,QAoBEY,MAAM,GAAGhC,MAAM,CAACe,OAAD,EAAUd,KAAV,CApBjB;AAAA,QAqBEgC,QAAQ,GAAG,2BAAUD,MAAV,EAAkBN,SAAlB,EAA6BT,IAA7B,CArBb;;AAuBA,SAAO;AACLC,IAAAA,GADK;AAELC,IAAAA,OAFK;AAGL,OAAGJ,OAHE;AAIL,OAAGM,aAJE;AAKLY,IAAAA,QALK;AAMLJ,IAAAA,WAAW,EAAEV,OAAO,IAAIU,WANnB;AAOLhB,IAAAA,MAPK;AAQLiB,IAAAA,KARK;AAQEC,IAAAA,QARF;AASLL,IAAAA,SATK;AASMH,IAAAA,UATN;AASkBC,IAAAA,UATlB;AAULI,IAAAA,UAVK;AAWLX,IAAAA,IAXK;AAWCD,IAAAA,MAXD;AAYLF,IAAAA,UAZK;AAaLb,IAAAA,KAbK;AAcLwB,IAAAA;AAdK,GAAP;AAgBD,CA3CD;;eA6Cef,iB","sourcesContent":["import {\r\n  crCaption,\r\n  crItemKey\r\n} from './createrFns';\r\n\r\nconst _toIds = ({ dfId }, items) => {\r\n  const _arr = [dfId];\r\n  items.forEach(({ slice, value }={}) => {\r\n    if (slice) {\r\n      _arr.push(slice[Object.keys(slice)[0]])\r\n    } else if (value) {\r\n      //Eurostat case\r\n      _arr.push(value)\r\n    }\r\n  })\r\n  return _arr;\r\n};\r\n\r\nconst createLoadOptions = (\r\n  props,\r\n  options\r\n) => {\r\n  const {\r\n    loadId,\r\n    dataSource,\r\n    dfProps={}\r\n  } = props || {}\r\n  , {\r\n      timeId,\r\n      time,\r\n      dfC,\r\n      dfTitle,\r\n      items=[],\r\n      titles,\r\n      dialogOptions,\r\n      chartType,\r\n      seriaColor,\r\n      seriaWidth,\r\n      selectOptions\r\n    } = options || {}\r\n  , { value:seriaType, compType: zhCompType } = chartType || {}\r\n  , { itemCaption, title, subtitle } = crCaption(items, titles)\r\n  , _items = _toIds(dfProps, items)\r\n  , _itemKey = crItemKey(_items, seriaType, time);\r\n\r\n  return {\r\n    dfC,\r\n    dfTitle,\r\n    ...dfProps,\r\n    ...dialogOptions,\r\n    _itemKey,\r\n    itemCaption: dfTitle || itemCaption,\r\n    loadId,\r\n    title, subtitle,\r\n    seriaType, seriaColor, seriaWidth,\r\n    zhCompType,\r\n    time, timeId,\r\n    dataSource,\r\n    items,\r\n    selectOptions\r\n  };\r\n};\r\n\r\nexport default createLoadOptions\r\n"],"file":"statN.js"}