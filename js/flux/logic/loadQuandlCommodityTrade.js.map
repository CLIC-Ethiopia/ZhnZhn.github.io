{"version":3,"sources":["../../../src/flux/logic/loadQuandlCommodityTrade.js"],"names":["_fnFetchToChartComp","json","option","onCompleted","arr","dataset","column_names","max","length","optionTrades","i","push","caption","value","onLoad","_fnFailedLoadMeta","onFailed","optionFailed","_loadToChartComp","isLoadMeta","_onFetch","_onFailed","bind","uri","getRequestUrl","onCheckResponse","checkResponse","onFetch","onCatch","_loadToChart","onAdded","loadQuandlCommodityTrade","parentId","isLoadToChart","apiKey","getQuandlKey"],"mappings":";;;;;;;AACA;;;;AAEA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;AAGA,IAAMA,sBAAsB,SAAtBA,mBAAsB,OAAuC;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,MAAdC,WAAc,QAAdA,WAAc;;AACjE,MAAMC,MAAMH,KAAKI,OAAL,CAAaC,YAAzB;AAAA,MACMC,MAAMH,IAAII,MADhB;AAEA,MAAIC,eAAe,EAAnB;AACA,OAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEH,GAAhB,EAAqBG,GAArB,EAAyB;AACvBD,iBAAaE,IAAb,CAAkB,EAACC,SAASR,IAAIM,CAAJ,CAAV,EAAkBG,OAAOH,CAAzB,EAAlB;AACD;AACDD,iBAAe,sBAAOA,YAAP,EAAqB,SAArB,CAAf;AACAP,SAAOY,MAAP,CAAcL,YAAd;AACD,CATD;;AAWA,IAAMM,oBAAoB,SAApBA,iBAAoB,CAASb,MAAT,EAAiBc,QAAjB,EAA2BC,YAA3B,EAAwC;AAChEf,SAAOc,QAAP;AACAA,WAASC,YAAT;AACD,CAHD;;AAKA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAAShB,MAAT,EAAiBC,WAAjB,EAA8Ba,QAA9B,EAAuC;AACvD,MAAEG,UAAF,GAAiBjB,MAAjB,CAAEiB,UAAF;AAAA,MACAC,QADA,GACYD,UAAD,GACNnB,mBADM,iCADX;AAAA,MAIAqB,SAJA,GAIaF,UAAD,GACPJ,kBAAkBO,IAAlB,CAAuB,IAAvB,EAA6BpB,MAA7B,EAAqCc,QAArC,CADO,GAEPA,QANL;;AAON,mBAAQ;AACNO,SAAM,oBAAUC,aAAV,CAAwBtB,MAAxB,CADA;AAENA,YAASA,MAFH;AAGNuB,qBAAkB,oBAAUC,aAHtB;AAINC,aAAUP,QAJJ;AAKNjB,iBAAcA,WALR;AAMNyB,6BANM;AAONZ,cAAWK;AAPL,GAAR;AASF,CAjBD;;AAmBA,IAAMQ,eAAe,SAAfA,YAAe,CAAS3B,MAAT,EAAiB4B,OAAjB,EAA0Bd,QAA1B,EAAmC;AAChD,MAAEG,UAAF,GAAiBjB,MAAjB,CAAEiB,UAAF;AAAA,MACAC,QADA,GACYD,UAAD,GACNnB,mBADM,6BADX;AAAA,MAGAqB,SAHA,GAGaF,UAAD,GACPJ,kBAAkBO,IAAlB,CAAuB,IAAvB,EAA6BpB,MAA7B,EAAqCc,QAArC,CADO,GAEPA,QALL;;AAMN,mBAAQ;AACNO,SAAM,oBAAUC,aAAV,CAAwBtB,MAAxB,CADA;AAENA,YAASA,MAFH;AAGNuB,qBAAkB,oBAAUC,aAHtB;AAINC,aAAUP,QAJJ;AAKNjB,iBAAc2B,OALR;AAMNF,6BANM;AAONZ,cAAWK;AAPL,GAAR;AASD,CAhBD;;AAmBA,IAAMU,2BAA2B,SAA3BA,wBAA2B,CAC/B7B,MAD+B,EACvBC,WADuB,EACV2B,OADU,EACDd,QADC,EAEhC;AACC,MAAMgB,WAAW,qBAAWC,aAAX,EAAjB;;AAEA/B,SAAOgC,MAAP,GAAgB,qBAAWC,YAAX,EAAhB;;AAEA,MAAI,CAACH,QAAL,EAAc;AACZd,qBAAiBhB,MAAjB,EAAyBC,WAAzB,EAAsCa,QAAtC;AACD,GAFD,MAEO;AACLd,WAAO8B,QAAP,GAAkBA,QAAlB;AACAH,iBAAa3B,MAAb,EAAqB4B,OAArB,EAA8Bd,QAA9B;AACD;AACF,CAbD;;QAeQe,wB,GAAAA,wB","file":"loadQuandlCommodityTrade.js","sourcesContent":["\r\nimport sortBy from 'lodash.sortby';\r\n\r\nimport { fnFetch } from '../../utils/fn';\r\nimport { fnCatch } from './fnCatch';\r\nimport ChartStore from '../stores/ChartStore';\r\n\r\nimport QuandlApi from '../../api/QuandlApi';\r\n\r\nimport { fnFetchToChartComp, fnFetchToChart } from './loadQuandl';\r\n\r\n\r\nconst _fnFetchToChartComp = function({ json, option, onCompleted }){\r\n  const arr = json.dataset.column_names\r\n      , max = arr.length;\r\n  let optionTrades = [];\r\n  for (let i=1; i<max; i++){\r\n    optionTrades.push({caption: arr[i], value: i});\r\n  }\r\n  optionTrades = sortBy(optionTrades, 'caption');\r\n  option.onLoad(optionTrades);\r\n}\r\n\r\nconst _fnFailedLoadMeta = function(option, onFailed, optionFailed){\r\n  option.onFailed();\r\n  onFailed(optionFailed);\r\n}\r\n\r\nconst _loadToChartComp = function(option, onCompleted, onFailed){\r\n   const { isLoadMeta } = option\r\n       , _onFetch = (isLoadMeta)\r\n            ? _fnFetchToChartComp\r\n            : fnFetchToChartComp\r\n       , _onFailed = (isLoadMeta)\r\n            ? _fnFailedLoadMeta.bind(null, option, onFailed)\r\n            : onFailed;\r\n   fnFetch({\r\n     uri : QuandlApi.getRequestUrl(option),\r\n     option : option,\r\n     onCheckResponse : QuandlApi.checkResponse,\r\n     onFetch : _onFetch,\r\n     onCompleted : onCompleted,\r\n     onCatch : fnCatch,\r\n     onFailed : _onFailed\r\n   })\r\n}\r\n\r\nconst _loadToChart = function(option, onAdded, onFailed){\r\n  const { isLoadMeta } = option\r\n      , _onFetch = (isLoadMeta)\r\n           ? _fnFetchToChartComp : fnFetchToChart\r\n      , _onFailed = (isLoadMeta)\r\n           ? _fnFailedLoadMeta.bind(null, option, onFailed)\r\n           : onFailed;\r\n  fnFetch({\r\n    uri : QuandlApi.getRequestUrl(option),\r\n    option : option,\r\n    onCheckResponse : QuandlApi.checkResponse,\r\n    onFetch : _onFetch,\r\n    onCompleted : onAdded,\r\n    onCatch : fnCatch,\r\n    onFailed : _onFailed\r\n  })\r\n}\r\n\r\n\r\nconst loadQuandlCommodityTrade = function(\r\n  option, onCompleted, onAdded, onFailed\r\n){\r\n  const parentId = ChartStore.isLoadToChart();\r\n\r\n  option.apiKey = ChartStore.getQuandlKey();\r\n\r\n  if (!parentId){\r\n    _loadToChartComp(option, onCompleted, onFailed);\r\n  } else {\r\n    option.parentId = parentId;\r\n    _loadToChart(option, onAdded, onFailed);\r\n  }\r\n}\r\n\r\nexport {loadQuandlCommodityTrade}\r\n"]}