{"version":3,"sources":["../../../../src/flux/logic/__tests__/onCatch.test.js"],"names":["_crAlertDescrFrom","caption","descr","alertCaption","alertDescr","describe","test","onFailed","jest","fn","_callWithAndTestFor","error","errDescr","option","expect","toBeCalledWith","TypeError","ERR_NETWORK","ERR_TOO_MANY_REQUEST","message","ERR_10","token","errCaption","ERR_DESCR_MSG","DF_ERR_DESCR","not","toThrow"],"mappings":";;;;AAAA;;AACA;;AAMA,MAAMA,iBAAiB,GAAG;AAAA,MAAC;AACzBC,IAAAA,OADyB;AAEzBC,IAAAA;AAFyB,GAAD;AAAA,SAGnB;AACLC,IAAAA,YAAY,EAAEF,OADT;AAELG,IAAAA,UAAU,EAAEF;AAFP,GAHmB;AAAA,CAA1B;;AAQAG,QAAQ,CAAC,SAAD,EAAY,MAAI;AACtBC,EAAAA,IAAI,CAAC,iDAAD,EAAoD,MAAI;AAC1D,UAAMC,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;AAAA,UACEC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,4BAAQ;AAAED,QAAAA,KAAF;AAASE,QAAAA,MAAM,EAAE,EAAjB;AAAqBN,QAAAA;AAArB,OAAR;AACAO,MAAAA,MAAM,CAACP,QAAD,CAAN,CACGQ,cADH,CACkBf,iBAAiB,CAACY,QAAD,CADnC;AAEH,KALD;;AAOAF,IAAAA,mBAAmB,CAAE,IAAIM,SAAJ,CAAc,OAAd,CAAF,EAA2BC,gBAA3B,CAAnB;;AACAP,IAAAA,mBAAmB,CAAE,IAAIM,SAAJ,CAAc,KAAd,CAAF,EAAyBE,yBAAzB,CAAnB;;AAEAR,IAAAA,mBAAmB,CAAC;AAAES,MAAAA,OAAO,EAAEC,YAAOC;AAAlB,KAAD,EAA4BD,WAA5B,CAAnB;;AAEAV,IAAAA,mBAAmB,CACjB;AAAEY,MAAAA,UAAU,EAAE,UAAd;AAA0BH,MAAAA,OAAO,EAAE;AAAnC,KADiB,EAEjB;AAAElB,MAAAA,OAAO,EAAE,UAAX;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAFiB,CAAnB;;AAKA,UAAMqB,aAAa,GAAG;AAAEtB,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAAtB;;AACAQ,IAAAA,mBAAmB,CAAC;AAAES,MAAAA,OAAO,EAAE;AAAX,KAAD,EAAqBI,aAArB,CAAnB;;AACAb,IAAAA,mBAAmB,CAAC;AAAEY,MAAAA,UAAU,EAAE,EAAd;AAAkBH,MAAAA,OAAO,EAAE;AAA3B,KAAD,EAAqCI,aAArC,CAAnB;;AAEA,UAAMC,YAAY,GAAG;AAAEvB,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAArB;;AACAQ,IAAAA,mBAAmB,CAAC,EAAD,EAAKc,YAAL,CAAnB;;AACAd,IAAAA,mBAAmB,CAAC,KAAK,CAAN,EAASc,YAAT,CAAnB;;AACAd,IAAAA,mBAAmB,CAAC,IAAD,EAAOc,YAAP,CAAnB;AACD,GA1BG,CAAJ;AA4BAlB,EAAAA,IAAI,CAAC,wDAAD,EAA2D,MAAI;AACjEQ,IAAAA,MAAM,CAAC,MAAM,sBAAQ;AAAED,MAAAA,MAAM,EAAE,EAAV;AAAcF,MAAAA,KAAK,EAAE;AAArB,KAAR,CAAP,CAAN,CACGc,GADH,CACOC,OADP;AAED,GAHG,CAAJ;AAID,CAjCO,CAAR","sourcesContent":["import onCatch from '../onCatch'\r\nimport {\r\n  ERR_10,\r\n  ERR_TOO_MANY_REQUEST,\r\n  ERR_NETWORK\r\n} from '../../../constants/Msg';\r\n\r\nconst _crAlertDescrFrom = ({\r\n  caption,\r\n  descr\r\n}) => ({\r\n  alertCaption: caption,\r\n  alertDescr: descr\r\n});\r\n\r\ndescribe('onCatch', ()=>{\r\n  test('should call onFailed with option with alertDesr', ()=>{\r\n    const onFailed = jest.fn()\r\n    , _callWithAndTestFor = (error, errDescr) => {\r\n        onCatch({ error, option: {}, onFailed })\r\n        expect(onFailed)\r\n          .toBeCalledWith(_crAlertDescrFrom(errDescr))\r\n    };\r\n\r\n    _callWithAndTestFor((new TypeError('fetch')), ERR_NETWORK)\r\n    _callWithAndTestFor((new TypeError('429')), ERR_TOO_MANY_REQUEST)\r\n\r\n    _callWithAndTestFor({ message: ERR_10.token }, ERR_10)\r\n\r\n    _callWithAndTestFor(\r\n      { errCaption: 'Some Err', message: 'msg' },\r\n      { caption: 'Some Err', descr: 'msg' }\r\n    )\r\n\r\n    const ERR_DESCR_MSG = { caption: 'ERROR', descr: 'msg' };\r\n    _callWithAndTestFor({ message: 'msg' }, ERR_DESCR_MSG)\r\n    _callWithAndTestFor({ errCaption: '', message: 'msg' }, ERR_DESCR_MSG)\r\n\r\n    const DF_ERR_DESCR = { caption: 'ERROR', descr: '' };\r\n    _callWithAndTestFor({}, DF_ERR_DESCR)\r\n    _callWithAndTestFor(void 0, DF_ERR_DESCR)\r\n    _callWithAndTestFor(null, DF_ERR_DESCR)\r\n  })\r\n\r\n  test('should does not throw in case onFailed is not function', ()=>{\r\n    expect(() => onCatch({ option: {}, error: {}}))\r\n      .not.toThrow()\r\n  })\r\n})\r\n"],"file":"onCatch.test.js"}