{"version":3,"sources":["../../../src/flux/logic/fBrowser.js"],"names":["_showModalDialogDescription","option","showModalDialog","DESCRIPTION","_crBrowserWatchList","Comp","createElement","key","WATCH_LIST","browserType","caption","isInitShow","store","showAction","SHOW_BROWSER_DYNAMIC","updateAction","UPDATE_WATCH_BROWSER","_crBrowserDynamic","sourceMenuUrl","chartContainerType","modalDialogType","itemOptionType","itemType","descrUrl","dfProps","ItemOptionComp","DEFAULT","ItemComp","undefined","onClickInfo","onShowContainer","showChart","bind","loadCompletedAction","LOAD_BROWSER_DYNAMIC_COMPLETED","UPDATE_BROWSER_MENU","onLoadMenu","loadBrowserDynamic","onShowLoadDialog","fBrowser","crAsyncBrowser","then","SWEDEN_STAT_ALL","NORWAY_STAT_ALL","STAT_ALL","Promise","resolve"],"mappings":"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","file":"fBrowser.js","sourcesContent":["import React from 'react'\r\n\r\nimport ChartStore from '../stores/ChartStore';\r\n\r\nimport ComponentActions from '../actions/ComponentActions';\r\nimport ChartActions from '../actions/ChartActions';\r\nimport BrowserActions, { BrowserActionTypes as BAT } from '../actions/BrowserActions';\r\nimport {\r\n  ModalDialog,\r\n  BrowserType as BT\r\n} from '../../constants/Type';\r\n\r\nimport RouterBrowser from './RouterBrowser';\r\n\r\nimport RouterItemOption from '../../components/zhn-select/RouterItemOption';\r\nimport RouterBrowserItem from '../../components/browser-items/RouterBrowserItem';\r\n\r\nconst _showModalDialogDescription = function(option){\r\n  ComponentActions.showModalDialog(ModalDialog.DESCRIPTION, option);\r\n}\r\n\r\n\r\nconst _crBrowserWatchList = (Comp) => React.createElement(Comp, {\r\n   key: BT.WATCH_LIST,\r\n   browserType: BT.WATCH_LIST,\r\n   caption: \"Watch List\",\r\n   isInitShow: true,\r\n   store: ChartStore,\r\n   //showAction: BAT.SHOW_BROWSER,\r\n   showAction: BAT.SHOW_BROWSER_DYNAMIC,\r\n   updateAction: BAT.UPDATE_WATCH_BROWSER\r\n})\r\n\r\nconst _crBrowserDynamic = (Comp, option) => {\r\n   const {\r\n            browserType, caption='Source Browser' , sourceMenuUrl,\r\n            chartContainerType,\r\n            modalDialogType, itemOptionType, itemType, descrUrl, dfProps\r\n          } = option\r\n       //, comp = RouterBrowser[browserType] || RouterBrowser.DEFAULT\r\n       , ItemOptionComp = (itemOptionType)\r\n             ? ( RouterItemOption[itemOptionType] || RouterBrowserItem.DEFAULT )\r\n             : RouterBrowserItem.DEFAULT\r\n       , ItemComp = (itemType)\r\n             ? ( RouterBrowserItem[itemType] || RouterBrowserItem.DEFAULT )\r\n             : undefined\r\n       , onClickInfo = (typeof ItemComp !== \"undefined\")\r\n            ? _showModalDialogDescription\r\n            : undefined\r\n       , onShowContainer = ChartActions.showChart.bind(null, chartContainerType, browserType);\r\n\r\n   return React.createElement(Comp , {\r\n     dfProps,\r\n     key : browserType,\r\n     browserType : browserType,\r\n     store : ChartStore,\r\n     isInitShow : true,\r\n     caption : caption,\r\n     sourceMenuUrl : sourceMenuUrl,\r\n     modalDialogType : modalDialogType,\r\n     chartContainerType : chartContainerType,\r\n     ItemOptionComp: ItemOptionComp,\r\n     ItemComp : ItemComp,\r\n     descrUrl : descrUrl,\r\n     onClickInfo : onClickInfo,\r\n     onShowContainer : onShowContainer,\r\n\r\n     showAction : BAT.SHOW_BROWSER_DYNAMIC,\r\n     loadCompletedAction : BAT.LOAD_BROWSER_DYNAMIC_COMPLETED,\r\n     updateAction : BAT.UPDATE_BROWSER_MENU,  //for Type\r\n     onLoadMenu : BrowserActions.loadBrowserDynamic,\r\n     onShowLoadDialog : ComponentActions.showModalDialog  //for Type2\r\n\r\n   });\r\n }\r\n\r\n\r\n\r\nconst fBrowser = {\r\n  crAsyncBrowser(option) {\r\n    const { browserType } = option;\r\n    switch (browserType) {\r\n      case BT.WATCH_LIST:\r\n        return RouterBrowser[BT.WATCH_LIST]\r\n          .then(_crBrowserWatchList);\r\n\r\n      case BT.SWEDEN_STAT_ALL:\r\n      case BT.NORWAY_STAT_ALL:\r\n        return RouterBrowser.STAT_ALL\r\n          .then(Comp => _crBrowserDynamic(Comp, option));\r\n\r\n      default:\r\n        return Promise.resolve(\r\n           _crBrowserDynamic(\r\n             RouterBrowser[browserType] || RouterBrowser.DEFAULT,\r\n             option\r\n           )\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default fBrowser\r\n"]}