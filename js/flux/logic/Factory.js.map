{"version":3,"sources":["../../../src/flux/logic/Factory.js"],"names":["onLoadChart","loadStock","onShowChart","showChart","initFromDate","getFromDate","initToDate","getToDate","onTestDate","isValidDate","onTestDateOrEmpty","isValidDateOrEmpty","_showModalDialogDescription","option","showModalDialog","DESCRIPTION","createDialogComp","conf","browserType","itemKey","type","dialogProps","dialogType","dialogCaption","menuTitle","optionURI","optionsJsonProp","dataColumn","nInitFromDate","valueFn","valueFnPrefix","descrUrl","loadFnType","isContinious","loadId","isProxy","_initFromDate","_fnValue","bind","undefined","onClickInfo","loadFn","getFn","proxy","getProxy","onLoad","chartType","onShow","Object","assign","msgTestDateOrEmpty","TEST_DATE_OR_EMPTY","Q","getDialog","then","createElement","Comp","key","caption","msgOnNotSelected","NOT_SELECTED","msgOnNotValidFormat","NOT_VALID_FORMAT","fnValue","_createOptionDialog","onCloseItem","closeChart","fnCloseChartContainer","closeChartContainer","createChartContainerComp","chartContainerComp","_type","chartContainerType","_caption","chartContainerCaption","onCloseContainer","_getDialogConf","_browserId","split","getSourceConfig","Factory","createDialog","_conf","dialogConf","createOptionDialog","createChartContainer"],"mappings":";;;;;;;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AACA;;AAKA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;AAEA,IAAMA,cAAc,uBAAaC,SAAjC;AAAA,IACMC,cAAc,uBAAaC,SADjC;AAAA,IAEMC,eAAe,oBAAUC,WAAV,CAAsB,CAAtB,CAFrB;AAAA,IAGMC,aAAa,oBAAUC,SAAV,EAHnB;AAAA,IAIMC,aAAa,oBAAUC,WAJ7B;AAAA,IAKMC,oBAAoB,oBAAUC,kBALpC;;AAOA,IAAMC,8BAA8B,SAA9BA,2BAA8B,CAASC,MAAT,EAAgB;AAClD,6BAAiBC,eAAjB,CAAiC,kBAAYC,WAA7C,EAA0DF,MAA1D;AACD,CAFD;;AAKA,IAAMG,mBAAmB,SAAnBA,gBAAmB,CAAUC,IAAV,EAAgBC,WAAhB,EAA4B;AAAA,MAErCC,OAFqC,GAOxCF,IAPwC,CAE1CG,IAF0C;AAAA,0BAOxCH,IAPwC,CAG1CI,WAH0C;AAAA,MAG1CA,WAH0C,qCAG9B,EAH8B;AAAA,MAG1BC,UAH0B,GAOxCL,IAPwC,CAG1BK,UAH0B;AAAA,MAI1CC,aAJ0C,GAOxCN,IAPwC,CAI1CM,aAJ0C;AAAA,MAI3BC,SAJ2B,GAOxCP,IAPwC,CAI3BO,SAJ2B;AAAA,MAK1CC,SAL0C,GAOxCR,IAPwC,CAK1CQ,SAL0C;AAAA,MAK/BC,eAL+B,GAOxCT,IAPwC,CAK/BS,eAL+B;AAAA,MAM1CC,UAN0C,GAOxCV,IAPwC,CAM1CU,UAN0C;AAAA,MAS1CC,aAT0C,GAgBxCP,WAhBwC,CAS1CO,aAT0C;AAAA,MAU1CC,OAV0C,GAgBxCR,WAhBwC,CAU1CQ,OAV0C;AAAA,MAUjCC,aAViC,GAgBxCT,WAhBwC,CAUjCS,aAViC;AAAA,MAW1CC,QAX0C,GAgBxCV,WAhBwC,CAW1CU,QAX0C;AAAA,MAY1CC,UAZ0C,GAgBxCX,WAhBwC,CAY1CW,UAZ0C;AAAA,MAa1CC,YAb0C,GAgBxCZ,WAhBwC,CAa1CY,YAb0C;AAAA,MAc1CC,MAd0C,GAgBxCb,WAhBwC,CAc1Ca,MAd0C;AAAA,MAe1CC,OAf0C,GAgBxCd,WAhBwC,CAe1Cc,OAf0C;AAAA,MAiB5CC,aAjB4C,GAiB3BR,aAAD,GACX,oBAAUvB,WAAV,CAAsBuB,aAAtB,CADW,GAEXxB,YAnBuC;AAAA,MAoB5CiC,QApB4C,GAoBhCR,OAAD,GACLC,aAAD,GACK,wBAAcD,OAAd,EAAuBS,IAAvB,CAA4B,IAA5B,EAAkCR,aAAlC,CADL,GAEK,wBAAcD,OAAd,CAHC,GAINU,SAxBuC;AAAA,MAyB5CC,WAzB4C,GAyB7BT,QAAD,GACTnB,2BADS,GAET2B,SA3BuC;AAAA,MA4B5CE,MA5B4C,GA4BnC,uBAAaC,KAAb,CAAmBV,UAAnB,EAA+BV,UAA/B,CA5BmC;AAAA,MA6B5CqB,KA7B4C,GA6BpCR,UACH,qBAAWS,QAAX,EADG,GAEHL,SA/BuC;AAAA,MAgC5CM,MAhC4C,GAgCnC7C,YAAYsC,IAAZ,CAAiB,IAAjB,EAAuB;AAC7BQ,eAAW3B,OADkB;AAE7BD,4BAF6B,EAEhBD;AAFgB,GAAvB,CAhCmC;AAAA,MAoC5C8B,MApC4C,GAoCnC7C,YAAYoC,IAAZ,CAAiB,IAAjB,EAAuBnB,OAAvB,EAAgCD,WAAhC,EAA6CD,IAA7C,CApCmC;;AAsC9C,MAAIgB,YAAJ,EAAkB;AAChBe,WAAOC,MAAP,CAAc5B,WAAd,EAA2B;AACzB6B,0BAAoB,cAAIC,kBADC;AAEzBzC,yBAAmBA;AAFM,KAA3B;AAID;AACD,MAAI,CAACwB,MAAL,EAAY;AACVb,gBAAYa,MAAZ,GAAqB,eAASkB,CAA9B;AACD;;AAEF,SAAO,uBAAaC,SAAb,CAAuB/B,UAAvB,EACHgC,IADG,CACE,gBAAQ;AACX,WAAO,gBAAMC,aAAN,CAAoBC,IAApB;AACLC,WAAMtC,OADD;AAELuC,eAAUnC,iBAAiBC,SAFtB;AAGLC,iBAAYA,SAHP;AAILC,uBAAkBA,eAJb;AAKLC,kBAAaA,UALR;AAMLgC,wBAAmB,cAAIC,YANlB;AAOLC,2BAAsB,cAAIC,gBAPrB;AAQLjB,oBARK,EAQGE,cARH;AASLgB,eAAU1B,QATL;AAULjC,oBAAegC,aAVV;AAWL9B,4BAXK,EAWOE,sBAXP;AAYLgC,8BAZK;AAaLC,oBAbK;AAcLE;AAdK,OAeFtB,WAfE,EAAP;AAiBF,GAnBG,CAAP;AAoBL,CApED;;AAuEA,IAAM2C,sBAAsB,SAAtBA,mBAAsB,CAASnD,MAAT,EAAiB;AAAA,MACnCS,UADmC,GACpBT,MADoB,CACnCS,UADmC;;AAE3C,SAAO,uBAAa+B,SAAb,CAAuB/B,UAAvB,EACHgC,IADG,CACE,gBAAQ;AACX,WAAO,gBAAMC,aAAN,CAAoBC,IAApB,EAA0B;AAC7BC,WAAKnC;AADwB,KAA1B,CAAP;AAGF,GALG,CAAP;AAMD,CARD;;AAWA,IAAM2C,cAAc,uBAAaC,UAAjC;AACA,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAASrB,SAAT,EAAoB5B,WAApB,EAAgC;AAC5D,SAAO,2BAAiBkD,mBAAjB,CAAqC9B,IAArC,CAA0C,IAA1C,EAAgDQ,SAAhD,EAA2D5B,WAA3D,CAAP;AACD,CAFD;AAGA,IAAMmD,2BAA2B,SAA3BA,wBAA2B,GAA8B;AAAA,MAArBpD,IAAqB,uEAAhB,EAAgB;AAAA,MAAZC,WAAY;;AAC7D,MAAMsC,OAAQvC,KAAKqD,kBAAN,GACIrD,KAAKqD,kBADT,2BAAb;AAAA,MAGMC,QAAStD,KAAKG,IAAN,GACDH,KAAKG,IADJ,GAED,wBAAcF,WAAd,EAA2BsD,kBALxC;AAAA,MAMMC,WAAYxD,KAAKyD,qBAAN,GACJzD,KAAKyD,qBADD,GAEJ,wBAAcxD,WAAd,EAA2BwD,qBARxC;;AAUA,SAAO,gBAAMnB,aAAN,CAAoBC,IAApB,EAA0B;AACvBC,SAAMc,KADiB;AAEvBb,aAAUe,QAFa;AAGvB3B,eAAYyB,KAHW;AAIvBrD,iBAAcA,WAJS;AAKvByD,sBAAmBR,sBAAsBI,KAAtB,EAA6BrD,WAA7B,CALI;AAMvB+C;AANuB,GAA1B,CAAP;AAQD,CAnBD;;AAsBA,IAAMW,iBAAiB,SAAjBA,cAAiB,CAAStD,UAAT,EAAoB;AACzC,MAAMuD,aAAavD,WAAWwD,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAnB;AACA,SAAO,qBAAWC,eAAX,CAA2BF,UAA3B,EAAuCvD,UAAvC,CAAP;AACD,CAHD;;AAKA,IAAM0D;AAGJC,cAHI,wBAGS3D,UAHT,EAGqBJ,WAHrB,EAGkCD,IAHlC,EAGuC;AACzC,QAAMiE,QAAQ,CAACjE,KAAKkE,UAAN,GACJP,eAAetD,UAAf,CADI,GAEJL,IAFV;AAGA,WAAOD,iBAAiBkE,KAAjB,EAAwBhE,WAAxB,CAAP;AACF,GARI;AASLkE,oBATK,8BAScvE,MATd,EASqB;AACxB,WAAOmD,oBAAoBnD,MAApB,CAAP;AACD,GAXI;AAaLwE,sBAbK,gCAagB/D,UAbhB,EAa4BJ,WAb5B,EAayCD,IAbzC,EAa8C;AACjD,QAAMiE,QAAQjE,QAAQA,KAAKkE,UAAb,GACHlE,IADG,GAEH2D,eAAetD,UAAf,CAFX;AAGA,WAAO+C,yBAAyBa,KAAzB,EAAgChE,WAAhC,CAAP;AACA;AACD;AAnBI,EAAN;;kBAuBe8D,O","file":"Factory.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport RouterDialog from './RouterDialog';\r\nimport RouterLoadFn from './RouterLoadFn';\r\nimport RouterFnValue from './RouterFnValue';\r\n\r\nimport fBrowser from './fBrowser'\r\n\r\nimport ChartContainer from '../../components/zhn-containers/ChartContainer';\r\n\r\nimport Msg from '../../constants/Msg';\r\nimport {\r\n  ModalDialog,\r\n  LoadType\r\n} from '../../constants/Type';\r\n\r\nimport ComponentActions from '../actions/ComponentActions';\r\nimport ChartActions from '../actions/ChartActions';\r\nimport DateUtils from '../../utils/DateUtils';\r\n\r\nimport BrowserConfig from '../../constants/BrowserConfig';\r\n\r\nimport ChartStore from '../stores/ChartStore';\r\n\r\nconst onLoadChart = ChartActions.loadStock\r\n    , onShowChart = ChartActions.showChart\r\n    , initFromDate = DateUtils.getFromDate(2)\r\n    , initToDate = DateUtils.getToDate()\r\n    , onTestDate = DateUtils.isValidDate\r\n    , onTestDateOrEmpty = DateUtils.isValidDateOrEmpty;\r\n\r\nconst _showModalDialogDescription = function(option){\r\n  ComponentActions.showModalDialog(ModalDialog.DESCRIPTION, option);\r\n}\r\n\r\n\r\nconst createDialogComp = function (conf, browserType){   \r\n   const {\r\n           type:itemKey,\r\n           dialogProps={}, dialogType,\r\n           dialogCaption, menuTitle,\r\n           optionURI, optionsJsonProp,\r\n           dataColumn,\r\n         } = conf\r\n       , {\r\n           nInitFromDate,\r\n           valueFn, valueFnPrefix,\r\n           descrUrl,\r\n           loadFnType,\r\n           isContinious,\r\n           loadId,\r\n           isProxy\r\n         } = dialogProps\r\n       , _initFromDate = (nInitFromDate)\r\n            ? DateUtils.getFromDate(nInitFromDate)\r\n            : initFromDate\r\n       , _fnValue = (valueFn)\r\n            ? (valueFnPrefix )\r\n                 ? RouterFnValue[valueFn].bind(null, valueFnPrefix)\r\n                 : RouterFnValue[valueFn]\r\n            : undefined\r\n       , onClickInfo = (descrUrl)\r\n            ? _showModalDialogDescription\r\n            : undefined\r\n       , loadFn = RouterLoadFn.getFn(loadFnType, dialogType)\r\n       , proxy = isProxy\r\n            ? ChartStore.getProxy()\r\n            : undefined\r\n       , onLoad = onLoadChart.bind(null, {\r\n            chartType: itemKey,\r\n            browserType, conf\r\n          })\r\n       , onShow = onShowChart.bind(null, itemKey, browserType, conf);\r\n\r\n       if (isContinious) {\r\n         Object.assign(dialogProps, {\r\n           msgTestDateOrEmpty: Msg.TEST_DATE_OR_EMPTY,\r\n           onTestDateOrEmpty: onTestDateOrEmpty\r\n         })\r\n       }\r\n       if (!loadId){\r\n         dialogProps.loadId = LoadType.Q;\r\n       }\r\n\r\n      return RouterDialog.getDialog(dialogType)\r\n         .then(Comp => {\r\n            return React.createElement(Comp, {\r\n              key : itemKey,\r\n              caption : dialogCaption || menuTitle,\r\n              optionURI : optionURI,\r\n              optionsJsonProp : optionsJsonProp,\r\n              dataColumn : dataColumn,\r\n              msgOnNotSelected : Msg.NOT_SELECTED,\r\n              msgOnNotValidFormat : Msg.NOT_VALID_FORMAT,\r\n              onLoad, onShow,\r\n              fnValue : _fnValue,\r\n              initFromDate : _initFromDate,\r\n              initToDate, onTestDate,\r\n              onClickInfo,\r\n              loadFn,\r\n              proxy,\r\n              ...dialogProps\r\n           });\r\n         })\r\n}\r\n\r\n\r\nconst _createOptionDialog = function(option) {\r\n  const { dialogType } = option\r\n  return RouterDialog.getDialog(dialogType)\r\n     .then(Comp => {\r\n        return React.createElement(Comp, {\r\n            key: dialogType\r\n        })\r\n     });\r\n}\r\n\r\n\r\nconst onCloseItem = ChartActions.closeChart;\r\nconst fnCloseChartContainer = function(chartType, browserType){\r\n  return ComponentActions.closeChartContainer.bind(null, chartType, browserType);\r\n}\r\nconst createChartContainerComp = function(conf={}, browserType){\r\n  const Comp = (conf.chartContainerComp)\r\n                 ? conf.chartContainerComp\r\n                 : ChartContainer\r\n      , _type = (conf.type)\r\n             ? conf.type\r\n             : BrowserConfig[browserType].chartContainerType\r\n      , _caption = (conf.chartContainerCaption)\r\n             ? conf.chartContainerCaption\r\n             : BrowserConfig[browserType].chartContainerCaption;\r\n\r\n  return React.createElement(Comp, {\r\n            key : _type,\r\n            caption : _caption,\r\n            chartType : _type,\r\n            browserType : browserType,\r\n            onCloseContainer : fnCloseChartContainer(_type, browserType),\r\n            onCloseItem\r\n  });\r\n}\r\n\r\n\r\nconst _getDialogConf = function(dialogType){\r\n  const _browserId = dialogType.split('_')[0];\r\n  return ChartStore.getSourceConfig(_browserId, dialogType);\r\n}\r\n\r\nconst Factory = {\r\n  ...fBrowser,\r\n\r\n  createDialog(dialogType, browserType, conf){\r\n    const _conf = !conf.dialogConf\r\n            ? _getDialogConf(dialogType)\r\n            : conf;\r\n    return createDialogComp(_conf, browserType);\r\n },\r\n createOptionDialog(option){\r\n   return _createOptionDialog(option)\r\n },\r\n\r\n createChartContainer(dialogType, browserType, conf){\r\n   const _conf = conf && conf.dialogConf\r\n            ? conf\r\n            : _getDialogConf(dialogType);\r\n   return createChartContainerComp(_conf, browserType);\r\n   //return createChartContainerComp(_getDialogConf(dialogType), browserType);\r\n }\r\n\r\n}\r\n\r\nexport default Factory\r\n"]}