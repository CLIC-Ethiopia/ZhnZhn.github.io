{"version":3,"sources":["../../../src/flux/logic/LogicUtils.js"],"names":["_isFn","fn","_crQuandlKey","option","loadId","isLoadMeta","value","dataColumn","seriaType","viewKey","LT","QCT","CHT","AREA","_crKey","_itemKey","loadConfig","LoadConfig","crKey","LogicUtils","createKeyForConfig","Q","EU_STAT","EIA","WL","id"],"mappings":";;;;;;;AACA;;AAEA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE;AAAA,SAAI,OAAOA,EAAP,KAAc,UAAlB;AAAA,CAAhB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAASC,MAAT,EAAgB;AAAA,MAE3BC,MAF2B,GAKzBD,MALyB,CAE3BC,MAF2B;AAAA,MAEnBC,UAFmB,GAKzBF,MALyB,CAEnBE,UAFmB;AAAA,MAG3BC,KAH2B,GAKzBH,MALyB,CAG3BG,KAH2B;AAAA,MAGpBC,UAHoB,GAKzBJ,MALyB,CAGpBI,UAHoB;AAAA,MAGRC,SAHQ,GAKzBL,MALyB,CAGRK,SAHQ;AAAA,MAI3BC,OAJ2B,GAKzBN,MALyB,CAI3BM,OAJ2B;AAMnC,SAAQL,MAAM,KAAKM,eAAGC,GAAd,IAAqB,CAACN,UAAvB,GACHG,SAAS,KAAKI,gBAAIC,IAAlB,GACOP,KADP,SACgBM,gBAAIC,IADpB,SAC4BN,UAD5B,GAEOD,KAFP,SAEgBE,SAHb,GAIHC,OAAO,IAAIH,KAJf;AAKD,CAXD;;AAaA,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACX,MAAD,EAAY;AAAA,MACjBC,MADiB,GACWD,MADX,CACjBC,MADiB;AAAA,MACTE,KADS,GACWH,MADX,CACTG,KADS;AAAA,MACFS,QADE,GACWZ,MADX,CACFY,QADE;AAAA,MAEnBC,UAFmB,GAENC,uBAAWb,MAAX,KAAsB,EAFhB;AAAA,MAGjBc,KAHiB,GAGPF,UAHO,CAGjBE,KAHiB;AAIzB,SAAOlB,KAAK,CAACkB,KAAD,CAAL,GACHA,KAAK,CAACf,MAAD,CADF,GAEHY,QAAQ,IAAIT,KAAZ,IAAqB,KAFzB;AAGD,CAPD;;AASA,IAAMa,UAAU,GAAG;AACjBC,EAAAA,kBADiB,8BACEjB,MADF,EACS;AAAA,QAChBC,MADgB,GACKD,MADL,CAChBC,MADgB;AAAA,QACRW,QADQ,GACKZ,MADL,CACRY,QADQ;;AAExB,YAAQX,MAAR;AACE,WAAKM,eAAGW,CAAR;AAAW,WAAKX,eAAGC,GAAR;AACT,eAAOI,QAAQ,IAAIb,YAAY,CAACC,MAAD,CAA/B;;AACF,WAAKO,eAAGY,OAAR;AAAiB,WAAKZ,eAAGa,GAAR;AAAa,WAAKb,eAAGc,EAAR;AAC5B,eAAOT,QAAQ,IAAIZ,MAAM,CAACsB,EAA1B;;AACF;AACE,eAAOX,MAAM,CAACX,MAAD,CAAb;AANJ;AAQD;AAXgB,CAAnB;eAcegB,U","sourcesContent":["\r\nimport { ChartType as CHT, LoadType as LT } from '../../constants/Type';\r\n\r\nimport LoadConfig from './LoadConfig'\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nconst _crQuandlKey = function(option){\r\n  const {\r\n          loadId, isLoadMeta,\r\n          value, dataColumn, seriaType,\r\n          viewKey\r\n        } = option;\r\n  return (loadId === LT.QCT && !isLoadMeta)\r\n    ? seriaType === CHT.AREA\r\n        ? `${value}_${CHT.AREA}_${dataColumn}`\r\n        : `${value}_${seriaType}`\r\n    : viewKey || value;\r\n};\r\n\r\nconst _crKey = (option) => {\r\n  const { loadId, value, _itemKey } = option\r\n      , loadConfig = LoadConfig[loadId] || {}\r\n      , { crKey } = loadConfig;\r\n  return _isFn(crKey)\r\n    ? crKey(option)\r\n    : _itemKey || value || 'key';\r\n};\r\n\r\nconst LogicUtils = {\r\n  createKeyForConfig(option){\r\n    const { loadId, _itemKey } = option;\r\n    switch (loadId) {\r\n      case LT.Q: case LT.QCT:\r\n        return _itemKey || _crQuandlKey(option);\r\n      case LT.EU_STAT: case LT.EIA: case LT.WL:\r\n        return _itemKey || option.id;\r\n      default:\r\n        return _crKey(option);\r\n    }\r\n  }\r\n};\r\n\r\nexport default LogicUtils\r\n"],"file":"LogicUtils.js"}