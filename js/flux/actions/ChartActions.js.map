{"version":3,"sources":["../../../src/flux/actions/ChartActions.js"],"names":["META","ChartActionTypes","INIT_AND_SHOW_CHART","LOAD_STOCK","LOAD_STOCK_COMPLETED","LOAD_STOCK_ADDED","LOAD_STOCK_FAILED","SHOW_CHART","CLOSE_CHART","_fnOnChangeStore","actionType","data","ChartActions","isLoading","_fnCancelLoad","option","alertMsg","isWithFailed","setAlertMsg","failed","isShouldEmit","onCancel","onFailed","createActions","children","idLoading","undefined","cancelLoad","fnOnChangeStore","preEmit","arg","slice","call","arguments","chartType","key","createKeyForConfig","isDoublingLoad","isDoublLoadMeta","isLoadMeta","apiKey","getQuandlKey","isPremium","Alert","PREMIUM_WITHOUT_KEY","LOADING_IN_PROGRESS","DOUBLE_LOAD_META","isLoadToChart","isChartExist","ALREADY_EXIST","shouldEmit","listen","browserType","loadId","completed","added"],"mappings":"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","file":"ChartActions.js","sourcesContent":["import Reflux from 'reflux';\r\n\r\nimport Msg from '../../constants/Msg';\r\nimport ChartStore from '../stores/ChartStore';\r\nimport LoadConfig from '../logic/LoadConfig';\r\nimport LogicUtils from '../logic/LogicUtils';\r\n\r\nconst META = '_Meta';\r\n\r\nexport const ChartActionTypes = {\r\n  INIT_AND_SHOW_CHART : 'initAndShowChart',\r\n  LOAD_STOCK : 'loadStock',\r\n  LOAD_STOCK_COMPLETED : 'loadStockCompleted',\r\n  LOAD_STOCK_ADDED : 'loadStockAdded',\r\n  LOAD_STOCK_FAILED : 'loadStockFailed',\r\n  SHOW_CHART : 'showChart',\r\n  CLOSE_CHART : 'closeChart'\r\n}\r\n\r\nconst _fnOnChangeStore = function(actionType, data){\r\n   if (actionType === ChartActionTypes.LOAD_STOCK_COMPLETED ||\r\n       actionType === ChartActionTypes.LOAD_STOCK_ADDED ||\r\n       actionType === ChartActionTypes.LOAD_STOCK_FAILED )\r\n   {\r\n     ChartActions[ChartActionTypes.LOAD_STOCK].isLoading = false;\r\n   }\r\n}\r\n\r\nconst _fnCancelLoad = function(option, alertMsg, isWithFailed){\r\n  Msg.setAlertMsg(option, alertMsg);\r\n  this.failed(option);\r\n  this.isShouldEmit = false;\r\n\r\n  if (typeof option.onCancel === 'function'){\r\n    option.onCancel();\r\n  } else if (isWithFailed && typeof option.onFailed === 'function'){\r\n    option.onFailed();\r\n  }\r\n}\r\n\r\nconst ChartActions =  Reflux.createActions({\r\n      [ChartActionTypes.LOAD_STOCK] : {\r\n         children : ['completed', 'added', 'failed'],\r\n         isLoading : false,\r\n         idLoading : undefined,\r\n         isShouldEmit : true,\r\n         cancelLoad : _fnCancelLoad\r\n       },\r\n      [ChartActionTypes.SHOW_CHART] : {},\r\n      [ChartActionTypes.CLOSE_CHART] : {}\r\n});\r\n\r\nChartActions.fnOnChangeStore = _fnOnChangeStore\r\n\r\nChartActions[ChartActionTypes.LOAD_STOCK].preEmit = function(){\r\n  const arg = [].slice.call(arguments)\r\n      , chartType = arg[0]\r\n      , option = arg[2]\r\n      , key = LogicUtils.createKeyForConfig(option)\r\n      , isDoublingLoad = this.isLoading && key === this.idLoading\r\n      , isDoublLoadMeta = (option.isLoadMeta)\r\n          ? (key + META === this.idLoading)\r\n          : false;\r\n\r\n  option.key = key;\r\n  this.isShouldEmit = true;\r\n  option.apiKey = ChartStore.getQuandlKey();\r\n\r\n  if (option.isPremium && !option.apiKey){\r\n    this.cancelLoad(option, Msg.Alert.PREMIUM_WITHOUT_KEY, false);\r\n  } else if (isDoublingLoad){\r\n    this.cancelLoad(option, Msg.Alert.LOADING_IN_PROGRESS, false);\r\n  } else if (isDoublLoadMeta){\r\n    this.cancelLoad(option, Msg.Alert.DOUBLE_LOAD_META, false);\r\n  }  else if (!ChartStore.isLoadToChart()){\r\n     if (ChartStore.isChartExist(chartType, key)){\r\n       this.cancelLoad(option, Msg.Alert.ALREADY_EXIST, true);\r\n     }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nChartActions[ChartActionTypes.LOAD_STOCK].shouldEmit = function(){\r\n  return this.isShouldEmit;\r\n}\r\nChartActions[ChartActionTypes.LOAD_STOCK].listen(function(chartType, browserType, option){\r\n  /*\r\n  console.log('LOAD_STOCK:');\r\n  console.log('chartType:');\r\n  console.log(chartType);\r\n  console.log('browserType:');\r\n  console.log(browserType);\r\n  console.log('option:');\r\n  console.log(option);\r\n  */\r\n\r\n  this.isLoading = true;\r\n  this.idLoading = option.key;\r\n  if (option.isLoadMeta){\r\n    this.idLoading = this.idLoading + META;\r\n  }\r\n\r\n  const { loadId='Q' } = option;\r\n  option.chartType = chartType;\r\n  option.browserType = browserType;\r\n  LoadConfig[loadId](option, this.completed, this.added, this.failed);\r\n})\r\n\r\nexport default ChartActions\r\n"]}