{"version":3,"sources":["../../../src/flux/stores/BrowserSlice.js"],"names":["C","FAILED","isWithItemCounter","BrowserLogic","initBrowserMenu","setIsOpen","plusCounter","resetCounter","_setItemOpen","bind","_setItemClose","_addCounter","_minusCounter","BrowserSlice","browserMenu","routeDialog","WL","DataWL","getBrowserMenu","browserType","setMenuItemOpen","cT","bT","setMenuItemClose","addMenuItemCounter","minusMenuItemCounter","resetMenuItemCounter","getSourceConfig","browserId","sourceId","indexOf","BrowserType","STOCKS_BY_SECTORS","BrowserConfig","_r","undefined","onShowBrowserDynamicDone","trigger","BA","SHOW_BROWSER_DYNAMIC","onShowBrowserDynamicInit","elBrowser","option","INIT_BROWSER_DYNAMIC","onShowBrowserDynamicFailed","showAlertDialog","onLoadBrowserDynamicCompleted","json","elMenu","LOAD_BROWSER_DYNAMIC_COMPLETED","menuItems","onLoadBrowserDynamicFailed","alertItemId","caption"],"mappings":"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","sourcesContent":["\r\nimport BrowserConfig from '../../constants/BrowserConfig';\r\nimport { BrowserType } from '../../constants/Type';\r\nimport DataWL from '../../constants/DataWL';\r\n\r\n//import Factory from '../logic/Factory';\r\nimport { BrowserActionTypes as BA } from '../actions/BrowserActions';\r\n\r\nimport BrowserLogic from './browser/BrowserLogic';\r\n\r\nconst C = {\r\n  FAILED: 'Failed'\r\n};\r\n\r\nconst {\r\n  isWithItemCounter,\r\n  initBrowserMenu,\r\n  setIsOpen,\r\n  plusCounter,\r\n  resetCounter\r\n} = BrowserLogic;\r\n\r\nconst _setItemOpen = setIsOpen.bind(null, true)\r\n, _setItemClose = setIsOpen.bind(null, false)\r\n, _addCounter = plusCounter.bind(null, 1)\r\n, _minusCounter = plusCounter.bind(null, -1);\r\n\r\nconst BrowserSlice = {\r\n  browserMenu: {},\r\n  routeDialog: {\r\n    WL: DataWL\r\n  },\r\n\r\n  isWithItemCounter: isWithItemCounter,\r\n  getBrowserMenu(browserType){\r\n     return this.browserMenu[browserType];\r\n  },\r\n  setMenuItemOpen(cT, bT){\r\n    _setItemOpen(this.browserMenu, bT, cT)\r\n  },\r\n  setMenuItemClose(cT, bT){\r\n    _setItemClose(this.browserMenu, bT, cT)\r\n  },\r\n  addMenuItemCounter(cT, bT){\r\n    _addCounter(this.browserMenu, bT, cT);\r\n  },\r\n  minusMenuItemCounter(cT, bT){\r\n    _minusCounter(this.browserMenu, bT, cT);\r\n  },\r\n  resetMenuItemCounter(cT, bT){\r\n    resetCounter(this.browserMenu, bT, cT)\r\n  },\r\n  getSourceConfig(browserId, sourceId){\r\n    if (sourceId.indexOf(BrowserType.STOCKS_BY_SECTORS) > 0){\r\n      return BrowserConfig[browserId];\r\n    }\r\n    const _r = this.routeDialog[browserId];\r\n    return _r ? _r[sourceId] : undefined;\r\n  },\r\n\r\n  onShowBrowserDynamicDone({ browserType }){\r\n    this.trigger(BA.SHOW_BROWSER_DYNAMIC, browserType);\r\n  },\r\n  onShowBrowserDynamicInit(elBrowser, option){\r\n    const { browserType } = option;\r\n    this.browserMenu[browserType] = [];\r\n    this.trigger(BA.INIT_BROWSER_DYNAMIC, elBrowser);\r\n  },\r\n  onShowBrowserDynamicFailed(option){\r\n    this.showAlertDialog(option)\r\n    this.trigger(BA.SHOW_BROWSER_DYNAMIC + C.FAILED)\r\n  },\r\n\r\n  onLoadBrowserDynamicCompleted(option){\r\n    const { json, browserType } = option;\r\n    if ( isWithItemCounter(browserType) ){\r\n      const elMenu = initBrowserMenu(this, option);\r\n      this.trigger(BA.LOAD_BROWSER_DYNAMIC_COMPLETED, {\r\n         menuItems: elMenu, browserType\r\n      })\r\n    } else {\r\n      this.trigger(BA.LOAD_BROWSER_DYNAMIC_COMPLETED, {\r\n         json, browserType\r\n      })\r\n    }\r\n  },\r\n  onLoadBrowserDynamicFailed(option){\r\n    const { alertItemId, caption } = option;\r\n    option.alertItemId = alertItemId || caption\r\n    this.showAlertDialog(option);\r\n  }\r\n\r\n}\r\n\r\nexport default BrowserSlice\r\n"],"file":"BrowserSlice.js"}