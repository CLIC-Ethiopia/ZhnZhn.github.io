{"version":3,"sources":["../../../src/flux/stores/ComponentSlice.js"],"names":["ItemDialogLogic","showItemDialog","slice","menuItemConf","store","type","browserType","dialogConfOr","Promise","resolve","key","_dialogConf","getDialogConf","Factory","createDialog","then","Comp","showOptionDialog","options","data","dialogType","createOptionDialog","CheckBoxChartLogic","toggle","isCheck","checkBox","chart","activeCheckbox","setUnchecked","activeChart","uncheckActive","chartType","ChbContLogic","_check","_chb","activeContChb","_uncheck","ComponentSlice","dialogInit","showAlertDialog","option","modalDialogType","MDT_ALERT","trigger","CAT","SHOW_MODAL_DIALOG","onShowAbout","SHOW_ABOUT","onShowDialog","r","SHOW_DIALOG","onCloseDialog","CLOSE_DIALOG","caption","props","onShowOptionDialog","catch","err","alertCaption","alertDescr","message","onCloseChartContainer","uncheckActiveContChb","uncheckActiveCheckbox","isWithItemCounter","setMenuItemClose","BAT_UPDATE_BROWSER_MENU","onCloseChartContainer2","CLOSE_CHART_CONTAINER_2","onSetActiveContainer","isLoadToChart","zhConfig","id","getActiveChart","onSetActiveCheckbox","onShowModalDialog","onChangeTheme","themeName","CHANGE_THEME"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;AAIA,MAAMA,eAAe,GAAG;AAEtBC,EAAAA,cAAc,CAACC,KAAD,EAAQC,YAAR,EAAsBC,KAAtB,EAA4B;AACxC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,WAAR;AAAqBC,MAAAA;AAArB,QAAsCJ,YAA5C;;AACA,QAAID,KAAK,CAACG,IAAD,CAAT,EAAgB;AACd,aAAOG,OAAO,CAACC,OAAR,CAAgB;AAAEC,QAAAA,GAAG,EAAEL;AAAP,OAAhB,CAAP;AACD,KAFD,MAEO;AACL,YAAMM,WAAW,GAAGP,KAAK,CAACQ,aAAN,CAAoBL,YAApB,EAAkCF,IAAlC,CAApB;;AACA,aAAOQ,iBAAQC,YAAR,CAAqBR,WAArB,EAAkCK,WAAlC,EACJI,IADI,CACCC,IAAI,IAAI;AACTd,QAAAA,KAAK,CAACG,IAAD,CAAL,GAAc,IAAd;AACA,eAAO;AAAEK,UAAAA,GAAG,EAACL,IAAN;AAAYW,UAAAA;AAAZ,SAAP;AACH,OAJG,CAAP;AAKD;AACF,GAdqB;;AAgBtBC,EAAAA,gBAAgB,CAACf,KAAD,EAAQgB,OAAR,EAAgB;AAC9B,UAAM;AAAEb,MAAAA,IAAF;AAAQc,MAAAA;AAAR,QAAiBD,OAAvB;;AACA,QAAIhB,KAAK,CAACG,IAAD,CAAT,EAAiB;AACf,aAAOG,OAAO,CAACC,OAAR,CAAgB;AAAEC,QAAAA,GAAG,EAAEL,IAAP;AAAac,QAAAA;AAAb,OAAhB,CAAP;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACE,UAAR,GAAqBf,IAArB;AACA,aAAOQ,iBAAQQ,kBAAR,CAA2BH,OAA3B,EACHH,IADG,CACEC,IAAI,IAAI;AACVd,QAAAA,KAAK,CAACG,IAAD,CAAL,GAAc,IAAd;AACA,eAAO;AAAEK,UAAAA,GAAG,EAAEL,IAAP;AAAaW,UAAAA,IAAb;AAAmBG,UAAAA;AAAnB,SAAP;AACH,OAJG,CAAP;AAKD;AACF;;AA5BqB,CAAxB;AAgCA,MAAMG,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,CAACrB,KAAD,EAAQgB,OAAR,EAAgB;AACpB,UAAM;AAAEM,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,QAA+BR,OAArC;;AACA,QAAIM,OAAJ,EAAY;AACT,YAAMG,cAAc,GAAGzB,KAAK,CAACyB,cAA7B;;AACA,UAAIA,cAAc,IAAIA,cAAc,KAAKF,QAAzC,EAAkD;AAC/CE,QAAAA,cAAc,CAACC,YAAf;AACF;;AACD1B,MAAAA,KAAK,CAACyB,cAAN,GAAuBF,QAAvB;AACAvB,MAAAA,KAAK,CAAC2B,WAAN,GAAoBH,KAApB;AACF,KAPD,MAOO;AACLxB,MAAAA,KAAK,CAACyB,cAAN,GAAuB,IAAvB;AACAzB,MAAAA,KAAK,CAAC2B,WAAN,GAAoB,IAApB;AACD;AACF,GAdwB;;AAgBzBC,EAAAA,aAAa,CAAC5B,KAAD,EAAQ6B,SAAR,EAAkB;AAC7B,UAAMJ,cAAc,GAAGzB,KAAK,CAACyB,cAA7B;;AACA,QAAKA,cAAc,KACjB,CAACI,SAAD,IAAcJ,cAAc,CAACI,SAAf,KAA6BA,SAD1B,CAAnB,EACyD;AACtDJ,MAAAA,cAAc,CAACC,YAAf;AACA1B,MAAAA,KAAK,CAACyB,cAAN,GAAuB,IAAvB;AACAzB,MAAAA,KAAK,CAAC2B,WAAN,GAAoB,IAApB;AACF;AACF;;AAxBwB,CAA3B;AA2BA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,MAAM,CAAC/B,KAAD,EAAQuB,QAAR,EAAkB;AACtB,UAAMS,IAAI,GAAGhC,KAAK,CAACiC,aAAnB;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACN,YAAL;AACD;;AACD1B,IAAAA,KAAK,CAACiC,aAAN,GAAsBV,QAAtB;AACD,GAPkB;;AAQnBW,EAAAA,QAAQ,CAAClC,KAAD,EAAQ;AACdA,IAAAA,KAAK,CAACiC,aAAN,GAAsB,IAAtB;AACD,GAVkB;;AAYnBZ,EAAAA,MAAM,CAACrB,KAAD,QAA8B;AAAA,QAAtB;AAAEsB,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAsB;;AAClC,QAAID,OAAJ,EAAa;AACXQ,MAAAA,YAAY,CAACC,MAAb,CAAoB/B,KAApB,EAA2BuB,QAA3B;AACD,KAFD,MAEO;AACLO,MAAAA,YAAY,CAACI,QAAb,CAAsBlC,KAAtB;AACD;AACF,GAlBkB;;AAoBnB4B,EAAAA,aAAa,CAAC5B,KAAD,EAAQ6B,SAAR,EAAmB;AAC9B,UAAMG,IAAI,GAAGhC,KAAK,CAACiC,aAAnB;;AACA,QAAID,IAAI,IAAIA,IAAI,CAACH,SAAL,KAAmBA,SAA/B,EAA0C;AACxCG,MAAAA,IAAI,CAACN,YAAL;;AACA1B,MAAAA,KAAK,CAACiC,aAAN,GAAsB,IAAtB;AACD;AACF;;AA1BkB,CAArB;AA6BA,MAAME,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAG,EADQ;;AAGrBC,EAAAA,eAAe,CAACC,MAAD,EAAW;AAAA,QAAVA,MAAU;AAAVA,MAAAA,MAAU,GAAH,EAAG;AAAA;;AACxBA,IAAAA,MAAM,CAACC,eAAP,GAAyBC,0BAAzB;AACA,SAAKC,OAAL,CAAaC,uCAAIC,iBAAjB,EAAoCL,MAApC;AACD,GANoB;;AAQrBM,EAAAA,WAAW,GAAE;AACX,SAAKH,OAAL,CAAaC,uCAAIG,UAAjB;AACD,GAVoB;;AAYrBC,EAAAA,YAAY,CAAC3C,IAAD,EAAOC,WAAP,EAAoBC,YAApB,EAAiC;AAC3CP,IAAAA,eAAe,CAACC,cAAhB,CACE,KAAKqC,UADP,EACmB;AAAEjC,MAAAA,IAAF;AAAQC,MAAAA,WAAR;AAAqBC,MAAAA;AAArB,KADnB,EACwD,IADxD,EAEEQ,IAFF,CAEOkC,CAAC,IAAI;AACT,WAAKN,OAAL,CAAaC,uCAAIM,WAAjB,EAA8BD,CAA9B;AACF,KAJD;AAKD,GAlBoB;;AAoBrBE,EAAAA,aAAa,CAACnC,IAAD,EAAO;AAClB,SAAK2B,OAAL,CAAaC,uCAAIQ,YAAjB,EAA+B;AAC7B/C,MAAAA,IAAI,EAAEW,IAAI,CAACN,GADkB;AAE7B2C,MAAAA,OAAO,EAAErC,IAAI,CAACsC,KAAL,CAAWD;AAFS,KAA/B;AAID,GAzBoB;;AA2BrBE,EAAAA,kBAAkB,CAAClD,IAAD,EAAOmC,MAAP,EAAc;AAC9BxC,IAAAA,eAAe,CAACiB,gBAAhB,CACE,KAAKqB,UADP,EACmB;AAAEjC,MAAAA,IAAF;AAAQc,MAAAA,IAAI,EAAEqB;AAAd,KADnB,EAEEzB,IAFF,CAEOkC,CAAC,IAAI;AACV,WAAKN,OAAL,CAAaC,uCAAIM,WAAjB,EAA8BD,CAA9B;AACD,KAJD,EAKCO,KALD,CAKOC,GAAG,IAAI;AACZ,WAAKd,OAAL,CAAaC,uCAAIC,iBAAjB,EAAoC;AAClCJ,QAAAA,eAAe,EAAE,OADiB;AAElCiB,QAAAA,YAAY,EAAE,aAFoB;AAGlCC,QAAAA,UAAU,EAAEF,GAAG,CAACG;AAHkB,OAApC;AAKD,KAXD;AAYD,GAxCoB;;AA0CrBC,EAAAA,qBAAqB,CAAC9B,SAAD,EAAYzB,WAAZ,EAAwB;AAC3C,SAAKwD,oBAAL,CAA0B/B,SAA1B;AACA,SAAKgC,qBAAL,CAA2BhC,SAA3B;;AACA,QAAG,KAAKiC,iBAAL,CAAuB1D,WAAvB,CAAH,EAAuC;AACrC,WAAK2D,gBAAL,CAAsBlC,SAAtB,EAAiCzB,WAAjC;AACA,WAAKqC,OAAL,CAAauB,uCAAb,EAAsC5D,WAAtC;AACD;AACF,GAjDoB;;AAkDrB6D,EAAAA,sBAAsB,CAACpC,SAAD,EAAYzB,WAAZ,EAAwB;AAC5C,SAAKqC,OAAL,CAAaC,uCAAIwB,uBAAjB,EAA0CrC,SAA1C;AACD,GApDoB;;AAqDrBsC,EAAAA,oBAAoB,CAAC7C,OAAD,EAAUC,QAAV,EAAmB;AACrCO,IAAAA,YAAY,CAACT,MAAb,CAAoB,IAApB,EAA0B;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAA1B;AACD,GAvDoB;;AAwDrBqC,EAAAA,oBAAoB,CAAC/B,SAAD,EAAW;AAC7BC,IAAAA,YAAY,CAACF,aAAb,CAA2B,IAA3B,EAAiCC,SAAjC;AACD,GA1DoB;;AA4DrBuC,EAAAA,aAAa,GAAE;AACb,QAAI,KAAKzC,WAAT,EAAqB;AACnB,aAAO,KAAKA,WAAL,CAAiBX,OAAjB,CAAyBqD,QAAzB,CAAkCC,EAAzC;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAlEoB;;AAmErBC,EAAAA,cAAc,GAAE;AACd,WAAO,KAAK5C,WAAZ;AACD,GArEoB;;AAsErB6C,EAAAA,mBAAmB,CAAClD,OAAD,EAAUC,QAAV,EAAoBC,KAApB,EAA0B;AAC3CJ,IAAAA,kBAAkB,CAACC,MAAnB,CAA0B,IAA1B,EAAgC;AAACC,MAAAA,OAAD;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,KAAhC;AACD,GAxEoB;;AAyErBqC,EAAAA,qBAAqB,CAAChC,SAAD,EAAW;AAC9BT,IAAAA,kBAAkB,CAACQ,aAAnB,CAAiC,IAAjC,EAAuCC,SAAvC;AACD,GA3EoB;;AA6ErB4C,EAAAA,iBAAiB,CAAClC,eAAD,EAAkBD,MAAlB,EAA4B;AAAA,QAAVA,MAAU;AAAVA,MAAAA,MAAU,GAAH,EAAG;AAAA;;AAC3CA,IAAAA,MAAM,CAACC,eAAP,GAAyBA,eAAzB;AACA,SAAKE,OAAL,CAAaC,uCAAIC,iBAAjB,EAAoCL,MAApC;AACD,GAhFoB;;AAkFrBoC,EAAAA,aAAa,CAACC,SAAD,EAAW;AACtB,SAAKlC,OAAL,CAAaC,uCAAIkC,YAAjB,EAA+BD,SAA/B;AACD;;AApFoB,CAAvB;eAuFexC,c","sourcesContent":["\r\nimport { ComponentActionTypes as CAT } from '../actions/ComponentActions';\r\nimport { BAT_UPDATE_BROWSER_MENU } from '../actions/BrowserActions';\r\nimport Factory from '../logic/Factory';\r\n\r\nimport {\r\n  MDT_ALERT\r\n} from '../../constants/ModalDialogType';\r\n\r\nconst ItemDialogLogic = {\r\n\r\n  showItemDialog(slice, menuItemConf, store){\r\n    const { type, browserType, dialogConfOr } = menuItemConf;\r\n    if (slice[type]){\r\n      return Promise.resolve({ key: type });\r\n    } else {\r\n      const _dialogConf = store.getDialogConf(dialogConfOr, type);\r\n      return Factory.createDialog(browserType, _dialogConf)\r\n        .then(Comp => {\r\n             slice[type] = true\r\n             return { key:type, Comp };\r\n         });\r\n    }\r\n  },\r\n\r\n  showOptionDialog(slice, options){\r\n    const { type, data } = options;\r\n    if (slice[type]) {\r\n      return Promise.resolve({ key: type, data });\r\n    } else {\r\n      options.dialogType = type\r\n      return Factory.createOptionDialog(options)\r\n         .then(Comp => {\r\n             slice[type] = true\r\n             return { key: type, Comp, data };\r\n         })\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst CheckBoxChartLogic = {\r\n  toggle(slice, options){\r\n    const { isCheck, checkBox, chart } = options;\r\n    if (isCheck){\r\n       const activeCheckbox = slice.activeCheckbox;\r\n       if (activeCheckbox && activeCheckbox !== checkBox){\r\n          activeCheckbox.setUnchecked()\r\n       }\r\n       slice.activeCheckbox = checkBox\r\n       slice.activeChart = chart\r\n    } else {\r\n      slice.activeCheckbox = null\r\n      slice.activeChart = null\r\n    }\r\n  },\r\n\r\n  uncheckActive(slice, chartType){\r\n    const activeCheckbox = slice.activeCheckbox;\r\n    if ( activeCheckbox &&\r\n     (!chartType || activeCheckbox.chartType === chartType) ){\r\n       activeCheckbox.setUnchecked()\r\n       slice.activeCheckbox = null\r\n       slice.activeChart = null\r\n    }\r\n  }\r\n};\r\n\r\nconst ChbContLogic = {\r\n  _check(slice, checkBox) {\r\n    const _chb = slice.activeContChb;\r\n    if (_chb) {\r\n      _chb.setUnchecked()\r\n    }\r\n    slice.activeContChb = checkBox\r\n  },\r\n  _uncheck(slice) {\r\n    slice.activeContChb = null\r\n  },\r\n\r\n  toggle(slice, { isCheck, checkBox }){\r\n    if (isCheck) {\r\n      ChbContLogic._check(slice, checkBox)\r\n    } else {\r\n      ChbContLogic._uncheck(slice)\r\n    }\r\n  },\r\n\r\n  uncheckActive(slice, chartType) {\r\n    const _chb = slice.activeContChb;\r\n    if (_chb && _chb.chartType === chartType) {\r\n      _chb.setUnchecked()\r\n      slice.activeContChb = null\r\n    }\r\n  }\r\n};\r\n\r\nconst ComponentSlice = {\r\n  dialogInit : {},\r\n\r\n  showAlertDialog(option={}){\r\n    option.modalDialogType = MDT_ALERT;\r\n    this.trigger(CAT.SHOW_MODAL_DIALOG, option);\r\n  },\r\n\r\n  onShowAbout(){\r\n    this.trigger(CAT.SHOW_ABOUT);\r\n  },\r\n\r\n  onShowDialog(type, browserType, dialogConfOr){\r\n    ItemDialogLogic.showItemDialog(\r\n      this.dialogInit, { type, browserType, dialogConfOr }, this\r\n    ).then(r => {\r\n       this.trigger(CAT.SHOW_DIALOG, r)\r\n    });\r\n  },\r\n\r\n  onCloseDialog(Comp) {\r\n    this.trigger(CAT.CLOSE_DIALOG, {\r\n      type: Comp.key,\r\n      caption: Comp.props.caption\r\n    })\r\n  },\r\n\r\n  onShowOptionDialog(type, option){\r\n    ItemDialogLogic.showOptionDialog(\r\n      this.dialogInit, { type, data: option }\r\n    ).then(r => {\r\n      this.trigger(CAT.SHOW_DIALOG, r)\r\n    })\r\n    .catch(err => {\r\n      this.trigger(CAT.SHOW_MODAL_DIALOG, {\r\n        modalDialogType: 'alert',\r\n        alertCaption: 'Failed Load',\r\n        alertDescr: err.message\r\n      })\r\n    });\r\n  },\r\n\r\n  onCloseChartContainer(chartType, browserType){\r\n    this.uncheckActiveContChb(chartType);\r\n    this.uncheckActiveCheckbox(chartType);\r\n    if(this.isWithItemCounter(browserType)){\r\n      this.setMenuItemClose(chartType, browserType);\r\n      this.trigger(BAT_UPDATE_BROWSER_MENU, browserType);\r\n    }\r\n  },\r\n  onCloseChartContainer2(chartType, browserType){\r\n    this.trigger(CAT.CLOSE_CHART_CONTAINER_2, chartType);\r\n  },\r\n  onSetActiveContainer(isCheck, checkBox){\r\n    ChbContLogic.toggle(this, { isCheck, checkBox })\r\n  },\r\n  uncheckActiveContChb(chartType){\r\n    ChbContLogic.uncheckActive(this, chartType)\r\n  },\r\n\r\n  isLoadToChart(){\r\n    if (this.activeChart){\r\n      return this.activeChart.options.zhConfig.id;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  getActiveChart(){\r\n    return this.activeChart;\r\n  },\r\n  onSetActiveCheckbox(isCheck, checkBox, chart){\r\n    CheckBoxChartLogic.toggle(this, {isCheck, checkBox, chart})\r\n  },\r\n  uncheckActiveCheckbox(chartType){\r\n    CheckBoxChartLogic.uncheckActive(this, chartType)\r\n  },\r\n\r\n  onShowModalDialog(modalDialogType, option={}){\r\n    option.modalDialogType = modalDialogType;\r\n    this.trigger(CAT.SHOW_MODAL_DIALOG, option);\r\n  },\r\n\r\n  onChangeTheme(themeName){\r\n    this.trigger(CAT.CHANGE_THEME, themeName)\r\n  }\r\n}\r\n\r\nexport default ComponentSlice\r\n"],"file":"ComponentSlice.js"}