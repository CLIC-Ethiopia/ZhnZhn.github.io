{"version":3,"sources":["../../../src/flux/stores/ComponentSlice.js"],"names":["ItemDialogLogic","showItemDialog","slice","itemConf","type","browserType","conf","Promise","resolve","key","createDialog","then","Comp","showOptionDialog","options","data","dialogType","createOptionDialog","CheckBoxChartLogic","toggle","isCheck","checkBox","chart","activeCheckbox","setUnchecked","activeChart","uncheckActive","chartType","ComponentSlice","dialogInit","onShowAbout","trigger","SHOW_ABOUT","onShowDialog","SHOW_DIALOG","r","onCloseDialog","CLOSE_DIALOG","caption","props","onShowOptionDialog","option","catch","SHOW_MODAL_DIALOG","modalDialogType","alertCaption","alertDescr","err","message","isLoadToChart","zhConfig","id","getActiveChart","onSetActiveCheckbox","uncheckActiveCheckbox","onShowModalDialog"],"mappings":"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","file":"ComponentSlice.js","sourcesContent":["\r\nimport {ComponentActionTypes} from '../actions/ComponentActions';\r\nimport Factory from '../logic/Factory';\r\n\r\nconst ItemDialogLogic = {\r\n\r\n  showItemDialog(slice, itemConf){\r\n    const { type , browserType, conf } = itemConf;\r\n    if (slice[type]){\r\n      return Promise.resolve({ key: type });\r\n    } else {\r\n      return Factory.createDialog(type, browserType, conf)\r\n        .then(Comp => {\r\n             slice[type] = true\r\n             return { key:type, Comp };\r\n         });\r\n    }\r\n  },\r\n\r\n  showOptionDialog(slice, options){\r\n    const { type, data } = options;\r\n    if (slice[type]) {\r\n      return Promise.resolve({ key: type, data });\r\n    } else {\r\n      options.dialogType = type\r\n      return Factory.createOptionDialog(options)\r\n         .then(Comp => {\r\n             slice[type] = true\r\n             return { key: type, Comp, data };\r\n         })\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst CheckBoxChartLogic = {\r\n  toggle(slice, options){\r\n    const { isCheck, checkBox, chart } = options;\r\n    if (isCheck){\r\n       const activeCheckbox = slice.activeCheckbox;\r\n       if (activeCheckbox && activeCheckbox !== checkBox){\r\n          activeCheckbox.setUnchecked()\r\n       }\r\n       slice.activeCheckbox = checkBox\r\n       slice.activeChart = chart\r\n    } else {\r\n      slice.activeCheckbox = null\r\n      slice.activeChart = null\r\n    }\r\n  },\r\n\r\n  uncheckActive(slice, chartType){\r\n    const activeCheckbox = slice.activeCheckbox;\r\n    if ( activeCheckbox && activeCheckbox.chartType === chartType ){\r\n       activeCheckbox.setUnchecked()\r\n       slice.activeCheckbox = null\r\n       slice.activeChart = null\r\n    }\r\n  }\r\n}\r\n\r\nconst ComponentSlice = {\r\n  dialogInit : {},\r\n  onShowAbout(){\r\n    this.trigger(ComponentActionTypes.SHOW_ABOUT);\r\n  },\r\n\r\n  onShowDialog(type, browserType, conf){    \r\n    ItemDialogLogic.showItemDialog(\r\n      this.dialogInit, { type, browserType, conf }\r\n    ).then(r => {\r\n       this.trigger(ComponentActionTypes.SHOW_DIALOG, r)\r\n    });\r\n  },\r\n\r\n  onCloseDialog(Comp) {\r\n    this.trigger(ComponentActionTypes.CLOSE_DIALOG, {\r\n      type: Comp.key,\r\n      caption: Comp.props.caption\r\n    })\r\n  },\r\n\r\n  onShowOptionDialog(type, option){\r\n    ItemDialogLogic.showOptionDialog(\r\n      this.dialogInit, { type, data: option }\r\n    ).then(r => {\r\n      this.trigger(ComponentActionTypes.SHOW_DIALOG, r)\r\n    })\r\n    .catch(err => {\r\n      this.trigger(ComponentActionTypes.SHOW_MODAL_DIALOG, {\r\n        modalDialogType: 'alert',\r\n        alertCaption: 'Failed Load',\r\n        alertDescr: err.message\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isLoadToChart(){\r\n    if (this.activeChart){\r\n      return this.activeChart.options.zhConfig.id;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  getActiveChart(){\r\n    return this.activeChart;\r\n  },\r\n  onSetActiveCheckbox(isCheck, checkBox, chart){\r\n    CheckBoxChartLogic.toggle(this, {isCheck, checkBox, chart})\r\n  },\r\n  uncheckActiveCheckbox(chartType){\r\n    CheckBoxChartLogic.uncheckActive(this, chartType)\r\n  },\r\n\r\n  onShowModalDialog(modalDialogType, option={}){\r\n    option.modalDialogType = modalDialogType;\r\n    this.trigger(ComponentActionTypes.SHOW_MODAL_DIALOG, option);\r\n  }\r\n}\r\n\r\nexport default ComponentSlice\r\n"]}