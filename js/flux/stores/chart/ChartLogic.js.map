{"version":3,"sources":["../../../../src/flux/stores/chart/ChartLogic.js"],"names":["createChartContainer","Factory","_isArr","Array","isArray","_isStr","str","_getSlice","slice","chartType","activeContChb","_cT","chartSlice","configs","_notConfById","id","c","zhConfig","_confById","_isSecondDotCase","series","seriaType","type","length","ChartLogic","_initChartSlice","config","isShow","isChartExist","key","_max","i","loadConfig","option","unshift","Comp","showChart","browserType","conf","removeConfig","filter","isRemoved","toTop","_conf","find","withoutArr","sortBy","by","sort","reverse","removeAll","_slice","checkBrowserChartTypes","chb","scanPostAdded","store","chart","getActiveChart","trigger","CAT","SHOW_MODAL_DIALOG","modalDialogType","MD","COLUMN_RANGE","setAlertItemIdTo","alertItemId","value"],"mappings":"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","sourcesContent":["import { ModalDialog as MD } from '../../../constants/Type'\r\n\r\nimport { ComponentActionTypes as CAT } from '../../actions/ComponentActions';\r\nimport Factory from '../../logic/Factory';\r\n\r\nimport fCompareBy from './fCompareBy'\r\n\r\nconst { createChartContainer } = Factory;\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst _getSlice = (slice, chartType) => {\r\n  const { activeContChb } = slice\r\n  , _cT = activeContChb\r\n     ? activeContChb.chartType || chartType\r\n     : chartType\r\n  , chartSlice = slice[_cT]\r\n  , { configs } = chartSlice || {};\r\n  return { chartSlice, configs };\r\n};\r\n\r\nconst _notConfById = id => c => c.zhConfig.id !== id\r\nconst _confById = id => c => c.zhConfig.id === id\r\n\r\nconst _isSecondDotCase = (series, { seriaType }) => seriaType === 'DOT_SET'\r\n  && _isArr(series)\r\n  && series[0].type === 'scatter'\r\n  && series.length === 2;\r\n\r\nconst ChartLogic = {\r\n  _initChartSlice(slice, chartType, config){\r\n    if (!slice[chartType]) {\r\n      slice[chartType] = {\r\n        chartType,\r\n        configs: config ? [config] : [],\r\n        isShow: true\r\n      }\r\n    }\r\n  },\r\n\r\n  isChartExist(slice, chartType, key){    \r\n    const {\r\n            chartSlice, configs\r\n          } = _getSlice(slice, chartType)\r\n    if (!chartSlice){\r\n      return false;\r\n    }\r\n    const _max = configs.length;\r\n    let i = 0;\r\n    for (; i<_max; i++){\r\n      if (configs[i].zhConfig.key === key){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n\r\n  loadConfig(slice, config, option){\r\n    const { chartType } = option\r\n        , {\r\n            chartSlice, configs\r\n          } = _getSlice(slice, chartType);\r\n    if (chartSlice){\r\n      configs.unshift(config);\r\n      chartSlice.isShow = true;\r\n      return { chartSlice };\r\n    } else {\r\n      ChartLogic._initChartSlice(slice, chartType, config)\r\n      return {\r\n        Comp: createChartContainer(option)\r\n      };\r\n    }\r\n },\r\n showChart(slice, chartType, browserType, conf){\r\n   const { chartSlice } = _getSlice(slice, chartType);\r\n   if (chartSlice){\r\n     chartSlice.isShow = true;\r\n     return { chartSlice };\r\n   } else {\r\n     ChartLogic._initChartSlice(slice, chartType)\r\n     return {\r\n       Comp: createChartContainer({ chartType, browserType, conf })\r\n     };\r\n   }\r\n },\r\n\r\n  removeConfig(slice, chartType, id) {\r\n    const {\r\n        chartSlice, configs\r\n    } = _getSlice(slice, chartType);\r\n\r\n    chartSlice.configs = configs\r\n       .filter(_notConfById(id))\r\n\r\n    return {\r\n      chartSlice,\r\n      isRemoved: configs.length > chartSlice.configs.length\r\n    };\r\n  },\r\n\r\n  toTop(slice, chartType, id){\r\n    const {\r\n            chartSlice, configs\r\n          } = _getSlice(slice, chartType)\r\n        , _conf = configs.find(_confById(id));\r\n    if (_conf) {\r\n      const withoutArr = configs.filter(_notConfById(id));\r\n      chartSlice.configs = [ _conf, ...withoutArr]\r\n    }\r\n\r\n    return chartSlice;\r\n  },\r\n\r\n  sortBy(slice, chartType, by){\r\n    const {\r\n            chartSlice, configs\r\n          } = _getSlice(slice, chartType);\r\n    if (by) {\r\n      configs.sort(fCompareBy(by))\r\n    } else {\r\n      configs.reverse()\r\n    }\r\n    return chartSlice;\r\n  },\r\n  removeAll(slice, chartType){\r\n    const _slice = slice[chartType] || {}\r\n    _slice.configs = []\r\n    return _slice;\r\n  },\r\n\r\n  checkBrowserChartTypes(slice, option){\r\n    const { activeContChb:chb } = slice;\r\n    if (chb) {\r\n      option.chartType = chb.chartType\r\n      option.browserType = chb.browserType\r\n    }\r\n  },\r\n\r\n  scanPostAdded(store, option) {\r\n    const chart = store.getActiveChart();\r\n    if (chart && _isSecondDotCase(chart.series, option)) {\r\n      store.trigger(CAT.SHOW_MODAL_DIALOG, {\r\n        modalDialogType: MD.COLUMN_RANGE,\r\n        chart\r\n      });\r\n    }\r\n  },\r\n\r\n  setAlertItemIdTo(option){\r\n    const { alertItemId, value } = option;\r\n    option.alertItemId = _isStr(alertItemId)\r\n      ? alertItemId\r\n      : _isStr(value) ? value : void 0;\r\n  }\r\n};\r\n\r\nexport default ChartLogic\r\n"],"file":"ChartLogic.js"}