{"version":3,"sources":["../../../../src/flux/stores/chart/ChartLogic.js"],"names":["crItemContainerEl","fItemContainer","_isArr","Array","isArray","_isStr","str","_isSecondDotCase","series","seriaType","type","length","_initChartSlice","slice","chartType","config","configs","isShow","loadConfig","option","dialogConf","store","browserType","chartSlice","unshift","Comp","showChart","sortBy","by","sort","reverse","checkBrowserChartTypes","activeContChb","chb","scanPostAdded","chart","getActiveChart","trigger","CAT","SHOW_MODAL_DIALOG","modalDialogType","MD","COLUMN_RANGE","setAlertItemIdTo","alertItemId","value"],"mappings":"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","sourcesContent":["export {\r\n  isChartExist,\r\n  removeConfig,\r\n  toTop,\r\n  removeAll,\r\n  updateMovingValues\r\n} from './ChartLogicFn';\r\n\r\nimport { ModalDialog as MD } from '../../../constants/Type'\r\n\r\nimport { ComponentActionTypes as CAT } from '../../actions/ComponentActions';\r\nimport fItemContainer from '../../logic/fItemContainer';\r\n\r\nimport getSlice from './getSlice';\r\nimport fCompareBy from './fCompareBy';\r\n\r\nconst { crItemContainerEl } = fItemContainer;\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst _isSecondDotCase = (series, { seriaType }) => seriaType === 'DOT_SET'\r\n  && _isArr(series)\r\n  && series[0].type === 'scatter'\r\n  && series.length === 2;\r\n\r\nconst _initChartSlice = (\r\n  slice,\r\n  chartType,\r\n  config\r\n) => {\r\n  if (!slice[chartType]) {\r\n    slice[chartType] = {\r\n      chartType,\r\n      configs: config ? [config] : [],\r\n      isShow: true\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadConfig = (\r\n  slice,\r\n  config,\r\n  option,\r\n  dialogConf,\r\n  store\r\n) => {\r\n    const {\r\n      chartType,\r\n      browserType\r\n    } = option\r\n    , {\r\n      chartSlice,\r\n      configs\r\n    } = getSlice(slice, chartType);\r\n    if (chartSlice){\r\n      configs.unshift(config);\r\n      chartSlice.isShow = true;\r\n      return { chartSlice };\r\n    } else {\r\n      _initChartSlice(slice, chartType, config)\r\n      return {\r\n        Comp: crItemContainerEl({ browserType, dialogConf, store })\r\n      };\r\n    }\r\n}\r\n\r\nexport const showChart = (\r\n  slice,\r\n  chartType,\r\n  browserType,\r\n  dialogConf,\r\n  store\r\n) => {\r\n   const { chartSlice } = getSlice(slice, chartType);\r\n   if (chartSlice){\r\n     chartSlice.isShow = true;\r\n     return { chartSlice };\r\n   } else {\r\n     _initChartSlice(slice, chartType)\r\n     return {\r\n       Comp: crItemContainerEl({ browserType, dialogConf, store })\r\n     };\r\n   }\r\n}\r\n\r\nexport const sortBy = (\r\n  slice,\r\n  chartType,\r\n  by\r\n) => {\r\n  const {\r\n    chartSlice,\r\n    configs\r\n  } = getSlice(slice, chartType);\r\n  if (by) {\r\n    configs.sort(fCompareBy(by))\r\n  } else {\r\n    configs.reverse()\r\n  }\r\n  return chartSlice;\r\n}\r\n\r\nexport const checkBrowserChartTypes = (\r\n  slice,\r\n  option\r\n) => {\r\n  const { activeContChb:chb } = slice;\r\n  if (chb) {\r\n    option.chartType = chb.chartType\r\n    option.browserType = chb.browserType\r\n  }\r\n}\r\n\r\nexport const scanPostAdded = (\r\n  store,\r\n  option\r\n) => {\r\n  const chart = store.getActiveChart();\r\n  if (chart && _isSecondDotCase(chart.series, option)) {\r\n    store.trigger(CAT.SHOW_MODAL_DIALOG, {\r\n      modalDialogType: MD.COLUMN_RANGE,\r\n      chart\r\n    });\r\n  }\r\n}\r\n\r\nexport const setAlertItemIdTo = (\r\n  option\r\n) => {\r\n  const { alertItemId, value } = option;\r\n  option.alertItemId = _isStr(alertItemId)\r\n    ? alertItemId\r\n    : _isStr(value) ? value : void 0;\r\n}\r\n"],"file":"ChartLogic.js"}