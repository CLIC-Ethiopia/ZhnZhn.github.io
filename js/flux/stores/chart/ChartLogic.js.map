{"version":3,"sources":["../../../../src/flux/stores/chart/ChartLogic.js"],"names":["crItemContainerEl","fItemContainer","_isArr","Array","isArray","_isStr","str","_isSecondDotCase","series","seriaType","type","length","ChartLogic","ChartLogicFn","_initChartSlice","slice","chartType","config","configs","isShow","loadConfig","option","dialogConf","store","browserType","chartSlice","unshift","Comp","showChart","sortBy","by","sort","reverse","checkBrowserChartTypes","chb","activeContChb","scanPostAdded","chart","getActiveChart","trigger","CAT","SHOW_MODAL_DIALOG","modalDialogType","MD","COLUMN_RANGE","setAlertItemIdTo","alertItemId","value"],"mappings":"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","sourcesContent":["import { ModalDialog as MD } from '../../../constants/Type'\r\n\r\nimport { ComponentActionTypes as CAT } from '../../actions/ComponentActions';\r\nimport fItemContainer from '../../logic/fItemContainer'\r\n\r\nimport _getSlice from './getSlice'\r\nimport fCompareBy from './fCompareBy'\r\nimport ChartLogicFn from './ChartLogicFn'\r\n\r\nconst { crItemContainerEl } = fItemContainer;\r\n\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst _isSecondDotCase = (series, { seriaType }) => seriaType === 'DOT_SET'\r\n  && _isArr(series)\r\n  && series[0].type === 'scatter'\r\n  && series.length === 2;\r\n\r\nconst ChartLogic = {\r\n  ...ChartLogicFn,\r\n\r\n  _initChartSlice(slice, chartType, config){\r\n    if (!slice[chartType]) {\r\n      slice[chartType] = {\r\n        chartType,\r\n        configs: config ? [config] : [],\r\n        isShow: true\r\n      }\r\n    }\r\n  },\r\n\r\n\r\n  loadConfig(slice, config, option, dialogConf, store){\r\n    const { chartType, browserType } = option\r\n    , { chartSlice, configs } = _getSlice(slice, chartType);\r\n    if (chartSlice){\r\n      configs.unshift(config);\r\n      chartSlice.isShow = true;\r\n      return { chartSlice };\r\n    } else {\r\n      ChartLogic._initChartSlice(slice, chartType, config)\r\n      return {\r\n        Comp: crItemContainerEl({ browserType, dialogConf, store })\r\n      };\r\n    }\r\n },\r\n showChart(slice, chartType, browserType, dialogConf, store){\r\n   const { chartSlice } = _getSlice(slice, chartType);\r\n   if (chartSlice){\r\n     chartSlice.isShow = true;\r\n     return { chartSlice };\r\n   } else {\r\n     ChartLogic._initChartSlice(slice, chartType)\r\n     return {\r\n       Comp: crItemContainerEl({ browserType, dialogConf, store })\r\n     };\r\n   }\r\n },\r\n\r\n  sortBy(slice, chartType, by){\r\n    const {\r\n       chartSlice, configs\r\n    } = _getSlice(slice, chartType);\r\n    if (by) {\r\n      configs.sort(fCompareBy(by))\r\n    } else {\r\n      configs.reverse()\r\n    }\r\n    return chartSlice;\r\n  },\r\n\r\n  checkBrowserChartTypes(slice, option){\r\n    const { activeContChb:chb } = slice;\r\n    if (chb) {\r\n      option.chartType = chb.chartType\r\n      option.browserType = chb.browserType\r\n    }\r\n  },\r\n\r\n  scanPostAdded(store, option) {\r\n    const chart = store.getActiveChart();\r\n    if (chart && _isSecondDotCase(chart.series, option)) {\r\n      store.trigger(CAT.SHOW_MODAL_DIALOG, {\r\n        modalDialogType: MD.COLUMN_RANGE,\r\n        chart\r\n      });\r\n    }\r\n  },\r\n\r\n  setAlertItemIdTo(option){\r\n    const { alertItemId, value } = option;\r\n    option.alertItemId = _isStr(alertItemId)\r\n      ? alertItemId\r\n      : _isStr(value) ? value : void 0;\r\n  }\r\n};\r\n\r\nexport default ChartLogic\r\n"],"file":"ChartLogic.js"}