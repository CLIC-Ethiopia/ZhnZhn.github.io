{"version":3,"sources":["../../../../../src/flux/stores/chart/__test__/ChartLogicFn.test.js"],"names":["isChartExist","ChartLogicFn","removeConfig","toTop","removeAll","updateMovingValues","CHART_TYPE","_crChartsConfig","chartType","configs","valueMoving","zhConfig","key","id","_getVm","chartsConfig","index","describe","test","_chartsConfig","expect","toBe","_NOT_EXIST_CHART_TYPE","_idOrKey","chartSlice","isRemoved","not","length","VM0","value","VM1","VM2","_prevVm0","_prevVm1"],"mappings":"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","sourcesContent":["import ChartLogicFn from '../ChartLogicFn'\r\n\r\nconst {\r\n  isChartExist,\r\n  removeConfig,\r\n  toTop,\r\n  removeAll,\r\n  updateMovingValues\r\n} = ChartLogicFn;\r\n\r\nconst CHART_TYPE = \"AA_BB\";\r\nconst _crChartsConfig = (chartType=CHART_TYPE) => ({\r\n  [chartType]: {\r\n    chartType,\r\n    configs: [{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k1', id: 'k1'}\r\n    },{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k2', id: 'k2'}\r\n    },{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k3', id: 'k3'}\r\n    }]\r\n  }\r\n})\r\n\r\nconst _getVm = (chartsConfig, chartType, index) => chartsConfig[chartType]\r\n  .configs[index].valueMoving;\r\n\r\ndescribe('isChartExist', ()=>{\r\n  test('should return true if config for chartType and key exists', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k1\")).toBe(true)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k2\")).toBe(true)\r\n  })\r\n  test('should return false if config for chartType and key does not exist', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k5\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k6\")).toBe(false)\r\n  })\r\n  test('should return false if configs for chartType does not exist', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    const _NOT_EXIST_CHART_TYPE = 'NOT_EXIST_'+CHART_TYPE;\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k1\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k2\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k5\")).toBe(false)\r\n  })\r\n})\r\n\r\ndescribe('removeConfig', ()=>{\r\n  test('should remove config from configs by id', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k1'\r\n\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(true)\r\n    const { chartSlice, isRemoved } = removeConfig(_chartsConfig, CHART_TYPE, _idOrKey)\r\n\r\n    expect(isRemoved).toBe(true)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    expect(chartSlice).toBe(_chartsConfig[CHART_TYPE])\r\n\r\n  })\r\n  test('should return object with isRemoved false for not existed id', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k5'\r\n\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    const { chartSlice, isRemoved } = removeConfig(_chartsConfig, CHART_TYPE, _idOrKey)\r\n\r\n    expect(isRemoved).toBe(false)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    expect(chartSlice).toBe(_chartsConfig[CHART_TYPE])\r\n  })\r\n})\r\n\r\ndescribe('toTop', ()=>{\r\n  test('should set and return chart slice with config on 0 index by chartType and id', () => {\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k3'\r\n\r\n    expect(_chartsConfig[CHART_TYPE].configs[0].zhConfig.id).not.toBe(_idOrKey)\r\n\r\n    const chartSlice = toTop(_chartsConfig, CHART_TYPE, _idOrKey)\r\n    expect(_chartsConfig[CHART_TYPE].configs[0].zhConfig.id).toBe(_idOrKey)\r\n    expect(chartSlice.configs[0].zhConfig.id).toBe(_idOrKey)\r\n  })\r\n})\r\n\r\ndescribe('removeAll', ()=>{\r\n  test('should set and return chartSlice with empty configs array',()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n\r\n    expect(_chartsConfig[CHART_TYPE].configs.length).not.toBe(0)\r\n\r\n    const chartSlice = removeAll(_chartsConfig, CHART_TYPE)\r\n    expect(_chartsConfig[CHART_TYPE].configs.length).toBe(0)\r\n    expect(chartSlice.configs.length).toBe(0)\r\n  })\r\n})\r\n\r\ndescribe('updateMovingValues', ()=>{\r\n  test('should update valueMoving for all configs', ()=>{\r\n    const VM0 = { value: \"1.01\"}\r\n    const VM1 = { value: \"2.02\"}\r\n    const VM2 = { value: \"3.03\"}\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n\r\n    updateMovingValues(_chartsConfig, CHART_TYPE, [ VM0, VM1, VM2 ])\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).toBe(VM0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).toBe(VM1)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 2)).toBe(VM2)\r\n  })\r\n\r\n  test('should not update valueMoving for configs if array lenghts not match', ()=>{\r\n    const VM0 = { value: \"1.01\"}\r\n    const VM1 = { value: \"2.02\"}\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _prevVm0 = _getVm(_chartsConfig, CHART_TYPE, 0)\r\n    const _prevVm1 = _getVm(_chartsConfig, CHART_TYPE, 1)\r\n\r\n    updateMovingValues(_chartsConfig, CHART_TYPE, [ VM0, VM1])\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).not.toBe(VM0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).toBe(_prevVm0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).not.toBe(VM1)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).toBe(_prevVm1)\r\n  })\r\n})\r\n"],"file":"ChartLogicFn.test.js"}