{"version":3,"sources":["../../../../../src/flux/stores/chart/__test__/ChartLogicFn.test.js"],"names":["CHART_TYPE","_crChartsConfig","chartType","configs","valueMoving","zhConfig","key","id","_getVm","chartsConfig","index","describe","test","_chartsConfig","expect","toBe","_NOT_EXIST_CHART_TYPE","_idOrKey","chartSlice","isRemoved","not","length","VM0","value","VM1","VM2","_prevVm0","_prevVm1"],"mappings":"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","sourcesContent":["import {\r\n  isChartExist,\r\n  removeConfig,\r\n  toTop,\r\n  removeAll,\r\n  updateMovingValues\r\n} from '../ChartLogicFn';\r\n\r\nconst CHART_TYPE = \"AA_BB\";\r\nconst _crChartsConfig = (chartType=CHART_TYPE) => ({\r\n  [chartType]: {\r\n    chartType,\r\n    configs: [{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k1', id: 'k1'}\r\n    },{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k2', id: 'k2'}\r\n    },{\r\n      valueMoving: {},\r\n      zhConfig: { key: 'k3', id: 'k3'}\r\n    }]\r\n  }\r\n})\r\n\r\nconst _getVm = (chartsConfig, chartType, index) => chartsConfig[chartType]\r\n  .configs[index].valueMoving;\r\n\r\ndescribe('isChartExist', ()=>{\r\n  test('should return true if config for chartType and key exists', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k1\")).toBe(true)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k2\")).toBe(true)\r\n  })\r\n  test('should return false if config for chartType and key does not exist', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k5\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, \"k6\")).toBe(false)\r\n  })\r\n  test('should return false if configs for chartType does not exist', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE);\r\n    const _NOT_EXIST_CHART_TYPE = 'NOT_EXIST_'+CHART_TYPE;\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k1\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k2\")).toBe(false)\r\n    expect(isChartExist(_chartsConfig, _NOT_EXIST_CHART_TYPE, \"k5\")).toBe(false)\r\n  })\r\n})\r\n\r\ndescribe('removeConfig', ()=>{\r\n  test('should remove config from configs by id', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k1'\r\n\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(true)\r\n    const { chartSlice, isRemoved } = removeConfig(_chartsConfig, CHART_TYPE, _idOrKey)\r\n\r\n    expect(isRemoved).toBe(true)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    expect(chartSlice).toBe(_chartsConfig[CHART_TYPE])\r\n\r\n  })\r\n  test('should return object with isRemoved false for not existed id', ()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k5'\r\n\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    const { chartSlice, isRemoved } = removeConfig(_chartsConfig, CHART_TYPE, _idOrKey)\r\n\r\n    expect(isRemoved).toBe(false)\r\n    expect(isChartExist(_chartsConfig, CHART_TYPE, _idOrKey)).toBe(false)\r\n    expect(chartSlice).toBe(_chartsConfig[CHART_TYPE])\r\n  })\r\n})\r\n\r\ndescribe('toTop', ()=>{\r\n  test('should set and return chart slice with config on 0 index by chartType and id', () => {\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _idOrKey = 'k3'\r\n\r\n    expect(_chartsConfig[CHART_TYPE].configs[0].zhConfig.id).not.toBe(_idOrKey)\r\n\r\n    const chartSlice = toTop(_chartsConfig, CHART_TYPE, _idOrKey)\r\n    expect(_chartsConfig[CHART_TYPE].configs[0].zhConfig.id).toBe(_idOrKey)\r\n    expect(chartSlice.configs[0].zhConfig.id).toBe(_idOrKey)\r\n  })\r\n})\r\n\r\ndescribe('removeAll', ()=>{\r\n  test('should set and return chartSlice with empty configs array',()=>{\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n\r\n    expect(_chartsConfig[CHART_TYPE].configs.length).not.toBe(0)\r\n\r\n    const chartSlice = removeAll(_chartsConfig, CHART_TYPE)\r\n    expect(_chartsConfig[CHART_TYPE].configs.length).toBe(0)\r\n    expect(chartSlice.configs.length).toBe(0)\r\n  })\r\n})\r\n\r\ndescribe('updateMovingValues', ()=>{\r\n  test('should update valueMoving for all configs', ()=>{\r\n    const VM0 = { value: \"1.01\"}\r\n    const VM1 = { value: \"2.02\"}\r\n    const VM2 = { value: \"3.03\"}\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n\r\n    updateMovingValues(_chartsConfig, CHART_TYPE, [ VM0, VM1, VM2 ])\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).toBe(VM0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).toBe(VM1)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 2)).toBe(VM2)\r\n  })\r\n\r\n  test('should not update valueMoving for configs if array lenghts not match', ()=>{\r\n    const VM0 = { value: \"1.01\"}\r\n    const VM1 = { value: \"2.02\"}\r\n    const _chartsConfig = _crChartsConfig(CHART_TYPE)\r\n    const _prevVm0 = _getVm(_chartsConfig, CHART_TYPE, 0)\r\n    const _prevVm1 = _getVm(_chartsConfig, CHART_TYPE, 1)\r\n\r\n    updateMovingValues(_chartsConfig, CHART_TYPE, [ VM0, VM1])\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).not.toBe(VM0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 0)).toBe(_prevVm0)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).not.toBe(VM1)\r\n    expect(_getVm(_chartsConfig, CHART_TYPE, 1)).toBe(_prevVm1)\r\n  })\r\n})\r\n"],"file":"ChartLogicFn.test.js"}