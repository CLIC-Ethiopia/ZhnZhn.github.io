{"version":3,"sources":["../../../src/flux/stores/ChartStore.js"],"names":["EVENT_ACTION","LOAD","ADD","CONSOLE_LOG_STYLE","_fnLogLoadError","alertCaption","alertDescr","alertItemId","console","log","ChartStore","createStore","listenables","charts","init","initWatchList","listen","fnOnChangeStore","createInitConfig","chartType","configs","isShow","getConfigs","isChartExist","key","i","max","length","zhConfig","showAlertDialog","option","modalDialogType","ALERT","trigger","SHOW_MODAL_DIALOG","onLoadStock","LOAD_STOCK","onLoadStockCompleted","config","browserType","zhCompType","addMenuItemCounter","chartCont","unshift","LOAD_STOCK_COMPLETED","triggerWithLimitRemaining","limitRemaining","INIT_AND_SHOW_CHART","createChartContainer","UPDATE_BROWSER_MENU","analyticSendEvent","eventAction","eventLabel","onLoadStockAdded","LOAD_STOCK_ADDED","onLoadStockFailed","LOAD_STOCK_FAILED","value","onShowChart","setMenuItemOpen","SHOW_CHART","onCloseChart","chartId","minusMenuItemCounter","filter","id","activeChart","options","CLOSE_CHART","onCloseChartContainer","uncheckActiveCheckbox","isWithItemCounter","setMenuItemClose","onCloseChartContainer2","CLOSE_CHART_CONTAINER_2"],"mappings":"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","file":"ChartStore.js","sourcesContent":["import Reflux from 'reflux';\r\n\r\nimport ChartActions, {ChartActionTypes} from '../actions/ChartActions';\r\nimport ComponentActions, {ComponentActionTypes} from '../actions/ComponentActions';\r\nimport BrowserActions, {BrowserActionTypes} from '../actions/BrowserActions';\r\nimport AnalyticActions from '../actions/AnalyticActions';\r\nimport WatchActions from '../actions/WatchActions';\r\n\r\nimport { ModalDialog } from '../../constants/Type';\r\n\r\nimport Factory from '../logic/Factory';\r\n\r\nimport BrowserSlice from './BrowserSlice';\r\nimport ComponentSlice from './ComponentSlice';\r\nimport SettingSlice from './SettingSlice';\r\nimport AnalyticSlice from './AnalyticSlice';\r\nimport WatchListSlice from '../watch-list/WatchListSlice';\r\nimport WithLimitRemaining from './WithLimitRemaining';\r\n\r\nconst EVENT_ACTION = {\r\n  LOAD : 'Load',\r\n  ADD  : 'Add'\r\n}\r\n\r\nconst CONSOLE_LOG_STYLE = 'color:rgb(237, 88, 19);';\r\nconst _fnLogLoadError = function({\r\n  alertCaption, alertDescr, alertItemId\r\n}){\r\n  console.log('%c'+ alertCaption + ':' + alertItemId, CONSOLE_LOG_STYLE);\r\n  console.log('%c' + alertDescr, CONSOLE_LOG_STYLE);\r\n}\r\n\r\n\r\nconst ChartStore = Reflux.createStore({\r\n  listenables : [\r\n     ChartActions, ComponentActions, BrowserActions, AnalyticActions, WatchActions\r\n  ],\r\n  charts : {},\r\n  init(){\r\n    this.initWatchList();\r\n    this.listen(ChartActions.fnOnChangeStore);\r\n  },\r\n\r\n createInitConfig(chartType){\r\n   return {chartType: chartType, configs: [], isShow: true};\r\n },\r\n getConfigs(chartType){\r\n   return this.charts[chartType];\r\n },\r\n isChartExist(chartType, key){\r\n   if (!this.charts[chartType]){\r\n     return false;\r\n   }\r\n   const configs = this.charts[chartType].configs;\r\n   for (var i=0, max=configs.length; i<max; i++){\r\n     if (configs[i].zhConfig.key === key){\r\n       return true;\r\n     }\r\n   }\r\n   return false;\r\n },\r\n showAlertDialog(option={}){\r\n   option.modalDialogType = ModalDialog.ALERT;\r\n   this.trigger(ComponentActionTypes.SHOW_MODAL_DIALOG, option);\r\n },\r\n\r\n onLoadStock(){\r\n   this.trigger(ChartActionTypes.LOAD_STOCK);\r\n },\r\n onLoadStockCompleted(option, config){\r\n     const { chartType, browserType, zhCompType } = option;\r\n     if (zhCompType){\r\n       config.zhCompType = zhCompType;\r\n     }\r\n\r\n     this.addMenuItemCounter(chartType, browserType);\r\n\r\n     const chartCont = this.charts[chartType];\r\n     if (chartCont){\r\n       chartCont.configs.unshift(config);\r\n       chartCont.isShow = true;\r\n\r\n       this.trigger(ChartActionTypes.LOAD_STOCK_COMPLETED, chartCont);\r\n       this.triggerWithLimitRemaining(config.zhConfig.limitRemaining);\r\n     } else {\r\n      this.charts[chartType] = this.createInitConfig(chartType);\r\n      this.charts[chartType].configs.unshift(config);\r\n\r\n      this.trigger(ChartActionTypes.LOAD_STOCK_COMPLETED);\r\n      this.trigger(ChartActionTypes.INIT_AND_SHOW_CHART,\r\n                  Factory.createChartContainer(chartType, browserType));\r\n      this.triggerWithLimitRemaining(config.zhConfig.limitRemaining);\r\n    }\r\n\r\n    this.trigger(BrowserActionTypes.UPDATE_BROWSER_MENU, browserType);\r\n    this.analyticSendEvent({\r\n       eventAction : EVENT_ACTION.LOAD,\r\n       eventLabel : chartType\r\n     });\r\n },\r\n onLoadStockAdded(option={}){\r\n    const { chartType } = option;\r\n    this.trigger(ChartActionTypes.LOAD_STOCK_ADDED);\r\n    this.analyticSendEvent({\r\n       eventAction : EVENT_ACTION.ADD,\r\n       eventLabel : chartType\r\n     });\r\n },\r\n onLoadStockFailed(option){\r\n   this.trigger(ChartActionTypes.LOAD_STOCK_FAILED, option);\r\n   option.alertItemId = (option.alertItemId)\r\n             ? option.alertItemId\r\n             : option.value;\r\n   this.showAlertDialog(option);\r\n   _fnLogLoadError(option);\r\n },\r\n\r\n onShowChart(chartType, browserType){\r\n   this.setMenuItemOpen(chartType, browserType);\r\n\r\n   const chartCont = this.charts[chartType];\r\n   if (chartCont){\r\n     chartCont.isShow = true;\r\n     this.trigger(ChartActionTypes.SHOW_CHART, chartCont);\r\n     this.trigger(BrowserActionTypes.UPDATE_BROWSER_MENU, browserType);\r\n   } else {\r\n     this.charts[chartType] = this.createInitConfig(chartType);\r\n     this.trigger(ChartActionTypes.INIT_AND_SHOW_CHART,\r\n                  Factory.createChartContainer(chartType, browserType));\r\n     this.trigger(BrowserActionTypes.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n\r\n },\r\n\r\n onCloseChart(chartType, browserType, chartId){\r\n\r\n   this.minusMenuItemCounter(chartType, browserType);\r\n\r\n   const chartCont = this.charts[chartType];\r\n   chartCont.configs = chartCont.configs.filter(function(config){\r\n     return config.zhConfig.id !== chartId;\r\n   });\r\n\r\n   if (this.activeChart && this.activeChart.options.zhConfig.id === chartId){\r\n     this.activeChart = null;\r\n     this.activeChart = null;\r\n   }\r\n   this.trigger(ChartActionTypes.CLOSE_CHART, chartCont);\r\n   this.trigger(BrowserActionTypes.UPDATE_BROWSER_MENU, browserType);\r\n },\r\n\r\n onCloseChartContainer(chartType, browserType){\r\n   this.uncheckActiveCheckbox(chartType);\r\n   if(this.isWithItemCounter(browserType)){\r\n     this.setMenuItemClose(chartType, browserType);\r\n     this.trigger(BrowserActionTypes.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n },\r\n onCloseChartContainer2(chartType, browserType){\r\n   this.trigger(ComponentActionTypes.CLOSE_CHART_CONTAINER_2, chartType);\r\n },\r\n\r\n ...BrowserSlice,\r\n ...ComponentSlice,\r\n ...SettingSlice,\r\n ...AnalyticSlice,\r\n ...WatchListSlice,\r\n ...WithLimitRemaining\r\n\r\n})\r\n\r\nexport default ChartStore\r\n"]}