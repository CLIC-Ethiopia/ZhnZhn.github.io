{"version":3,"sources":["../../../src/flux/stores/ChartSlice.js"],"names":["CONSOLE_LOG_STYLE","_logErrorToConsole","alertCaption","alertItemId","alertDescr","_title","filter","Boolean","join","console","log","ChartSlice","charts","getConfigs","chartType","isChartExist","option","key","onLoadItem","triggerLoadingProgress","LPAT_LOADING","onLoadItemCompleted","config","browserType","dialogConf","limitRemaining","_dialogConf","getDialogConf","chartSlice","Comp","addMenuItemCounter","trigger","CHAT_LOAD_COMPLETED","CHAT_INIT_AND_SHOW","LPAT_LOADING_COMPLETE","triggerLimitRemaining","BAT_UPDATE_BROWSER_MENU","onLoadItemAdded","onLoadItemFailed","LPAT_LOADING_FAILED","showAlertDialog","onLoadItemByQuery","onLoadItemByQueryCompleted","onLoadItemByQueryFailed","onShowChart","dialogConfOr","setMenuItemOpen","CHAT_SHOW","resetActiveChart","id","activeChart","options","zhConfig","onCloseChart","chartId","isRemoved","minusMenuItemCounter","CHAT_CLOSE","onToTop","onCopy","chart","fromChart","getCopyFromChart","onUpdateMovingValues","movingValues","onSortBy","by","onRemoveAll","resetMenuItemCounter","uncheckActiveCheckbox"],"mappings":"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","sourcesContent":["import {\r\n  LPAT_LOADING,\r\n  LPAT_LOADING_COMPLETE,\r\n  LPAT_LOADING_FAILED\r\n} from '../actions/LoadingProgressActions';\r\nimport {\r\n  CHAT_LOAD_COMPLETED,\r\n  CHAT_INIT_AND_SHOW,\r\n  CHAT_SHOW,\r\n  CHAT_CLOSE\r\n} from '../actions/ChartActions';\r\nimport {\r\n  BAT_UPDATE_BROWSER_MENU\r\n} from '../actions/BrowserActions';\r\n\r\nimport {\r\n  isChartExist,\r\n  removeConfig,\r\n  toTop,\r\n  removeAll,\r\n  updateMovingValues,\r\n  loadConfig,\r\n  showChart,\r\n  sortBy,\r\n  checkBrowserChartTypes,\r\n  scanPostAdded,\r\n  setAlertItemIdTo\r\n} from './chart/ChartLogic';\r\n\r\n\r\nconst CONSOLE_LOG_STYLE = 'color:rgb(237, 88, 19);';\r\nconst _logErrorToConsole = function({\r\n  alertCaption,\r\n  alertItemId,\r\n  alertDescr,\r\n}){\r\n  const _title = [alertCaption, alertItemId]\r\n    .filter(Boolean)\r\n    .join(\": \");\r\n  console.log('%c'+ _title, CONSOLE_LOG_STYLE);\r\n  console.log('%c' + alertDescr, CONSOLE_LOG_STYLE);\r\n}\r\n\r\nconst ChartSlice = {\r\n  charts : {},\r\n\r\n  getConfigs(chartType){\r\n    return this.charts[chartType];\r\n  },\r\n  isChartExist(option){\r\n    checkBrowserChartTypes(this, option)\r\n    const { chartType, key } = option;\r\n    return isChartExist(this.charts, chartType, key);\r\n  },\r\n\r\n  onLoadItem(){\r\n    this.triggerLoadingProgress(LPAT_LOADING)\r\n  },\r\n  onLoadItemCompleted(option, config){\r\n      const {\r\n        chartType,\r\n        browserType,\r\n        dialogConf,\r\n        limitRemaining,\r\n        key\r\n      } = option;\r\n\r\n      if (isChartExist(this.charts, chartType, key)) {\r\n        return;\r\n      }\r\n\r\n      const _dialogConf = dialogConf\r\n        || this.getDialogConf(void 0, chartType)\r\n      , {\r\n        chartSlice,\r\n        Comp\r\n      } = loadConfig(this.charts, config, option, _dialogConf, this);\r\n\r\n      this.addMenuItemCounter(chartType, browserType);\r\n      if (chartSlice){\r\n        this.trigger(CHAT_LOAD_COMPLETED, chartSlice);\r\n      } else {\r\n        this.trigger(CHAT_INIT_AND_SHOW, Comp);\r\n      }\r\n      this.triggerLoadingProgress(LPAT_LOADING_COMPLETE)\r\n      this.triggerLimitRemaining(limitRemaining);\r\n      this.trigger(BAT_UPDATE_BROWSER_MENU, browserType);\r\n  },\r\n  onLoadItemAdded(option={}){\r\n     this.triggerLoadingProgress(LPAT_LOADING_COMPLETE)\r\n     scanPostAdded(this, option)\r\n  },\r\n  onLoadItemFailed(option){\r\n    this.triggerLoadingProgress(LPAT_LOADING_FAILED)\r\n    setAlertItemIdTo(option)\r\n    this.showAlertDialog(option);\r\n    _logErrorToConsole(option);\r\n  },\r\n\r\n  onLoadItemByQuery(){\r\n    this.onLoadItem()\r\n  },\r\n  onLoadItemByQueryCompleted(option, config){\r\n    this.onLoadItemCompleted(option, config)\r\n  },\r\n  onLoadItemByQueryFailed(option){\r\n    this.onLoadItemFailed(option)\r\n  },\r\n\r\n  onShowChart(chartType, browserType, dialogConfOr){\r\n    this.setMenuItemOpen(chartType, browserType);\r\n    const dialogConf = this.getDialogConf(dialogConfOr, chartType);\r\n    const {\r\n      chartSlice, Comp\r\n     } = showChart(this.charts, chartType, browserType, dialogConf, this);\r\n    if (chartSlice){\r\n      this.trigger(CHAT_SHOW, chartSlice);\r\n    } else {\r\n      this.trigger(CHAT_INIT_AND_SHOW, Comp)\r\n    }\r\n    this.trigger(BAT_UPDATE_BROWSER_MENU, browserType);\r\n  },\r\n\r\n  resetActiveChart(id){\r\n    if (\r\n      this.activeChart &&\r\n      this.activeChart.options.zhConfig.id === id\r\n    ){\r\n      this.activeChart = null;\r\n    }\r\n  },\r\n\r\n  onCloseChart(chartType, browserType, chartId){\r\n    const {\r\n            chartSlice, isRemoved\r\n          } = removeConfig(this.charts, chartType, chartId)\r\n\r\n    if (isRemoved) {\r\n      this.resetActiveChart(chartId)\r\n      this.minusMenuItemCounter(chartType, browserType);\r\n\r\n      this.trigger(CHAT_CLOSE, chartSlice);\r\n      this.trigger(BAT_UPDATE_BROWSER_MENU, browserType);\r\n    }\r\n  },\r\n\r\n  onToTop(chartType, id){\r\n    const chartSlice = toTop(this.charts, chartType, id)\r\n    this.trigger(CHAT_SHOW, chartSlice);\r\n  },\r\n\r\n  onCopy(chart){\r\n    this.fromChart = chart\r\n  },\r\n  getCopyFromChart(){\r\n    return this.fromChart;\r\n  },\r\n\r\n  onUpdateMovingValues(chartType, movingValues){\r\n    updateMovingValues(this.charts, chartType, movingValues)\r\n  },\r\n\r\n  onSortBy(chartType, by){\r\n    const chartSlice = sortBy(this.charts, chartType, by);\r\n    this.trigger(CHAT_SHOW, chartSlice);\r\n  },\r\n  onRemoveAll(chartType, browserType){\r\n    const chartSlice = removeAll(this.charts, chartType);\r\n    this.resetMenuItemCounter(chartType, browserType)\r\n    this.uncheckActiveCheckbox()\r\n    this.trigger(CHAT_SHOW, chartSlice);\r\n    this.trigger(BAT_UPDATE_BROWSER_MENU, browserType);\r\n  }\r\n\r\n};\r\n\r\nexport default ChartSlice\r\n"],"file":"ChartSlice.js"}