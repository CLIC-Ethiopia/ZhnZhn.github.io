{"version":3,"sources":["../../../src/flux/stores/ChartSlice.js"],"names":["isChartExist","ChartLogic","loadConfig","showChart","removeConfig","toTop","sortBy","removeAll","checkBrowserChartTypes","scanPostAdded","setAlertItemIdTo","CONSOLE_LOG_STYLE","_fnLogLoadError","alertCaption","alertDescr","alertItemId","console","log","ChartSlice","charts","getConfigs","chartType","option","key","onLoadStock","triggerLoadingProgress","LPA","LOADING","onLoadStockCompleted","config","browserType","limitRemaining","addMenuItemCounter","chartSlice","Comp","trigger","CHAT","LOAD_STOCK_COMPLETED","INIT_AND_SHOW_CHART","LOADING_COMPLETE","triggerLimitRemaining","BAT","UPDATE_BROWSER_MENU","onLoadStockAdded","onLoadStockFailed","LOADING_FAILED","showAlertDialog","onLoadStockByQuery","onLoadStockByQueryCompleted","onLoadStockByQueryFailed","onShowChart","conf","setMenuItemOpen","SHOW_CHART","resetActiveChart","id","activeChart","options","zhConfig","onCloseChart","chartId","isRemoved","minusMenuItemCounter","CLOSE_CHART","onToTop","onCopy","chart","fromChart","getCopyFromChart","onSortBy","by","onRemoveAll","resetMenuItemCounter","uncheckActiveCheckbox"],"mappings":"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","sourcesContent":["import { T as LPA } from '../actions/LoadingProgressActions'\r\nimport { ChartActionTypes as CHAT } from '../actions/ChartActions';\r\nimport { BrowserActionTypes as BAT } from '../actions/BrowserActions';\r\n\r\nimport ChartLogic from './chart/ChartLogic'\r\n\r\nconst {\r\n  isChartExist,\r\n  loadConfig, showChart,\r\n  removeConfig,\r\n  toTop,\r\n  sortBy,\r\n  removeAll,\r\n  checkBrowserChartTypes,\r\n  scanPostAdded,\r\n  setAlertItemIdTo\r\n} = ChartLogic;\r\n\r\nconst CONSOLE_LOG_STYLE = 'color:rgb(237, 88, 19);';\r\nconst _fnLogLoadError = function({\r\n  alertCaption, alertDescr, alertItemId\r\n}){\r\n  console.log('%c'+ alertCaption + ':' + alertItemId, CONSOLE_LOG_STYLE);\r\n  console.log('%c' + alertDescr, CONSOLE_LOG_STYLE);\r\n}\r\n\r\nconst ChartSlice = {\r\n  charts : {},\r\n\r\n  getConfigs(chartType){\r\n    return this.charts[chartType];\r\n  },\r\n  isChartExist(option){\r\n    checkBrowserChartTypes(this, option)\r\n    const { chartType, key } = option;    \r\n    return isChartExist(this.charts, chartType, key);\r\n  },\r\n\r\n  onLoadStock(){\r\n    this.triggerLoadingProgress(LPA.LOADING)\r\n  },\r\n  onLoadStockCompleted(option, config){\r\n      const {\r\n        chartType, browserType,\r\n        limitRemaining\r\n      } = option;\r\n\r\n      this.addMenuItemCounter(chartType, browserType);\r\n\r\n      const {\r\n              chartSlice, Comp\r\n            } = loadConfig(this.charts, config, option);\r\n      if (chartSlice){\r\n        this.trigger(CHAT.LOAD_STOCK_COMPLETED, chartSlice);\r\n      } else {\r\n        this.trigger(CHAT.INIT_AND_SHOW_CHART, Comp);\r\n      }\r\n      this.triggerLoadingProgress(LPA.LOADING_COMPLETE)\r\n      this.triggerLimitRemaining(limitRemaining);\r\n      this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n  },\r\n  onLoadStockAdded(option={}){\r\n     this.triggerLoadingProgress(LPA.LOADING_COMPLETE)\r\n     scanPostAdded(this, option)\r\n  },\r\n  onLoadStockFailed(option){\r\n    this.triggerLoadingProgress(LPA.LOADING_FAILED)\r\n    setAlertItemIdTo(option)\r\n    /*\r\n    const { alertItemId, value } = option;\r\n    option.alertItemId = _isStr(alertItemId)\r\n      ? alertItemId\r\n      : _isStr(value) ? value : void 0;\r\n    */\r\n    this.showAlertDialog(option);\r\n    _fnLogLoadError(option);\r\n  },\r\n\r\n  onLoadStockByQuery(){\r\n    this.onLoadStock()\r\n  },\r\n  onLoadStockByQueryCompleted(option, config){\r\n    this.onLoadStockCompleted(option, config)\r\n  },\r\n  onLoadStockByQueryFailed(option){\r\n    this.onLoadStockFailed(option)\r\n  },\r\n\r\n  onShowChart(chartType, browserType, conf){\r\n    this.setMenuItemOpen(chartType, browserType);\r\n    const {\r\n            chartSlice, Comp\r\n          } = showChart(this.charts, chartType, browserType, conf)\r\n    if (chartSlice){\r\n      this.trigger(CHAT.SHOW_CHART, chartSlice);\r\n    } else {\r\n      this.trigger(CHAT.INIT_AND_SHOW_CHART, Comp)\r\n    }\r\n    this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n  },\r\n\r\n  resetActiveChart(id){\r\n    if (\r\n      this.activeChart &&\r\n      this.activeChart.options.zhConfig.id === id\r\n    ){\r\n      this.activeChart = null;\r\n    }\r\n  },\r\n\r\n  onCloseChart(chartType, browserType, chartId){\r\n    const {\r\n            chartSlice, isRemoved\r\n          } = removeConfig(this.charts, chartType, chartId)\r\n\r\n    if (isRemoved) {\r\n      this.resetActiveChart(chartId)\r\n      this.minusMenuItemCounter(chartType, browserType);\r\n\r\n      this.trigger(CHAT.CLOSE_CHART, chartSlice);\r\n      this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n    }\r\n  },\r\n\r\n  onToTop(chartType, id){\r\n    const chartSlice = toTop(this.charts, chartType, id)\r\n    this.trigger(CHAT.SHOW_CHART, chartSlice);\r\n  },\r\n\r\n  onCopy(chart){\r\n    this.fromChart = chart\r\n  },\r\n  getCopyFromChart(){\r\n    return this.fromChart;\r\n  },\r\n\r\n  onSortBy(chartType, by){\r\n    const chartSlice = sortBy(this.charts, chartType, by);\r\n    this.trigger(CHAT.SHOW_CHART, chartSlice);\r\n  },\r\n  onRemoveAll(chartType, browserType){\r\n    const chartSlice = removeAll(this.charts, chartType);\r\n    this.resetMenuItemCounter(chartType, browserType)\r\n    this.uncheckActiveCheckbox()\r\n    this.trigger(CHAT.SHOW_CHART, chartSlice);\r\n    this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n  }\r\n\r\n};\r\n\r\nexport default ChartSlice\r\n"],"file":"ChartSlice.js"}