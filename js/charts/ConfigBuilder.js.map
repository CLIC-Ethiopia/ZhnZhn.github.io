{"version":3,"sources":["../../src/charts/ConfigBuilder.js"],"names":["C","CATEGORIES_X_AXIS","type","categories","opposite","labels","y","crosshair","undefined","tickColor","tickWidth","tickLength","tickPosition","gridLineWidth","CATEGORIES_Y_AXIS","lineWidth","startOnTick","endOnTick","minPadding","maxPadding","plotLines","x","ConfigBuilder","config","prototype","init","initBaseArea","fBaseAreaConfig","initBaseCategories","xAxis","add","initBaseColumn","crColumnConfig","initBaseBar","crBarConfig","initBaseColumnOrBar","initBaseTreeMap","fBaseTreeMapConfig","alignButtonExport","Object","assign","navigation","buttonOptions","addTitle","title","_to","fTitle","text","STACKED_TITLE_Y","addSubtitle","subtitle","fSubtitle","STACKED_SUBTITLE_Y","addCaption","addTooltip","tooltip","fTooltip","addXAxisCrosshair","fCrosshair","propName","option","_propName","_from","addZhVolumeConfig","id","dColumn","dVolume","fIndicatorVolumeConfig","addZhATHConfig","data","fIndicatorATHConfig","addZhPoints","fn","zhPoints","zhIsMfi","zhFnGetMfiConfig","setMinMax","minValue","maxValue","yAxis","value","label","fnNumberFormat","min","calcMinY","minPoint","maxPoint","setStockSerias","d","dH","dL","dO","toConfig"],"mappings":"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","file":"ConfigBuilder.js","sourcesContent":["import Chart from './Chart'\r\nimport ChartConfig from './ChartConfig'\r\nimport Factory from './ChartFactory'\r\n\r\nimport SeriaBuilder from './SeriaBuilder'\r\n\r\nconst C = {\r\n  CATEGORIES_X_AXIS: {\r\n    type: 'category',\r\n    categories: [],\r\n    opposite: false,\r\n    labels: {\r\n      y: 18\r\n    },\r\n    crosshair: undefined,\r\n    tickColor: 'gray',\r\n    tickWidth: 3,\r\n    tickLength: 7,\r\n    tickPosition: 'outside',\r\n    gridLineWidth: 0\r\n  },\r\n\r\n  CATEGORIES_Y_AXIS: {\r\n    lineWidth: 0,\r\n    tickLength: 0,\r\n    startOnTick: true,\r\n    endOnTick: true,\r\n    minPadding: 0.05,\r\n    maxPadding: 0.05,\r\n    plotLines: null,\r\n    labels: {\r\n      x: 3\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst ConfigBuilder = function(config={}) {\r\n  if (!(this instanceof ConfigBuilder)){\r\n    return (new ConfigBuilder(config));\r\n  }\r\n  this.config = config;\r\n}\r\n\r\nConfigBuilder.prototype = {\r\n  ...SeriaBuilder,\r\n\r\n  init(config={}) {\r\n    this.config = config\r\n    return this;\r\n  },\r\n  initBaseArea(){\r\n    this.config = ChartConfig.fBaseAreaConfig()\r\n    return this;\r\n  },\r\n  initBaseCategories(categories=[]){\r\n    this.config = ChartConfig.fBaseAreaConfig()\r\n    const xAxis = {...C.CATEGORIES_X_AXIS, ...{ categories }}\r\n    this.add('xAxis', xAxis)\r\n    this.add('yAxis', C.CATEGORIES_Y_AXIS)\r\n    return this;\r\n  },\r\n  initBaseColumn(categories=[]){\r\n    this.config = Factory.crColumnConfig()\r\n    this.add('xAxis', { categories })\r\n    return this;\r\n  },\r\n  initBaseBar(categories=[]){\r\n    this.config = Factory.crBarConfig()\r\n    this.add('xAxis', { categories })\r\n    return this;\r\n  },\r\n  initBaseColumnOrBar(categories=[], type){\r\n    if (type === 'BAR') {\r\n      return this.initBaseBar(categories);\r\n    } else {\r\n      return this.initBaseColumn(categories);\r\n    }\r\n  },\r\n  initBaseTreeMap(){\r\n    this.config = ChartConfig.fBaseTreeMapConfig()\r\n    return this;\r\n  },\r\n\r\n  alignButtonExport(){\r\n    Object.assign(\r\n      this.config.navigation.buttonOptions, { x: -10, y: -20 }\r\n    )\r\n    return this;\r\n  },\r\n\r\n\r\n  addTitle(title) {\r\n    const _to = this.config.title || {};\r\n    this.config.title = Object.assign(_to,\r\n      Chart.fTitle({\r\n        text: title,\r\n        y: Chart.STACKED_TITLE_Y\r\n      })\r\n    )\r\n    return this;\r\n  },\r\n  addSubtitle(subtitle) {\r\n    const _to = this.config.subtitle || {};\r\n    this.config.subtitle = Object.assign(_to,\r\n       Chart.fSubtitle({\r\n         text: subtitle,\r\n         y: Chart.STACKED_SUBTITLE_Y\r\n       })\r\n    )\r\n    return this;\r\n  },\r\n  addCaption(title='', subtitle=''){\r\n    return this\r\n      .addTitle(title)\r\n      .addSubtitle(subtitle);\r\n  },\r\n\r\n  addTooltip(tooltip) {\r\n    this.config.tooltip = Chart.fTooltip(tooltip)\r\n    return this;\r\n  },\r\n\r\n  addXAxisCrosshair(){\r\n    this.add('xAxis', { crosshair : Chart.fCrosshair() })\r\n    return this;\r\n  },\r\n\r\n  add(propName, option){\r\n    if (typeof propName === 'string'){\r\n      const _to = this.config[propName];\r\n      if (_to && typeof _to === 'object') {\r\n        Object.assign(this.config[propName], option)\r\n      } else {\r\n        this.config[propName] = option\r\n      }\r\n    } else if (propName && typeof propName === 'object'){\r\n      let _propName;\r\n      for (_propName in propName){\r\n        const _to = this.config[_propName]\r\n            , _from = propName[_propName];\r\n        if (_to) {\r\n          Object.assign(_to, _from)\r\n        } else {\r\n          this.config[_propName] = _from\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  },\r\n\r\n  addZhVolumeConfig(id, dColumn, dVolume){\r\n    this.add('zhVolumeConfig',\r\n       ChartConfig.fIndicatorVolumeConfig(id, dColumn, dVolume)\r\n    )\r\n    return this;\r\n  },\r\n  addZhATHConfig(id, data){\r\n    this.add('zhATHConfig',\r\n       ChartConfig.fIndicatorATHConfig(id, data)\r\n    )\r\n    return this;\r\n  },\r\n  addZhPoints(data, fn){\r\n    this.add({\r\n      zhPoints: data,\r\n      zhIsMfi: true,\r\n      zhFnGetMfiConfig: fn\r\n    })\r\n    return this;\r\n  },\r\n\r\n\r\n  setMinMax(minValue, maxValue){\r\n    const plotLines = this.config.yAxis.plotLines;\r\n    plotLines[0].value = maxValue;\r\n    plotLines[0].label.text = `${ChartConfig.fnNumberFormat(maxValue)}`;\r\n    plotLines[1].value = minValue;\r\n    plotLines[1].label.text = `${ChartConfig.fnNumberFormat(minValue)}`;\r\n    this.add('yAxis', {\r\n      min: Chart.calcMinY({ minPoint: minValue, maxPoint: maxValue}),\r\n      maxPadding: 0.15,\r\n      minPadding: 0.15,\r\n      endOnTick: false,\r\n      startOnTick: false\r\n    })\r\n    return this;\r\n  },\r\n  setStockSerias(id, d, dH, dL, dO){\r\n    ChartConfig.setStockSerias(\r\n      this.config, d, dH, d, dO, id\r\n    )\r\n    return this;\r\n  },\r\n\r\n  toConfig(){\r\n    return this.config;\r\n  }\r\n}\r\n\r\nexport default ConfigBuilder\r\n"]}