{"version":3,"sources":["../../../src/charts/plugin/zhAddSeriaToYAxis.js"],"names":["YAXIS","_isArr","Array","isArray","_crYAxisId","indexOrChart","yAxis","length","_checkYAxis","index","chart","isNewYAxis","id","_crAxis","color","opossite","title","text","lineColor","tickColor","gridLineWidth","labels","style","showEmpty","_crSeria","options","data","type","_findDataIndex","v","_max","i","_crData","userMin","userMax","_fromIndex","_toIndex","slice","zhAddSeriaToYAxis","seriaOptions","yIndex","addAxis","seriaOption","_seria","addSeries","redraw","err","console","log","message"],"mappings":"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","sourcesContent":["import trIfCategoryCase from './trIfCategoryCase'\r\n\r\nconst YAXIS = 'yAxis';\r\n\r\nconst _isArr = Array.isArray;\r\n\r\nconst _crYAxisId = indexOrChart => indexOrChart\r\n  && _isArr(indexOrChart.yAxis)\r\n    ? YAXIS + indexOrChart.yAxis.length\r\n    : YAXIS + indexOrChart;\r\n\r\nconst _checkYAxis = (index, chart) => {\r\n  const isNewYAxis = index === -1\r\n  , id = isNewYAxis\r\n      ? _crYAxisId(chart)\r\n      : index === 0\r\n          ? void 0\r\n          : _crYAxisId(index);\r\n  return { id, isNewYAxis };\r\n};\r\n\r\nconst _crAxis = (id, color) => ({\r\n    id: id,\r\n    opossite: true,\r\n    title: {\r\n      text: ''\r\n    },\r\n    lineColor: color,\r\n    tickColor: color,\r\n    gridLineWidth: 0,\r\n    labels: {\r\n      style: {\r\n        color: color\r\n      }\r\n    },\r\n    showEmpty: false\r\n});\r\n\r\nconst _crSeria = ({ id, color, data }, options) => ({\r\n  type: 'spline',\r\n  yAxis: id,\r\n  color: color,\r\n  data: data,\r\n  ...options\r\n});\r\n\r\nconst _findDataIndex = (data, v) => {\r\n  const _max = data.length;\r\n  let i = 0;\r\n  for (i; i<_max; i++) {\r\n    if (data[i][0] >= v) {\r\n      return i;\r\n    }\r\n  }\r\n  return i;\r\n};\r\n\r\nconst _crData = ({ data, userMin, userMax }) => {\r\n  if (!_isArr(data) || !_isArr(data[0])\r\n        || !userMin || !userMax) {\r\n    return data;\r\n  }\r\n  const _fromIndex = _findDataIndex(data, userMin)\r\n  , _toIndex = _findDataIndex(data, userMax);\r\n  return _fromIndex <= _toIndex\r\n    ? data.slice(_fromIndex, _toIndex+1)\r\n    : data;\r\n};\r\n\r\nconst zhAddSeriaToYAxis = function(options={}, seriaOptions={}) {\r\n  try {\r\n    const { color, yIndex=-1 } = options\r\n    , { id, isNewYAxis } = _checkYAxis(yIndex, this);\r\n    if (isNewYAxis) {\r\n      this.addAxis(_crAxis(id, color), false, true)\r\n    }\r\n    const {\r\n      data, seriaOption\r\n    } = trIfCategoryCase(this, _crData(options), seriaOptions)\r\n    , _seria = this.addSeries(_crSeria({\r\n      id, color, data }, seriaOption), false\r\n    );\r\n    this.redraw();\r\n    return _seria;\r\n  } catch(err) {\r\n    console.log(err.message)\r\n  }\r\n};\r\n\r\nexport default zhAddSeriaToYAxis\r\n"],"file":"zhAddSeriaToYAxis.js"}