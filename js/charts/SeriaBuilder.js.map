{"version":3,"sources":["../../src/charts/SeriaBuilder.js"],"names":["C","SPLINE","type","visible","marker","symbol","AREA_RANGE","color","fillColor","linearGradient","x1","x2","y1","y2","stops","radius","TREE_MAP","layoutAlgorithm","borderColor","dataLabels","align","verticalAlign","style","fontFamily","fontSize","fontWeight","textShadow","states","hover","brightness","SCATTER","_isArr","Array","isArray","_isObj","obj","_crLegendItem","index","name","is","isVisible","_addSeriesImpl","to","series","_legend","forEach","seria","zhValueText","push","SeriaBuilder","initSeria","option","_type","config","Object","assign","ChartConfig","fSeries","splineSeria","_seria","CONFIG","tooltip","add","Chart","fTooltip","areaRangeSeria","treeMapSeria","scatterSeria","addSeriaBy","addSeriaTo","addSeriaPoints","id","points","maxVisible","isWithLegend","data","getColor","seriaName","zhSeriaId","addLegend","_addPointsToConfig","addPoints","text","clearSeries","addSeries","isWithoutLegend","_to","toSeria"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,CAAC,GAAG;AACRC,EAAAA,MAAM,EAAE;AACLC,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAHH,GADA;AAQRC,EAAAA,UAAU,EAAE;AACVJ,IAAAA,IAAI,EAAE,WADI;AAEVK,IAAAA,KAAK,EAAE,SAFG;AAGVC,IAAAA,SAAS,EAAE;AACTC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE,CAAb;AAAgBC,QAAAA,EAAE,EAAE,CAApB;AAAuBC,QAAAA,EAAE,EAAE;AAA3B,OADP;AAETC,MAAAA,KAAK,EAAE,CACJ,CAAC,CAAD,EAAI,uBAAJ,CADI,EAEJ,CAAC,CAAD,EAAI,kBAAJ,CAFI;AAFE,KAHD;AAUVV,IAAAA,MAAM,EAAE;AACNW,MAAAA,MAAM,EAAE;AADF;AAVE,GARJ;AAsBRC,EAAAA,QAAQ,EAAE;AACJ;AACAd,IAAAA,IAAI,EAAG,SAFH;AAGJe,IAAAA,eAAe,EAAE,YAHb;AAIJ;AACAC,IAAAA,WAAW,EAAG,MALV;AAMJC,IAAAA,UAAU,EAAG;AACXC,MAAAA,KAAK,EAAG,MADG;AAEXC,MAAAA,aAAa,EAAG,KAFL;AAGXC,MAAAA,KAAK,EAAG;AACNC,QAAAA,UAAU,EAAE,uCADN;AAENC,QAAAA,QAAQ,EAAE,MAFJ;AAGNC,QAAAA,UAAU,EAAE,MAHN;AAINlB,QAAAA,KAAK,EAAG,OAJF;AAKNmB,QAAAA,UAAU,EAAE;AALN;AAHG,KANT;AAiBJ;AACAC,IAAAA,MAAM,EAAG;AACPC,MAAAA,KAAK,EAAG;AACNV,QAAAA,WAAW,EAAG,QADR;AAENW,QAAAA,UAAU,EAAE;AAFN;AADD;AAlBL,GAtBF;AA+CNC,EAAAA,OAAO,EAAE;AACP5B,IAAAA,IAAI,EAAE;AADC;AA/CH,CAAV;AAoDA,IAAM6B,MAAM,GAAGC,KAAK,CAACC,OAArB;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,GAAG;AAAA,SAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B;AAAA,CAAlB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAU9B,KAAV,QAAUA,KAAV;AAAA,MAAiB+B,IAAjB,QAAiBA,IAAjB;AAAA,qBAAuBC,EAAvB;AAAA,MAAuBA,EAAvB,wBAA0B,KAA1B;AAAA,SAAuC;AAC3DF,IAAAA,KAAK,EAALA,KAD2D;AACpD9B,IAAAA,KAAK,EAALA,KADoD;AAC7C+B,IAAAA,IAAI,EAAJA,IAD6C;AAE3DE,IAAAA,SAAS,EAAED;AAFgD,GAAvC;AAAA,CAAtB;;AAKA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,EAAD,EAAKC,MAAL,EAAgB;AACrC,MAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAACC,KAAD,EAAQT,KAAR,EAAkB;AAAA,QACvB9B,KADuB,GACYuC,KADZ,CACvBvC,KADuB;AAAA,6BACYuC,KADZ,CAChBC,WADgB;AAAA,QAChBA,WADgB,mCACJ,EADI;AAAA,QACA5C,OADA,GACY2C,KADZ,CACA3C,OADA;AAE/BuC,IAAAA,EAAE,CAACM,IAAH,CAAQF,KAAR;;AACAF,IAAAA,OAAO,CAACI,IAAR,CAAaZ,aAAa,CAAC;AACxBC,MAAAA,KAAK,EAALA,KADwB;AACjB9B,MAAAA,KAAK,EAALA,KADiB;AACV+B,MAAAA,IAAI,EAACS,WADK;AACQR,MAAAA,EAAE,EAACpC;AADX,KAAD,CAA1B;AAGD,GAND;AAOA,SAAOyC,OAAP;AACD,CAVD;;AAYA,IAAMK,YAAY,GAAG;AAEnBC,EAAAA,SAFmB,qBAETC,MAFS,EAEF;AACf,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKC,MAAL,GAAcC,MAAM,CAACC,MAAP,CAAcC,wBAAYC,OAAZ,EAAd,EAAqCN,MAArC,CAAd;AACA,WAAO,IAAP;AACD,GANkB;AAOnBO,EAAAA,WAPmB,uBAOPP,MAPO,EAOA;AACjB,WAAO,KAAKD,SAAL,+BAAoBlD,CAAC,CAACC,MAAtB,MAAiCkD,MAAjC,EAAP;AACD,GATkB;AAUnBQ,EAAAA,MAVmB,kBAUZC,MAVY,EAUJC,OAVI,EAUKV,MAVL,EAUY;AAC7B,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKC,MAAL,iCAAmBO,MAAnB,MAA8BT,MAA9B;AACA,SAAKW,GAAL,CAAS,SAAT,EAAoBC,kBAAMC,QAAN,CAAeH,OAAf,CAApB;AACA,WAAO,IAAP;AACD,GAfkB;AAgBnBI,EAAAA,cAhBmB,0BAgBJJ,OAhBI,EAgBKV,MAhBL,EAgBY;AAC7B,WAAO,KAAKQ,MAAL,CAAY3D,CAAC,CAACM,UAAd,EAA0BuD,OAA1B,EAAmCV,MAAnC,CAAP;AACD,GAlBkB;AAmBnBe,EAAAA,YAnBmB,wBAmBNL,OAnBM,EAmBGV,MAnBH,EAmBU;AAC3B,WAAO,KAAKQ,MAAL,CAAY3D,CAAC,CAACgB,QAAd,EAAwB6C,OAAxB,EAAiCV,MAAjC,CAAP;AACD,GArBkB;AAsBnBgB,EAAAA,YAtBmB,wBAsBNN,OAtBM,EAsBGV,MAtBH,EAsBU;AAC3B,WAAO,KAAKQ,MAAL,CAAY3D,CAAC,CAAC8B,OAAd,EAAuB+B,OAAvB,EAAgCV,MAAhC,CAAP;AACD,GAxBkB;AA0BnBiB,EAAAA,UA1BmB,sBA0BR/B,KA1BQ,EA0BDF,GA1BC,EA0BI;AACrB,QAAI,KAAKkB,MAAL,CAAYV,MAAZ,CAAmBN,KAAnB,CAAJ,EAA+B;AAC7BiB,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,MAAL,CAAYV,MAAZ,CAAmBN,KAAnB,CAAd,EAAyCF,GAAzC;AACD,KAFD,MAEO;AACL,WAAKkB,MAAL,CAAYV,MAAZ,CAAmBK,IAAnB,CAAwBb,GAAxB;AACD;;AACD,WAAO,IAAP;AACD,GAjCkB;AAkCnBkC,EAAAA,UAlCmB,sBAkCRhC,KAlCQ,EAkCDS,KAlCC,EAkCM;AACvB,SAAKO,MAAL,CAAYV,MAAZ,CAAmBN,KAAnB,IAA4BS,KAA5B;AACA,WAAO,IAAP;AACD,GArCkB;AAuCnBwB,EAAAA,cAvCmB,0BAuCJC,EAvCI,EAuCAC,MAvCA,SAuCgD;AAAA;;AAAA,mCAAH,EAAG;AAAA,iCAAtCC,UAAsC;AAAA,QAAtCA,UAAsC,iCAA3B,CAA2B;AAAA,mCAAxBC,YAAwB;AAAA,QAAxBA,YAAwB,mCAAX,KAAW;;AACjE,QAAM9B,OAAO,GAAG,EAAhB;AACA4B,IAAAA,MAAM,CAAC3B,OAAP,CAAe,UAAC8B,IAAD,EAAOtC,KAAP,EAAiB;AACxB,UAAAE,EAAE,GAAGF,KAAK,GAACoC,UAAN,GAAmB,IAAnB,GAA0B,KAA/B;AAAA,UACAlE,KADA,GACQiD,wBAAYoB,QAAZ,CAAqBvC,KAArB,CADR;AAAA,UAEEwC,SAFF,GAEgBF,IAFhB,CAEEE,SAFF;;AAGNjC,MAAAA,OAAO,CAACI,IAAR,CAAaZ,aAAa,CAAC;AACzBC,QAAAA,KAAK,EAALA,KADyB;AAClB9B,QAAAA,KAAK,EAALA,KADkB;AACX+B,QAAAA,IAAI,EAAEuC,SADK;AACMtC,QAAAA,EAAE,EAAFA;AADN,OAAD,CAA1B;;AAGA,MAAA,KAAI,CAAC6B,UAAL,CAAgB/B,KAAhB,EAAuB;AAClBnC,QAAAA,IAAI,EAAE,QADY;AAElByE,QAAAA,IAAI,EAAEA,IAFY;AAGlBrC,QAAAA,IAAI,EAAEuC,SAHY;AAIlB9B,QAAAA,WAAW,EAAE8B,SAJK;AAKlBC,QAAAA,SAAS,EAAEP,EAAE,GAAG,GAAL,GAAWlC,KALJ;AAMlBlC,QAAAA,OAAO,EAAEoC;AANS,OAAvB;AAQD,KAfD;;AAgBA,QAAI,CAACmC,YAAL,EAAkB;AAChB,WAAKK,SAAL,CAAenC,OAAf;AACD;;AACD,WAAO,IAAP;AACD,GA7DkB;AA+DnBoC,EAAAA,kBA/DmB,8BA+DAT,EA/DA,EA+DIC,MA/DJ,EA+DW;AAC5B,QAAIA,MAAM,CAAC,CAAD,CAAN,IACGzC,MAAM,CAACyC,MAAM,CAAC,CAAD,CAAP,CADT,IAEGA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAFH,IAGG,OAAOA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAP,KAAwB,QAH/B,EAIE;AACA,WAAKF,cAAL,CAAoBC,EAApB,EAAwBC,MAAxB;AACD,KAND,MAMO;AACL,WAAKJ,UAAL,CAAgB,CAAhB,EAAmB;AAChBlE,QAAAA,IAAI,EAAE,QADU;AAEhByE,QAAAA,IAAI,EAAEH,MAFU;AAGhBM,QAAAA,SAAS,EAAEP;AAHK,OAAnB;AAKD;AACF,GA7EkB;AA+EnBU,EAAAA,SA/EmB,qBA+ETV,EA/ES,EA+ELC,MA/EK,EA+EGU,IA/EH,EA+EQ;AACzB,QAAI,KAAK9B,KAAL,KAAe,GAAnB,EAAwB;AACtB,WAAK4B,kBAAL,CAAwBT,EAAxB,EAA4BC,MAA5B;AACD,KAFD,MAEO;AACL,WAAKV,GAAL,CAAS;AACPa,QAAAA,IAAI,EAAEH,MADC;AAEPM,QAAAA,SAAS,EAAEP,EAFJ;AAGPxB,QAAAA,WAAW,EAAEmC,IAAI,GAAGA,IAAH,GAAUX;AAHpB,OAAT;AAKD;;AACD,WAAO,IAAP;AACD,GA1FkB;AA4FnBY,EAAAA,WA5FmB,yBA4FN;AACX,SAAK9B,MAAL,CAAYV,MAAZ,GAAqB,EAArB;AACA,WAAO,IAAP;AACD,GA/FkB;AAiGnByC,EAAAA,SAjGmB,qBAiGTzC,MAjGS,EAiGD0C,eAjGC,EAiGqB;AAAA,QAAtBA,eAAsB;AAAtBA,MAAAA,eAAsB,GAAN,KAAM;AAAA;;AACtC,QAAMC,GAAG,GAAEvD,MAAM,CAAC,KAAKsB,MAAL,CAAYV,MAAb,CAAN,GACN,KAAKU,MAAL,CAAYV,MADN,GAEN,KAAKU,MAAL,CAAYV,MAAZ,GAAqB,EAF1B;;AAGA,QAAIZ,MAAM,CAACY,MAAD,CAAV,EAAmB;AACjB,UAAMC,OAAO,GAAGH,cAAc,CAAC6C,GAAD,EAAM3C,MAAN,CAA9B;;AACA,UAAI,CAAC0C,eAAL,EAAsB;AACpB,aAAKN,SAAL,CAAenC,OAAf;AACD;AACF,KALD,MAKO,IAAIV,MAAM,CAACS,MAAD,CAAV,EAAoB;AACzB2C,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS3C,MAAT;AACD;;AACD,WAAO,IAAP;AACD,GA9GkB;AAgHnB4C,EAAAA,OAhHmB,qBAgHV;AACP,WAAO,KAAKlC,MAAZ;AACD;AAlHkB,CAArB;eAsHeJ,Y","sourcesContent":["import Chart from './Chart'\r\nimport ChartConfig from './ChartConfig'\r\n\r\nconst C = {\r\n  SPLINE: {\r\n     type: 'spline',\r\n     visible: true,\r\n     marker: {\r\n       symbol: 'circle'\r\n     }\r\n  },\r\n  AREA_RANGE: {\r\n    type: 'arearange',\r\n    color: '#7cb5ec',\r\n    fillColor: {\r\n      linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\r\n      stops: [\r\n         [0, \"rgba(69, 114, 167, 1)\"],\r\n         [1, \"rgba(2, 0, 0, 0)\"]\r\n      ]\r\n    },\r\n    marker: {\r\n      radius: 0\r\n    }\r\n  },\r\n  TREE_MAP: {\r\n        //zhSeriaId : zhSeriaId,\r\n        type : 'treemap',\r\n        layoutAlgorithm: 'squarified',\r\n        //layoutAlgorithm : 'sliceAndDice',\r\n        borderColor : 'gray',\r\n        dataLabels : {\r\n          align : 'left',\r\n          verticalAlign : 'top',\r\n          style : {\r\n            fontFamily: '\"Roboto\", \"Arial\", \"Lato\", sans-serif',\r\n            fontSize: '14px',\r\n            fontWeight: 'bold',\r\n            color : 'black',\r\n            textShadow: 'none'\r\n          }\r\n        },\r\n        //data : data,\r\n        states : {\r\n          hover : {\r\n            borderColor : 'yellow',\r\n            brightness: 0\r\n          }\r\n        }\r\n    },\r\n    SCATTER: {\r\n      type: 'scatter'\r\n    }\r\n};\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isObj = obj => obj && typeof obj === 'object';\r\n\r\nconst _crLegendItem = ({ index, color, name, is=false }) => ({\r\n  index, color, name,\r\n  isVisible: is\r\n});\r\n\r\nconst _addSeriesImpl = (to, series) => {\r\n  const _legend = [];\r\n  series.forEach((seria, index) => {\r\n    const { color, zhValueText='', visible } = seria;\r\n    to.push(seria)\r\n    _legend.push(_crLegendItem({\r\n       index, color, name:zhValueText, is:visible\r\n     }))\r\n  })\r\n  return _legend;\r\n}\r\n\r\nconst SeriaBuilder = {\r\n\r\n  initSeria(option){\r\n    this._type = 'S'\r\n    this.config = Object.assign(ChartConfig.fSeries(), option)\r\n    return this;\r\n  },\r\n  splineSeria(option){\r\n    return this.initSeria({ ...C.SPLINE, ...option });\r\n  },\r\n  _seria(CONFIG, tooltip, option){\r\n    this._type = 'S'\r\n    this.config = { ...CONFIG, ...option }\r\n    this.add('tooltip', Chart.fTooltip(tooltip))\r\n    return this;\r\n  },\r\n  areaRangeSeria(tooltip, option){\r\n    return this._seria(C.AREA_RANGE, tooltip, option);\r\n  },\r\n  treeMapSeria(tooltip, option){\r\n    return this._seria(C.TREE_MAP, tooltip, option);\r\n  },\r\n  scatterSeria(tooltip, option){\r\n    return this._seria(C.SCATTER, tooltip, option);\r\n  },\r\n\r\n  addSeriaBy(index, obj) {\r\n    if (this.config.series[index]) {\r\n      Object.assign(this.config.series[index], obj)\r\n    } else {\r\n      this.config.series.push(obj)\r\n    }\r\n    return this;\r\n  },\r\n  addSeriaTo(index, seria) {\r\n    this.config.series[index] = seria\r\n    return this;\r\n  },\r\n\r\n  addSeriaPoints(id, points, { maxVisible=6, isWithLegend=false }={}){\r\n    const _legend = [];\r\n    points.forEach((data, index) => {\r\n      const is = index<maxVisible ? true : false\r\n          , color = ChartConfig.getColor(index)\r\n          , { seriaName } = data;\r\n      _legend.push(_crLegendItem({\r\n        index, color, name: seriaName, is\r\n      }))\r\n      this.addSeriaBy(index, {\r\n           type: 'spline',\r\n           data: data,\r\n           name: seriaName,\r\n           zhValueText: seriaName,\r\n           zhSeriaId: id + '_' + index,\r\n           visible: is\r\n        })\r\n    })\r\n    if (!isWithLegend){\r\n      this.addLegend(_legend);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  _addPointsToConfig(id, points){\r\n    if (points[0]\r\n        && _isArr(points[0])\r\n        && points[0][0]\r\n        && typeof points[0][0] !== 'number'\r\n    ) {\r\n      this.addSeriaPoints(id, points)\r\n    } else {\r\n      this.addSeriaBy(0, {\r\n         type: 'spline',\r\n         data: points,\r\n         zhSeriaId: id\r\n      });\r\n    }\r\n  },\r\n\r\n  addPoints(id, points, text){\r\n    if (this._type !== 'S') {\r\n      this._addPointsToConfig(id, points)\r\n    } else {\r\n      this.add({\r\n        data: points,\r\n        zhSeriaId: id,\r\n        zhValueText: text ? text : id\r\n      })\r\n    }\r\n    return this;\r\n  },\r\n\r\n  clearSeries(){\r\n    this.config.series = []\r\n    return this;\r\n  },\r\n\r\n  addSeries(series, isWithoutLegend=false){\r\n    const _to =_isArr(this.config.series)\r\n       ? this.config.series\r\n       : this.config.series = [];\r\n    if (_isArr(series)){\r\n      const _legend = _addSeriesImpl(_to, series);\r\n      if (!isWithoutLegend) {\r\n        this.addLegend(_legend)\r\n      }\r\n    } else if (_isObj(series)) {\r\n      _to[0] = series      \r\n    }\r\n    return this;\r\n  },\r\n\r\n  toSeria(){\r\n    return this.config;\r\n  }\r\n\r\n}\r\n\r\nexport default SeriaBuilder\r\n"],"file":"SeriaBuilder.js"}