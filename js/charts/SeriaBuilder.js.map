{"version":3,"sources":["../../src/charts/SeriaBuilder.js"],"names":["C","SERIA","visible","marker","symbol","TREE_MAP","type","layoutAlgorithm","borderColor","dataLabels","align","verticalAlign","style","fontFamily","fontSize","fontWeight","color","textShadow","states","hover","brightness","SCATTER","_isArr","Array","isArray","_assign","Object","assign","_isObj","obj","_crLegendItem","index","name","is","isVisible","_addSeriesImpl","to","series","_legend","forEach","seria","zhValueText","push","SeriaBuilder","initSeria","option","_type","config","ChartConfig","crSeria","splineSeria","_seria","CONFIG","tooltip","add","Chart","fTooltip","treeMapSeria","scatterSeria","stockSeria","id","data","minY","addPoints","addSeriaBy","addSeriaTo","_addSeriaPoints","points","maxVisible","getColor","seriaName","length","addLegend","_addPointsToConfig","text","addSeries","isWithoutLegend","_to","toSeria"],"mappings":"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","sourcesContent":["import { findMinY } from '../math/seriaFn';\r\n\r\nimport Chart from './Chart';\r\nimport ChartConfig from './ChartConfig';\r\n\r\nconst C = {\r\n  SERIA: {\r\n     //type: 'spline',\r\n     visible: true,\r\n     marker: {\r\n       symbol: 'circle'\r\n     }\r\n  },\r\n  TREE_MAP: {\r\n        type : 'treemap',\r\n        layoutAlgorithm: 'squarified',\r\n        //layoutAlgorithm : 'sliceAndDice',\r\n        borderColor : 'gray',\r\n        dataLabels : {\r\n          align : 'left',\r\n          verticalAlign : 'top',\r\n          style : {\r\n            fontFamily: '\"Roboto\", \"Arial\", \"Lato\", sans-serif',\r\n            fontSize: '14px',\r\n            fontWeight: 'bold',\r\n            color : 'black',\r\n            textShadow: 'none'\r\n          }\r\n        },\r\n        //data : data,\r\n        states : {\r\n          hover : {\r\n            borderColor : 'yellow',\r\n            brightness: 0\r\n          }\r\n        }\r\n    },\r\n    SCATTER: {\r\n      type: 'scatter'\r\n    }\r\n};\r\n\r\nconst _isArr = Array.isArray\r\n, _assign = Object.assign\r\n, _isObj = obj => obj && typeof obj === 'object';\r\n\r\nconst _crLegendItem = ({ index, color, name='', is=false }) => ({\r\n  index, color, name,\r\n  isVisible: is\r\n});\r\n\r\nconst _addSeriesImpl = (to, series) => {\r\n  const _legend = [];\r\n  series.forEach((seria, index) => {\r\n    const { color, zhValueText, name, visible } = seria;\r\n    to.push(seria)\r\n    _legend.push(_crLegendItem({\r\n       index, color,\r\n       name: zhValueText || name,\r\n       is: visible\r\n     }))\r\n  })\r\n  return _legend;\r\n}\r\n\r\nconst SeriaBuilder = {\r\n\r\n  initSeria(option){\r\n    this._type = 'S'\r\n    this.config = ChartConfig.crSeria(option)\r\n    return this;\r\n  },\r\n  splineSeria(option){\r\n    return this.initSeria({ ...C.SERIA, ...option });\r\n  },\r\n  _seria(CONFIG, tooltip, option){\r\n    this._type = 'S'\r\n    this.config = { ...CONFIG, ...option }\r\n    this.add('tooltip', Chart.fTooltip(tooltip))\r\n    return this;\r\n  },\r\n  treeMapSeria(tooltip, option){\r\n    return this._seria(C.TREE_MAP, tooltip, option);\r\n  },\r\n  scatterSeria(tooltip, option){\r\n    return this._seria(C.SCATTER, tooltip, option);\r\n  },\r\n  stockSeria(id, data){\r\n    return this\r\n      .initSeria({ minY: findMinY(data) })\r\n      .addPoints(id, data);\r\n  },\r\n\r\n  addSeriaBy(index, obj) {\r\n    if (this.config.series[index]) {\r\n      _assign(this.config.series[index], obj)\r\n    } else {\r\n      this.config.series.push(obj)\r\n    }\r\n    return this;\r\n  },\r\n  addSeriaTo(index, seria) {\r\n    this.config.series[index] = seria\r\n    return this;\r\n  },\r\n\r\n  _addSeriaPoints(points, { maxVisible=6 }={}){\r\n    const _legend = [];\r\n    points.forEach((data, index) => {\r\n      const is = index<maxVisible ? true : false\r\n          , color = ChartConfig.getColor(index)\r\n          , { seriaName } = data;\r\n      _legend.push(_crLegendItem({\r\n        index, color, name: seriaName, is\r\n      }))\r\n      this.addSeriaBy(index, {\r\n           type: 'spline',\r\n           data: data,\r\n           name: seriaName,\r\n           zhValueText: seriaName,\r\n           visible: is\r\n        })\r\n    })\r\n    if (_legend.length !== 0){\r\n      this.addLegend(_legend);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  _addPointsToConfig(points){\r\n    if (points[0]\r\n        && _isArr(points[0])\r\n        && points[0][0]\r\n        && typeof points[0][0] !== 'number'\r\n    ) {\r\n      this._addSeriaPoints(points)\r\n    } else {\r\n      this.addSeriaBy(0, {\r\n         type: 'spline',\r\n         data: points\r\n      });\r\n    }\r\n  },\r\n\r\n  addPoints(id, points, text){\r\n    if (this._type !== 'S') {\r\n      this._addPointsToConfig(points)\r\n    } else {\r\n      this.add({\r\n        data: points,\r\n        zhValueText: text ? text : id\r\n      })\r\n    }\r\n    return this;\r\n  },\r\n\r\n  addSeries(series, isWithoutLegend=false){\r\n    const _to =_isArr(this.config.series)\r\n       ? this.config.series\r\n       : this.config.series = [];\r\n    if (_isArr(series)){\r\n      const _legend = _addSeriesImpl(_to, series);\r\n      if (!isWithoutLegend) {\r\n        this.addLegend(_legend)\r\n      }\r\n    } else if (_isObj(series)) {\r\n      _to[0] = series\r\n    }\r\n    return this;\r\n  },\r\n\r\n  toSeria(){\r\n    return this.config;\r\n  }\r\n\r\n}\r\n\r\nexport default SeriaBuilder\r\n"],"file":"SeriaBuilder.js"}