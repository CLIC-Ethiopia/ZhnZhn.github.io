{"version":3,"sources":["../../src/charts/SeriaBuilder.js"],"names":["C","BASE_SPLINE","type","visible","marker","symbol","BASE_AREA_RANGE","color","fillColor","linearGradient","x1","x2","y1","y2","stops","radius","BASE_TREE_MAP","layoutAlgorithm","borderColor","dataLabels","align","verticalAlign","style","fontFamily","fontSize","fontWeight","textShadow","states","hover","brightness","_crLegendItem","index","name","is","isVisible","_addSeriesImpl","to","series","_legend","forEach","seria","zhValueText","push","SeriaBuilder","initBaseSeria","option","_type","config","Object","assign","fSeries","initSpline","_initBaseSeria","BASE","tooltip","add","fTooltip","initAreaRange","initTreeMap","addLegend","legend","isWithLegend","addSeriaBy","obj","addSeriaPoints","id","points","maxVisible","data","getColor","seriaName","zhSeriaId","_addPointsToConfig","Array","isArray","addPoints","text","clearSeries","addSeries","isWithoutLegend","_to"],"mappings":"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","file":"SeriaBuilder.js","sourcesContent":["import Chart from './Chart'\r\nimport ChartConfig from './ChartConfig'\r\n\r\nconst C = {\r\n  BASE_SPLINE: {\r\n     type: 'spline',\r\n     visible: true,\r\n     marker: {\r\n       symbol: 'circle'\r\n     }\r\n  },\r\n  BASE_AREA_RANGE: {\r\n    type: 'arearange',\r\n    color: '#7cb5ec',\r\n    fillColor: {\r\n      linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\r\n      stops: [\r\n         [0, \"rgba(69, 114, 167, 1)\"],\r\n         [1, \"rgba(2, 0, 0, 0)\"]\r\n      ]\r\n    },\r\n    marker: {\r\n      radius: 0\r\n    }\r\n  },\r\n  BASE_TREE_MAP: {\r\n        //zhSeriaId : zhSeriaId,\r\n        type : 'treemap',\r\n        layoutAlgorithm: 'squarified',\r\n        //layoutAlgorithm : 'sliceAndDice',\r\n        borderColor : 'gray',\r\n        dataLabels : {\r\n          align : 'left',\r\n          verticalAlign : 'top',\r\n          style : {\r\n            fontFamily: '\"Roboto\", \"Arial\", \"Lato\", sans-serif',\r\n            fontSize: '14px',\r\n            fontWeight: 'bold',\r\n            color : 'black',\r\n            textShadow: 'none'\r\n          }\r\n        },\r\n        //data : data,\r\n        states : {\r\n          hover : {\r\n            borderColor : 'yellow',\r\n            brightness: 0\r\n          }\r\n        }\r\n    }\r\n};\r\n\r\nconst _crLegendItem = ({ index, color, name, is=false }) => ({\r\n  index, color, name,\r\n  isVisible: is\r\n});\r\n\r\nconst _addSeriesImpl = (to, series) => {\r\n  const _legend = [];\r\n  series.forEach((seria, index) => {\r\n    const { color, zhValueText='', visible } = seria;\r\n    to.push(seria)\r\n    _legend.push(_crLegendItem({\r\n       index, color, name:zhValueText, is:visible\r\n     }))\r\n  })\r\n  return _legend;\r\n}\r\n\r\nconst SeriaBuilder = {\r\n\r\n  initBaseSeria(option){\r\n    this._type = 'S'\r\n    this.config = Object.assign(ChartConfig.fSeries(), option)\r\n    return this;\r\n  },\r\n  initSpline(option){\r\n    return this.initBaseSeria({ ...C.BASE_SPLINE, ...option });\r\n  },\r\n  _initBaseSeria(BASE, tooltip, option){\r\n    this._type = 'S'\r\n    this.config = { ...BASE, ...option }\r\n    this.add('tooltip', Chart.fTooltip(tooltip))\r\n    return this;\r\n  },\r\n  initAreaRange(tooltip, option){\r\n    return this._initBaseSeria(C.BASE_AREA_RANGE, tooltip, option);\r\n  },\r\n  initTreeMap(tooltip, option){\r\n    return this._initBaseSeria(C.BASE_TREE_MAP, tooltip, option);\r\n  },\r\n\r\n  addLegend(legend){\r\n    return this.add('zhConfig', {\r\n      legend, isWithLegend: true,\r\n    });\r\n  },\r\n\r\n  addSeriaBy(index, obj) {\r\n    if (this.config.series[index]) {\r\n      Object.assign(this.config.series[index], obj)\r\n    } else {\r\n      this.config.series.push(obj)\r\n    }\r\n    return this;\r\n  },\r\n\r\n  addSeriaPoints(id, points, { maxVisible=6, isWithLegend=false }={}){\r\n    const _legend = [];\r\n    points.forEach((data, index) => {\r\n      const is = index<maxVisible ? true : false\r\n          , color = ChartConfig.getColor(index)\r\n          , { seriaName } = data;\r\n      _legend.push(_crLegendItem({\r\n        index, color, name: seriaName, is\r\n      }))\r\n      this.addSeriaBy(index, {\r\n           type: 'spline',\r\n           data: data,\r\n           name: seriaName,\r\n           zhValueText: seriaName,\r\n           zhSeriaId: id + '_' + index,\r\n           visible: is\r\n        })\r\n    })\r\n    if (!isWithLegend){\r\n      this.addLegend(_legend);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  _addPointsToConfig(id, points){\r\n    if (points[0]\r\n        && Array.isArray(points[0])\r\n        && points[0][0]\r\n        && typeof points[0][0] !== 'number'\r\n    ) {\r\n      this.addSeriaPoints(id, points)\r\n    } else {\r\n      this.addSeriaBy(0, {\r\n         type: 'spline',\r\n         data: points,\r\n         zhSeriaId: id\r\n      });\r\n    }\r\n  },\r\n\r\n  addPoints(id, points, text){\r\n    if (this._type !== 'S') {\r\n      this._addPointsToConfig(id, points)\r\n    } else {\r\n      this.add({\r\n        data: points,\r\n        zhSeriaId: id,\r\n        zhValueText: text ? text : id\r\n      })\r\n    }\r\n    return this;\r\n  },\r\n\r\n  clearSeries(){\r\n    this.config.series = []\r\n    return this;\r\n  },\r\n\r\n  addSeries(series, isWithoutLegend=false){\r\n    const _to = Array.isArray(this.config.series)\r\n             ? this.config.series\r\n             : this.config.series = [];\r\n    if (Array.isArray(series)){\r\n      const _legend = _addSeriesImpl(_to, series);\r\n      if (!isWithoutLegend) {\r\n        this.addLegend(_legend)\r\n      }\r\n    } else if (typeof series === 'object') {\r\n      _to[0] = series\r\n    }\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport default SeriaBuilder\r\n"]}