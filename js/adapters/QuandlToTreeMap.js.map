{"version":3,"sources":["../../src/adapters/QuandlToTreeMap.js"],"names":["_fnCreateYearTotals","jsonData","items","bYearTotals","forEach","year","yearIndex","push","_fnCreateDataAndTotal","yearData","_year","split","bTotal","data","item","itemIndex","value","caption","_value","sparkvalues","sparkpercent","reverse","name","nameFull","_fnCalcLevelAndSetPercent","_bLevel","level60","level90","point","pointIndex","percent","createPercent","bValue","toString","total","gte","dataLabels","style","fontSize","substring","plus","_fnSetColorToPoint","period","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","deltaColor","color","fCreateMonoColor","fnGetMonoColor","fCreateTreeMapConfig","json","option","fBaseTreeMapConfig","sliceItems","items100","zhSeriaId","TREE_MAP","dataset","bPrevTotal","config","series","fCreateTreeMapSeria","chart","height","STACKED_HEIGHT","yearTitle","title","setTitleToConfig","valueMoving","createValueMoving","bNowValue","bPrevValue","date","zhConfig","createZhConfig","id","isWithoutAdd","isWithoutIndicator","info","createDatasetInfo"],"mappings":"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","file":"QuandlToTreeMap.js","sourcesContent":["\r\nimport sortBy from 'lodash.sortby';\r\nimport Big from 'big.js';\r\n\r\nimport {ChartType} from '../constants/Type';\r\nimport Chart from '../charts/Chart';\r\nimport ChartConfig from '../charts/ChartConfig';\r\n\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\n\r\nimport { fnCalcTotal, fnCreateSparkData } from './StackedFn';\r\n\r\nconst _fnCreateYearTotals = function(jsonData, items){\r\n   const bYearTotals = [];\r\n   jsonData.forEach((year, yearIndex) =>{\r\n      bYearTotals.push( fnCalcTotal(year, items) );\r\n   })\r\n   return bYearTotals;\r\n}\r\n\r\nconst _fnCreateDataAndTotal = function(jsonData=[], items=[], bYearTotals=[]){\r\n  const yearData = jsonData[0]\r\n     , _year = (yearData[0]) ? yearData[0].split('-')[0] : ''\r\n     , bTotal = ( bYearTotals[0] ) ? bYearTotals[0] : Big('0.0');\r\n  let data = [];\r\n\r\n  items.forEach((item, itemIndex) =>{\r\n    const { value, caption } = item\r\n        , _value = yearData[value];\r\n    if (_value){\r\n       const { sparkvalues, sparkpercent } = fnCreateSparkData(jsonData, value, bYearTotals);\r\n       data.push({\r\n          sparkvalues : sparkvalues.reverse(),\r\n          sparkpercent : sparkpercent.reverse(),\r\n          year : _year,\r\n          name : caption,\r\n          nameFull: caption,\r\n          value : _value\r\n        });\r\n    }\r\n  });\r\n\r\n  data = sortBy(data, 'value').reverse();\r\n\r\n  return {data, bTotal};\r\n}\r\n\r\nconst _fnCalcLevelAndSetPercent = function(data, bTotal){\r\n  let _bLevel = Big('0.0')\r\n    , level60 = 0\r\n    , level90 = 0;\r\n\r\n   data.forEach((point, pointIndex) => {\r\n      const {value, name} = point\r\n          , percent = QuandlFn2.createPercent({\r\n              bValue: Big(value), bTotal: bTotal\r\n            }).toString();\r\n      point.total = bTotal.toString();\r\n      point.percent = percent;\r\n      if ( !_bLevel.gte('60.0') ){\r\n         point.name = `${percent} ${name}`;\r\n         point.dataLabels = {\r\n           style : {\r\n             fontSize : '16px'\r\n           }\r\n         }\r\n         level60 +=1;\r\n       } else if ( !_bLevel.gte('90.0') ){\r\n          point.name = `${percent} ${name.split(';')[0].substring(0, 9)}`;\r\n          level90 +=1;\r\n       } else {\r\n          point.name = percent;\r\n       }\r\n       _bLevel = _bLevel.plus(percent);\r\n    })\r\n\r\n    return {level60, level90}\r\n}\r\n\r\nconst _fnSetColorToPoint = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       let deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+level90 ) {\r\n       let deltaColor = (pointIndex-level60) * ( period / level90 );\r\n       point.color = Chart.fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.fnGetMonoColor(pointIndex-level60-level90)\r\n     }\r\n   })\r\n}\r\n\r\nexport const fCreateTreeMapConfig = function(json, option){\r\n  const config = ChartConfig.fBaseTreeMapConfig()\r\n     ,  {sliceItems:items100=[], value=''} = option\r\n     ,  zhSeriaId = `${value}_${ChartType.TREE_MAP}`\r\n     ,  jsonData = (json.dataset && json.dataset.data) ? json.dataset.data : []\r\n     ,  bYearTotals = _fnCreateYearTotals(jsonData, items100)\r\n     , {data, bTotal } = _fnCreateDataAndTotal(jsonData, items100, bYearTotals)\r\n     , {level60, level90} = _fnCalcLevelAndSetPercent(data, bTotal)\r\n     , bPrevTotal = fnCalcTotal(jsonData[1], items100);\r\n\r\n   _fnSetColorToPoint(data, level60, level90);\r\n\r\n  config.series = [ ChartConfig.fCreateTreeMapSeria(zhSeriaId, data) ];\r\n  config.chart.height = Chart.STACKED_HEIGHT;\r\n\r\n  const yearTitle = (jsonData[0] && jsonData[0][0]) ? jsonData[0][0].split('-')[0] : ''\r\n  option.title = `${yearTitle}:${option.title}`;\r\n  QuandlFn2.setTitleToConfig(config, option);\r\n\r\n  config.valueMoving = QuandlFn2.createValueMoving({\r\n    bNowValue  : bTotal,\r\n    bPrevValue : bPrevTotal\r\n  });\r\n  config.valueMoving.date = yearTitle;\r\n\r\n  config.zhConfig = QuandlFn2.createZhConfig(option);\r\n  config.zhConfig.id = zhSeriaId;\r\n  config.zhConfig.isWithoutAdd = true;\r\n  config.zhConfig.isWithoutIndicator = true;\r\n  config.info = QuandlFn2.createDatasetInfo(json);\r\n\r\n\r\n  return {config}\r\n}\r\n"]}