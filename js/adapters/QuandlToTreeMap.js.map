{"version":3,"sources":["../../src/adapters/QuandlToTreeMap.js"],"names":["_fnCreateYearTotals","jsonData","items","map","year","_fnCreateDataAndTotal","bYearTotals","yearData","_year","split","bTotal","data","forEach","item","itemIndex","value","caption","_value","sparkvalues","sparkpercent","push","reverse","name","nameFull","sort","compareByValue","_fnCalcLevelAndSetPercent","_bLevel","level60","level90","point","pointIndex","percent","createPercent","bValue","toString","total","gte","dataLabels","style","fontSize","substring","plus","_fnSetColorToPoint","period","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","deltaColor","color","fCreateMonoColor","fnGetMonoColor","fCreateTreeMapConfig","json","option","fBaseTreeMapConfig","sliceItems","items100","zhSeriaId","TREE_MAP","dataset","bPrevTotal","dateTo","config","chart","height","STACKED_HEIGHT","yearTitle","title","setTitleToConfig","Object","assign","series","fCreateTreeMapSeria","valueMoving","zhConfig","info","createDatasetInfo"],"mappings":"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","file":"QuandlToTreeMap.js","sourcesContent":["import Big from 'big.js';\r\n\r\nimport AdapterFn from './AdapterFn'\r\n\r\nimport { ChartType } from '../constants/Type';\r\nimport Chart from '../charts/Chart';\r\nimport ChartConfig from '../charts/ChartConfig';\r\n\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\n\r\nimport { fnCalcTotal, fnCreateSparkData, crValueMoving, crZhConfig } from './StackedFn';\r\n\r\nconst _fnCreateYearTotals = function(jsonData, items){\r\n   return jsonData.map(year => fnCalcTotal(year, items) );\r\n}\r\n\r\nconst _fnCreateDataAndTotal = function(jsonData=[], items=[], bYearTotals=[]){\r\n  const yearData = jsonData[0]\r\n     , _year = yearData[0]\r\n          ? yearData[0].split('-')[0]\r\n          : ''\r\n     , bTotal = bYearTotals[0]\r\n          ? bYearTotals[0]\r\n          : Big('0.0');\r\n  let data = [];\r\n\r\n  items.forEach((item, itemIndex) =>{\r\n    const { value, caption } = item\r\n        , _value = yearData[value];\r\n    if (_value){\r\n       const { sparkvalues, sparkpercent } = fnCreateSparkData(jsonData, value, bYearTotals);\r\n       data.push({\r\n          sparkvalues : sparkvalues.reverse(),\r\n          sparkpercent : sparkpercent.reverse(),\r\n          year : _year,\r\n          name : caption,\r\n          nameFull: caption,\r\n          value : _value\r\n        });\r\n    }\r\n  });\r\n\r\n  data.sort(AdapterFn.compareByValue)\r\n      .reverse();\r\n\r\n  return { data, bTotal };\r\n}\r\n\r\nconst _fnCalcLevelAndSetPercent = function(data, bTotal){\r\n  let _bLevel = Big('0.0')\r\n    , level60 = 0\r\n    , level90 = 0;\r\n\r\n   data.forEach((point, pointIndex) => {\r\n      const {value, name} = point\r\n          , percent = QuandlFn2.createPercent({\r\n              bValue: Big(value), bTotal: bTotal\r\n            }).toString();\r\n      point.total = bTotal.toString();\r\n      point.percent = percent;\r\n      if ( !_bLevel.gte('60.0') ){\r\n         point.name = `${percent} ${name}`;\r\n         point.dataLabels = {\r\n           style : {\r\n             fontSize : '16px'\r\n           }\r\n         }\r\n         level60 +=1;\r\n       } else if ( !_bLevel.gte('90.0') ){\r\n          point.name = `${percent} ${name.split(';')[0].substring(0, 9)}`;\r\n          level90 +=1;\r\n       } else {\r\n          point.name = percent;\r\n       }\r\n       _bLevel = _bLevel.plus(percent);\r\n    })\r\n\r\n    return { level60, level90 };\r\n}\r\n\r\nconst _fnSetColorToPoint = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / level90 );\r\n       point.color = Chart.fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.fnGetMonoColor(pointIndex-level60-level90)\r\n     }\r\n   })\r\n}\r\n\r\nexport const fCreateTreeMapConfig = function(json, option){\r\n  const config = ChartConfig.fBaseTreeMapConfig()\r\n     ,  { sliceItems:items100=[], value='' } = option\r\n     ,  zhSeriaId = `${value}_${ChartType.TREE_MAP}`\r\n     ,  jsonData = json.dataset && json.dataset.data\r\n           ? json.dataset.data\r\n           : []\r\n     ,  bYearTotals = _fnCreateYearTotals(jsonData, items100)\r\n     , { data, bTotal } = _fnCreateDataAndTotal(jsonData, items100, bYearTotals)\r\n     , { level60, level90 } = _fnCalcLevelAndSetPercent(data, bTotal)\r\n     , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n     , dateTo = jsonData[1][0] ? jsonData[1][0] : '';\r\n\r\n   _fnSetColorToPoint(data, level60, level90);\r\n\r\n  config.chart.height = Chart.STACKED_HEIGHT;\r\n\r\n  const yearTitle = jsonData[0] && jsonData[0][0]\r\n          ? jsonData[0][0].split('-')[0]\r\n          : '';\r\n  option.title = `${yearTitle}:${option.title}`\r\n  QuandlFn2.setTitleToConfig(config, option)\r\n\r\n  Object.assign(config, {\r\n    series: [ ChartConfig.fCreateTreeMapSeria(zhSeriaId, data) ],\r\n    valueMoving: crValueMoving(bTotal, yearTitle, bPrevTotal, dateTo),\r\n    zhConfig: crZhConfig(option, zhSeriaId),\r\n    info: QuandlFn2.createDatasetInfo(json)\r\n  })\r\n\r\n  return { config };\r\n}\r\n"]}