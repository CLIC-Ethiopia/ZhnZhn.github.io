{"version":3,"sources":["../../../src/adapters/coin-market-cap/CmcAdapter.js"],"names":["getUTCTime","DateUtils","numberFormat","AdapterFn","HEADERS","name","pn","isToN","style","textAlign","isHref","isF","fontWeight","isR","isToFixed","_getCellValue","r","h","parseFloat","toFixed","_toRows","headers","rows","_rows","map","forEach","_crUpdatedTime","json","_seconds","coin","last_updated","_minMs","Math","max","apply","_maxMs","min","_fromTime","_toTime","_crTitle","one","two","_two","_one","_updatedTime","BASE_URL","valueToHref","id","CmcAdapter","toConfig","option","_id","config","title","tableFn","zhCompType","zhConfig","key","toSeries","Error"],"mappings":"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","sourcesContent":["\r\nimport DateUtils from '../../utils/DateUtils'\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nconst { getUTCTime } = DateUtils;\r\nconst { numberFormat } = AdapterFn;\r\n\r\nconst HEADERS = [{\r\n  name: 'Rank',\r\n  pn: 'rank',\r\n  isToN: true,\r\n  style: { textAlign: 'center' }\r\n},{\r\n  name: 'Coin',\r\n  pn: 'symbol',\r\n  isHref: true\r\n},{\r\n  name: 'MarketCap',\r\n  pn: 'market_cap_usd',\r\n  isToN: true,\r\n  isF: true,\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n},{\r\n   name: '1h %',\r\n   pn: 'percent_change_1h',\r\n   isToN: true,\r\n   isR: true\r\n},{\r\n  name: '24h %',\r\n  pn: 'percent_change_24h',\r\n  isToN: true,\r\n  isR: true\r\n},{\r\n  name: '24h Vol.',\r\n  pn: '24h_volume_usd',\r\n  isToN: true,\r\n  isToFixed: true,\r\n  isR: true,\r\n  isF: true,\r\n  style: {\r\n    textAlign: 'right'\r\n  }\r\n},{\r\n  name: '7d %',\r\n  pn: 'percent_change_7d',\r\n  isToN: true,\r\n  isR: true\r\n}\r\n];\r\n\r\nconst _getCellValue = (r, h) => {\r\n  const { pn, isToN, isToFixed } = h;\r\n  return isToN\r\n    ? isToFixed\r\n        ? parseFloat(parseFloat(r[pn]).toFixed(0))\r\n        : parseFloat(r[pn])\r\n    : r[pn];\r\n}\r\n\r\nconst _toRows = ( headers=[], rows=[] ) => {\r\n  const _rows = [...rows].map(r => {\r\n    headers.forEach(h => {\r\n      r[h.pn] = _getCellValue(r, h);\r\n    })\r\n    return r;\r\n  })\r\n  return _rows;\r\n}\r\n\r\nconst _crUpdatedTime = (json) => {\r\n  const _seconds = json.map(coin => coin.last_updated)\r\n  , _minMs = Math.max.apply(Math, _seconds)*1000\r\n  , _maxMs = Math.min.apply(Math, _seconds)*1000\r\n  , _fromTime = getUTCTime(_minMs)\r\n  , _toTime = getUTCTime(_maxMs);\r\n  return _fromTime !== _toTime\r\n    ? `${_fromTime} - ${_toTime}`\r\n    : _fromTime;\r\n};\r\n\r\nconst _crTitle = ({ one, two }, json) => {\r\n  const _two = parseFloat(two) - 1\r\n  , _one = parseFloat(one) + 1\r\n  , _updatedTime = _crUpdatedTime(json);\r\n  return `${_one} - ${_one + _two}: Values in USD: Updated ${_updatedTime} UTC`;\r\n};\r\n\r\nconst BASE_URL = 'https://coinmarketcap.com/currencies/';\r\nconst valueToHref = (id) => `${BASE_URL}${id}`;\r\n\r\nconst CmcAdapter = {\r\n  toConfig(json, option){\r\n    const { one, two } = option\r\n        , _id = `${one}_${two}`\r\n        , config = {\r\n          id: _id,\r\n          title: _crTitle(option, json),\r\n          headers: HEADERS,\r\n          tableFn: {\r\n            numberFormat,\r\n            valueToHref\r\n          },\r\n          rows: _toRows(HEADERS, json),\r\n          zhCompType: 'TABLE',\r\n          zhConfig: {\r\n            id: _id, key: _id\r\n          }\r\n        };\r\n    return { config };\r\n  },\r\n\r\n  toSeries(json, option){\r\n    throw new Error('ZH_1000');\r\n  }\r\n};\r\n\r\nexport default CmcAdapter\r\n"],"file":"CmcAdapter.js"}