{"version":3,"sources":["../../../src/adapters/stat-norway/RouterConfig.js"],"names":["_r","DF","toSpline","crConfig","AREA","SPLINE","COLUMN","AREA_YEARLY","toY","COLUMN_SET","toC","fCrConfig","seriaType","BAR_SET","COLUMN_CLUSTER","isCluster","BAR_CLUSTER","COLUMN_BY_2","by","BAR_BY_2","TREE_MAP","toT","TREE_MAP_CLUSTER","TREE_MAP_2","depth","TREE_MAP_2_CLUSTER","RouterConfig","getCrConfig"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,EAAE,GAAG;AACTC,EAAAA,EAAE,EAAEC,qBAASC,QADJ;AAETC,EAAAA,IAAI,EAAEF,qBAASC,QAFN;AAGTE,EAAAA,MAAM,EAAEH,qBAASC,QAHR;AAITG,EAAAA,MAAM,EAAEJ,qBAASC,QAJR;AAKTI,EAAAA,WAAW,EAAEC,qBAAIL,QALR;AAMTM,EAAAA,UAAU,EAAEC,qBAAIC,SAAJ,CAAc;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAd,CANH;AAOTC,EAAAA,OAAO,EAAEH,qBAAIC,SAAJ,CAAc;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAd,CAPA;AAQTE,EAAAA,cAAc,EAAEJ,qBAAIC,SAAJ,CAAc;AAC5BI,IAAAA,SAAS,EAAE,IADiB;AACXH,IAAAA,SAAS,EAAE;AADA,GAAd,CARP;AAWTI,EAAAA,WAAW,EAAEN,qBAAIC,SAAJ,CAAc;AACzBI,IAAAA,SAAS,EAAE,IADc;AACRH,IAAAA,SAAS,EAAE;AADH,GAAd,CAXJ;AAcTK,EAAAA,WAAW,EAAEP,qBAAIC,SAAJ,CACX;AAAEC,IAAAA,SAAS,EAAE;AAAb,GADW,EACc;AAAEM,IAAAA,EAAE,EAAE;AAAN,GADd,CAdJ;AAiBTC,EAAAA,QAAQ,EAAET,qBAAIC,SAAJ,CACR;AAAEC,IAAAA,SAAS,EAAE;AAAb,GADQ,EACc;AAAEM,IAAAA,EAAE,EAAE;AAAN,GADd,CAjBD;AAoBTE,EAAAA,QAAQ,EAAEC,sBAAIV,SAAJ,EApBD;AAqBTW,EAAAA,gBAAgB,EAAED,sBAAIV,SAAJ,CAChB;AAAEI,IAAAA,SAAS,EAAE;AAAb,GADgB,CArBT;AAwBTQ,EAAAA,UAAU,EAAEF,sBAAIV,SAAJ,CACV,EADU,EACN;AAAEa,IAAAA,KAAK,EAAE;AAAT,GADM,CAxBH;AA2BTC,EAAAA,kBAAkB,EAAEJ,sBAAIV,SAAJ,CAClB;AAAEI,IAAAA,SAAS,EAAE;AAAb,GADkB,EACG;AAAES,IAAAA,KAAK,EAAE;AAAT,GADH;AA3BX,CAAX;AAgCA,IAAME,YAAY,GAAG;AACnBC,EAAAA,WADmB,uBACPf,SADO,EACI;AACrB,WAAOZ,EAAE,CAACY,SAAD,CAAF,IAAiBZ,EAAE,CAACC,EAA3B;AACD;AAHkB,CAArB;eAMeyB,Y","sourcesContent":["\r\nimport toSpline from './toSpline'\r\nimport toY from './toYearly'\r\nimport toC from './toColumn'\r\nimport toT from './toTreeMap'\r\n\r\nconst _r = {\r\n  DF: toSpline.crConfig,\r\n  AREA: toSpline.crConfig,\r\n  SPLINE: toSpline.crConfig,\r\n  COLUMN: toSpline.crConfig,\r\n  AREA_YEARLY: toY.crConfig,\r\n  COLUMN_SET: toC.fCrConfig({ seriaType: 'COLUMN'}),\r\n  BAR_SET: toC.fCrConfig({ seriaType: 'BAR'}),\r\n  COLUMN_CLUSTER: toC.fCrConfig({\r\n    isCluster: true, seriaType: 'COLUMN'\r\n  }),\r\n  BAR_CLUSTER: toC.fCrConfig({\r\n    isCluster: true, seriaType: 'BAR'\r\n  }),\r\n  COLUMN_BY_2: toC.fCrConfig(\r\n    { seriaType: 'COLUMN' }, { by: '2' }\r\n  ),\r\n  BAR_BY_2: toC.fCrConfig(\r\n    { seriaType: 'BAR' }, { by: '2' }\r\n  ),\r\n  TREE_MAP: toT.fCrConfig(),\r\n  TREE_MAP_CLUSTER: toT.fCrConfig(\r\n    { isCluster: true }\r\n  ),\r\n  TREE_MAP_2: toT.fCrConfig(\r\n    {}, { depth: \"d2\" }\r\n  ),\r\n  TREE_MAP_2_CLUSTER: toT.fCrConfig(\r\n    { isCluster: true }, { depth: \"d2\" }\r\n  ),\r\n}\r\n\r\nconst RouterConfig = {\r\n  getCrConfig(seriaType) {\r\n    return _r[seriaType] || _r.DF;\r\n  }\r\n}\r\n\r\nexport default RouterConfig\r\n"],"file":"RouterConfig.js"}