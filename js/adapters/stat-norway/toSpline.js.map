{"version":3,"sources":["../../../src/adapters/stat-norway/toSpline.js"],"names":["toUTC","fnUtil","compose","crDsValuesTimes","fnAdapter","crChartOption","DF_TYPE","_isArr","Array","isArray","_isStr","str","_filterLeadingNulls","data","_len","length","i","y","slice","_isReverse","x","_checkOrder","reverse","_fCrDataPoint","values","time","value","_postProcessData","_toData","times","_values","_crPoint","map","_crSplineSeria","option","seriaType","seriaColor","_type","toLowerCase","Object","assign","ChartConfig","fSeries","type","color","visible","marker","symbol","zhSeriaId","crId","toArea","crConfig","json","title","subtitle","ds","seria","areaConfig","spacingTop","addCaption","clearSeries","addSeries","addMinMax","add","toConfig"],"mappings":"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","sourcesContent":["\r\nimport ChartConfig from '../../charts/ChartConfig'\r\nimport Builder from '../../charts/ConfigBuilder'\r\n\r\nimport fnUtil from './fnUtil'\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst { toUTC, compose } = fnUtil;\r\nconst {\r\n  crDsValuesTimes, crChartOption\r\n} = fnAdapter;\r\n\r\nconst DF_TYPE = 'spline';\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst _filterLeadingNulls = data => {\r\n  const _len = data.length;\r\n  let i = 0;\r\n  for(i; i<_len; i++){\r\n    if (data[i].y !== null) break;\r\n  }\r\n  return data.slice(i);\r\n};\r\n\r\nconst _isReverse = data => data.length > 2\r\n  && data[0].x > data[1].x;\r\nconst _checkOrder = data => _isReverse(data)\r\n  ? data.reverse()\r\n  : data;\r\n\r\nconst _fCrDataPoint = (values) => (time, i) => ({\r\n  x: toUTC(time),\r\n  y: values[i] ? values[i].value : null\r\n});\r\n\r\nconst _postProcessData = compose(\r\n  _filterLeadingNulls,\r\n  _checkOrder\r\n);\r\n\r\nconst _toData = (values, times) => {\r\n  const _values = _isArr(values) ? values : [values]\r\n  , _crPoint = _fCrDataPoint(_values);\r\n  return _isArr(times)\r\n    ? _postProcessData(times.map(_crPoint))\r\n    : [];\r\n};\r\n\r\nconst _crSplineSeria = (data, option={}) => {\r\n  const { seriaType, seriaColor } = option\r\n  , _type = _isStr(seriaType)\r\n      ? seriaType.toLowerCase()\r\n      : DF_TYPE;\r\n  return Object.assign(ChartConfig.fSeries(), {\r\n     type: _type,\r\n     color: seriaColor,\r\n     visible: true,\r\n     data: data,\r\n     marker: {\r\n       symbol: 'circle'\r\n     },\r\n     zhSeriaId: fnAdapter.crId()\r\n  });\r\n};\r\n\r\nconst toArea = {\r\n  crConfig: (json, option) => {\r\n    const { title='', subtitle } = option\r\n    , { ds, values, times } = crDsValuesTimes(json, option)\r\n    , data = _toData(values, times)\r\n    , seria = _crSplineSeria(data, option);\r\n    return Builder()\r\n      .areaConfig({ spacingTop: 25 })\r\n      .addCaption(title, subtitle)\r\n      .clearSeries()\r\n      .addSeries(seria)\r\n      .addMinMax(data, option)\r\n      .add({ ...crChartOption(ds, data, option) })\r\n      .toConfig();\r\n   }\r\n};\r\n\r\nexport default toArea\r\n"],"file":"toSpline.js"}