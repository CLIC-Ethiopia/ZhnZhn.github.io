{"version":3,"sources":["../../../src/adapters/stat-norway/fnAdapter.js"],"names":["SOURCE","DF","_crDescr","option","updated","source","replace","dfId","_date","_crItemCaption","items","caption","_crAreaMapSlice","dfTSlice","mapSlice","forEach","item","slice","Object","assign","fnAdapter","crDsValuesTimes","json","ds","Dataset","values","Data","times","Dimension","id","crId","crTid","time","tidIds","length","crInfo","label","name","description","crZhConfig","dataSource","itemCaption","key","isWithoutAdd","isWithLegend","crValueMoving","d","Array","isArray","valueMoving","date","direction","crChartOption","data","info","zhConfig","numberFormat","value","arrSplit","split","decimal"],"mappings":"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","file":"fnAdapter.js","sourcesContent":["import Highcharts from 'highcharts';\r\nimport JSONstat from 'jsonstat';\r\n\r\nimport AdapterFn from '../AdapterFn';\r\n\r\nconst SOURCE = {\r\n  DF: 'Unknown'\r\n};\r\n\r\nconst _crDescr = ({ updated='', source=SOURCE.DF }, option) => {\r\n  const _date = updated\r\n          .replace('T', ' ')\r\n          .replace('Z', '')\r\n      , { dfId='' } = option;\r\n\r\n  return `TableId: ${dfId} <BR/> ${source}: ${_date}`;\r\n}\r\n\r\nconst _crItemCaption = (option) => {\r\n  const { items, dfId='id'} = option\r\n       , caption =  items[0]\r\n            ? items[0].caption\r\n            : 'All Items';\r\n  return `${dfId}_${caption}`;\r\n}\r\n\r\nconst _crAreaMapSlice = (option) => {\r\n  const { items, dfTSlice } = option\r\n      , mapSlice = {};\r\n  items.forEach(item => {\r\n    if (item.slice) {\r\n      Object.assign(mapSlice, item.slice)\r\n    }\r\n  })\r\n  return Object.assign(mapSlice, dfTSlice)\r\n};\r\n\r\nconst fnAdapter = {\r\n  crDsValuesTimes: (json, option) => {\r\n    const mapSlice = _crAreaMapSlice(option)\r\n        , ds = JSONstat(json).Dataset(0)\r\n        , values = ds.Data(mapSlice)\r\n        , times = ds.Dimension(\"Tid\").id;\r\n\r\n    return { ds, values, times };\r\n  },\r\n\r\n  crId: () => AdapterFn.crId(),\r\n\r\n  crTid: (time, ds) => {\r\n    if (time) {\r\n      return time;\r\n    }\r\n    const tidIds = ds.Dimension(\"Tid\").id;\r\n    return tidIds[tidIds.length-1];\r\n  },\r\n\r\n  crInfo: (ds, option) => {\r\n    const { label='' } = ds;\r\n    return {\r\n      name: label,\r\n      description: _crDescr(ds, option)\r\n    }\r\n  },\r\n\r\n  crZhConfig: (option) => {\r\n    const { dataSource } = option\r\n        , id = fnAdapter.crId()\r\n        , itemCaption = _crItemCaption(option);\r\n    return {\r\n      id, key: id,\r\n      itemCaption,\r\n      isWithoutAdd: true,\r\n      isWithLegend: false,\r\n      dataSource\r\n    };\r\n  },\r\n\r\n  crValueMoving: (d) => {\r\n    if (Array.isArray(d)) {\r\n      return AdapterFn.valueMoving(d);\r\n    }\r\n    return { date: d, direction: 'empty' };\r\n  },\r\n\r\n  crChartOption: (ds, data, option) => {    \r\n    return {\r\n      info: fnAdapter.crInfo(ds, option),\r\n      valueMoving: fnAdapter.crValueMoving(data),\r\n      zhConfig: fnAdapter.crZhConfig(option)\r\n    };\r\n  },\r\n\r\n  numberFormat: (value) => {\r\n    const arrSplit = (value+'').split('.')\r\n        , decimal = arrSplit[1]\r\n            ? arrSplit[1].length\r\n            : 0;\r\n     return Highcharts\r\n       .numberFormat(value, decimal, '.', ' ');\r\n  }\r\n\r\n}\r\n\r\nexport default fnAdapter\r\n"]}