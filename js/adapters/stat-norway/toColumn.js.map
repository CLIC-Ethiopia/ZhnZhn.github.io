{"version":3,"sources":["../../../src/adapters/stat-norway/toColumn.js"],"names":["crTid","crChartOption","C","TITLE","COLORS","_fCrCategoryPoint","c","v","i","y","value","name","Category","label","_fIsCategoryPoint","dfT","p","_compareByY","a","b","_colorItems","data","_clusters","forEach","cluster","colorIndex","points","id","color","_setClusters","_points","map","item","index","arr","crUnarySortedCluster","_crCategory","option","by","items","dfC","dfC2","dfT2","itemSlice","length","Object","assign","slice","category","cTotal","_crData","values","Array","isArray","filter","sort","reverse","toColumn","fCrConfig","param","config","json","crConfig","time","dfTSlice","seriaType","isCluster","_ds","Dataset","_dimC","Dimension","Tid","_values","Data","_subtitle","caption","_c","initBaseColumnOrBar","addCaption","addTooltip","add","chart","spacingTop","toConfig","series"],"mappings":"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","file":"toColumn.js","sourcesContent":["import JSONstat from 'jsonstat';\r\nimport clusterMaker from '../../math/k-means'\r\n\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst { crTid, crChartOption } = fnAdapter;\r\n\r\nconst C = {\r\n  TITLE: 'Statisctics Norway: All Items'\r\n};\r\n\r\nconst COLORS = [\r\n      '#9ecae1', '#6baed6',\r\n      '#4292c6', '#2171b5',\r\n      '#08519c', '#08306b',\r\n      '#74c476'\r\n  ];\r\n\r\nconst _fCrCategoryPoint = (c) => (v, i) => {\r\n  return {\r\n    y: v.value,\r\n    name: c.Category(i).label,\r\n    c: c.Category(i).label\r\n  };\r\n}\r\nconst _fIsCategoryPoint = (dfT) => (p) => {\r\n  if (dfT && p.c === dfT) {\r\n    return false;\r\n  }\r\n  return p.y !== null && p.y !== 0;\r\n}\r\nconst _compareByY = (a, b) => a.y - b.y;\r\n\r\nconst _colorItems = (data, _clusters) => {\r\n  _clusters.forEach((cluster, colorIndex) => {\r\n      cluster.points.forEach(p => {\r\n        data[p.id].color = COLORS[colorIndex]\r\n      })\r\n  })\r\n}\r\n\r\nconst _setClusters = (data) => {\r\n  const _points = data.map((item, index) => {\r\n           const arr = [item.y, 0 ];\r\n           arr.id = index;\r\n           return arr;\r\n        })\r\n       , _clusters = clusterMaker.crUnarySortedCluster(_points)\r\n  _colorItems(data, _clusters)\r\n}\r\n\r\nconst _crCategory = (option, by) => {\r\n  const { items=[], dfC, dfT, dfC2, dfT2 } = option;\r\n  let itemSlice={}, i;\r\n  switch(by){\r\n    case '2':\r\n      for (i=0; i<items.length; i++){\r\n        if (i!==1){\r\n          Object.assign(itemSlice, items[i].slice)\r\n        }\r\n      }\r\n      return {\r\n        category: dfC2,\r\n        cTotal: dfT2,\r\n        itemSlice: items[0].slice\r\n      };\r\n    default:\r\n      for (i=1; i<items.length; i++){\r\n        Object.assign(itemSlice, items[i].slice)\r\n      }\r\n      return {\r\n        category: dfC,\r\n        cTotal: dfT,\r\n        itemSlice\r\n        //itemSlice: items[1].slice\r\n      };\r\n  }\r\n}\r\n\r\nconst _crData = (values, c, cTotal ) => {\r\n  if (!Array.isArray(values)) {\r\n    return [];\r\n  }\r\n  return values\r\n     .map(_fCrCategoryPoint(c))\r\n     .filter(_fIsCategoryPoint(cTotal))\r\n     .sort(_compareByY)\r\n     .reverse();\r\n}\r\n\r\nconst toColumn = {\r\n\r\n  fCrConfig: (param={}, config={}) => {\r\n    return (json, option) => toColumn.crConfig(json, {\r\n      ...option, ...param,\r\n      ..._crCategory(option, config.by)\r\n    });\r\n  },\r\n\r\n  crConfig: (json, option) => {\r\n    const {\r\n            category, itemSlice, time, dfTSlice,\r\n            seriaType, isCluster,\r\n            items=[], cTotal\r\n          } = option\r\n        , _ds = JSONstat(json).Dataset(0)\r\n        , _dimC = _ds.Dimension(category)\r\n        , Tid = crTid(time, _ds)\r\n        , _values = _ds.Data({ Tid, ...itemSlice, ...dfTSlice })\r\n        , _subtitle = `${items[1].caption || ''}: ${Tid}`\r\n        , data = _crData(_values, _dimC, cTotal)\r\n        , _c = data.map(item => item.c)\r\n        , config = ConfigBuilder()\r\n           .initBaseColumnOrBar(_c, seriaType)\r\n           .addCaption(C.TITLE, _subtitle)\r\n           .addTooltip(Tooltip.category)\r\n           .add({\r\n             chart: { spacingTop: 25 },             \r\n             ...crChartOption(_ds, Tid, option)\r\n            })\r\n           .toConfig()\r\n\r\n    if (isCluster) {\r\n      _setClusters(data)\r\n    }\r\n\r\n    config.series[0].data = data\r\n\r\n    return config;\r\n  }\r\n\r\n}\r\n\r\nexport default toColumn\r\n"]}