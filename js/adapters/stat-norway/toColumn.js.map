{"version":3,"sources":["../../../src/adapters/stat-norway/toColumn.js"],"names":["isYNumber","fnAdapter","crTitle","crTid","crChartOption","COLORS","_fCrCategoryPoint","c","v","i","y","value","name","Category","label","_fIsCategoryPoint","dfT","p","_compareByY","a","b","_colorItems","data","_clusters","forEach","cluster","colorIndex","points","id","color","_setClusters","_points","map","item","index","arr","clusterMaker","crUnarySortedCluster","_crCategory","option","by","items","dfC","dfC2","dfT2","itemSlice","length","Object","assign","slice","category","cTotal","_crData","values","Array","isArray","filter","sort","reverse","toColumn","fCrConfig","param","config","json","crConfig","time","dfTSlice","seriaType","seriaColor","isCluster","_ds","Dataset","_dimC","Dimension","Tid","_values","Data","_title","_twoC","caption","_subtitle","_c","barOrColumnConfig","addCaption","addTooltip","Tooltip","add","chart","spacingTop","toConfig","series"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\nimport clusterMaker from '../../math/k-means'\r\n\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst {\r\n        isYNumber,\r\n        crTitle, crTid, crChartOption\r\n      } = fnAdapter;\r\n\r\nconst COLORS = [\r\n      '#9ecae1', '#6baed6',\r\n      '#4292c6', '#2171b5',\r\n      '#08519c', '#08306b',\r\n      '#74c476'\r\n  ];\r\n\r\nconst _fCrCategoryPoint = (c) => (v, i) => {\r\n  return {\r\n    y: v.value,\r\n    name: c.Category(i).label,\r\n    c: c.Category(i).label\r\n  };\r\n}\r\nconst _fIsCategoryPoint = (dfT) => (p) => {\r\n  if (dfT && p.c === dfT) {\r\n    return false;\r\n  }\r\n  return isYNumber(p) && p.y !== 0;\r\n}\r\nconst _compareByY = (a, b) => a.y - b.y;\r\n\r\nconst _colorItems = (data, _clusters) => {\r\n  _clusters.forEach((cluster, colorIndex) => {\r\n      cluster.points.forEach(p => {\r\n        data[p.id].color = COLORS[colorIndex]\r\n      })\r\n  })\r\n}\r\n\r\nconst _setClusters = (data) => {\r\n  const _points = data.map((item, index) => {\r\n           const arr = [item.y, 0 ];\r\n           arr.id = index;\r\n           return arr;\r\n        })\r\n       , _clusters = clusterMaker.crUnarySortedCluster(_points)\r\n  _colorItems(data, _clusters)\r\n}\r\n\r\nconst _crCategory = (option, by) => {\r\n  const { items=[], dfC, dfT, dfC2, dfT2 } = option;\r\n  let itemSlice={}, i;\r\n  switch(by){\r\n    case '2':\r\n      for (i=0; i<items.length; i++){\r\n        if (i!==1 && items[i]){\r\n          Object.assign(itemSlice, items[i].slice)\r\n        }\r\n      }\r\n      return {\r\n        category: dfC2,\r\n        cTotal: dfT2,\r\n        itemSlice\r\n      };\r\n    default:\r\n      for (i=1; i<items.length; i++){\r\n        Object.assign(itemSlice, items[i].slice)\r\n      }\r\n      return {\r\n        category: dfC,\r\n        cTotal: dfT,\r\n        itemSlice\r\n      };\r\n  }\r\n}\r\n\r\nconst _crData = (values, c, cTotal ) => {\r\n  if (!Array.isArray(values)) {\r\n    return [];\r\n  }\r\n  return values\r\n     .map(_fCrCategoryPoint(c))\r\n     .filter(_fIsCategoryPoint(cTotal))\r\n     .sort(_compareByY)\r\n     .reverse();\r\n}\r\n\r\nconst toColumn = {\r\n\r\n  fCrConfig: (param={}, config={}) => {\r\n    return (json, option) => toColumn.crConfig(json, {\r\n      ...option, ...param,\r\n      ..._crCategory(option, config.by)\r\n    });\r\n  },\r\n\r\n  crConfig: (json, option) => {\r\n    const {\r\n            category, itemSlice, time, dfTSlice,\r\n            seriaType, seriaColor,\r\n            isCluster,\r\n            items=[], cTotal\r\n          } = option\r\n        , _ds = JSONstat(json).Dataset(0)\r\n        , _dimC = _ds.Dimension(category)\r\n        , Tid = crTid(time, _ds)\r\n        , _values = _ds.Data({ Tid, ...itemSlice, ...dfTSlice })\r\n        , _title = crTitle(option)\r\n        , _twoC = (items[1]||{}).caption || ''\r\n        , _subtitle = `${_twoC}: ${Tid}`\r\n        , data = _crData(_values, _dimC, cTotal)\r\n        , _c = data.map(item => item.c)\r\n        , config = Builder()\r\n           .barOrColumnConfig(seriaType, _c)\r\n           .addCaption(_title, _subtitle)\r\n           .addTooltip(Tooltip.category)\r\n           .add({\r\n             chart: { spacingTop: 25 },\r\n             ...crChartOption(_ds, Tid, option)\r\n            })\r\n           .toConfig()\r\n    \r\n    if (isCluster) {\r\n      _setClusters(data)\r\n    }\r\n    Object.assign(config.series[0], {\r\n      color: seriaColor,\r\n      data: data\r\n    })\r\n    return config;\r\n  }\r\n\r\n}\r\n\r\nexport default toColumn\r\n"],"file":"toColumn.js"}