{"version":3,"sources":["../../../src/adapters/stat-norway/toTreeMap.js"],"names":["crTid","crChartOption","numberFormat","C","TITLE","NUMBER_STYLE","_crPointName","label","value","_fCrTreeMapPoint","c","title","v","i","Category","name","_toHm","arr","hm","Object","create","forEach","item","caption","_fIsPoint","dfT","depth","p","d","y","_findLevelBy","data","from","sum","stopSum","_maxIndex","length","index","_findLevelIndex","level1","level2","reduce","acc","_v1","_t","_v2","index1","sum1","index2","_compareByValue","a","b","_crCategory","option","by","items","dfC","dfC2","dfT2","category","cTotal","itemSlice","slice","_addPercent","_total","_onePercent","map","percent","parseFloat","toFixed","_addColor","level60","level90","period","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","_level90","deltaColor","point","pointIndex","color","fCreateMonoColor","fnGetMonoColor","_crData","values","categories","Tid","selectOptions","filter","sort","reverse","toTreeMap","crConfig","json","time","dfTSlice","seriaType","isCluster","ds","Dataset","Dimension","_subtitle","Data","_d1","_c","_data","_seria","initTreeMap","treeMap","zhSeriaId","crId","toConfig","config","initBaseTreeMap","addCaption","addSeries","add","chart","spacingTop","marginTop","marginRight","height","alignButtonExport","fCrConfig","param"],"mappings":"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","file":"toTreeMap.js","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport Chart from '../../charts/Chart'\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst { crTid, crChartOption, numberFormat } = fnAdapter;\r\n\r\nconst C = {\r\n  TITLE: 'Statisctics Norway: All Items'\r\n};\r\n\r\nconst NUMBER_STYLE = 'style=\"color:#333;\"';\r\nconst _crPointName = (label, value) => {\r\n  return `${label} <br/>\r\n  <span ${NUMBER_STYLE}>${numberFormat(value)}</span>`;\r\n}\r\n\r\nconst _fCrTreeMapPoint = (c, title) => {\r\n  return (v, i) => {\r\n    const label = c.Category(i).label\r\n       ,  value = v.value;\r\n    return {\r\n      name: _crPointName(label, value),\r\n      value, label, title\r\n    };\r\n  };\r\n}\r\n\r\nconst _toHm = (arr) => {\r\n  const hm = Object.create(null)\r\n  arr.forEach(item => {\r\n    hm[item.caption] = item\r\n  })\r\n  return hm;\r\n}\r\n\r\nconst _fIsPoint = (dfT, hm, depth) => {\r\n  return p => {\r\n    if (dfT && p.label === dfT) {\r\n      return false;\r\n    }\r\n    if ( hm[p.label].d !== depth) {\r\n      return false;\r\n    }\r\n    return p.y !== null && p.y !== 0;\r\n  };\r\n}\r\n\r\nconst _findLevelBy = (data, from, sum, stopSum) => {\r\n  const _maxIndex = data.length;\r\n  if ( from >= _maxIndex ){\r\n    return { index: _maxIndex, sum };\r\n  }\r\n\r\n  let index = _maxIndex, i = from;\r\n  for(;i<_maxIndex;i++){\r\n    sum +=data[i].value\r\n    if (sum>=stopSum) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (index < _maxIndex ){\r\n    index += 1\r\n  }\r\n  return { index, sum };\r\n}\r\n\r\nconst _findLevelIndex = (data, level1, level2) => {\r\n  const _t = data.reduce((acc, p) => acc + p.value, 0)\r\n      , _v1 = (_t/100)*level1\r\n      , _v2 = (_t/100)*level2\r\n      , {\r\n          index:index1,\r\n          sum: sum1\r\n        } = _findLevelBy(data, 0, 0, _v1)\r\n      , {\r\n          index:index2\r\n        } = _findLevelBy(data, index1, sum1, _v2);\r\n\r\n  return { index1, index2 };\r\n}\r\n\r\nconst _compareByValue = (a, b) => a.value - b.value;\r\n\r\nconst _crCategory = (option, by, depth) => {\r\n  const { items=[], dfC, dfT, dfC2, dfT2 } = option;\r\n  switch(by){\r\n    case '2':\r\n      return {\r\n        category: dfC2,\r\n        cTotal: dfT2,\r\n        itemSlice: items[0].slice,\r\n        depth\r\n      };\r\n    default:\r\n      return {\r\n        category: dfC,\r\n        cTotal: dfT,\r\n        itemSlice: items[1].slice,\r\n        depth\r\n      };\r\n  }\r\n}\r\n\r\nconst _addPercent = (data) => {\r\n  const _total = data.reduce((acc, item) => acc + item.value, 0)\r\n     , _onePercent = _total/100;\r\n  return data.map(p => {\r\n     return {\r\n       ...p,\r\n       percent: parseFloat((p.value/_onePercent).toFixed(2))\r\n     }\r\n  });\r\n}\r\n\r\n\r\nconst _addColor = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  const _level90 = level90 - level60;\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+_level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / _level90 );\r\n       point.color = Chart.fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.fnGetMonoColor(pointIndex-level60-_level90)\r\n     }\r\n   })\r\n}\r\n\r\n\r\nconst _crData = (values, categories, Tid, option) => {\r\n  const { selectOptions, depth, cTotal } = option;\r\n  return values\r\n    .map(_fCrTreeMapPoint(categories, Tid))\r\n    .filter(_fIsPoint(cTotal, _toHm(selectOptions[0]), depth))\r\n    .sort(_compareByValue)\r\n    .reverse();\r\n};\r\n\r\nconst toTreeMap = {\r\n  crConfig: (json, option) => {\r\n    const  {\r\n             category, itemSlice, time, dfTSlice,\r\n             seriaType, isCluster, items=[]\r\n           } = option\r\n        , ds = JSONstat(json).Dataset(0)\r\n        , categories = ds.Dimension(category)\r\n        , Tid = crTid(time, ds)\r\n        , _subtitle = `${items[1].caption || ''}: ${Tid}`\r\n        , values = ds.Data({ Tid, ...itemSlice, ...dfTSlice })\r\n        , _d1 = _crData(values, categories, Tid, option )\r\n        , _c = _d1.map(item => item.c)\r\n        , _data = _addPercent(_d1)\r\n        , { index1, index2 } = _findLevelIndex(_data, 60, 90);\r\n\r\n  if (isCluster) {\r\n    _addColor(_data, index1, index2)\r\n  }\r\n\r\n   const _seria = ConfigBuilder()\r\n     .initTreeMap(\r\n        Tooltip.treeMap, {\r\n          zhSeriaId: fnAdapter.crId(),\r\n          data: _data\r\n        }\r\n      )\r\n      .toConfig();\r\n    const config = ConfigBuilder()\r\n      .initBaseTreeMap(_c, seriaType)\r\n      .addCaption(C.TITLE, _subtitle)\r\n      .addSeries(_seria)\r\n      .add({\r\n        chart: {\r\n          spacingTop: 25,\r\n          marginTop: 50,\r\n          marginRight: 5,\r\n          height: 500,\r\n        },\r\n        ...crChartOption(ds, Tid, option)\r\n       })\r\n      .alignButtonExport()\r\n      .toConfig();\r\n\r\n    return config;\r\n  },\r\n\r\n  fCrConfig: (param={}, config={}) => {\r\n    return (json, option) => toTreeMap.crConfig(json, {\r\n      ...option, ...param,\r\n      ..._crCategory(option, config.by, config.depth)\r\n    });\r\n  }\r\n}\r\n\r\nexport default toTreeMap\r\n"]}