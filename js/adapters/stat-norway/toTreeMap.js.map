{"version":3,"sources":["../../../src/adapters/stat-norway/toTreeMap.js"],"names":["crTitle","fnAdapter","crTid","crChartOption","numberFormat","roundBy","NUMBER_STYLE","_crPointName","label","value","_fCrTreeMapPoint","c","title","v","i","Category","name","_toHm","arr","hm","Object","create","forEach","item","caption","_fIsPoint","dfT","depth","p","d","y","_findLevelBy","data","from","sum","stopSum","_maxIndex","length","index","_findLevelIndex","level1","level2","_t","reduce","acc","_v1","_v2","index1","sum1","index2","_compareByValue","a","b","_crCategory","option","by","items","dfC","dfC2","dfT2","category","cTotal","itemSlice","slice","_addPercent","_total","_onePercent","map","percent","_addColor","level60","level90","period","Chart","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","_level90","deltaColor","point","pointIndex","color","fCreateMonoColor","fnGetMonoColor","_crData","values","categories","Tid","selectOptions","Array","isArray","filter","sort","reverse","toTreeMap","crConfig","json","time","dfTSlice","seriaType","isCluster","ds","Dataset","Dimension","_title","_subtitle","Data","_d1","_c","_data","_seria","treeMapSeria","Tooltip","treeMap","toSeria","config","treeMapConfig","addCaption","addSeries","add","chart","spacingTop","marginTop","marginRight","height","alignButtonExport","toConfig","fCrConfig","param"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport Chart from '../../charts/Chart'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst {\r\n  crTitle,\r\n  crTid, crChartOption,\r\n  numberFormat, roundBy\r\n} = fnAdapter;\r\n\r\nconst NUMBER_STYLE = 'style=\"color:#333;\"';\r\nconst _crPointName = (label, value) => {\r\n  return `${label} <br/>\r\n  <span ${NUMBER_STYLE}>${numberFormat(value)}</span>`;\r\n}\r\n\r\nconst _fCrTreeMapPoint = (c, title) => {\r\n  return (v, i) => {\r\n    const label = c.Category(i).label\r\n       ,  value = v.value;\r\n    return {\r\n      name: _crPointName(label, value),\r\n      value, label, title\r\n    };\r\n  };\r\n}\r\n\r\nconst _toHm = (arr) => {\r\n  const hm = Object.create(null)\r\n  arr.forEach(item => {\r\n    hm[item.caption] = item\r\n  })\r\n  return hm;\r\n}\r\n\r\nconst _fIsPoint = (dfT, hm, depth) => {\r\n  return p => {\r\n    if (dfT && p.label === dfT) {\r\n      return false;\r\n    }\r\n    if ( hm[p.label].d !== depth) {\r\n      return false;\r\n    }\r\n    return p.y !== null && p.y !== 0;\r\n  };\r\n}\r\n\r\nconst _findLevelBy = (data, from, sum, stopSum) => {\r\n  const _maxIndex = data.length;\r\n  if ( from >= _maxIndex ){\r\n    return { index: _maxIndex, sum };\r\n  }\r\n\r\n  let index = _maxIndex, i = from;\r\n  for(;i<_maxIndex;i++){\r\n    sum +=data[i].value\r\n    if (sum>=stopSum) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (index < _maxIndex ){\r\n    index += 1\r\n  }\r\n  return { index, sum };\r\n}\r\n\r\nconst _findLevelIndex = (data, level1, level2) => {\r\n  const _t = data.reduce((acc, p) => acc + p.value, 0)\r\n      , _v1 = (_t/100)*level1\r\n      , _v2 = (_t/100)*level2\r\n      , {\r\n          index:index1,\r\n          sum: sum1\r\n        } = _findLevelBy(data, 0, 0, _v1)\r\n      , {\r\n          index:index2\r\n        } = _findLevelBy(data, index1, sum1, _v2);\r\n\r\n  return { index1, index2 };\r\n}\r\n\r\nconst _compareByValue = (a, b) => a.value - b.value;\r\n\r\nconst _crCategory = (option, by, depth) => {\r\n  const { items=[], dfC, dfT, dfC2, dfT2 } = option;\r\n  switch(by){\r\n    case '2':\r\n      return {\r\n        category: dfC2,\r\n        cTotal: dfT2,\r\n        itemSlice: items[0].slice,\r\n        depth\r\n      };\r\n    default:\r\n      return {\r\n        category: dfC,\r\n        cTotal: dfT,\r\n        itemSlice: items[1].slice,\r\n        depth\r\n      };\r\n  }\r\n}\r\n\r\nconst _addPercent = (data) => {\r\n  const _total = data.reduce((acc, item) => acc + item.value, 0)\r\n     , _onePercent = _total/100;\r\n  return data.map(p => ({\r\n    ...p,\r\n    percent: roundBy(p.value/_onePercent)\r\n  }));\r\n};\r\n\r\nconst _addColor = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  const _level90 = level90 - level60;\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+_level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / _level90 );\r\n       point.color = Chart.fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.fnGetMonoColor(pointIndex-level60-_level90)\r\n     }\r\n   })\r\n}\r\n\r\n\r\nconst _crData = (values, categories, Tid, option) => {\r\n  const { selectOptions, depth, cTotal } = option;\r\n  if (!Array.isArray(values)) {\r\n    return [];\r\n  }\r\n  return values\r\n    .map(_fCrTreeMapPoint(categories, Tid))\r\n    .filter(_fIsPoint(cTotal, _toHm(selectOptions[0]), depth))\r\n    .sort(_compareByValue)\r\n    .reverse();\r\n};\r\n\r\nconst toTreeMap = {\r\n  crConfig: (json, option) => {\r\n    const  {\r\n             category, itemSlice, time, dfTSlice,\r\n             seriaType, isCluster, items=[]\r\n           } = option\r\n        , ds = JSONstat(json).Dataset(0)\r\n        , categories = ds.Dimension(category)\r\n        , Tid = crTid(time, ds)\r\n        , _title = crTitle(option)\r\n        , _subtitle = `${items[1].caption || ''}: ${Tid}`\r\n        , values = ds.Data({ Tid, ...itemSlice, ...dfTSlice })\r\n        , _d1 = _crData(values, categories, Tid, option )\r\n        , _c = _d1.map(item => item.c)\r\n        , _data = _addPercent(_d1)\r\n        , { index1, index2 } = _findLevelIndex(_data, 60, 90);\r\n\r\n  if (isCluster) {\r\n    _addColor(_data, index1, index2)\r\n  }\r\n\r\n   const _seria = Builder()\r\n     .treeMapSeria(\r\n        Tooltip.treeMap, {          \r\n          data: _data\r\n      })\r\n      .toSeria();\r\n    const config = Builder()\r\n      .treeMapConfig(_c, seriaType)\r\n      //.addCaption(C.TITLE, _subtitle)\r\n      .addCaption(_title, _subtitle)\r\n      .addSeries(_seria)\r\n      .add({\r\n        chart: {\r\n          spacingTop: 25,\r\n          marginTop: 50,\r\n          marginRight: 5,\r\n          height: 500,\r\n        },\r\n        ...crChartOption(ds, Tid, option)\r\n       })\r\n      .alignButtonExport()\r\n      .toConfig();\r\n\r\n    return config;\r\n  },\r\n\r\n  fCrConfig: (param={}, config={}) => {\r\n    return (json, option) => toTreeMap.crConfig(json, {\r\n      ...option, ...param,\r\n      ..._crCategory(option, config.by, config.depth)\r\n    });\r\n  }\r\n}\r\n\r\nexport default toTreeMap\r\n"],"file":"toTreeMap.js"}