{"version":3,"sources":["../../../src/adapters/bitstamp/toKline.js"],"names":["_crAddConfig","option","zhConfig","_isDailyTimeframe","_isHourlyTimeframe","DAILY_TIME_DELTA","HOURLY_TIME_DELTA","_toMls","timestamp","parseFloat","_fToMls","delta","isRecent","Date","now","_toDailyMls","_toHourlyMls","_crDataOHLCV","json","ohlc","data","_recentIndex","length","timeframe","_toDate","map","item","index","date","open","high","low","close","volume","toKline","getArr","toDate","crAddConfig"],"mappings":";;;;;;;AAAA;;AAIA;;AAEA,MAAMA,YAAY,GAAG;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAiB;AACpCC,IAAAA,QAAQ,EAAE,2BAAWD,MAAX;AAD0B,GAAjB;AAAA,CAArB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,iBAAiB,GAAG,2BAAW,CAAC,OAAD,EAAU,QAAV,CAAX,CAA1B;AAAA,MACEC,kBAAkB,GAAG,2BAAW,CAAC,MAAD,EAAQ,MAAR,EAAe,OAAf,EAAuB,OAAvB,EAA+B,OAA/B,CAAX,CADvB;;AAGA,MAAMC,gBAAgB,GAAG,QAAzB,C,CAAqC;;AACrC,MAAMC,iBAAiB,GAAG,OAA1B,C,CAAqC;;AACrC,MAAMC,MAAM,GAAGC,SAAS,IAAIC,UAAU,CAACD,SAAD,CAAV,GAAsB,IAAlD;AAAA,MACEE,OAAO,GAAIC,KAAD,IAAW,CAACH,SAAD,EAAYI,QAAZ,KAAyBA,QAAQ,GACnDC,IAAI,CAACC,GAAL,KAAa,IADsC,CACjC;AADiC,EAEnDP,MAAM,CAACC,SAAD,CAAN,GAAoBG,KAHzB;AAAA,MAIEI,WAAW,GAAGL,OAAO,CAACL,gBAAD,CAJvB;AAAA,MAKEW,YAAY,GAAGN,OAAO,CAACJ,iBAAD,CALxB;;AAOA,MAAMW,YAAY,GAAG,CAACC,IAAD,EAAOjB,MAAP,KAAkB;AACrC,QAAM;AAAEkB,IAAAA;AAAF,MAAWD,IAAI,CAACE,IAAtB;AAAA,QACEC,YAAY,GAAGF,IAAI,CAACG,MAAL,GAAc,CAD/B;AAAA,QAEE;AAAEC,IAAAA;AAAF,MAAgBtB,MAFlB;AAAA,QAGEuB,OAAO,GAAGrB,iBAAiB,CAACoB,SAAD,CAAjB,GACPR,WADO,GAEPX,kBAAkB,CAACmB,SAAD,CAAlB,GACIP,YADJ,GAEIT,MAPT;;AAQA,SAAOY,IAAI,CAACM,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,MAAkB;AAChCC,IAAAA,IAAI,EAAEJ,OAAO,CAACE,IAAI,CAAClB,SAAN,EAAiBmB,KAAK,KAAKN,YAA3B,CADmB;AAEhCQ,IAAAA,IAAI,EAAEpB,UAAU,CAACiB,IAAI,CAACG,IAAN,CAFgB;AAGhCC,IAAAA,IAAI,EAAErB,UAAU,CAACiB,IAAI,CAACI,IAAN,CAHgB;AAIhCC,IAAAA,GAAG,EAAEtB,UAAU,CAACiB,IAAI,CAACK,GAAN,CAJiB;AAKhCC,IAAAA,KAAK,EAAEvB,UAAU,CAACiB,IAAI,CAACM,KAAN,CALe;AAMhCC,IAAAA,MAAM,EAAExB,UAAU,CAACiB,IAAI,CAACO,MAAN;AANc,GAAlB,CAAT,CAAP;AAQD,CAjBD;;AAmBA,MAAMC,OAAO,GAAG,6BAAe;AAC7BC,EAAAA,MAAM,EAAElB,YADqB;AAE7BmB,EAAAA,MAAM,EAAER,IAAI,IAAIA,IAFa;AAG7BS,EAAAA,WAAW,EAAErC;AAHgB,CAAf,CAAhB;eAMekC,O","sourcesContent":["import { \r\n  crZhConfig,\r\n  isInArrStr\r\n} from '../AdapterFn';\r\nimport crAdapterOHLCV from '../crAdapterOHLCV'\r\n\r\nconst _crAddConfig = ({ option }) => ({\r\n  zhConfig: crZhConfig(option)\r\n});\r\n\r\n/*\r\nFrom Bitstamp API Documentation\r\n  {\r\n     \"high\": \"18638.71\",\r\n     \"timestamp\": \"1606723200\",\r\n     \"volume\": \"402.30570712\",\r\n     \"low\": \"18390.00\",\r\n     \"close\": \"18471.42\",\r\n     \"open\": \"18633.43\"\r\n   }\r\n*/\r\n\r\nconst _isDailyTimeframe = isInArrStr([\"86400\", \"259200\"])\r\n, _isHourlyTimeframe = isInArrStr([\"3600\",\"7200\",\"14400\",\"21600\",\"43200\"]);\r\n\r\nconst DAILY_TIME_DELTA = 86_394_000; //1000*60*60*24 - 1000*60\r\nconst HOURLY_TIME_DELTA = 3_540_000; //1000*60*59\r\nconst _toMls = timestamp => parseFloat(timestamp)*1000\r\n, _fToMls = (delta) => (timestamp, isRecent) => isRecent\r\n   ? Date.now() - 6000 //1000*60\r\n   : _toMls(timestamp) + delta\r\n, _toDailyMls = _fToMls(DAILY_TIME_DELTA)\r\n, _toHourlyMls = _fToMls(HOURLY_TIME_DELTA);\r\n\r\nconst _crDataOHLCV = (json, option) => {\r\n  const { ohlc } = json.data\r\n  , _recentIndex = ohlc.length - 1\r\n  , { timeframe } = option\r\n  , _toDate = _isDailyTimeframe(timeframe)\r\n     ? _toDailyMls\r\n     : _isHourlyTimeframe(timeframe)\r\n         ? _toHourlyMls\r\n         : _toMls;\r\n  return ohlc.map((item, index) => ({\r\n    date: _toDate(item.timestamp, index === _recentIndex),\r\n    open: parseFloat(item.open),\r\n    high: parseFloat(item.high),\r\n    low: parseFloat(item.low),\r\n    close: parseFloat(item.close),\r\n    volume: parseFloat(item.volume)\r\n  }));\r\n}\r\n\r\nconst toKline = crAdapterOHLCV({\r\n  getArr: _crDataOHLCV,\r\n  toDate: date => date,\r\n  crAddConfig: _crAddConfig\r\n});\r\n\r\nexport default toKline\r\n"],"file":"toKline.js"}