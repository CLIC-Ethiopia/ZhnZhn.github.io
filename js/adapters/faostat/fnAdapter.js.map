{"version":3,"sources":["../../../src/adapters/faostat/fnAdapter.js"],"names":["_isArr","Array","isArray","C","DATASET_EMPTY","ENPTY","BLANK","MM_DD","DF_TITLE","_crUnit","json","data","item","length","_unit","Unit","undefined","_crPoint","Year","Months","Value","m","Tail","x","y","_crHm","prName","hm","Object","create","forEach","_itemKey","seriaName","push","_compareByY","a","b","_crRefLegend","legend","propName","_arr","listPn","filter","isYNumber","sort","_hmToPoints","arr","map","_crSeriesData","_hm","_legend","_isValueNumber","_compareByX","_crSeriaData","option","_isItemList","indexOf","_getSeriesPropName","items","_isListForList","fnAdapter","crError","getValue","findMinY","crId","crTitle","title","dfTitle","dfSubtitle","subtitle","p","Area","Item","Element","crSubtitle","crSeriaData","toDataPoints","_prName","toInfo","fnDescr","crZhConfig","id","dfDomain","itemCaption","key","isWithoutSma","dataSource","linkFn","crValueMoving","points","isSeriesReq","isQueryAllowed"],"mappings":"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","sourcesContent":["import {\r\n  isYNumber,\r\n  getValue,\r\n  toUpperCaseFirst,\r\n  monthIndex,\r\n  ymdToUTC,\r\n  valueMoving,\r\n  findMinY,\r\n  mapIf\r\n} from '../AdapterFn';\r\nimport { crError } from '../crFn';\r\nimport fnDescr from './fnDescr';\r\n\r\nconst _isArr = Array.isArray;\r\nconst C = {\r\n  DATASET_EMPTY: 'Dataset is empty',\r\n  ENPTY: '',\r\n  BLANK: ' ',\r\n  MM_DD: '-12-31',\r\n  DF_TITLE: 'More about data on tab Info in Description'\r\n};\r\n\r\nconst _crUnit = (json) => {\r\n  const { data } = json\r\n  , item = data[data.length-1] || {}\r\n  , _unit = item.Unit === undefined\r\n       ? C.DATASET_EMPTY\r\n       : item.Unit || C.BLANK;\r\n\r\n  return toUpperCaseFirst(_unit);\r\n};\r\n\r\nconst _crPoint = ({ Year, Months, Value }) => {\r\n  const m = Months\r\n     ? monthIndex(Months) + 1\r\n     : 0\r\n  , Tail = m !== 0\r\n     ? `-${m}`\r\n     : C.MM_DD;\r\n  return {\r\n    x: ymdToUTC('' + Year + Tail),\r\n    y: Value\r\n  };\r\n};\r\n\r\n\r\nconst _crHm = (json, prName) => {\r\n  const hm = Object.create(null);\r\n  json.data.forEach(item => {\r\n    const _itemKey = item[prName];\r\n    if (!hm[_itemKey]) {\r\n      hm[_itemKey] = []\r\n      hm[_itemKey].seriaName = _itemKey\r\n    }\r\n    hm[_itemKey].push(_crPoint(item))\r\n    /*\r\n     const { Area } = item\r\n     if (!hm[Area]) {\r\n       hm[Area] = []\r\n       hm[Area].seriaName = Area\r\n     }\r\n     hm[Area].push(_crPoint(item))\r\n     */\r\n  })\r\n  return hm;\r\n};\r\n\r\nconst _compareByY = (a, b) => b.y - a.y;\r\n\r\nconst _crRefLegend = (hm) => {\r\n  const legend = [];\r\n  let propName;\r\n  for(propName in hm) {\r\n    const _arr = hm[propName];\r\n    legend.push({\r\n      ..._arr[_arr.length-1],\r\n      //Area: propName\r\n      listPn: propName\r\n    })\r\n  }\r\n  return legend\r\n    .filter(isYNumber)\r\n    .sort(_compareByY);\r\n};\r\n\r\nconst _hmToPoints = (hm, arr) => arr\r\n  .map(item => hm[item.listPn]);\r\n  //.map(item => hm[item.Area]);\r\n\r\n\r\nconst _crSeriesData = (json, prName) => {\r\n  const _hm = _crHm(json, prName)\r\n  , _legend = _crRefLegend(_hm);\r\n\r\n  return _hmToPoints(_hm, _legend);\r\n};\r\n\r\nconst _isValueNumber = item => typeof item.Value === 'number';\r\nconst _compareByX = (a, b) => a.x - b.x;\r\n\r\nconst _crSeriaData = (json, option) => {\r\n  return mapIf(json.data, _crPoint, _isValueNumber)\r\n    .sort(_compareByX);\r\n};\r\n\r\nconst _isItemList = item => getValue(item)\r\n  .indexOf('>') !== -1;\r\n\r\nconst _getSeriesPropName = ({ items }) => {\r\n  if (_isItemList(items[0])) {\r\n    return 'Area';\r\n  }\r\n  if (_isItemList(items[1])) {\r\n    return 'Item';\r\n  }\r\n};\r\n\r\nconst _isListForList = ({ items }) => {\r\n  return _isItemList(items[0])\r\n    && _isItemList(items[1]);\r\n};\r\n\r\nconst fnAdapter = {\r\n  crError,\r\n  getValue,\r\n  findMinY,\r\n\r\n  crId: ({ _itemKey }) => _itemKey,\r\n  crTitle: (json, option) => {\r\n     const {\r\n       title, dfTitle,\r\n       dfSubtitle, subtitle\r\n     } = option;\r\n     if (dfSubtitle) {\r\n       return `${subtitle} ${_crUnit(json)}: ${title}`;\r\n     }\r\n     if (title) {\r\n       return dfTitle\r\n         ? `${dfTitle}: ${title}`\r\n         : title;\r\n     }\r\n     const { data } = json\r\n         , p = data[data.length-1];\r\n     if (p && typeof p === 'object') {\r\n       const { Area='', Item='', Element='' } = p;\r\n       return `${Area} ${Item} ${Element}`;\r\n     } else {\r\n       return C.DF_TITLE;\r\n     }\r\n  },\r\n  crSubtitle: (json, option) => {\r\n    const { dfSubtitle, subtitle } = option;\r\n    return dfSubtitle\r\n      ? dfSubtitle\r\n      : `${subtitle}: ${_crUnit(json)}`;\r\n  },\r\n  crSeriaData: _crSeriaData,\r\n  toDataPoints: (json, option) => {\r\n    const _prName = _getSeriesPropName(option);\r\n    return _prName\r\n      ? _crSeriesData(json, _prName)\r\n      : _crSeriaData(json, option);\r\n  },\r\n  toInfo: fnDescr.toInfo,\r\n  crZhConfig: (id, { dfDomain, itemCaption }) => ({\r\n    id: id,\r\n    key: id,\r\n    isWithoutSma: true,\r\n    dataSource: \"FAOSTAT\",\r\n    linkFn: \"FAO_STAT\",\r\n    item: dfDomain,\r\n    itemCaption: itemCaption\r\n  }),\r\n  crValueMoving: (points) => {\r\n    return _isArr(points) && !_isArr(points[0])\r\n      ? valueMoving(points)\r\n      : void 0;\r\n  },\r\n  isSeriesReq: _getSeriesPropName,\r\n  isQueryAllowed: _isListForList\r\n};\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}