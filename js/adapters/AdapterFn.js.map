{"version":3,"sources":["../../src/adapters/AdapterFn.js"],"names":["dt","ut","fCompareBy","fCompareByTwoProps","getC","getV","formatAllNumber","findMinY","seriaFn","findMaxY","ymdToUTC","ymdhmsToUTC","mlsToDmy","getFromDate","getYmdhmUTC","monthIndex","EMPTY","ITEM_CONF_PROP_NAMES","_isNaN","n","_isArr","Array","isArray","_isNumber","_fIsNumber","pn","p","isFinite","_getDate","point","x","_getValue","y","_crBigValueFrom","_crDmyFrom","_fToFloatOr","dfValue","str","_v","parseFloat","AdapterFn","crFn","pointFn","legendFn","getCaption","getValue","roundBy","mathFn","numberFormat","isNumberOrNull","v","isYNumber","toFloatOrEmpty","compareByDate","compareByY","compareByValue","compareByValueId","crValueMoving","bNowValue","bPrevValue","dfR","nowValue","prevValue","Direction","fnFormat","valueMoving","data","date","direction","len","length","_pointNow","_pointPrev","dateTo","valueTo","crItemConf","option","_itemConf","_value","forEach","k","crValueConf","_p","joinBy","delimeter","restItems","filter","Boolean","join","toUpperCaseFirst","toUpperCase","substring"],"mappings":";;;;;;;;;AACA;;AAEA;;AAEA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;IAIEA,E,GAKEC,c,CALFD,E;IACAE,U,GAIED,c,CAJFC,U;IACAC,kB,GAGEF,c,CAHFE,kB;IACAC,I,GAEEH,c,CAFFG,I;IAAMC,I,GAEJJ,c,CAFII,I;IACNC,e,GACEL,c,CADFK,e;IAEMC,Q,GAAuBC,mB,CAAvBD,Q;IAAUE,Q,GAAaD,mB,CAAbC,Q;IAGhBC,Q,GAMEV,E,CANFU,Q;IACAC,W,GAKEX,E,CALFW,W;IACAC,Q,GAIEZ,E,CAJFY,Q;IACAC,W,GAGEb,E,CAHFa,W;IACAC,W,GAEEd,E,CAFFc,W;IACAC,U,GACEf,E,CADFe,U;AAGF,IAAMC,KAAK,GAAG,EAAd;AAEA,IAAMC,oBAAoB,GAAG,CAC5B,KAD4B,EACrB,QADqB,EAE5B,OAF4B,EAEnB,UAFmB,EAEP,aAFO,EAG5B,WAH4B,CAA7B;;AAMA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,CAAC;AAAA,SAAI,OAAOA,CAAP,KAAa,QAAb,IACdA,CAAC,GAACA,CAAF,KAAQ,CADE;AAAA,CAAhB;AAAA,IAEEC,MAAM,GAAGC,KAAK,CAACC,OAFjB;AAAA,IAGEC,SAAS,GAAG,SAAZA,SAAY,CAAAJ,CAAC;AAAA,SAAI,OAAOA,CAAP,KAAa,QAAb,IACXA,CAAC,GAAGA,CAAL,KAAY,CADJ;AAAA,CAHf;;AAKA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD;AAAA,SAAQ,UAACC,CAAD,EAAO;AAChC,WAAO,OAAOA,CAAC,CAACD,EAAD,CAAR,KAAiB,QAAjB,IACFE,QAAQ,CAACD,CAAC,CAACD,EAAD,CAAF,CADb;AAED,GAHkB;AAAA,CAAnB;;AAKA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAGT,MAAM,CAACS,KAAD,CAAN,GACrBA,KAAK,CAAC,CAAD,CADgB,GAErB,CAACA,KAAK,IAAI,EAAV,EAAcC,CAFI;AAAA,CAAtB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,KAAD;AAAA,SAAWT,MAAM,CAACS,KAAD,CAAN,GACzBN,SAAS,CAACM,KAAK,CAAC,CAAD,CAAN,CAAT,GACKA,KAAK,CAAC,CAAD,CADV,GAEK,KAHoB,GAIzBA,KAAK,IAAIN,SAAS,CAACM,KAAK,CAACG,CAAP,CAAlB,GACIH,KAAK,CAACG,CADV,GAEI,KANU;AAAA,CAAlB;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAJ,KAAK;AAAA,SAAI,qBAAIE,SAAS,CAACF,KAAD,CAAb,CAAJ;AAAA,CAA7B;;AACA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAAAL,KAAK;AAAA,SAAIjB,QAAQ,CAACgB,QAAQ,CAACC,KAAD,CAAT,CAAZ;AAAA,CAAxB;;AAEA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAAAC,OAAO;AAAA,SAAI,UAAAC,GAAG,EAAI;AACpC,QAAMC,EAAE,GAAGC,UAAU,CAACF,GAAD,CAArB;;AACA,WAAOnB,MAAM,CAACoB,EAAD,CAAN,GAAaF,OAAb,GAAuBE,EAA9B;AACD,GAH0B;AAAA,CAA3B;;AAKA,IAAME,SAAS,iCACVC,gBADU,EAEVC,mBAFU,EAGVC,oBAHU;AAKbjC,EAAAA,QAAQ,EAARA,QALa;AAMbC,EAAAA,WAAW,EAAXA,WANa;AAObE,EAAAA,WAAW,EAAXA,WAPa;AAQbC,EAAAA,WAAW,EAAXA,WARa;AASbC,EAAAA,UAAU,EAAVA,UATa;AAWb6B,EAAAA,UAAU,EAAExC,IAXC;AAYbyC,EAAAA,QAAQ,EAAExC,IAZG;AAcbyC,EAAAA,OAAO,EAAEC,mBAAOD,OAdH;AAebE,EAAAA,YAAY,EAAE1C,eAfD;AAiBb2C,EAAAA,cAAc,EAAE,wBAAAC,CAAC;AAAA,WAAI3B,SAAS,CAAC2B,CAAD,CAAT,IAAgBA,CAAC,KAAK,IAA1B;AAAA,GAjBJ;AAmBbC,EAAAA,SAAS,EAAE3B,UAAU,CAAC,GAAD,CAnBR;AAoBb4B,EAAAA,cAAc,EAAEjB,WAAW,CAAC,EAAD,CApBd;AAsBbkB,EAAAA,aAAa,EAAEnD,UAAU,CAAC,CAAD,CAtBZ;AAuBboD,EAAAA,UAAU,EAAEpD,UAAU,CAAC,GAAD,CAvBT;AAwBbqD,EAAAA,cAAc,EAAErD,UAAU,CAAC,OAAD,CAxBb;AAyBbsD,EAAAA,gBAAgB,EAAErD,kBAAkB,CAAC,OAAD,EAAU,IAAV,CAzBvB;AA2BbsD,EAAAA,aAAa,EAAE;AAAA,8BACbC,SADa;AAAA,QACbA,SADa,+BACH,qBAAI,KAAJ,CADG;AAAA,+BAEbC,UAFa;AAAA,QAEbA,UAFa,gCAEF,qBAAI,KAAJ,CAFE;AAAA,QAGbC,GAHa,QAGbA,GAHa;AAAA,WAITb,mBAAOU,aAAP,CAAqB;AACzBI,MAAAA,QAAQ,EAAEH,SADe;AAEzBI,MAAAA,SAAS,EAAEH,UAFc;AAGzBI,MAAAA,SAAS,EAAEA,eAHc;AAIzBC,MAAAA,QAAQ,EAAE1D,eAJe;AAKzBsD,MAAAA,GAAG,EAAEA;AALoB,KAArB,CAJS;AAAA,GA3BF;AAwCbK,EAAAA,WAxCa,uBAwCDC,IAxCC,EAwCKN,GAxCL,EAwCS;AACpB,QAAI,CAACxC,MAAM,CAAC8C,IAAD,CAAX,EAAmB;AACjB,aAAO;AACLC,QAAAA,IAAI,EAAED,IADD;AAELE,QAAAA,SAAS,EAAEL,gBAAU/C;AAFhB,OAAP;AAID;;AAED,QAAMqD,GAAG,GAAGH,IAAI,CAACI,MAAjB;AAAA,QACEC,SAAS,GAAGL,IAAI,CAACG,GAAG,GAAC,CAAL,CAAJ,IAAe,CAAErD,KAAF,EAAS,CAAT,CAD7B;AAAA,QAEE0C,SAAS,GAAGzB,eAAe,CAACsC,SAAD,CAF7B;AAAA,QAGEC,UAAU,GAAGN,IAAI,CAACG,GAAG,GAAC,CAAL,CAAJ,IAAeE,SAH9B;AAAA,QAIEZ,UAAU,GAAG1B,eAAe,CAACuC,UAAD,CAJ9B;AAAA,QAKEL,IAAI,GAAGjC,UAAU,CAACqC,SAAD,CALnB;AAAA,QAMEE,MAAM,GAAGvC,UAAU,CAACsC,UAAD,CANrB;;AAQE,yCACKhC,SAAS,CAACiB,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAATA,SAAF;AAAaC,MAAAA,UAAU,EAAVA,UAAb;AAAyBC,MAAAA,GAAG,EAAHA;AAAzB,KAAxB,CADL;AAEEc,MAAAA,OAAO,EAAEpE,eAAe,CAACqD,UAAD,CAF1B;AAGEQ,MAAAA,IAAI,EAAJA,IAHF;AAGQM,MAAAA,MAAM,EAANA;AAHR;AAKH,GA7DY;AA+DbE,EAAAA,UAAU,EAAE,oBAACC,MAAD,EAAY;AACtB,QAAMC,SAAS,GAAG,EAAlB;;AACA,QAAIC,MAAJ;;AACA7D,IAAAA,oBAAoB,CAAC8D,OAArB,CAA6B,UAAAC,CAAC,EAAI;AAChCF,MAAAA,MAAM,GAAGF,MAAM,CAACI,CAAD,CAAf;;AACA,UAAIF,MAAM,IAAI,IAAd,EAAoB;AAClBD,QAAAA,SAAS,CAACG,CAAD,CAAT,GAAeF,MAAf;AACD;AACD,KALF;AAMC,WAAOD,SAAP;AACF,GAzEY;AA2EbI,EAAAA,WAAW,EAAE,qBAAAf,IAAI,EAAI;AACnB,QAAMgB,EAAE,GAAGhB,IAAI,CAACA,IAAI,CAACI,MAAL,GAAY,CAAb,CAAf;AACA,WAAO;AACLxC,MAAAA,CAAC,EAAEF,QAAQ,CAACsD,EAAD,CADN;AAELlD,MAAAA,CAAC,EAAED,SAAS,CAACmD,EAAD;AAFP,KAAP;AAID,GAjFY;AAmFbC,EAAAA,MAAM,EAAE,gBAACC,SAAD;AAAA,sCAAeC,SAAf;AAAeA,MAAAA,SAAf;AAAA;;AAAA,WAA6BA,SAAS,CAC5CC,MADmC,CAC5BC,OAD4B,EAEnCC,IAFmC,CAE9BJ,SAF8B,CAA7B;AAAA,GAnFK;AAuFbK,EAAAA,gBAAgB,EAAE,0BAACpD,GAAD;AAAA,WAAS,OAAOA,GAAP,KAAe,QAAf,IACtBA,GAAG,CAACiC,MAAJ,GAAa,CADS,GAErBjC,GAAG,CAAC,CAAD,CAAH,CAAOqD,WAAP,KAAuBrD,GAAG,CAACsD,SAAJ,CAAc,CAAd,CAFF,GAGrB3E,KAHY;AAAA,GAvFL;AA6FbT,EAAAA,QAAQ,EAARA,QA7Fa;AA8FbE,EAAAA,QAAQ,EAARA;AA9Fa,EAAf;eAiGe+B,S","sourcesContent":["\r\nimport Big from 'big.js'\r\n\r\nimport ut from '../utils/ut'\r\n\r\nimport mathFn from '../math/mathFn'\r\nimport seriaFn from '../math/seriaFn'\r\n\r\nimport { Direction } from '../constants/Type'\r\n\r\nimport crFn from './crFn'\r\nimport pointFn from './pointFn'\r\nimport legendFn from './legendFn'\r\n\r\n\r\nconst {\r\n  dt,\r\n  fCompareBy,\r\n  fCompareByTwoProps,\r\n  getC, getV,\r\n  formatAllNumber\r\n} = ut;\r\nconst { findMinY, findMaxY } = seriaFn;\r\n\r\nconst {\r\n  ymdToUTC,\r\n  ymdhmsToUTC,\r\n  mlsToDmy,\r\n  getFromDate,\r\n  getYmdhmUTC,\r\n  monthIndex\r\n} = dt;\r\n\r\nconst EMPTY = '';\r\n\r\nconst ITEM_CONF_PROP_NAMES = [\r\n 'url', 'loadId',\r\n 'title', 'subtitle', 'itemCaption',\r\n 'seriaType'\r\n];\r\n\r\nconst _isNaN = n => typeof n === 'number'\r\n  && (n-n !== 0)\r\n, _isArr = Array.isArray\r\n, _isNumber = n => typeof n === 'number'\r\n    && (n - n) === 0;\r\nconst _fIsNumber = (pn) => (p) => {\r\n  return typeof p[pn] === 'number'\r\n    && isFinite(p[pn]);\r\n}\r\n\r\nconst _getDate = point =>_isArr(point)\r\n  ? point[0]\r\n  : (point || {}).x;\r\n\r\nconst _getValue = (point) => _isArr(point)\r\n  ? _isNumber(point[1])\r\n       ? point[1]\r\n       : '0.0'\r\n  : point && _isNumber(point.y)\r\n      ? point.y\r\n      : '0.0';\r\n\r\nconst _crBigValueFrom = point => Big(_getValue(point));\r\nconst _crDmyFrom = point => mlsToDmy(_getDate(point));\r\n\r\nconst _fToFloatOr = dfValue => str => {\r\n  const _v = parseFloat(str);\r\n  return _isNaN(_v) ? dfValue : _v;\r\n};\r\n\r\nconst AdapterFn = {\r\n  ...crFn,\r\n  ...pointFn,\r\n  ...legendFn,\r\n\r\n  ymdToUTC,\r\n  ymdhmsToUTC,\r\n  getFromDate,\r\n  getYmdhmUTC,\r\n  monthIndex,\r\n\r\n  getCaption: getC,\r\n  getValue: getV,\r\n\r\n  roundBy: mathFn.roundBy,\r\n  numberFormat: formatAllNumber,\r\n\r\n  isNumberOrNull: v => _isNumber(v) || v === null,\r\n\r\n  isYNumber: _fIsNumber('y'),\r\n  toFloatOrEmpty: _fToFloatOr(''),\r\n\r\n  compareByDate: fCompareBy(0),\r\n  compareByY: fCompareBy('y'),\r\n  compareByValue: fCompareBy('value'),\r\n  compareByValueId: fCompareByTwoProps('value', 'id'),\r\n\r\n  crValueMoving: ({\r\n    bNowValue=Big('0.0'),\r\n    bPrevValue=Big('0.0'),\r\n    dfR\r\n  }) => mathFn.crValueMoving({\r\n    nowValue: bNowValue,\r\n    prevValue: bPrevValue,\r\n    Direction: Direction,\r\n    fnFormat: formatAllNumber,\r\n    dfR: dfR\r\n  }),\r\n\r\n\r\n  valueMoving(data, dfR){\r\n    if (!_isArr(data)) {\r\n      return {\r\n        date: data,\r\n        direction: Direction.EMPTY\r\n      };\r\n    }\r\n\r\n    const len = data.length\r\n    , _pointNow = data[len-1] || [ EMPTY, 0 ]\r\n    , bNowValue = _crBigValueFrom(_pointNow)\r\n    , _pointPrev = data[len-2] || _pointNow\r\n    , bPrevValue = _crBigValueFrom(_pointPrev)\r\n    , date = _crDmyFrom(_pointNow)\r\n    , dateTo = _crDmyFrom(_pointPrev);\r\n\r\n      return  {\r\n        ...AdapterFn.crValueMoving({ bNowValue, bPrevValue, dfR }),\r\n        valueTo: formatAllNumber(bPrevValue),\r\n        date, dateTo\r\n      };\r\n  },\r\n\r\n  crItemConf: (option) => {\r\n    const _itemConf = {};\r\n    let _value;\r\n    ITEM_CONF_PROP_NAMES.forEach(k => {\r\n      _value = option[k]\r\n      if (_value != null) {\r\n        _itemConf[k] = _value\r\n      }\r\n     })\r\n     return _itemConf;\r\n  },\r\n\r\n  crValueConf: data => {\r\n    const _p = data[data.length-1];\r\n    return {\r\n      x: _getDate(_p),\r\n      y: _getValue(_p)\r\n    };\r\n  },\r\n\r\n  joinBy: (delimeter, ...restItems) => restItems\r\n   .filter(Boolean)\r\n   .join(delimeter),\r\n\r\n  toUpperCaseFirst: (str) => typeof str === 'string'\r\n    && str.length > 0\r\n      ? str[0].toUpperCase() + str.substring(1)\r\n      : EMPTY\r\n  ,\r\n\r\n  findMinY,\r\n  findMaxY\r\n};\r\n\r\nexport default AdapterFn\r\n"],"file":"AdapterFn.js"}