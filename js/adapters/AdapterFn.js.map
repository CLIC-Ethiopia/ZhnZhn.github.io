{"version":3,"sources":["../../src/adapters/AdapterFn.js"],"names":["EMPTY","M","ymdToUTC","dt","ymdtToUTC","ymdhmsToUTC","mlsToDmy","_isNaN","Number","isNaN","_isArr","Array","isArray","_fIsNumber","pn","p","isFinite","_compareArrByIndex","index","arrA","arrB","_compareByTwoProp","propName1","propName2","a","b","_getDate","point","x","_getValue","y","AdapterFn","volumeColumnPoint","date","open","close","volume","option","_color","C","GREEN","RED","GRAY","Object","assign","color","_open","_close","athPoint","prevClose","_bDelta","minus","_bPercent","times","div","abs","toFixed","gt","gte","WHITE","parseFloat","legendItem","name","is","isVisible","stockSeriesLegend","S_STOCK_CLOSE","S_HIGH","S_LOW","S_OPEN","formatAllNumber","numberFormat","isNumberOrNull","v","isYNumber","toFloatOrNull","str","_v","compareByDate","compareByY","compareByValue","compareByValueId","crValueMoving","bNowValue","bPrevValue","dfR","mathFn","nowValue","prevValue","Direction","fnFormat","valueMoving","data","direction","len","length","_pointNow","_nowValue","_pointPrev","_prevValue","_nowDate","_prevDate","dateTo","valueTo","crId","Date","now","toString","Math","random","substr","toUpperCase","toUpperCaseFirst","appendWithColon","args","forEach","s","monthIndex","indexOf","String","toLowerCase","findMinY","seriaFns","findMaxY","crError","errCaption","message","crItemLink","caption","itemUrl"],"mappings":";;;;;;;;;AACA;;AAEA;;AACA;;AAEA;;AAEA;;AACA;;AAEA;;AAEA,IAAMA,KAAK,GAAG,EAAd;AACA,IAAMC,CAAC,GAAG,CAAC,SAAD,EAAY,UAAZ,EACR,OADQ,EACC,OADD,EACU,KADV,EAER,MAFQ,EAEA,MAFA,EAEQ,QAFR,EAGR,WAHQ,EAGK,SAHL,EAGgB,UAHhB,EAIR,UAJQ,CAAV;IAQEC,Q,GAIEC,qB,CAJFD,Q;IACAE,S,GAGED,qB,CAHFC,S;IACAC,W,GAEEF,qB,CAFFE,W;IACAC,Q,GACEH,qB,CADFG,Q;;AAGF,IAAMC,MAAM,GAAGC,MAAM,IAAIA,MAAM,CAACC,KAAjB,IAA0BA,KAAzC;;AACA,IAAMC,MAAM,GAAGC,KAAK,CAACC,OAArB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD;AAAA,SAAQ,UAACC,CAAD,EAAO;AAChC,WAAO,OAAOA,CAAC,CAACD,EAAD,CAAR,KAAiB,QAAjB,IACFE,QAAQ,CAACD,CAAC,CAACD,EAAD,CAAF,CADb;AAED,GAHkB;AAAA,CAAnB;;AAKA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK;AAAA,SAAI,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAClD,QAAID,IAAI,CAACD,KAAD,CAAJ,GAAcE,IAAI,CAACF,KAAD,CAAtB,EAA+B,OAAO,CAAC,CAAR,CAA/B,KACK,IAAIC,IAAI,CAACD,KAAD,CAAJ,KAAgBE,IAAI,CAACF,KAAD,CAAxB,EAAiC,OAAO,CAAP,CAAjC,KACA,OAAO,CAAP;AACN,GAJ+B;AAAA,CAAhC;;AAKA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAYC,SAAZ;AAAA,SAA0B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC5D,QAAID,CAAC,CAACF,SAAD,CAAD,GAAeG,CAAC,CAACH,SAAD,CAApB,EAAiC,OAAO,CAAC,CAAR,CAAjC,KACK,IAAIE,CAAC,CAACF,SAAD,CAAD,GAAeG,CAAC,CAACH,SAAD,CAApB,EAAiC,OAAO,CAAP,CAAjC,KACA,IAAIE,CAAC,CAACD,SAAD,CAAD,GAAeE,CAAC,CAACF,SAAD,CAApB,EAAiC,OAAO,CAAC,CAAR,CAAjC,KACA,IAAIC,CAAC,CAACD,SAAD,CAAD,GAAeC,CAAC,CAACD,SAAD,CAApB,EAAiC,OAAO,CAAP,CAAjC,KACA,OAAO,CAAP;AACN,GANyB;AAAA,CAA1B;;AAQA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAGjB,MAAM,CAACiB,KAAD,CAAN,GACrBA,KAAK,CAAC,CAAD,CADgB,GAErBA,KAAK,CAACC,CAFY;AAAA,CAAtB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,KAAD,EAAW;AAC3B,MAAIjB,MAAM,CAACiB,KAAD,CAAV,EAAkB;AAChB,WAAOA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAZ,GACFA,KAAK,CAAC,CAAD,CADH,GAEF,KAFL;AAGD,GAJD,MAIO;AACL,WAAOA,KAAK,IACPA,KAAK,CAACG,CAAN,IAAW,IADT,IAEF,CAACvB,MAAM,CAACoB,KAAK,CAACG,CAAP,CAFL,GAGDH,KAAK,CAACG,CAHL,GAID,KAJN;AAKD;AACF,CAZD;;AAcA,IAAMC,SAAS,GAAG;AAChB7B,EAAAA,QAAQ,EAARA,QADgB;AAEhBE,EAAAA,SAAS,EAATA,SAFgB;AAGhBC,EAAAA,WAAW,EAAXA,WAHgB;AAKhB2B,EAAAA,iBALgB,mCAKyC;AAAA,QAArCC,IAAqC,QAArCA,IAAqC;AAAA,QAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,QAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,QAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AACvD,QAAIC,MAAJ;;AACA,QAAIJ,IAAI,IAAIC,KAAK,GAAGD,IAApB,EAA0B;AACxBI,MAAAA,MAAM,GAAGC,kBAAEC,KAAX;AACD,KAFD,MAEO,IAAIN,IAAI,IAAIC,KAAK,GAACD,IAAlB,EAAwB;AAC7BI,MAAAA,MAAM,GAAGC,kBAAEE,GAAX;AACD,KAFM,MAEA;AACLH,MAAAA,MAAM,GAAGC,kBAAEG,IAAX;AACD;;AAED,WAAOC,MAAM,CAACC,MAAP,CAAc;AACnBhB,MAAAA,CAAC,EAAEK,IADgB;AACVH,MAAAA,CAAC,EAAEM,MADO;AACCS,MAAAA,KAAK,EAAEP,MADR;AAEnBQ,MAAAA,KAAK,EAAEZ,IAFY;AAENa,MAAAA,MAAM,EAAEZ;AAFF,KAAd,EAGJE,MAHI,CAAP;AAID,GAnBe;AAqBhBW,EAAAA,QArBgB,2BAqBoB;AAAA,QAAzBf,IAAyB,SAAzBA,IAAyB;AAAA,QAAnBgB,SAAmB,SAAnBA,SAAmB;AAAA,QAARf,IAAQ,SAARA,IAAQ;;AAClC,QAAMgB,OAAO,GAAIhB,IAAI,IAAIe,SAAT,GACL,qBAAIA,SAAJ,EAAeE,KAAf,CAAqBjB,IAArB,CADK,GAEL,qBAAI,KAAJ,CAFX;AAAA,QAGMkB,SAAS,GAAIH,SAAD,GACPC,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmBC,GAAnB,CAAuBL,SAAvB,EAAkCM,GAAlC,GAAwCC,OAAxC,CAAgD,CAAhD,CADO,GAEP,qBAAI,KAAJ,CALX;;AAOA,QAAIlB,MAAJ;;AACA,QAAIY,OAAO,CAACO,EAAR,CAAW,GAAX,CAAJ,EAAoB;AAClBnB,MAAAA,MAAM,GAAGC,kBAAEE,GAAX;AACD,KAFD,MAGK,IAAI,CAACS,OAAO,CAACQ,GAAR,CAAY,GAAZ,CAAL,EAAsB;AACzBpB,MAAAA,MAAM,GAAGC,kBAAEC,KAAX;AACD,KAFI,MAEE;AACLF,MAAAA,MAAM,GAAIJ,IAAD,GAASK,kBAAEG,IAAX,GAAkBH,kBAAEoB,KAA7B;AACD;;AAED,WAAO;AACL/B,MAAAA,CAAC,EAAGK,IADC;AAELH,MAAAA,CAAC,EAAG8B,UAAU,CAACR,SAAD,CAFT;AAGLjB,MAAAA,KAAK,EAAGc,SAHH;AAILf,MAAAA,IAAI,EAAGA,IAAI,GAAGA,IAAH,GAAU,SAJhB;AAKLW,MAAAA,KAAK,EAAGP;AALH,KAAP;AAOD,GA9Ce;AAgDhBuB,EAAAA,UAAU,EAAE,oBAAC3C,KAAD,EAAQ2B,KAAR,EAAeiB,IAAf,EAAqBC,EAArB;AAAA,QAAqBA,EAArB;AAAqBA,MAAAA,EAArB,GAAwB,KAAxB;AAAA;;AAAA,WAAmC;AAC7C7C,MAAAA,KAAK,EAALA,KAD6C;AACtC2B,MAAAA,KAAK,EAALA,KADsC;AAC/BiB,MAAAA,IAAI,EAAJA,IAD+B;AAE7CE,MAAAA,SAAS,EAAED;AAFkC,KAAnC;AAAA,GAhDI;AAqDhBE,EAAAA,iBArDgB,+BAqDG;AACjB,WAAO,CACLlC,SAAS,CAAC8B,UAAV,CAAqB,CAArB,EAAwBtB,kBAAE2B,aAA1B,EAAyC,OAAzC,EAAkD,IAAlD,CADK,EAELnC,SAAS,CAAC8B,UAAV,CAAqB,CAArB,EAAwBtB,kBAAE4B,MAA1B,EAAkC,MAAlC,CAFK,EAGLpC,SAAS,CAAC8B,UAAV,CAAqB,CAArB,EAAwBtB,kBAAE6B,KAA1B,EAAiC,KAAjC,CAHK,EAILrC,SAAS,CAAC8B,UAAV,CAAqB,CAArB,EAAwBtB,kBAAE8B,MAA1B,EAAkC,MAAlC,CAJK,CAAP;AAMD,GA5De;AA8DhBC,EAAAA,eAAe,EAAEA,2BA9DD;AA+DhBC,EAAAA,YAAY,EAAED,2BA/DE;AAiEhBE,EAAAA,cAAc,EAAE,wBAAAC,CAAC;AAAA,WAAK,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAAChE,KAAK,CAACgE,CAAD,CAAhC,IACfA,CAAC,KAAK,IADK;AAAA,GAjED;AAoEhBC,EAAAA,SAAS,EAAE7D,UAAU,CAAC,GAAD,CApEL;AAqEhB8D,EAAAA,aAAa,EAAE,uBAAAC,GAAG,EAAI;AACpB,QAAMC,EAAE,GAAGjB,UAAU,CAACgB,GAAD,CAArB;;AACA,WAAOrE,MAAM,CAACsE,EAAD,CAAN,GAAa,IAAb,GAAoBA,EAA3B;AACD,GAxEe;AA0EhBC,EAAAA,aAAa,EAAE7D,kBAAkB,CAAC,CAAD,CA1EjB;AA2EhB8D,EAAAA,UAAU,EAAE9D,kBAAkB,CAAC,GAAD,CA3Ed;AA4EhB+D,EAAAA,cAAc,EAAE/D,kBAAkB,CAAC,OAAD,CA5ElB;AA6EhBgE,EAAAA,gBAAgB,EAAE5D,iBAAiB,CAAC,OAAD,EAAU,IAAV,CA7EnB;AA+EhB6D,EAAAA,aA/EgB,gCA+EmD;AAAA,gCAAnDC,SAAmD;AAAA,QAAnDA,SAAmD,gCAAzC,qBAAI,KAAJ,CAAyC;AAAA,iCAA7BC,UAA6B;AAAA,QAA7BA,UAA6B,iCAAlB,qBAAI,KAAJ,CAAkB;AAAA,QAANC,GAAM,SAANA,GAAM;AACjE,WAAOC,mBAAOJ,aAAP,CAAqB;AAC1BK,MAAAA,QAAQ,EAAEJ,SADgB;AAE1BK,MAAAA,SAAS,EAAEJ,UAFe;AAG1BK,MAAAA,SAAS,EAAEA,eAHe;AAI1BC,MAAAA,QAAQ,EAAEpB,2BAJgB;AAK1Be,MAAAA,GAAG,EAAEA;AALqB,KAArB,CAAP;AAOD,GAvFe;AAyFhBM,EAAAA,WAzFgB,uBAyFJC,IAzFI,EAyFEP,GAzFF,EAyFM;AACpB,QAAI,CAAC3E,MAAM,CAACkF,IAAD,CAAX,EAAmB;AACjB,aAAO;AAAE3D,QAAAA,IAAI,EAAE2D,IAAR;AAAcC,QAAAA,SAAS,EAAE;AAAzB,OAAP;AACD;;AAED,QAAMC,GAAG,GAAGF,IAAI,CAACG,MAAjB;AAAA,QACQC,SAAS,GAAGF,GAAG,GAAC,CAAJ,IAASF,IAAI,CAACE,GAAG,GAAC,CAAL,CAAb,GACPF,IAAI,CAACE,GAAG,GAAC,CAAL,CADG,GAEP,CAAE9F,KAAF,EAAS,CAAT,CAHb;AAAA,QAIQiG,SAAS,GAAGpE,SAAS,CAACmE,SAAD,CAJ7B;AAAA,QAKQb,SAAS,GAAG,qBAAIc,SAAJ,CALpB;AAAA,QAMQC,UAAU,GAAGJ,GAAG,GAAC,CAAJ,IAASF,IAAI,CAACE,GAAG,GAAC,CAAL,CAAb,GACTF,IAAI,CAACE,GAAG,GAAC,CAAL,CADK,GAETE,SARZ;AAAA,QASQG,UAAU,GAAGtE,SAAS,CAACqE,UAAD,CAT9B;AAAA,QAUQd,UAAU,GAAG,qBAAIe,UAAJ,CAVrB;AAAA,QAWQC,QAAQ,GAAG1E,QAAQ,CAACsE,SAAD,CAX3B;AAAA,QAYQ/D,IAAI,GAAG6D,GAAG,GAAC,CAAJ,GACFxF,QAAQ,CAAC8F,QAAD,CADN,GAEFpG,KAdb;AAAA,QAeQqG,SAAS,GAAG3E,QAAQ,CAACwE,UAAD,CAf5B;AAAA,QAgBQI,MAAM,GAAGR,GAAG,GAAC,CAAJ,IAASO,SAAT,GACJ/F,QAAQ,CAAC+F,SAAD,CADJ,GAEJrG,KAlBb;;AAoBE,yCACK+B,SAAS,CAACmD,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAATA,SAAF;AAAaC,MAAAA,UAAU,EAAVA,UAAb;AAAyBC,MAAAA,GAAG,EAAHA;AAAzB,KAAxB,CADL;AAEEkB,MAAAA,OAAO,EAAExE,SAAS,CAACwC,YAAV,CAAuBa,UAAvB,CAFX;AAGEnD,MAAAA,IAAI,EAAJA,IAHF;AAGQqE,MAAAA,MAAM,EAANA;AAHR;AAKH,GAvHe;AAyHhBE,EAAAA,IAAI,EAAE,gBAAM;AACV,WAAO,CACHC,IAAI,CAACC,GAAL,GAAWC,QAAX,CAAoB,EAApB,IACAC,IAAI,CAACC,MAAL,GAAcF,QAAd,CAAuB,EAAvB,EAA2BG,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAFG,EAIJC,WAJI,EAAP;AAKD,GA/He;AAiIhBC,EAAAA,gBAAgB,EAAE,0BAACpC,GAAD;AAAA,WAAS,OAAOA,GAAP,KAAe,QAAf,IACtBA,GAAG,CAACmB,MAAJ,GAAa,CADS,GAErBnB,GAAG,CAAC,CAAD,CAAH,CAAOmC,WAAP,KAAuBnC,GAAG,CAACkC,MAAJ,CAAW,CAAX,CAFF,GAGrB9G,KAHY;AAAA,GAjIF;AAsIhBiH,EAAAA,eAAe,EAAE,2BAAa;AAC5B,QAAIrC,GAAG,GAAC,EAAR;;AAD4B,sCAATsC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAE5BA,IAAAA,IAAI,CAACC,OAAL,CAAa,UAAAC,CAAC,EAAI;AAChB,UAAIA,CAAJ,EAAO;AACLxC,QAAAA,GAAG,GAAGA,GAAG,GAAMA,GAAN,UAAcwC,CAAd,GAAmBA,CAA5B;AACD;AACF,KAJD;AAKA,WAAOxC,GAAP;AACD,GA9Ie;AAgJhByC,EAAAA,UAAU,EAAE,oBAAAzC,GAAG;AAAA,WAAI3E,CAAC,CAACqH,OAAF,CACjBC,MAAM,CAAC3C,GAAD,CAAN,CAAY4C,WAAZ,EADiB,CAAJ;AAAA,GAhJC;AAoJhBC,EAAAA,QAAQ,EAAEC,oBAASD,QApJH;AAqJhBE,EAAAA,QAAQ,EAAED,oBAASC,QArJH;AAwJhBC,EAAAA,OAAO,EAAE,iBAACC,UAAD,EAAgBC,OAAhB;AAAA,QAACD,UAAD;AAACA,MAAAA,UAAD,GAAY,EAAZ;AAAA;;AAAA,QAAgBC,OAAhB;AAAgBA,MAAAA,OAAhB,GAAwB,EAAxB;AAAA;;AAAA,WAAgC;AACvCD,MAAAA,UAAU,EAAVA,UADuC;AAEvCC,MAAAA,OAAO,EAAPA;AAFuC,KAAhC;AAAA,GAxJO;AA4JhBC,EAAAA,UAAU,EAAE,oBAACC,OAAD,EAAUC,OAAV;AAAA,mCACCA,OADD,uCACuCD,OADvC;AAAA;AA5JI,CAAlB;eAiKejG,S","sourcesContent":["\r\nimport Big from 'big.js';\r\n\r\nimport dt from '../utils/DateUtils';\r\nimport formatAllNumber from '../utils/formatAllNumber'\r\n\r\nimport { Direction } from '../constants/Type';\r\n\r\nimport mathFn from '../math/mathFn';\r\nimport seriaFns from '../math/seriaFn'\r\n\r\nimport C from '../constants/Color';\r\n\r\nconst EMPTY = '';\r\nconst M = ['january', 'february',\r\n  'march', 'april', 'may',\r\n  'june', 'july', 'august',\r\n  'september', 'october', 'november',\r\n  'december'\r\n];\r\n\r\nconst {\r\n  ymdToUTC,\r\n  ymdtToUTC,\r\n  ymdhmsToUTC,\r\n  mlsToDmy\r\n} = dt;\r\n\r\nconst _isNaN = Number && Number.isNaN || isNaN;\r\nconst _isArr = Array.isArray;\r\nconst _fIsNumber = (pn) => (p) => {\r\n  return typeof p[pn] === 'number'\r\n    && isFinite(p[pn]);\r\n}\r\n\r\nconst _compareArrByIndex = index => (arrA, arrB) => {\r\n  if (arrA[index] < arrB[index]) return -1;\r\n  else if (arrA[index] === arrB[index]) return 0;\r\n  else return 1;\r\n}\r\nconst _compareByTwoProp = (propName1, propName2) => (a, b) => {\r\n  if (a[propName1] < b[propName1]) return -1;\r\n  else if (a[propName1] > b[propName1]) return 1;\r\n  else if (a[propName2] < b[propName2]) return -1;\r\n  else if (a[propName2] > a[propName2]) return 1;\r\n  else return 0;\r\n}\r\n\r\nconst _getDate = point =>_isArr(point)\r\n  ? point[0]\r\n  : point.x;\r\n\r\nconst _getValue = (point) => {\r\n  if (_isArr(point)){\r\n    return point[1] != null\r\n       ? point[1]\r\n       : '0.0';\r\n  } else {\r\n    return point\r\n      && point.y != null\r\n      && !_isNaN(point.y)\r\n        ? point.y\r\n        : '0.0';\r\n  }\r\n}\r\n\r\nconst AdapterFn = {\r\n  ymdToUTC,\r\n  ymdtToUTC,\r\n  ymdhmsToUTC,\r\n\r\n  volumeColumnPoint({ date, open, close, volume, option }) {\r\n    let _color;\r\n    if (open && close > open) {\r\n      _color = C.GREEN\r\n    } else if (open && close<open) {\r\n      _color = C.RED\r\n    } else {\r\n      _color = C.GRAY\r\n    }\r\n\r\n    return Object.assign({\r\n      x: date, y: volume, color: _color,\r\n      _open: open, _close: close\r\n    }, option);\r\n  },\r\n\r\n  athPoint({ date, prevClose, open }) {\r\n    const _bDelta = (open && prevClose)\r\n             ? Big(prevClose).minus(open)\r\n             : Big('0.0')\r\n        , _bPercent = (prevClose)\r\n             ? _bDelta.times(100).div(prevClose).abs().toFixed(2)\r\n             : Big('0.0');\r\n\r\n    let _color;\r\n    if (_bDelta.gt(0.0)){\r\n      _color = C.RED;\r\n    }\r\n    else if (!_bDelta.gte(0.0)){\r\n      _color = C.GREEN;\r\n    } else {\r\n      _color = (open) ? C.GRAY : C.WHITE;\r\n    }\r\n\r\n    return {\r\n      x : date,\r\n      y : parseFloat(_bPercent),\r\n      close : prevClose,\r\n      open : open ? open : 'Unknown',\r\n      color : _color\r\n    };\r\n  },\r\n\r\n  legendItem: (index, color, name, is=false) => ({\r\n    index, color, name,\r\n    isVisible: is\r\n  }),\r\n\r\n  stockSeriesLegend(){\r\n    return [\r\n      AdapterFn.legendItem(0, C.S_STOCK_CLOSE, 'Close', true),\r\n      AdapterFn.legendItem(1, C.S_HIGH, 'High'),\r\n      AdapterFn.legendItem(2, C.S_LOW, 'Low'),\r\n      AdapterFn.legendItem(3, C.S_OPEN, 'Open')\r\n    ];\r\n  },\r\n\r\n  formatAllNumber: formatAllNumber,\r\n  numberFormat: formatAllNumber,\r\n\r\n  isNumberOrNull: v => (typeof v === 'number' && !isNaN(v))\r\n     || v === null\r\n  ,\r\n  isYNumber: _fIsNumber('y'),\r\n  toFloatOrNull: str => {\r\n    const _v = parseFloat(str);\r\n    return _isNaN(_v) ? null : _v;\r\n  },\r\n\r\n  compareByDate: _compareArrByIndex(0),\r\n  compareByY: _compareArrByIndex('y'),\r\n  compareByValue: _compareArrByIndex('value'),\r\n  compareByValueId: _compareByTwoProp('value', 'id'),\r\n\r\n  crValueMoving({ bNowValue=Big('0.0'), bPrevValue=Big('0.0'), dfR }){\r\n    return mathFn.crValueMoving({\r\n      nowValue: bNowValue,\r\n      prevValue: bPrevValue,\r\n      Direction: Direction,\r\n      fnFormat: formatAllNumber,\r\n      dfR: dfR\r\n    })\r\n  },\r\n\r\n  valueMoving(data, dfR){\r\n    if (!_isArr(data)) {\r\n      return { date: data, direction: 'empty' };\r\n    }\r\n\r\n    const len = data.length\r\n          , _pointNow = len>0 && data[len-1]\r\n               ? data[len-1]\r\n               : [ EMPTY, 0 ]\r\n          , _nowValue = _getValue(_pointNow)\r\n          , bNowValue = Big(_nowValue)\r\n          , _pointPrev = len>1 && data[len-2]\r\n              ? data[len-2]\r\n              : _pointNow\r\n          , _prevValue = _getValue(_pointPrev)\r\n          , bPrevValue = Big(_prevValue)\r\n          , _nowDate = _getDate(_pointNow)\r\n          , date = len>0\r\n               ? mlsToDmy(_nowDate)\r\n               : EMPTY\r\n          , _prevDate = _getDate(_pointPrev)\r\n          , dateTo = len>1 && _prevDate\r\n               ? mlsToDmy(_prevDate)\r\n               : EMPTY;\r\n\r\n      return  {\r\n        ...AdapterFn.crValueMoving({ bNowValue, bPrevValue, dfR }),\r\n        valueTo: AdapterFn.numberFormat(bPrevValue),\r\n        date, dateTo\r\n      };\r\n  },\r\n\r\n  crId: () => {\r\n    return (\r\n        Date.now().toString(36) +\r\n        Math.random().toString(36).substr(2, 9)\r\n      )\r\n      .toUpperCase();\r\n  },\r\n\r\n  toUpperCaseFirst: (str) => typeof str === 'string'\r\n    && str.length > 0\r\n      ? str[0].toUpperCase() + str.substr(1)\r\n      : EMPTY\r\n  ,\r\n  appendWithColon: (...args) => {\r\n    let str='';\r\n    args.forEach(s => {\r\n      if (s) {\r\n        str = str ? `${str}: ${s}`: s\r\n      }\r\n    })\r\n    return str;\r\n  },\r\n\r\n  monthIndex: str => M.indexOf(\r\n    String(str).toLowerCase()\r\n  ),\r\n\r\n  findMinY: seriaFns.findMinY,\r\n  findMaxY: seriaFns.findMaxY,\r\n\r\n\r\n  crError: (errCaption='', message='') => ({\r\n    errCaption,\r\n    message\r\n  }),\r\n  crItemLink: (caption, itemUrl) => `<p>\r\n    <a href=\"${itemUrl}\" style=\"padding-top: 4px;\">${caption}</a>\r\n  </p>`\r\n}\r\n\r\nexport default AdapterFn\r\n"],"file":"AdapterFn.js"}