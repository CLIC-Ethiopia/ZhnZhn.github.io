{"version":3,"sources":["../../src/adapters/AdapterFn.js"],"names":["_isNaN","Number","isNaN","EMPTY","_isArr","Array","isArray","_isNumber","n","_fIsNumber","pn","p","isFinite","_crBigValueFrom","point","_crDmyFrom","_fToFloatOr","dfValue","str","_v","parseFloat","toTd","mls","getCaption","getC","getValue","getV","numberFormat","formatAllNumber","isNumberOrNull","v","isYNumber","toFloatOrEmpty","crValueMoving","bNowValue","bPrevValue","dfR","nowValue","prevValue","fnFormat","valueMoving","data","date","direction","Direction","len","length","_pointNow","_pointPrev","dateTo","valueTo","joinBy","delimeter","restItems","filter","Boolean","join","toUpperCaseFirst","_toUpperCaseFirst","mapIf","arr","crItem","is","_items","forEach","push","crZhConfig","_itemKey","itemCaption","dataSource","id","key"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport { toTd as _toTd } from '../charts/dateFormat';\r\nexport { isInArrStr } from '../utils/arrFn';\r\nimport formatAllNumber from '../utils/formatAllNumber';\r\nimport {\r\n  getC,\r\n  getV\r\n} from '../utils/getPropertyFn';\r\n\r\nimport { mlsToDmy } from '../utils/DateUtils';\r\nexport {\r\n  ymdToUTC,\r\n  ymdhmsToUTC,\r\n  getFromDate,\r\n  getYmdhmUTC,\r\n  getYear,\r\n  getCurrentYear,\r\n  monthIndex\r\n} from '../utils/DateUtils';\r\nimport _toUpperCaseFirst from '../utils/toUpperCaseFirst'\r\nimport { crValueMoving as _crVm } from '../math/mathFn'\r\nexport {\r\n  roundBy\r\n} from '../math/mathFn'\r\nexport {\r\n  findMinY,\r\n  findMaxY,\r\n  filterTrimZero\r\n} from '../math/seriaFn'\r\n\r\nimport { Direction } from '../constants/Type'\r\nimport {\r\n  getPointDate,\r\n  getPointValue\r\n} from './getterPointFn';\r\n\r\nexport const _isNaN = Number.isNaN\r\n\r\nconst EMPTY = '';\r\n\r\nconst _isArr = Array.isArray\r\n, _isNumber = n => typeof n === 'number'\r\n    && (n - n) === 0;\r\nconst _fIsNumber = (pn) => (p) => {\r\n  return typeof p[pn] === 'number'\r\n    && isFinite(p[pn]);\r\n}\r\n\r\nconst _crBigValueFrom = point => Big(getPointValue(point));\r\nconst _crDmyFrom = point => mlsToDmy(getPointDate(point));\r\n\r\nconst _fToFloatOr = dfValue => str => {\r\n  const _v = parseFloat(str);\r\n  return _isNaN(_v) ? dfValue : _v;\r\n};\r\n\r\nexport const toTd = (mls) => _isNumber(mls)\r\n  ? _toTd(mls)\r\n  : ''\r\n\r\nexport const getCaption = getC\r\nexport const getValue = getV\r\n\r\nexport const numberFormat = formatAllNumber\r\nexport const isNumberOrNull = v => _isNumber(v) || v === null\r\nexport const isYNumber = _fIsNumber('y')\r\nexport const toFloatOrEmpty = _fToFloatOr('')\r\n\r\nexport const crValueMoving = ({\r\n  bNowValue=Big('0.0'),\r\n  bPrevValue=Big('0.0'),\r\n  dfR\r\n}) => _crVm({\r\n  nowValue: bNowValue,\r\n  prevValue: bPrevValue,\r\n  fnFormat: formatAllNumber,\r\n  dfR\r\n})\r\n\r\nexport const valueMoving = (data, dfR) => {\r\n  if (!_isArr(data)) {\r\n    return {\r\n      date: data,\r\n      direction: Direction.EMPTY\r\n    };\r\n }\r\n\r\n  const len = data.length\r\n  , _pointNow = data[len-1] || [ EMPTY, 0 ]\r\n  , bNowValue = _crBigValueFrom(_pointNow)\r\n  , _pointPrev = data[len-2] || _pointNow\r\n  , bPrevValue = _crBigValueFrom(_pointPrev)\r\n  , date = _crDmyFrom(_pointNow)\r\n  , dateTo = _crDmyFrom(_pointPrev);\r\n\r\n  return  {\r\n    ...crValueMoving({ bNowValue, bPrevValue, dfR }),\r\n    valueTo: formatAllNumber(bPrevValue),\r\n    date, dateTo\r\n  };\r\n}\r\n\r\nexport const joinBy = (\r\n  delimeter,\r\n  ...restItems\r\n) => restItems\r\n  .filter(Boolean)\r\n  .join(delimeter)\r\n\r\nexport const toUpperCaseFirst = _toUpperCaseFirst\r\n\r\nexport const mapIf = (\r\n  arr,\r\n  crItem,\r\n  is\r\n) => {\r\n  const _items = [];\r\n  (arr || []).forEach(v => {\r\n    if (is(v)) {\r\n      _items.push(crItem(v))\r\n    }\r\n  })\r\n  return _items;\r\n}\r\n\r\nexport const crZhConfig = ({\r\n  _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n}) => ({\r\n  id: _itemKey, key: _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n})\r\n"],"file":"AdapterFn.js"}