{"version":3,"sources":["../../../src/adapters/uncomtrade/fnAdapter.js"],"names":["_assign","Object","assign","_crInfo","json","option","frequency","description","fnDescr","toDescr","fnAdapter","roundBy","crChartId","value","rg","measure","crMarker","color","fillColor","lineColor","lineWidth","radius","symbol","crZhConfig","dataSource","_id","id","key","legend","addSeriaTo","config","hm","name","i","seriaOption","isShow","zhConfig","_color","ChartConfig","getColor","_seriaColor","marker","_seriaOption","C","SPLINE","SPLINE_NOT_VISIBLE","setSerieData","push","addSeriesFromHmTo","fromIndex","fnHm","toSeriaNames","compareByValue","forEach","item","_isShow","MAX_SHOW","addSeriasTo","one","dataset","categories","ALL","toHmCategories","pnValue","pnCountry","WORLD","WORLD_COLOR","fnLegend","toWorldLegend","toAllLegend","xAxis","crBaseConfig","title","subtitle","areaConfig","add","CHART","addCaption","X_AXIS","Y_AXIS","addTooltip","Tooltip","categorySimple","toConfig"],"mappings":"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","sourcesContent":["import ChartConfig from '../../charts/ChartConfig'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport { roundBy } from '../AdapterFn';\r\nimport { compareByValue } from '../compareByFn';\r\nimport { legendItem } from '../legendFn'\r\n\r\nimport fnDescr from './fnDescr'\r\nimport fnHm from './fnHm'\r\nimport fnLegend from './fnLegend'\r\n\r\nimport C from './conf'\r\n\r\nconst _assign = Object.assign;\r\n\r\nconst _crInfo = (json, option) => ({\r\n  frequency: \"Annual\",\r\n  description: fnDescr.toDescr(json, option),\r\n});\r\n\r\nconst fnAdapter = {\r\n   roundBy,\r\n\r\n  crChartId: option => {\r\n    const { value, rg=2, measure=\"A\" } = option;\r\n    return value + '_' + rg + '_' + measure;\r\n  },\r\n\r\n  crMarker: color => {\r\n    return {\r\n      fillColor: color,\r\n      lineColor: color,\r\n      lineWidth: 1,\r\n      radius: 4,\r\n      symbol: 'circle'\r\n    };\r\n  },\r\n\r\n  crZhConfig(option) {\r\n    const { dataSource } = option\r\n        , _id = this.crChartId(option);\r\n    return {\r\n      id: _id,\r\n      key: _id,\r\n      legend: [],\r\n      dataSource: dataSource\r\n    };\r\n  },\r\n\r\n  addSeriaTo({\r\n    config, hm,\r\n    name, i, color,\r\n    seriaOption, isShow=false\r\n  }) {\r\n    const { legend } = config.zhConfig\r\n        , _color = color || ChartConfig.getColor(i)\r\n        , _seriaColor = {\r\n             color: _color,\r\n             marker: this.crMarker(_color)\r\n          }\r\n        , _seriaOption = (seriaOption !== null)\r\n               ? isShow\r\n                  ? { ...C.SPLINE, ..._seriaColor }\r\n                  : { ...C.SPLINE_NOT_VISIBLE, ..._seriaColor }\r\n               : null;\r\n\r\n    ChartConfig.setSerieData(\r\n      config, hm[name], i, name, _seriaOption\r\n    )\r\n    legend.push(\r\n       legendItem(i, _color, name, isShow)\r\n    )\r\n  },\r\n\r\n  addSeriesFromHmTo({ config, hm, fromIndex }) {\r\n    let i=fromIndex;\r\n\r\n    fnHm.toSeriaNames(hm, compareByValue)\r\n      .forEach(item => {\r\n         const name = item.name\r\n             , _isShow = i<C.MAX_SHOW ? true : false ;\r\n         this.addSeriaTo({ config, hm, name, i, isShow: _isShow })\r\n         i++\r\n      })\r\n  },\r\n\r\n  addSeriasTo(config, json, option) {\r\n    const { one, measure } = option\r\n        , { dataset=[] } = json\r\n        , { hm, categories } = (one !== C.ALL)\r\n              ? fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure\r\n                })\r\n              : fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure,\r\n                   pnCountry: 'rtTitle'\r\n                });\r\n\r\n    if (hm[C.WORLD] && one !== C.ALL) {\r\n      this.addSeriaTo({\r\n         config, hm,\r\n         i: 0, name: C.WORLD, color: C.WORLD_COLOR,\r\n         seriaOption: null, isShow: true\r\n      })\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 1 });\r\n    } else {\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 0 });\r\n    }\r\n\r\n    const legend = config.zhConfig.legend;\r\n    config.zhConfig.legend = (one !== C.ALL)\r\n       ? fnLegend.toWorldLegend(legend, hm)\r\n       : fnLegend.toAllLegend(legend, hm, measure)\r\n\r\n    _assign(config.xAxis, { categories })\r\n  },\r\n\r\n  crBaseConfig(json, option) {\r\n    const { title, subtitle } = option;\r\n    return Builder()\r\n      .areaConfig()\r\n      .add('chart', C.CHART)\r\n      .addCaption(title, subtitle)\r\n      .add('xAxis', C.X_AXIS)\r\n      .add('yAxis', C.Y_AXIS)\r\n      .addTooltip(Tooltip.categorySimple)\r\n      .add('info', _crInfo(json, option))\r\n      .add('zhConfig', this.crZhConfig(option))\r\n      .toConfig();\r\n  },\r\n\r\n  toConfig(json, option){\r\n    const config = this.crBaseConfig(json, option);\r\n    this.addSeriasTo(config, json, option)\r\n\r\n    return config;\r\n  }\r\n\r\n};\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}