{"version":3,"sources":["../../../src/adapters/uncomtrade/fnAdapter.js"],"names":["fnAdapter","crChartId","value","option","rg","measure","crSeriaOption","zhSeriaId","id","crMarker","fillColor","color","lineColor","lineWidth","radius","symbol","crInfo","description","toDescr","json","frequency","crZhConfig","dataSource","nativeHref","_id","key","isWithoutAdd","isWithLegend","legend","linkFn","item","addSeriaTo","config","hm","name","i","seriaOption","isShow","zhConfig","_color","getColor","_seriaColor","marker","_seriaOption","SPLINE","SPLINE_NOT_VISIBLE","setSerieData","push","legendItem","addSeriesFromHmTo","fromIndex","toSeriaNames","forEach","_isShow","MAX_SHOW","addSeriasTo","one","dataset","ALL","toHmCategories","pnValue","pnCountry","categories","WORLD","WORLD_COLOR","toWorldLegend","toAllLegend","Object","assign","xAxis","crBaseConfig","title","subtitle","initBaseArea","add","CHART","addCaption","X_AXIS","Y_AXIS","addTooltip","fnBasePointFormatterC","toConfig"],"mappings":"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","file":"fnAdapter.js","sourcesContent":["import ChartConfig from '../../charts/ChartConfig'\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport fnDescr from './fnDescr'\r\nimport fnHm from './fnHm'\r\nimport fnLegend from './fnLegend'\r\n\r\nimport C from './conf'\r\n\r\nconst fnAdapter = {\r\n\r\n  crChartId: option => {\r\n    const { value, rg=2, measure=\"A\" } = option;\r\n    return value + '_' + rg + '_' + measure;\r\n  },\r\n\r\n  crSeriaOption: id => {\r\n    return { zhSeriaId: id };\r\n  },\r\n\r\n  crMarker: color => {\r\n    return {\r\n      fillColor: color,\r\n      lineColor: color,\r\n      lineWidth: 1,\r\n      radius: 4,\r\n      symbol: 'circle'\r\n    };\r\n  },\r\n\r\n  crInfo: json => ({\r\n    description: fnDescr.toDescr(json),\r\n    frequency: \"Annual\"\r\n  }),\r\n\r\n  crZhConfig(option) {\r\n    const { dataSource, nativeHref } = option\r\n        , _id = this.crChartId(option);\r\n    return {\r\n      id: _id,\r\n      key: _id,      \r\n      isWithoutAdd: true,\r\n      isWithLegend: true,\r\n      legend: [],\r\n      dataSource: dataSource,\r\n      linkFn: \"UN_COMTRADE\",\r\n      item: nativeHref\r\n    };\r\n  },\r\n\r\n  addSeriaTo({\r\n    config, hm,\r\n    name, i, color,\r\n    seriaOption, isShow=false\r\n  }) {\r\n    const { key, legend } = config.zhConfig\r\n        , _color = color || ChartConfig.getColor(i)\r\n        , _seriaColor = {\r\n             color: _color,\r\n             marker: this.crMarker(_color)\r\n          }\r\n        , _seriaOption = (seriaOption !== null)\r\n               ? isShow\r\n                  ? { ...C.SPLINE, ..._seriaColor }\r\n                  : { ...C.SPLINE_NOT_VISIBLE, ..._seriaColor }\r\n               : null;\r\n\r\n    ChartConfig.setSerieData(\r\n      config, hm[name], i, name, _seriaOption,\r\n      this.crSeriaOption(key + '_' + name)\r\n    )\r\n    legend.push(\r\n       AdapterFn.legendItem(i, _color, name, isShow)\r\n    )\r\n  },\r\n\r\n  addSeriesFromHmTo({ config, hm, fromIndex }) {\r\n    let i=fromIndex;\r\n\r\n    fnHm.toSeriaNames(hm)\r\n      .forEach(item => {\r\n         const name = item.name\r\n             , _isShow = i<C.MAX_SHOW ? true : false ;\r\n         this.addSeriaTo({ config, hm, name, i, isShow: _isShow })\r\n         i++\r\n      })\r\n  },\r\n\r\n  addSeriasTo(config, json, option) {\r\n    const { one, measure } = option\r\n        , { dataset=[] } = json\r\n        , { hm, categories } = (one !== C.ALL)\r\n              ? fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure\r\n                })\r\n              : fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure,\r\n                   pnCountry: 'rtTitle'\r\n                });\r\n\r\n    if (hm[C.WORLD] && one !== C.ALL) {\r\n      this.addSeriaTo({\r\n         config, hm,\r\n         i: 0, name: C.WORLD, color: C.WORLD_COLOR,\r\n         seriaOption: null, isShow: true\r\n      })\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 1 });\r\n    } else {\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 0 });\r\n    }\r\n\r\n    const legend = config.zhConfig.legend;\r\n    config.zhConfig.legend = (one !== C.ALL)\r\n       ? fnLegend.toWorldLegend(legend, hm)\r\n       : fnLegend.toAllLegend(legend, hm, measure)\r\n\r\n    Object.assign(config.xAxis, { categories })\r\n  },\r\n\r\n  crBaseConfig(json, option) {\r\n    const { title, subtitle } = option;\r\n    return ConfigBuilder()\r\n      .initBaseArea()\r\n      .add('chart', C.CHART)\r\n      .addCaption(title, subtitle)\r\n      .add('xAxis', C.X_AXIS)\r\n      .add('yAxis', C.Y_AXIS)\r\n      .addTooltip(Tooltip.fnBasePointFormatterC)\r\n      .add('info', this.crInfo(json))\r\n      .add('zhConfig', this.crZhConfig(option))\r\n      .toConfig();\r\n  },\r\n\r\n  toConfig(json, option){\r\n    const config = this.crBaseConfig(json, option);\r\n    this.addSeriasTo(config, json, option)\r\n\r\n    return config;\r\n  }\r\n\r\n};\r\n\r\nexport default fnAdapter\r\n"]}