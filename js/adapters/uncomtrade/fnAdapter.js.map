{"version":3,"sources":["../../../src/adapters/uncomtrade/fnAdapter.js"],"names":["fnAdapter","roundBy","AdapterFn","crChartId","option","value","rg","measure","crMarker","color","fillColor","lineColor","lineWidth","radius","symbol","crInfo","json","description","fnDescr","toDescr","frequency","crZhConfig","dataSource","nativeHref","_id","id","key","legend","linkFn","item","addSeriaTo","config","hm","name","i","seriaOption","isShow","zhConfig","_color","ChartConfig","getColor","_seriaColor","marker","_seriaOption","C","SPLINE","SPLINE_NOT_VISIBLE","setSerieData","push","legendItem","addSeriesFromHmTo","fromIndex","fnHm","toSeriaNames","compareByValue","forEach","_isShow","MAX_SHOW","addSeriasTo","one","dataset","ALL","toHmCategories","pnValue","pnCountry","categories","WORLD","WORLD_COLOR","fnLegend","toWorldLegend","toAllLegend","Object","assign","xAxis","crBaseConfig","title","subtitle","areaConfig","add","CHART","addCaption","X_AXIS","Y_AXIS","addTooltip","Tooltip","categorySimple","toConfig"],"mappings":"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","sourcesContent":["import ChartConfig from '../../charts/ChartConfig'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport fnDescr from './fnDescr'\r\nimport fnHm from './fnHm'\r\nimport fnLegend from './fnLegend'\r\n\r\nimport C from './conf'\r\n\r\nconst fnAdapter = {\r\n   roundBy: AdapterFn.roundBy,\r\n\r\n  crChartId: option => {\r\n    const { value, rg=2, measure=\"A\" } = option;\r\n    return value + '_' + rg + '_' + measure;\r\n  },\r\n\r\n  crMarker: color => {\r\n    return {\r\n      fillColor: color,\r\n      lineColor: color,\r\n      lineWidth: 1,\r\n      radius: 4,\r\n      symbol: 'circle'\r\n    };\r\n  },\r\n\r\n  crInfo: json => ({\r\n    description: fnDescr.toDescr(json),\r\n    frequency: \"Annual\"\r\n  }),\r\n\r\n  crZhConfig(option) {\r\n    const { dataSource, nativeHref } = option\r\n        , _id = this.crChartId(option);\r\n    return {\r\n      id: _id,\r\n      key: _id,\r\n      legend: [],\r\n      dataSource: dataSource,\r\n      linkFn: \"UN_COMTRADE\",\r\n      item: nativeHref\r\n    };\r\n  },\r\n\r\n  addSeriaTo({\r\n    config, hm,\r\n    name, i, color,\r\n    seriaOption, isShow=false\r\n  }) {\r\n    const { legend } = config.zhConfig\r\n        , _color = color || ChartConfig.getColor(i)\r\n        , _seriaColor = {\r\n             color: _color,\r\n             marker: this.crMarker(_color)\r\n          }\r\n        , _seriaOption = (seriaOption !== null)\r\n               ? isShow\r\n                  ? { ...C.SPLINE, ..._seriaColor }\r\n                  : { ...C.SPLINE_NOT_VISIBLE, ..._seriaColor }\r\n               : null;\r\n\r\n    ChartConfig.setSerieData(\r\n      config, hm[name], i, name, _seriaOption\r\n    )\r\n    legend.push(\r\n       AdapterFn.legendItem(i, _color, name, isShow)\r\n    )\r\n  },\r\n\r\n  addSeriesFromHmTo({ config, hm, fromIndex }) {\r\n    let i=fromIndex;\r\n\r\n    fnHm.toSeriaNames(hm, AdapterFn.compareByValue)\r\n      .forEach(item => {\r\n         const name = item.name\r\n             , _isShow = i<C.MAX_SHOW ? true : false ;\r\n         this.addSeriaTo({ config, hm, name, i, isShow: _isShow })\r\n         i++\r\n      })\r\n  },\r\n\r\n  addSeriasTo(config, json, option) {\r\n    const { one, measure } = option\r\n        , { dataset=[] } = json\r\n        , { hm, categories } = (one !== C.ALL)\r\n              ? fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure\r\n                })\r\n              : fnHm.toHmCategories({\r\n                   dataset,\r\n                   pnValue: measure,\r\n                   pnCountry: 'rtTitle'\r\n                });\r\n\r\n    if (hm[C.WORLD] && one !== C.ALL) {\r\n      this.addSeriaTo({\r\n         config, hm,\r\n         i: 0, name: C.WORLD, color: C.WORLD_COLOR,\r\n         seriaOption: null, isShow: true\r\n      })\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 1 });\r\n    } else {\r\n      this.addSeriesFromHmTo({ config, hm, fromIndex: 0 });\r\n    }\r\n\r\n    const legend = config.zhConfig.legend;\r\n    config.zhConfig.legend = (one !== C.ALL)\r\n       ? fnLegend.toWorldLegend(legend, hm)\r\n       : fnLegend.toAllLegend(legend, hm, measure)\r\n\r\n    Object.assign(config.xAxis, { categories })\r\n  },\r\n\r\n  crBaseConfig(json, option) {\r\n    const { title, subtitle } = option;\r\n    return Builder()\r\n      .areaConfig()\r\n      .add('chart', C.CHART)\r\n      .addCaption(title, subtitle)\r\n      .add('xAxis', C.X_AXIS)\r\n      .add('yAxis', C.Y_AXIS)\r\n      .addTooltip(Tooltip.categorySimple)\r\n      .add('info', this.crInfo(json))\r\n      .add('zhConfig', this.crZhConfig(option))\r\n      .toConfig();\r\n  },\r\n\r\n  toConfig(json, option){\r\n    const config = this.crBaseConfig(json, option);\r\n    this.addSeriasTo(config, json, option)\r\n\r\n    return config;\r\n  }\r\n\r\n};\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}