{"version":3,"sources":["../../../src/adapters/iex/TemplateTokens.js"],"names":["_isFn","fn","_crNoop","_crEmptyDescr","_getId","_itemKey","_crToken","json","fnOrPropName","_crTokens","CONFIGS","map","config","filter","Boolean","TemplateTokens","impl","getId","crTokensName","crDescr","crDescrName","crDescrStyle","Object","assign","prototype","toConfig","option","crCaption","_id","_tokens","zhCompType","CIT_INFO_ITEM","id","caption","items","tokens","style","descr","zhConfig","key"],"mappings":";;;;;AAAA;;AAEA,MAAMA,KAAK,GAAGC,EAAE,IAAI,OAAOA,EAAP,KAAc,UAAlC;;AACA,MAAMC,OAAO,GAAG,MAAM,CAAE,CAAxB;;AACA,MAAMC,aAAa,GAAG,MAAM,EAA5B;;AACA,MAAMC,MAAM,GAAG;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAkBA,QAAlB;AAAA,CAAf;;AAEA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,YAAP,KAAwBR,KAAK,CAACQ,YAAD,CAAL,GACrCA,YAAY,CAACD,IAAD,CADyB,GAErCA,IAAI,CAACC,YAAD,CAFR;;AAGA,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAUH,IAAV,KAAmBG,OAAO,CACzCC,GADkC,CAC9BC,MAAM,IAAIN,QAAQ,CAACC,IAAD,EAAOK,MAAP,CADY,EAElCC,MAFkC,CAE3BC,OAF2B,CAArC;;AAIA,MAAMC,cAAc,GAAG,UAASC,IAAT,EAAe;AACpC,MAAI,EAAE,gBAAgBD,cAAlB,CAAJ,EAAuC;AACrC,WAAQ,IAAIA,cAAJ,CAAmBC,IAAnB,CAAR;AACD;;AACD,OAAKA,IAAL,GAAY;AACVC,IAAAA,KAAK,EAAEb,MADG;AAEVc,IAAAA,YAAY,EAAEhB,OAFJ;AAGViB,IAAAA,OAAO,EAAEhB,aAHC;AAIViB,IAAAA,WAAW,EAAElB,OAJH;AAKVmB,IAAAA,YAAY,EAAEnB,OALJ;AAMV,OAAGc;AANO,GAAZ;AAQD,CAZD;;AAcAM,MAAM,CAACC,MAAP,CAAcR,cAAc,CAACS,SAA7B,EAAwC;AACtCC,EAAAA,QAAQ,CAAClB,IAAD,EAAOmB,MAAP,EAAc;AACpB,UAAM;AACJT,MAAAA,KADI;AACGU,MAAAA,SADH;AAEJT,MAAAA,YAFI;AAGJC,MAAAA,OAHI;AAGKC,MAAAA,WAHL;AAGkBC,MAAAA,YAHlB;AAIJX,MAAAA;AAJI,QAKF,KAAKM,IALT;AAAA,UAMGY,GAAG,GAAGX,KAAK,CAACS,MAAD,CANd;AAAA,UAOEG,OAAO,GAAGpB,SAAS,CAACC,OAAD,EAAUH,IAAV,CAPrB;;AAQA,WAAO;AACLK,MAAAA,MAAM,EAAE;AACNkB,QAAAA,UAAU,EAAEC,mBADN;AAENC,QAAAA,EAAE,EAAEJ,GAFE;AAGNK,QAAAA,OAAO,EAAEN,SAAS,CAACpB,IAAD,EAAOmB,MAAP,CAHZ;AAINQ,QAAAA,KAAK,EAAE,CACL;AACED,UAAAA,OAAO,EAAEf,YAAY,CAACX,IAAD,CADvB;AAEE4B,UAAAA,MAAM,EAAEN;AAFV,SADK,EAIH;AACAO,UAAAA,KAAK,EAAEf,YAAY,EADnB;AAEAY,UAAAA,OAAO,EAAEb,WAAW,EAFpB;AAGAiB,UAAAA,KAAK,EAAElB,OAAO,CAACZ,IAAD;AAHd,SAJG,CAJD;AAcN+B,QAAAA,QAAQ,EAAE;AACRC,UAAAA,GAAG,EAAEX,GADG;AAERI,UAAAA,EAAE,EAAEJ;AAFI;AAdJ;AADH,KAAP;AAqBD;;AA/BqC,CAAxC;eAkCeb,c","sourcesContent":["import { CIT_INFO_ITEM } from '../../constants/Type';\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\nconst _crNoop = () => {};\r\nconst _crEmptyDescr = () => '';\r\nconst _getId = ({ _itemKey }) => _itemKey;\r\n\r\nconst _crToken = (json, fnOrPropName) => _isFn(fnOrPropName)\r\n  ? fnOrPropName(json)\r\n  : json[fnOrPropName];\r\nconst _crTokens = (CONFIGS, json) => CONFIGS\r\n  .map(config => _crToken(json, config))\r\n  .filter(Boolean);\r\n\r\nconst TemplateTokens = function(impl) {\r\n  if (!(this instanceof TemplateTokens)) {\r\n    return (new TemplateTokens(impl));\r\n  }\r\n  this.impl = {\r\n    getId: _getId,\r\n    crTokensName: _crNoop,\r\n    crDescr: _crEmptyDescr,\r\n    crDescrName: _crNoop,\r\n    crDescrStyle: _crNoop,\r\n    ...impl\r\n  }\r\n};\r\n\r\nObject.assign(TemplateTokens.prototype, {\r\n  toConfig(json, option){\r\n    const {\r\n      getId, crCaption,\r\n      crTokensName,\r\n      crDescr, crDescrName, crDescrStyle,\r\n      CONFIGS\r\n    } = this.impl\r\n    ,  _id = getId(option)\r\n    , _tokens = _crTokens(CONFIGS, json);\r\n    return {\r\n      config: {\r\n        zhCompType: CIT_INFO_ITEM,\r\n        id: _id,\r\n        caption: crCaption(json, option),\r\n        items: [\r\n          {\r\n            caption: crTokensName(json),\r\n            tokens: _tokens,\r\n          },{\r\n            style: crDescrStyle(),\r\n            caption: crDescrName(),\r\n            descr: crDescr(json)\r\n          }\r\n        ],\r\n        zhConfig: {\r\n          key: _id,\r\n          id: _id\r\n        }\r\n      }\r\n    };\r\n  }\r\n})\r\n\r\nexport default TemplateTokens\r\n"],"file":"TemplateTokens.js"}