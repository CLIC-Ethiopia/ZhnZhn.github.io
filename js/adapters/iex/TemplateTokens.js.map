{"version":3,"sources":["../../../src/adapters/iex/TemplateTokens.js"],"names":["_isFn","fn","_crEmptyDescr","_getId","key","_crNoop","_crToken","json","fnOrPropName","_crTokens","CONFIGS","map","config","filter","Boolean","TemplateTokens","impl","getId","crTokensName","crDescr","crDescrName","crDescrStyle","Object","assign","prototype","crKey","option","value","toConfig","crCaption","_id","_tokens","zhCompType","CIT","INFO_ITEM","id","caption","items","tokens","style","descr","zhConfig"],"mappings":"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","sourcesContent":["import { CompItemType as CIT } from '../../constants/Type';\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\nconst _crEmptyDescr = () => '';\r\nconst _getId = ({ key }) => key;\r\nconst _crNoop = () => {};\r\n\r\nconst _crToken = (json, fnOrPropName) => _isFn(fnOrPropName)\r\n  ? fnOrPropName(json)\r\n  : json[fnOrPropName];\r\nconst _crTokens = (CONFIGS, json) => CONFIGS\r\n  .map(config => _crToken(json, config))\r\n  .filter(Boolean);\r\n\r\nconst TemplateTokens = function(impl) {\r\n  if (!(this instanceof TemplateTokens)) {\r\n    return (new TemplateTokens(impl));\r\n  }\r\n  this.impl = {\r\n    getId: _getId,\r\n    crTokensName: _crNoop,\r\n    crDescr: _crEmptyDescr,\r\n    crDescrName: _crNoop,\r\n    crDescrStyle: _crNoop,\r\n    ...impl\r\n  }\r\n};\r\n\r\nObject.assign(TemplateTokens.prototype, {\r\n  crKey(option){\r\n    option.key = option.value\r\n    return option.value;\r\n  },\r\n\r\n  toConfig(json, option){\r\n    const {\r\n      getId, crCaption,\r\n      crTokensName,\r\n      crDescr, crDescrName, crDescrStyle,\r\n      CONFIGS\r\n    } = this.impl\r\n    ,  _id = getId(option)\r\n    , _tokens = _crTokens(CONFIGS, json);\r\n\r\n    return {\r\n      config: {\r\n        zhCompType: CIT.INFO_ITEM,\r\n        id: _id,\r\n        caption: crCaption(json, option),\r\n        items: [\r\n          {\r\n            caption: crTokensName(json),\r\n            tokens: _tokens,\r\n          },{\r\n            style: crDescrStyle(),\r\n            caption: crDescrName(),\r\n            descr: crDescr(json)\r\n          }\r\n        ],\r\n        zhConfig: {\r\n          key: _id,\r\n          id: _id\r\n        }\r\n      }\r\n    };\r\n  }\r\n})\r\n\r\nexport default TemplateTokens\r\n"],"file":"TemplateTokens.js"}