{"version":3,"sources":["../../../src/adapters/iex/IexApi.js"],"names":["C","BASE_URL","DF_TICKET","DF_PERIOD","_crUrlType1","option","value","_urlDividends","dfPeriod","_urlChart","one","ticket","two","_ticket","_period","_rUrl","DF","CT","ERN","DIV","CHART","COM","STA","IexApi","getRequestUrl","dfType","apiKey","_toUrl","checkResponse","json","errCaption","message"],"mappings":";;;;;;;AACA;;;;AAEA,IAAMA,CAAC,GAAG;AACR;AACAC,EAAAA,QAAQ,EAAE,wCAFF;AAGRC,EAAAA,SAAS,EAAE,MAHH;AAIRC,EAAAA,SAAS,EAAE;AAJH,CAAV,C,CAOA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,MAAM,EAAI;AAAA,sBACPA,MADO,CACpBC,KADoB;AAAA,MACpBA,KADoB,8BACd,EADc;AAE5B,SAAUN,CAAC,CAACC,QAAZ,SAAwBK,KAAxB;AACD,CAHD;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACF,MAAD,EAAY;AAAA,uBAI5BA,MAJ4B,CAE9BC,KAF8B;AAAA,MAE9BA,KAF8B,+BAExB,EAFwB;AAAA,MAG9BE,QAH8B,GAI5BH,MAJ4B,CAG9BG,QAH8B;AAKhC,SAAUR,CAAC,CAACC,QAAZ,SAAwBK,KAAxB,mBAA2CE,QAA3C;AACD,CAND;;AAQA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACJ,MAAD,EAAY;AAAA,MAE1BK,GAF0B,GAIxBL,MAJwB,CAE1BK,GAF0B;AAAA,MAErBC,MAFqB,GAIxBN,MAJwB,CAErBM,MAFqB;AAAA,MAG1BC,GAH0B,GAIxBP,MAJwB,CAG1BO,GAH0B;AAAA,MAGrBJ,QAHqB,GAIxBH,MAJwB,CAGrBG,QAHqB;AAAA,MAK1BK,OAL0B,GAKhBH,GAAG,IAAIC,MAAP,IAAiBX,CAAC,CAACE,SALH;AAAA,MAM1BY,OAN0B,GAMhBF,GAAG,IAAIJ,QAAP,IAAmBR,CAAC,CAACG,SANL;;AAO5BE,EAAAA,MAAM,CAACK,GAAP,GAAaG,OAAb;AACAR,EAAAA,MAAM,CAACO,GAAP,GAAaE,OAAb;AACA,SAAUd,CAAC,CAACC,QAAZ,SAAwBY,OAAxB,eAAyCC,OAAzC;AACD,CAVD;;AAYA,IAAMC,KAAK;AACTC,EAAAA,EAAE,EAAEP;AADK,UAERQ,sBAAGC,GAFK,IAECd,WAFD,SAGRa,sBAAGE,GAHK,IAGCZ,aAHD,SAIRU,sBAAGG,KAJK,IAIGX,SAJH,SAKRQ,sBAAGI,GALK,IAKCjB,WALD,SAMRa,sBAAGK,GANK,IAMClB,WAND,SAAX;;AASA,IAAMmB,MAAM,GAAG;AACbC,EAAAA,aADa,yBACCnB,MADD,EACQ;AAAA,QACXoB,MADW,GACQpB,MADR,CACXoB,MADW;AAAA,QACHC,MADG,GACQrB,MADR,CACHqB,MADG;AAAA,QAEbC,MAFa,GAEJZ,KAAK,CAACU,MAAD,CAAL,IAAiBV,KAAK,CAACC,EAFnB;;AAGnB,WAAOW,MAAM,CAACtB,MAAD,CAAN,gBAAyBqB,MAAzB,CAAP;AACD,GALY;AAObE,EAAAA,aAPa,yBAOCC,IAPD,EAOM;AACjB,QAAI,CAACA,IAAL,EAAW;AACT,YAAM;AACJC,QAAAA,UAAU,EAAE,OADR;AAEJC,QAAAA,OAAO,EAAE;AAFL,OAAN;AAID;;AACD,WAAO,IAAP;AACD;AAfY,CAAf;eAkBeR,M","sourcesContent":["\r\nimport CT from './ChartType'\r\n\r\nconst C = {\r\n  //BASE_URL: 'https://api.iextrading.com/1.0/stock',\r\n  BASE_URL: 'https://cloud.iexapis.com/stable/stock',\r\n  DF_TICKET: 'AAPL',\r\n  DF_PERIOD: '1m'\r\n};\r\n\r\n//earning, company, stats : symbol/suffix\r\nconst _crUrlType1 = option => {\r\n  const { value='' } = option;\r\n  return `${C.BASE_URL}/${value}`;\r\n};\r\n\r\nconst _urlDividends = (option) => {\r\n  const {\r\n    value='',\r\n    dfPeriod\r\n  } = option;\r\n  return `${C.BASE_URL}/${value}/dividends/${dfPeriod}`;\r\n};\r\n\r\nconst _urlChart = (option) => {\r\n  const {\r\n    one, ticket,\r\n    two, dfPeriod\r\n  } = option\r\n  , _ticket = one || ticket || C.DF_TICKET\r\n  , _period = two || dfPeriod || C.DF_PERIOD;\r\n  option.one = _ticket\r\n  option.two = _period\r\n  return `${C.BASE_URL}/${_ticket}/chart/${_period}`;\r\n};\r\n\r\nconst _rUrl = {\r\n  DF: _urlChart,\r\n  [CT.ERN]: _crUrlType1,\r\n  [CT.DIV]: _urlDividends,\r\n  [CT.CHART]: _urlChart,\r\n  [CT.COM]: _crUrlType1,\r\n  [CT.STA]: _crUrlType1\r\n};\r\n\r\nconst IexApi = {\r\n  getRequestUrl(option){\r\n    const { dfType, apiKey } = option\r\n        , _toUrl = _rUrl[dfType] || _rUrl.DF;\r\n    return _toUrl(option)+`?token=${apiKey}`;\r\n  },\r\n\r\n  checkResponse(json){\r\n    if (!json) {\r\n      throw {\r\n        errCaption: \"Error\",\r\n        message: 'Response is empty.'\r\n      };\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default IexApi\r\n"],"file":"IexApi.js"}