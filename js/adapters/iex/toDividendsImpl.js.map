{"version":3,"sources":["../../../src/adapters/iex/toDividendsImpl.js"],"names":["C","CAPTION","COLOR","_isArr","Array","isArray","_assign","Object","assign","_crPoint","p","ChartConfig","crMarkerExDividend","x","paymentDate","exValue","amount","toDividendsImpl","caption","color","crSubtitle","value","dfPeriod","crSeria","json","option","data","reverse","map","scatterSeria","Tooltip","toSeria"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKA,MAAMA,CAAC,GAAG;AACRC,EAAAA,OAAO,EAAE,WADD;AAERC,EAAAA,KAAK,EAAE;AAFC,CAAV;AAKA,MAAMC,MAAM,GAAGC,KAAK,CAACC,OAArB;AAAA,MACEC,OAAO,GAAGC,MAAM,CAACC,MADnB;;AAGA,MAAMC,QAAQ,GAAGC,CAAC,IAAIJ,OAAO,CAC3BK,qBAAYC,kBAAZ,CAA+BZ,CAAC,CAACE,KAAjC,EAAwC,CAAxC,CAD2B,EACiB;AAC5CW,EAAAA,CAAC,EAAE,yBAASH,CAAC,CAACI,WAAX,CADyC;AAE5CC,EAAAA,OAAO,EAAE,+BAAeL,CAAC,CAACM,MAAjB;AAFmC,CADjB,CAA7B;;AAMA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAElB,CAAC,CAACC,OADW;AAEtBkB,EAAAA,KAAK,EAAEnB,CAAC,CAACE,KAFa;AAItBkB,EAAAA,UAAU,EAAE,QAAyB;AAAA,QAAxB;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAwB;AACnC,WAAUD,KAAV,mBAA6BC,QAA7B;AACD,GANqB;AAQtBC,EAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzB,UAAMC,IAAI,GAAGvB,MAAM,CAACqB,IAAD,CAAN,GACTA,IAAI,CAACG,OAAL,GAAeC,GAAf,CAAmBnB,QAAnB,CADS,GAET,EAFJ;AAGA,WAAO,8BACJoB,YADI,CACSC,iBAAQf,OADjB,EAC0B;AAAEW,MAAAA;AAAF,KAD1B,EAEJK,OAFI,EAAP;AAGD;AAfqB,CAAxB;eAkBed,e","sourcesContent":["import ChartConfig from '../../charts/ChartConfig'\r\nimport Tooltip from '../../charts/Tooltip'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport {\r\n  ymdToUTC,\r\n  toFloatOrEmpty\r\n} from '../AdapterFn';\r\n\r\nconst C = {\r\n  CAPTION: 'Dividends',\r\n  COLOR: '#4caf50'\r\n};\r\n\r\nconst _isArr = Array.isArray\r\n, _assign = Object.assign;\r\n\r\nconst _crPoint = p => _assign(\r\n  ChartConfig.crMarkerExDividend(C.COLOR, 0), {\r\n  x: ymdToUTC(p.paymentDate),\r\n  exValue: toFloatOrEmpty(p.amount)\r\n});\r\n\r\nconst toDividendsImpl = {\r\n  caption: C.CAPTION,\r\n  color: C.COLOR,\r\n\r\n  crSubtitle: ({ value, dfPeriod }) => {\r\n    return `${value} Dividends ${dfPeriod}`;\r\n  },\r\n\r\n  crSeria: (json, option) => {\r\n    const data = _isArr(json)\r\n      ? json.reverse().map(_crPoint)\r\n      : [];\r\n    return Builder()\r\n      .scatterSeria(Tooltip.exValue, { data })\r\n      .toSeria();\r\n  }\r\n};\r\n\r\nexport default toDividendsImpl\r\n"],"file":"toDividendsImpl.js"}