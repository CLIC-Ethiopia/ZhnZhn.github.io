{"version":3,"sources":["../../../src/adapters/iex/toFns.js"],"names":["_LOCALE","navigator","language","_isNumber","n","_assign","Object","assign","_calcScatterY","chart","isMin","max","min","yAxis","all","one","toFns","getValue","toStr","toLocaleString","toPerc","style","minimumFractionDigits","crZhConfig","key","value","dataSource","id","itemCaption","crToSeria","seria","caption","color","option","dfType","y","IT","ERN","data","forEach","p","name","zhColor"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,OAAO,GAAG,CAACC,SAAS,IAAI,EAAd,EAAkBC,QAAlC;;AACA,MAAMC,SAAS,GAAGC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAApC;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAvB;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtC,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,KAAK,CAACI,KAAN,CAAY,CAAZ,CAArB;AAAA,QACMC,GAAG,GAAGH,GAAG,GAAGC,GADlB;AAAA,QAEMG,GAAG,GAAGD,GAAG,GAAC,GAFhB;AAGA,SAAOJ,KAAK,GACPE,GAAG,GAAGG,GADC,GAEPJ,GAAG,GAAG,IAAEI,GAFb;AAGD,CAPD;;AASA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAARA,mBADY;AAGZC,EAAAA,KAAK,EAAEd,CAAC,IAAID,SAAS,CAACC,CAAD,CAAT,GACRA,CAAC,CAACe,cAAF,CAAiBnB,OAAjB,CADQ,GAER,EALQ;AAMZoB,EAAAA,MAAM,EAAEhB,CAAC,IAAID,SAAS,CAACC,CAAD,CAAT,GACRA,CAAC,CAACe,cAAF,CAAiBnB,OAAjB,EAA0B;AAAEqB,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,qBAAqB,EAAE;AAA3C,GAA1B,CADQ,GAER,EARO;AAUZC,EAAAA,UAAU,EAAE;AAAA,QAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAD;AAAA,WAAiC;AAC3CF,MAAAA,GAD2C;AACtCG,MAAAA,EAAE,EAAEH,GADkC;AAE3CI,MAAAA,WAAW,EAAEH,KAAK,IAAID,GAFqB;AAG3CE,MAAAA;AAH2C,KAAjC;AAAA,GAVA;AAgBZG,EAAAA,SAAS,EAAE,SAA8C;AAAA,QAA7C;AAAEpB,MAAAA,KAAF;AAASqB,MAAAA,KAAT;AAAgBC,MAAAA,OAAhB;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA;AAAhC,KAA6C;AACvD,UAAM;AAAEC,MAAAA;AAAF,QAAaD,MAAnB;AACA,UAAME,CAAC,GAAID,MAAM,KAAKE,mBAAGC,GAAf,GACN7B,aAAa,CAACC,KAAD,CADP,GAEND,aAAa,CAACC,KAAD,EAAQ,IAAR,CAFjB;AAGAqB,IAAAA,KAAK,CAACQ,IAAN,CAAWC,OAAX,CAAmBC,CAAC,IAAIA,CAAC,CAACL,CAAF,GAAMA,CAA9B;;AACA9B,IAAAA,OAAO,CAACyB,KAAD,EAAQ;AACbW,MAAAA,IAAI,EAAEV,OADO;AAEbH,MAAAA,WAAW,EAAEG,OAFA;AAGbW,MAAAA,OAAO,EAAEV;AAHI,KAAR,CAAP;;AAKA,WAAOF,KAAP;AACD;AA5BW,CAAd;eA+Bed,K","sourcesContent":["import { getValue } from '../AdapterFn';\r\nimport IT from './ItemTypes';\r\n\r\nconst _LOCALE = (navigator || {}).language;\r\nconst _isNumber = n => typeof n === 'number';\r\nconst _assign = Object.assign;\r\n\r\nconst _calcScatterY = (chart, isMin) => {\r\n  const { max, min } = chart.yAxis[0]\r\n      , all = max - min\r\n      , one = all/100;\r\n  return isMin\r\n    ? (min + one)\r\n    : (max - 7*one);\r\n};\r\n\r\nconst toFns = {\r\n  getValue,\r\n\r\n  toStr: n => _isNumber(n)\r\n    ? n.toLocaleString(_LOCALE)\r\n    : '',\r\n  toPerc: n => _isNumber(n)\r\n     ? n.toLocaleString(_LOCALE, { style: 'percent', minimumFractionDigits: 2})\r\n     : '',\r\n\r\n  crZhConfig: ({ key, value, dataSource }) => ({\r\n    key, id: key,\r\n    itemCaption: value || key,\r\n    dataSource\r\n  }),\r\n\r\n  crToSeria: ({ chart, seria, caption, color, option }) => {\r\n    const { dfType } = option;\r\n    const y = (dfType === IT.ERN)\r\n      ? _calcScatterY(chart)\r\n      : _calcScatterY(chart, true);\r\n    seria.data.forEach(p => p.y = y)\r\n    _assign(seria, {\r\n      name: caption,\r\n      itemCaption: caption,\r\n      zhColor: color\r\n    })\r\n    return seria;\r\n  }\r\n};\r\n\r\nexport default toFns\r\n"],"file":"toFns.js"}