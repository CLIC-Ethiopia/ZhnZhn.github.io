{"version":3,"sources":["../../../src/adapters/iex/toEarnings.js"],"names":["C","CAPTION","COLOR","COLOR_PLUS","COLOR_MINUS","_crZhConfig","option","dataSource","id","crId","key","isWithoutAdd","isWithLegend","_calcScatterY","chart","yAxis","max","min","all","one","_crSeria","json","dfType","data","map","EPSReportDate","p","actualEPS","EPSSurpriseDollar","_c","_p","fMarkerExDividend","dataLabels","y","push","Object","assign","x","ymdToUTC","exValue","type","tooltip","pointFormatter","eps","headerFormat","toEarnings","toConfig","seria","config","initBaseArea","add","zhConfig","series","toSeria","forEach","zhItemCaption","zhColor"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,IAAI;AACRC,WAAS,QADD;AAERC,SAAO,SAFC;AAGRC,cAAY,SAHJ;AAIRC,eAAa;AAJL,CAAV;;AAOA,IAAMC,cAAc,SAAdA,WAAc,CAACC,MAAD,EAAY;AACxB,MAAEC,UAAF,GAAiBD,MAAjB,CAAEC,UAAF;AAAA,MACAC,EADA,GACK,oBAAUC,IAAV,EADL;;AAEN,SAAO;AACLD,UADK,EACDE,KAAKF,EADJ;AAELG,kBAAc,IAFT;AAGLC,kBAAc,KAHT;AAILL;AAJK,GAAP;AAMD,CATD;;AAWA,IAAMM,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,sBACVA,MAAMC,KAAN,CAAY,CAAZ,CADU;AAAA,MACvBC,GADuB,iBACvBA,GADuB;AAAA,MAClBC,GADkB,iBAClBA,GADkB;AAAA,MAEzBC,GAFyB,GAEnBF,MAAMC,GAFa;AAAA,MAGzBE,GAHyB,GAGnBD,MAAI,GAHe;;AAI/B,SAAQF,MAAM,IAAEG,GAAhB;AACD,CALD;;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOf,MAAP,EAAkB;AAC3B,MAAEgB,MAAF,GAAahB,MAAb,CAAEgB,MAAF;AAAA,MACAC,IADA,GACO,EADP;;;AAGNF,OAAKC,MAAL,EAAaE,GAAb,CAAiB,aAAK;AAAA,QAEZC,aAFY,GAIVC,CAJU,CAEZD,aAFY;AAAA,QAEGE,SAFH,GAIVD,CAJU,CAEGC,SAFH;AAAA,QAGZC,iBAHY,GAIVF,CAJU,CAGZE,iBAHY;AAAA,QAKdC,EALc,GAKTD,oBAAoB,CAApB,GACI5B,EAAEI,WADN,GAEIJ,EAAEG,UAPG;AAAA,QAQd2B,EARc,GAQT,sBAAYC,iBAAZ,CAA8BF,EAA9B,CARS;;AASpBC,OAAGE,UAAH,CAAcC,CAAd,GAAkB,CAAlB;AACAV,SAAKW,IAAL,CACEC,OAAOC,MAAP,CAAcN,EAAd;AACGO,SAAG,oBAAUC,QAAV,CAAmBb,aAAnB,CADN;AAEGc,eAASZ;AAFZ,OAGMD,CAHN,EADF;AAMD,GAhBD;AAiBA,SAAO;AACLc,UAAM,SADD;AAELC,aAAS;AACPC,sBAAgB,kBAAQC,GADjB;AAEPC,oBAAc;AAFP,KAFJ;AAMLrB,UAAMA;AACN;AAPK,GAAP;AASD,CA9BD;;AAgCA,IAAMsB,aAAa;AAEjBC,UAFiB,oBAERzB,IAFQ,EAEFf,MAFE,EAEK;AACpB,QAAMyC,QAAQ3B,SAASC,IAAT,EAAef,MAAf,CAAd;AAAA,QACM0C,SAAS,+BACNC,YADM,GAENC,GAFM,CAEF;AACHC,gBAAU9C,YAAYC,MAAZ;AADP,KAFE,EAKNwC,QALM,EADf;;AAQAE,WAAOI,MAAP,CAAc,CAAd,IAAmBL,KAAnB;AACA,WAAOC,MAAP;AACD,GAbgB;AAejBK,SAfiB,mBAeThC,IAfS,EAeHf,MAfG,EAeKQ,KAfL,EAeW;AAC1B,QAAMiC,QAAQ3B,SAASC,IAAT,EAAef,MAAf,CAAd;AAAA,QACM2B,IAAIpB,cAAcC,KAAd,CADV;;AAGAiC,UAAMxB,IAAN,CAAW+B,OAAX,CAAmB;AAAA,aAAK5B,EAAEO,CAAF,GAAMA,CAAX;AAAA,KAAnB;AACAE,WAAOC,MAAP,CAAcW,KAAd,EAAqB;AACnBQ,qBAAevD,EAAEC,OADE;AAEnBuD,eAASxD,EAAEE;AAFQ,KAArB;;AAKA,WAAO6C,KAAP;AACD;AA1BgB,CAAnB;;kBA6BeF,U","file":"toEarnings.js","sourcesContent":["\r\nimport ChartConfig from '../../charts/ChartConfig'\r\nimport Tooltip from '../../charts/Tooltip'\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nconst C = {\r\n  CAPTION: '4Q EPS',\r\n  COLOR: '#4caf50',\r\n  COLOR_PLUS: '#4caf50',\r\n  COLOR_MINUS: '#f44336'\r\n};\r\n\r\nconst _crZhConfig = (option) => {\r\n  const { dataSource } = option\r\n      , id = AdapterFn.crId();\r\n  return {\r\n    id, key: id,\r\n    isWithoutAdd: true,\r\n    isWithLegend: false,\r\n    dataSource\r\n  };\r\n}\r\n\r\nconst _calcScatterY = (chart) => {\r\n  const { max, min } = chart.yAxis[0]\r\n      , all = max - min\r\n      , one = all/100;\r\n  return (max - 7*one);\r\n}\r\n\r\nconst _crSeria = (json, option) => {\r\n  const { dfType } = option\r\n      , data = [];\r\n\r\n  json[dfType].map(p => {\r\n    const {\r\n            EPSReportDate, actualEPS,\r\n            EPSSurpriseDollar\r\n          } = p\r\n        , _c = EPSSurpriseDollar < 0\r\n                 ? C.COLOR_MINUS\r\n                 : C.COLOR_PLUS                 \r\n        , _p = ChartConfig.fMarkerExDividend(_c);\r\n    _p.dataLabels.y = 0\r\n    data.push(\r\n      Object.assign(_p, {\r\n         x: AdapterFn.ymdToUTC(EPSReportDate),\r\n         exValue: actualEPS,\r\n         ...p\r\n      }))\r\n  })\r\n  return {\r\n    type: 'scatter',\r\n    tooltip: {\r\n      pointFormatter: Tooltip.eps,\r\n      headerFormat: ''\r\n    },\r\n    data: data\r\n    //zhSeriaId : zhSeriaId\r\n  };\r\n}\r\n\r\nconst toEarnings = {\r\n\r\n  toConfig(json, option){\r\n    const seria = _crSeria(json, option)\r\n        , config = ConfigBuilder()\r\n            .initBaseArea()\r\n            .add({\r\n              zhConfig: _crZhConfig(option)\r\n            })\r\n            .toConfig();\r\n\r\n    config.series[0] = seria\r\n    return config;\r\n  },\r\n\r\n  toSeria(json, option, chart){\r\n    const seria = _crSeria(json, option)\r\n        , y = _calcScatterY(chart);\r\n\r\n    seria.data.forEach(p => p.y = y)\r\n    Object.assign(seria, {\r\n      zhItemCaption: C.CAPTION,\r\n      zhColor: C.COLOR\r\n    })\r\n\r\n    return seria;\r\n  }\r\n}\r\n\r\nexport default toEarnings\r\n"]}