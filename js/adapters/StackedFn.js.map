{"version":3,"sources":["../../src/adapters/StackedFn.js"],"names":["_rFactorySeria","STACKED_AREA","fStackAreaSeria","STACKED_AREA_PERCENT","STACKED_COLUMN","fStackedColumnSeria","STACKED_COLUMN_PERCENT","fnCalcTotal","jsonData","items","_bTotal","i","max","length","y","value","plus","_fnCreateReferenceDataAndTotal","_data","forEach","caption","item","_arr","split","_name","substring","push","name","nameFull","_jsonIndex","sort","compareByY","reverse","referenceData","bTotal","_fnCreateDataTopPercent","data","percent","_dataTopPercent","_bTotal90","times","_bArrTotal","gte","_fnInitSeries","zhSeriaId","chartType","fSeria","map","itemIndex","fnGetMonoColor","color","_fnCalcPercent","bValue","eq","div","abs","toFixed","_fnCreateStackedSeries","items100","items90","stacking","series","categories","dataOther","yearData","yearTotal100","yearTotal90","isFullYearData","total","parseInt","toString","yOther","minus","fnCreateStackedConfig","bPrevTotal","dateTo","date","bNowTotal","fnCreateSparkData","bYearTotals","sparkvalues","sparkpercent","yearIndex","parseFloat","createPercent","crValueMoving","Object","assign","createValueMoving","bNowValue","bPrevValue","valueTo","fnNumberFormat","isDenyToChange","crZhConfig","option","createZhConfig","id","isWithoutAdd","isWithoutIndicator"],"mappings":"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","file":"StackedFn.js","sourcesContent":["import Big from 'big.js';\r\n\r\nimport AdapterFn from './AdapterFn'\r\n\r\nimport {ChartType} from '../constants/Type';\r\nimport Chart from '../charts/Chart';\r\nimport ChartConfig from '../charts/ChartConfig';\r\n\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\nconst _rFactorySeria = {\r\n  [ChartType.STACKED_AREA] : ChartConfig.fStackAreaSeria,\r\n  [ChartType.STACKED_AREA_PERCENT] : ChartConfig.fStackAreaSeria,\r\n  [ChartType.STACKED_COLUMN] : ChartConfig.fStackedColumnSeria,\r\n  [ChartType.STACKED_COLUMN_PERCENT] : ChartConfig.fStackedColumnSeria\r\n}\r\n\r\nexport const fnCalcTotal = function(jsonData=[], items=[]){\r\n   let _bTotal = Big('0.0');\r\n   for(let i=0, max=items.length; i<max; i++ ){\r\n     let y = jsonData[items[i].value]\r\n     if (y){\r\n       _bTotal = _bTotal.plus(y);\r\n     }\r\n   }\r\n   return _bTotal;\r\n}\r\n\r\nconst _fnCreateReferenceDataAndTotal = function(jsonData, items){\r\n  let _data = []\r\n    , _bTotal = Big('0.0');\r\n\r\n  items.forEach( item => {\r\n    const { caption, value } = item\r\n        , y = jsonData[value];\r\n    if (y) {\r\n       const _arr = caption.split(';')\r\n            , _name = _arr[0]\r\n                ? _arr[0].substring(0, 9)\r\n                : caption;\r\n       _data.push({\r\n          name : _name,\r\n          nameFull: caption,\r\n          y: y,\r\n          _jsonIndex : value\r\n        });\r\n       _bTotal = _bTotal.plus(y);\r\n    }\r\n  });\r\n\r\n  _data.sort(AdapterFn.compareByY).reverse()  \r\n\r\n  return { referenceData : _data, bTotal : _bTotal };\r\n}\r\n\r\nconst _fnCreateDataTopPercent = function(data, bTotal, percent){\r\n  const _dataTopPercent = []\r\n      , _bTotal90 = bTotal.times(percent);\r\n  let _bArrTotal = Big('0.0');\r\n  for (let i=0, max=data.length; i<max; i++ ){\r\n    let item = data[i];\r\n    if ( i === 0 ||\r\n         !_bArrTotal.gte(_bTotal90) ||\r\n         i === max-1 )\r\n    {\r\n      _dataTopPercent.push(item);\r\n    } else { break; }\r\n\r\n    _bArrTotal = _bArrTotal.plus(item.y);\r\n  }\r\n\r\n  return _dataTopPercent;\r\n}\r\n\r\n\r\nconst _fnInitSeries = function({ items, zhSeriaId, chartType, fSeria }){\r\n  return items.map((item, itemIndex)=>{\r\n           const color = Chart.fnGetMonoColor(itemIndex)\r\n               , {name} = item\r\n               return fSeria({ zhSeriaId, name, color })\r\n         });\r\n}\r\n\r\n\r\nconst _fnCalcPercent = function(bTotal=Big('0.0'), bValue=Big('0.0')){\r\n  return (!bTotal.eq(Big(0.0)) )\r\n            ? bValue.times(100).div(bTotal).abs().toFixed(2) + '%' : Big(0.0) + '%';\r\n}\r\n\r\nconst _fnCreateStackedSeries = function({\r\n  jsonData, items100, items90, zhSeriaId, chartType, stacking\r\n}){\r\n   const fSeria = _rFactorySeria[chartType]\r\n       , series = _fnInitSeries({ items:items90, zhSeriaId, chartType, fSeria })\r\n       , categories = []\r\n       , dataOther = []\r\n\r\n   jsonData = jsonData.reverse();\r\n   jsonData.forEach((yearData, i) =>{\r\n     let yearTotal100 = fnCalcTotal(yearData, items100)\r\n       , yearTotal90  = Big('0.0')\r\n       , isFullYearData = true;\r\n     items90.forEach((item, itemIndex) => {\r\n        const y = yearData[item._jsonIndex]\r\n            , percent = (y) ? _fnCalcPercent(yearTotal100, Big(y)) : '0.0%';\r\n        series[itemIndex].data.push({\r\n           y : y,\r\n           nameFull : item.nameFull,\r\n           percent : percent,\r\n           total : parseInt(yearTotal100.toString(), 10)\r\n         })\r\n        if (y) {\r\n          yearTotal90 = yearTotal90.plus(y);\r\n        } else {\r\n          isFullYearData = false;\r\n        }\r\n     })\r\n     if ( stacking === 'percent' && !isFullYearData && categories.length === 0 ){\r\n        items90.forEach((item, itemIndex) => {\r\n           series[itemIndex].data = [];\r\n        })\r\n     } else {\r\n        categories.push(yearData[0].split('-')[0]);\r\n        const yOther = parseInt(yearTotal100.minus(yearTotal90).toString(), 10);\r\n        dataOther.push({\r\n          y : yOther,\r\n          nameFull : 'Other',\r\n          percent : _fnCalcPercent(yearTotal100, Big(yOther)),\r\n          total : parseInt(yearTotal100.toString(), 10)\r\n       })\r\n     }\r\n   })\r\n\r\n   series.push(\r\n     fSeria({\r\n       zhSeriaId : zhSeriaId,\r\n       name : 'Other',\r\n       data : dataOther,\r\n       color: 'gray'\r\n     })\r\n   )\r\n\r\n   return { series, categories };\r\n}\r\n\r\nexport const fnCreateStackedConfig = function({\r\n   jsonData, items100, zhSeriaId, chartType=ChartType.STACKED_AREA, stacking='normal'\r\n }){\r\n  const {referenceData , bTotal} = _fnCreateReferenceDataAndTotal(jsonData[0], items100)\r\n      , items90 = _fnCreateDataTopPercent(referenceData, bTotal, 0.9)\r\n      , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n      , dateTo = (jsonData[1][0]) ? jsonData[1][0] : ''\r\n      , { series, categories } = _fnCreateStackedSeries({\r\n          jsonData, items100, items90, zhSeriaId, chartType, stacking\r\n        })\r\n      , date = ( categories && categories.length>1 )\r\n           ? categories[categories.length-1]\r\n           : '';\r\n\r\n  return {bNowTotal : bTotal, date, bPrevTotal, dateTo, series, categories};\r\n}\r\n\r\nexport const fnCreateSparkData = function(jsonData, itemIndex, bYearTotals){\r\n  const sparkvalues = []\r\n      , sparkpercent = [];\r\n\r\n  jsonData.forEach( (yearData, yearIndex) => {\r\n      sparkvalues.push( yearData[itemIndex] );\r\n      if ( yearData[itemIndex] ) {\r\n         sparkpercent.push( parseFloat(QuandlFn2.createPercent({\r\n            bValue : Big(yearData[itemIndex]),\r\n            bTotal : bYearTotals[yearIndex]\r\n         }), 10) );\r\n      } else {\r\n        sparkpercent.push( null );\r\n      }\r\n  })\r\n\r\n  return { sparkvalues, sparkpercent }\r\n}\r\n\r\nexport const crValueMoving = function(bNowTotal, date, bPrevTotal, dateTo){\r\n  return Object.assign(\r\n      QuandlFn2.createValueMoving({\r\n        bNowValue  : bNowTotal,\r\n        bPrevValue : bPrevTotal\r\n      }),\r\n      {\r\n        date: date,\r\n        dateTo: dateTo.split('-')[0],\r\n        valueTo: ChartConfig.fnNumberFormat(bPrevTotal),\r\n        isDenyToChange: true\r\n      }\r\n   );\r\n}\r\n\r\nexport const crZhConfig = function(option, zhSeriaId){\r\n  return Object.assign(\r\n       QuandlFn2.createZhConfig(option),\r\n      {\r\n        id:zhSeriaId,\r\n        isWithoutAdd:true,\r\n        isWithoutIndicator:true\r\n      }\r\n  );\r\n}\r\n"]}