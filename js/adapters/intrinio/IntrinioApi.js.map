{"version":3,"sources":["../../../src/adapters/intrinio/IntrinioApi.js"],"names":["C","URL","TAIL","RES_ERR_STATUS","FRQ","A","Q","W","D","M","DF","_getErr","json","Array","isArray","errors","IntrinioApi","crOptionFetch","option","apiKey","headers","getRequestUrl","value","fromDate","toDate","item","one","two","three","resErrStatus","_frq","frq","checkResponse","_err","human","message","data"],"mappings":";;;;;AAAA;;AAEA,MAAMA,CAAC,GAAG;AACRC,EAAAA,GAAG,EAAE,0CADG;AAERC,EAAAA,IAAI,EAAE,YAFE;AAGRC,EAAAA,cAAc,EAAE,CAAE,GAAF;AAHR,CAAV;AAMA,MAAMC,GAAG,GAAG;AACVC,EAAAA,CAAC,EAAE,QADO;AAEVC,EAAAA,CAAC,EAAE,WAFO;AAGVC,EAAAA,CAAC,EAAE,QAHO;AAIVC,EAAAA,CAAC,EAAE,OAJO;AAKVC,EAAAA,CAAC,EAAE,SALO;AAMVC,EAAAA,EAAE,EAAE;AANM,CAAZ;;AASA,MAAMC,OAAO,GAAIC,IAAD,IAAUA,IAAI,IACzBC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,MAAnB,CADqB,IAErBH,IAAI,CAACG,MAAL,CAAY,CAAZ,CAFqB,GAGrBH,IAAI,CAACG,MAAL,CAAY,CAAZ,CAHqB,GAIrB,KAAK,CAJV;;AAMA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,aAAa,CAACC,MAAD,EAAQ;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAaD,MAAnB;AACA,WAAO;AACLE,MAAAA,OAAO,EAAE;AACP,sCAA8BD;AADvB;AADJ,KAAP;AAKD,GARiB;;AAUlBE,EAAAA,aAAa,CAACH,MAAD,EAAQ;AACnB,UAAM;AACJI,MAAAA,KADI;AACGC,MAAAA,QADH;AACaC,MAAAA,MADb;AACqBC,MAAAA,IAAI,GAAC,EAD1B;AAEJC,MAAAA,GAFI;AAECC,MAAAA,GAFD;AAEMC,MAAAA;AAFN,QAGFV,MAHJ;AAIAA,IAAAA,MAAM,CAACW,YAAP,GAAsB7B,CAAC,CAACG,cAAxB;;AAEA,QAAIwB,GAAG,IAAIC,KAAX,EAAkB;AAChB,aAAU5B,CAAC,CAACC,GAAZ,oBAA8ByB,GAA9B,cAA0CC,GAA1C,oBAA4DJ,QAA5D,kBAAiFC,MAAjF,cAAgGI,KAAhG;AACD;;AAED,QAAID,GAAJ,EAAS;AACP;AACA,aAAU3B,CAAC,CAACC,GAAZ,oBAA8ByB,GAA9B,cAA0CC,GAA1C,oBAA4DJ,QAA5D,kBAAiFC,MAAjF;AACD;;AAED,UAAMM,IAAI,GAAG1B,GAAG,CAACqB,IAAI,CAACM,GAAN,CAAH,IAAiB3B,GAAG,CAACM,EAAlC;;AACA,WAAUV,CAAC,CAACC,GAAZ,oBAA8BqB,KAA9B,oBAAkDC,QAAlD,kBAAuEC,MAAvE,mBAA2FM,IAA3F,SAAmG9B,CAAC,CAACE,IAArG;AACD,GA5BiB;;AA8BlB8B,EAAAA,aAAa,CAACpB,IAAD,EAAM;AACjB,UAAMqB,IAAI,GAAGtB,OAAO,CAACC,IAAD,CAApB;;AACA,QAAIqB,IAAJ,EAAU;AACT,YAAM,mBAAQA,IAAI,CAACC,KAAb,EAAoBD,IAAI,CAACE,OAAzB,CAAN;AACA;;AACD,WAAOvB,IAAI,IACNC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACwB,IAAnB,CADL;AAED;;AArCiB,CAApB;eAwCepB,W","sourcesContent":["import { crError } from '../crFn';\r\n\r\nconst C = {\r\n  URL: 'https://api.intrinio.com/historical_data',\r\n  TAIL: 'item=level',\r\n  RES_ERR_STATUS: [ 401 ]\r\n};\r\n\r\nconst FRQ = {\r\n  A: 'yearly',\r\n  Q: 'quarterly',\r\n  W: 'weekly',\r\n  D: 'daily',\r\n  M: 'monthly',\r\n  DF: 'monthly'\r\n};\r\n\r\nconst _getErr = (json) => json\r\n  && Array.isArray(json.errors)\r\n  && json.errors[0]\r\n   ? json.errors[0]\r\n   : void 0;\r\n\r\nconst IntrinioApi = {\r\n  crOptionFetch(option){\r\n    const { apiKey } = option;\r\n    return {\r\n      headers: {\r\n        'X-Authorization-Public-Key': apiKey\r\n      }\r\n    };\r\n  },\r\n\r\n  getRequestUrl(option){\r\n    const {\r\n      value, fromDate, toDate, item={},\r\n      one, two, three\r\n    } = option;\r\n    option.resErrStatus = C.RES_ERR_STATUS\r\n\r\n    if (two && three) {\r\n      return `${C.URL}?identifier=${one}&item=${two}&start_date=${fromDate}&end_date=${toDate}&type=${three}`;\r\n    }\r\n\r\n    if (two) {\r\n      //return `${C.URL}?identifier=${one}&item=${two}&start_date=${fromDate}&end_date=${toDate}&frequency=quarterly`;\r\n      return `${C.URL}?identifier=${one}&item=${two}&start_date=${fromDate}&end_date=${toDate}&type=QTR`;\r\n    }\r\n\r\n    const _frq = FRQ[item.frq] || FRQ.DF;\r\n    return `${C.URL}?identifier=${value}&start_date=${fromDate}&end_date=${toDate}&frequency=${_frq}&${C.TAIL}`;\r\n  },\r\n\r\n  checkResponse(json){\r\n    const _err = _getErr(json);\r\n    if (_err) {\r\n     throw crError(_err.human, _err.message);\r\n    }\r\n    return json\r\n      && Array.isArray(json.data);\r\n  }\r\n};\r\n\r\nexport default IntrinioApi\r\n"],"file":"IntrinioApi.js"}