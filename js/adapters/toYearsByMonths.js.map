{"version":3,"sources":["../../src/adapters/toYearsByMonths.js"],"names":["CATEGORIES","C","NOW","index","color","PREV","AVG","isVisible","MIN","MAX","_getYear","str","split","_getMonth","_crSeria","name","type","data","visible","_crItem","_crPoint","item","c","y","status","_crValuePoint","_crValueYearPoint","v","_findHighLow","arr","h","Number","NEGATIVE_INFINITY","l","POSITIVE_INFINITY","forEach","high","yHigh","yHs","low","yLow","yLs","_crHighLowPoint","key","_calcAvg","sum","reduce","acc","a","length","_crAvgPoint","_crSeriaData","i","year","crPoint","max","push","reverse","_crSeries","seriaColor","firtsItem","_yearNow","_dNow","prevItem","_yearPrev","_dPrev","nowSeria","nowItem","prevSeria","_hmToSeriaData","hm","map","_crBaseHm","Object","create","_crMonthHm","stopYear","isBreaked","_item","_y","_m","_crRangeSeries","refYear","parseFloat","_stopYear","_range","_data","_minData","_maxData","d","splineSeria","seriaWidth","tooltip","Tooltip","categorySimple","toSeria","_findStartYearIndex","yearStop","_crAvgSeria","yearNow","fromYear","startIndex","_crZhConfig","option","legend","value","itemCaption","dataSource","linkFn","_id","id","isWithoutIndicator","_crValueAndDate","seria","date","_crValueMoving","bNowValue","bPrevValue","dateTo","moving","valueTo","isDenyToChange","_checkIfEnoughData","_len","errCaption","message","toMonthly","toConfig","title","subtitle","minSeria","maxSeria","avgSeria","avgItem","config","categoryConfig","addCaption","addSeriaBy","addTooltip","add","chart","marginTop","zhConfig","valueMoving"],"mappings":"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","sourcesContent":["import Builder from '../charts/ConfigBuilder';\r\nimport Tooltip from '../charts/Tooltip';\r\nimport {\r\n  crValueMoving,\r\n  roundBy,\r\n  numberFormat\r\n} from './AdapterFn';\r\n\r\nconst CATEGORIES = [\r\n  '01', '02', '03', '04', '05', '06',\r\n  '07', '08', '09', '10', '11', '12'\r\n];\r\n\r\nconst C = {\r\n  NOW: {\r\n    index: 3,\r\n    color: '#7cb5ec'\r\n  },\r\n  PREV: {\r\n    index: 2,\r\n    color: '#f45b5b'\r\n  },\r\n  AVG: {\r\n    index: 4,\r\n    color: 'black',\r\n    isVisible: false\r\n  },\r\n  MIN: {\r\n    index: 0,\r\n    color: '#008b8b'\r\n  },\r\n  MAX: {\r\n    index: 1,\r\n    color: '#008b8b'\r\n  }\r\n};\r\n\r\nconst _getYear = str => str.split(\"-\")[0];\r\nconst _getMonth = str => str.split(\"-\")[1];\r\n\r\nconst _crSeria = (\r\n  name, { type='spline', data, color, isVisible=true }\r\n) => ({\r\n  type, name, data, color, visible: isVisible\r\n});\r\nconst _crItem = (\r\n  name, { index, color, isVisible=true }\r\n) => ({\r\n   name, index, color, isVisible\r\n});\r\n\r\nconst _crPoint = item => ({\r\n  c: _getMonth(item[0]),\r\n  y: item[1],\r\n  status: item[2]\r\n});\r\nconst _crValuePoint = item => item[1];\r\nconst _crValueYearPoint = item => ({\r\n  v: item[1],\r\n  y: _getYear(item[0]),\r\n  status: item[2]\r\n});\r\nconst _findHighLow = (arr) => {\r\n  let h = { v: Number.NEGATIVE_INFINITY, y: '' },\r\n      l = { v: Number.POSITIVE_INFINITY, y: '' };\r\n  arr.forEach(item => {\r\n    if (item.v > h.v) {\r\n      h = item\r\n    }\r\n    if (item.v < l.v ) {\r\n      l = item\r\n    }\r\n  })\r\n  return {\r\n    high: h.v, yHigh: h.y, yHs: h.status,\r\n    low: l.v, yLow: l.y, yLs: l.status\r\n  };\r\n};\r\nconst _crHighLowPoint = (key, arr) => ({\r\n  c: key,\r\n  ..._findHighLow(arr)\r\n});\r\nconst _calcAvg = (arr) => {\r\n  const sum = arr.reduce((acc, a) => acc + a, 0)\r\n  return arr.length !== 0\r\n    ? roundBy(sum/arr.length, 4)\r\n    : 0;\r\n};\r\nconst _crAvgPoint = (key, arr) => ({\r\n  y: _calcAvg(arr),\r\n  c: key\r\n});\r\n\r\nconst _crSeriaData = (data, i, year, crPoint=_crPoint) => {\r\n  const arr=[], max=data.length;\r\n  for (; i<max; i++){\r\n    const item = data[i]\r\n    if (_getYear(item[0]) !== year) {\r\n      break;\r\n    }\r\n    arr.push( crPoint(item) )\r\n  }\r\n  return { i, arr: arr.reverse() };\r\n}\r\n\r\nconst _crSeries = (data, seriaColor) => {\r\n  const firtsItem = data[0][0]\r\n  , _yearNow = _getYear(firtsItem)\r\n  , { i, arr:_dNow } = _crSeriaData(data, 0, _yearNow)\r\n  , prevItem = data[i][0]\r\n  , _yearPrev = _getYear(prevItem)\r\n  , { arr:_dPrev } = _crSeriaData(data, i, _yearPrev);\r\n\r\n  return {\r\n    nowSeria: _crSeria(_yearNow, { color: seriaColor, ...C.NOW, ...{data: _dNow} } ),\r\n    nowItem: _crItem(_yearNow, C.NOW),\r\n    prevSeria: _crSeria(_yearPrev, { ...C.PREV, ...{data: _dPrev} }),\r\n    prevItem: _crItem(_yearPrev, C.PREV)\r\n  };\r\n}\r\n\r\n\r\nconst _hmToSeriaData = (hm, crPoint) => CATEGORIES\r\n  .map(key => crPoint(key, hm[key]));\r\n\r\nconst _crBaseHm = () => CATEGORIES\r\n  .reduce((hm, key) => {\r\n    hm[key] = [];\r\n    return hm;\r\n  }, Object.create(null));\r\n\r\n\r\nconst _crMonthHm = (i, data, stopYear, crPoint=_crValuePoint) => {\r\n  const hm = _crBaseHm()\r\n      , max = data.length;\r\n  let isBreaked = false;\r\n  for (;i<max;i++){\r\n    const _item = data[i]\r\n        , _y = _item[0];\r\n    if (_y === stopYear ) {\r\n      isBreaked = true\r\n      break;\r\n    }\r\n    const _m = _getMonth(_item[0])\r\n    hm[_m].push(crPoint(_item))\r\n  }\r\n\r\n  return { hm, isBreaked };\r\n}\r\n\r\n\r\nconst _crRangeSeries = (data) => {\r\n  const refYear = parseFloat(_getYear(data[0][0]))\r\n      , stopYear = '' + (refYear - 5)\r\n      , { hm, isBreaked } = _crMonthHm(\r\n            0, data, stopYear, _crValueYearPoint\r\n        )\r\n      , max = data.length\r\n      , _stopYear = isBreaked\r\n           ? stopYear\r\n           : _getYear(data[max-1][0])\r\n      , _range = `${_stopYear}:${refYear}`\r\n      , _data = _hmToSeriaData(hm, _crHighLowPoint);\r\n\r\n  const _minData = []\r\n  , _maxData = [];\r\n   _data.forEach(({ c, high, yHigh, low, yLow }) => {\r\n     _minData.push({ c, y: low, d: yLow })\r\n     _maxData.push({ c, y: high, d: yHigh })\r\n   })\r\n\r\n  return [\r\n    Builder().splineSeria({ name: `Min ${_range}`,  data: _minData, color: '#008b8b', seriaWidth: 2, tooltip: Tooltip.categorySimple }).toSeria(),\r\n    _crSeria(`Max ${_range}`, { data: _maxData, color: '#008b8b' })\r\n  ];\r\n}\r\n\r\nconst _findStartYearIndex = (data, yearStop) => {\r\n  const max = data.length;\r\n  let i = 0;\r\n  for(;i<max;i++){\r\n    if (_getYear(data[i][0]) !== yearStop ) {\r\n       break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nconst _crAvgSeria = (data) => {\r\n  const yearNow = _getYear(data[0][0])\r\n      , fromYear = parseFloat(yearNow) - 1\r\n      , stopYear = '' + (parseFloat(yearNow) - 5)\r\n      , max = data.length\r\n      , startIndex = _findStartYearIndex(data, yearNow)\r\n      , { hm, isBreaked } = _crMonthHm(startIndex, data, stopYear)\r\n      , _stopYear = isBreaked\r\n           ? stopYear\r\n           : _getYear(data[max-1][0])\r\n      , _data = _hmToSeriaData(hm, _crAvgPoint)\r\n      , name = `Avg ${_stopYear}:${fromYear}`;\r\n\r\n  return [\r\n    _crSeria(name, {...C.AVG, ...{data: _data}}),\r\n    _crItem(name, C.AVG),\r\n  ];\r\n}\r\n\r\nconst _crZhConfig = (option, { legend }) => {\r\n  const {\r\n    value, itemCaption,\r\n    dataSource, linkFn, item,\r\n  } = option\r\n  , _id = value + '_' + 'YEARLY';\r\n  return {\r\n    id: _id,\r\n    key: _id,\r\n    itemCaption,\r\n    isWithoutIndicator: true,\r\n    legend, dataSource, linkFn, item\r\n  };\r\n}\r\n\r\n\r\nconst _crValueAndDate = (seria, index) => {\r\n  const { data=[], name } = seria\r\n      , { y:value, c } = data[index];\r\n  return {\r\n    value,\r\n    date: `${c}-${name}`\r\n  };\r\n}\r\nconst _crValueMoving = (nowSeria, prevSeria) => {\r\n  const { data=[] } = nowSeria\r\n      , max = data.length - 1\r\n      , {\r\n          value:bNowValue,\r\n          date\r\n        } = _crValueAndDate(nowSeria, max)\r\n      , {\r\n          value:bPrevValue,\r\n          date:dateTo\r\n        } = _crValueAndDate(prevSeria, max)\r\n      , moving = crValueMoving({\r\n            bNowValue,\r\n            bPrevValue\r\n        });\r\n\r\n  return {\r\n    ...moving, date, dateTo,\r\n    valueTo: numberFormat(bPrevValue),\r\n    isDenyToChange: true\r\n  };\r\n};\r\n\r\nconst _checkIfEnoughData = data => {\r\n  const _len = data?.length;\r\n  if (_len<=12) {\r\n    throw {\r\n      errCaption: \"Data Error\",\r\n      message: `Not enough data for chart (${_len})`\r\n    };\r\n  }\r\n};\r\n\r\nconst toMonthly = {\r\n  toConfig(data, option) {\r\n    _checkIfEnoughData(data)\r\n    const { title, subtitle, seriaColor } = option\r\n    , {\r\n        nowSeria, nowItem,\r\n        prevSeria, prevItem\r\n      } = _crSeries(data, seriaColor)\r\n    , [ minSeria, maxSeria ] = _crRangeSeries(data)\r\n    , [ avgSeria, avgItem ] = _crAvgSeria(data)\r\n    , legend = [ _crItem('MIN', C.MIN), _crItem('MAX', C.MAX), prevItem, nowItem, avgItem ]\r\n    , config = Builder()\r\n       .categoryConfig(CATEGORIES)\r\n       .addCaption(title, subtitle)\r\n       .addSeriaBy(0, minSeria)\r\n       .addSeriaBy(1, maxSeria)\r\n       .addSeriaBy(2, prevSeria)\r\n       .addSeriaBy(3, nowSeria)\r\n       .addSeriaBy(4, avgSeria)\r\n       .addTooltip(Tooltip.categorySimple)\r\n       .add({\r\n         chart: { marginTop: 45 },\r\n         zhConfig: _crZhConfig(option, { legend }),\r\n         valueMoving: _crValueMoving(nowSeria, prevSeria)\r\n       })\r\n       .toConfig();\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\nexport default toMonthly\r\n"],"file":"toYearsByMonths.js"}