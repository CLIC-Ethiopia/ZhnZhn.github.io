{"version":3,"sources":["../../../src/adapters/fmp/FmpApi.js"],"names":["getCaption","fnAdapter","getValue","crError","C","URI","ERR_EMPTY","_configOption","option","dfT","items","dataSource","conf","chartContainerCaption","it1","it2","it3","_symbol","_period","_propName","_query","_itemUrl","Object","assign","FmpApi","getRequestUrl","checkResponse","json","options","dfPn","_json","_values","Array","isArray","symbol","Error"],"mappings":";;;;;;;AAAA;;IAGEA,U,GAGEC,qB,CAHFD,U;IACAE,Q,GAEED,qB,CAFFC,Q;IACAC,O,GACEF,qB,CADFE,O;AAGF,IAAMC,CAAC,GAAG;AACRC,EAAAA,GAAG,EAAE,0CADG;AAERC,EAAAA,SAAS,EAAE;AAFH,CAAV;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM,EAAI;AAAA,MACtBC,GADsB,GACiBD,MADjB,CACtBC,GADsB;AAAA,sBACiBD,MADjB,CACjBE,KADiB;AAAA,MACjBA,KADiB,8BACX,EADW;AAAA,MACPC,UADO,GACiBH,MADjB,CACPG,UADO;AAAA,qBACiBH,MADjB,CACKI,IADL;AAAA,MACKA,IADL,6BACU,EADV;AAAA,8BAEEA,IAFF,CAE1BC,qBAF0B;AAAA,MAE1BA,qBAF0B,sCAEJ,EAFI;AAAA,MAG1BC,GAH0B,GAGPJ,KAHO;AAAA,MAGrBK,GAHqB,GAGPL,KAHO;AAAA,MAGfM,GAHe,GAGPN,KAHO;AAAA,MAI5BO,OAJ4B,GAIlBf,QAAQ,CAACY,GAAD,CAJU;AAAA,MAK5BI,OAL4B,GAKlBhB,QAAQ,CAACc,GAAD,CALU;AAAA,MAM5BG,SAN4B,GAMhBnB,UAAU,CAACe,GAAD,CANM;AAAA,MAO5BK,MAP4B,GAOnBF,OAAO,gBACDA,OADC,GAEZ,EATwB;AAAA,MAU5BG,QAV4B,GAUdjB,CAAC,CAACC,GAVY,SAULI,GAVK,SAUEQ,OAVF,GAUYG,MAVZ;;AAY9BE,EAAAA,MAAM,CAACC,MAAP,CAAcf,MAAd,EAAsB;AACpBa,IAAAA,QAAQ,EAARA,QADoB;AAEpBJ,IAAAA,OAAO,EAAPA,OAFoB;AAEXC,IAAAA,OAAO,EAAPA,OAFW;AAGpBC,IAAAA,SAAS,EAATA,SAHoB;AAIpBR,IAAAA,UAAU,EAAEA,UAAU,IAAIE;AAJN,GAAtB;AAMD,CAlBD;;AAoBA,IAAMW,MAAM,GAAG;AACbC,EAAAA,aADa,yBACCjB,MADD,EACQ;AACnBD,IAAAA,aAAa,CAACC,MAAD,CAAb;;AACA,WAAOA,MAAM,CAACa,QAAd;AACD,GAJY;AAKbK,EAAAA,aALa,yBAKCC,IALD,EAKOC,OALP,EAKe;AAAA,QAClBC,IADkB,GACAD,OADA,CAClBC,IADkB;AAAA,QACZZ,OADY,GACAW,OADA,CACZX,OADY;AAAA,QAExBa,KAFwB,GAEhBH,IAAI,IAAI,EAFQ;AAAA,QAGxBI,OAHwB,GAGbD,KAAK,CAACD,IAAD,CAHQ;;AAI1B,QAAIG,KAAK,CAACC,OAAN,CAAcF,OAAd,KACGJ,IAAI,CAACO,MAAL,KAAgBjB,OADvB,EACgC;AAC9BU,MAAAA,IAAI,CAACI,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACD;;AACD,UAAM5B,OAAO,CACXc,OADW,EAEXU,IAAI,CAACQ,KAAL,IAAc/B,CAAC,CAACE,SAFL,CAAb;AAID;AAlBY,CAAf;eAqBekB,M","sourcesContent":["import fnAdapter from './fnAdapter'\r\n\r\nconst {\r\n  getCaption,\r\n  getValue,\r\n  crError\r\n} = fnAdapter;\r\n\r\nconst C = {\r\n  URI: 'https://financialmodelingprep.com/api/v3',\r\n  ERR_EMPTY: 'Response is empty'\r\n};\r\n\r\nconst _configOption = option => {\r\n  const { dfT, items=[], dataSource, conf={} } = option\r\n  , { chartContainerCaption=''} = conf\r\n  , [ it1, it2 , it3 ] = items\r\n  , _symbol = getValue(it1)\r\n  , _period = getValue(it3)\r\n  , _propName = getCaption(it2)\r\n  , _query = _period\r\n      ? `?period=${_period}`\r\n      : ''\r\n  , _itemUrl = `${C.URI}/${dfT}/${_symbol}${_query}`;\r\n\r\n  Object.assign(option, {\r\n    _itemUrl,\r\n    _symbol, _period,\r\n    _propName,\r\n    dataSource: dataSource || chartContainerCaption\r\n  })\r\n}\r\n\r\nconst FmpApi = {\r\n  getRequestUrl(option){\r\n    _configOption(option)\r\n    return option._itemUrl;\r\n  },\r\n  checkResponse(json, options){\r\n    const { dfPn, _symbol } = options\r\n    , _json = json || {}\r\n    , _values =  _json[dfPn];\r\n    if (Array.isArray(_values)\r\n        && json.symbol === _symbol) {\r\n      json._values = _values\r\n      return true;\r\n    }\r\n    throw crError(\r\n      _symbol,\r\n      json.Error || C.ERR_EMPTY\r\n    );\r\n  }\r\n}\r\n\r\nexport default FmpApi\r\n"],"file":"FmpApi.js"}