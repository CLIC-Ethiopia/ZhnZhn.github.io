{"version":3,"sources":["../../../src/adapters/fmp/FmpApi.js"],"names":["URI","_isArr","Array","isArray","_crDataSource","dataSource","dialogConf","contFullCaption","REG_BLANKS","_toLowerCamelCase","str","toLowerCase","replace","substring","_crDfPropName","item","dfT","_caption","_assignDf","option","items","it1","it2","it3","_symbol","isUpper","_period","_propName","_query","_itemUrl","itemCaption","_assignHp","fromDate","_fromDate","_assignCp","_interval","_rAssign","DF","historical","intraday","FmpApi","getRequestUrl","_assignTo","dfPn","apiKey","_delimeter","indexOf","checkResponse","json","options","_json","symbol","Error"],"mappings":"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","sourcesContent":["import {\r\n  _assign,\r\n  getCaption,\r\n  getValue,\r\n  crError,\r\n  getFromDate\r\n} from './fnAdapter';\r\n\r\nconst URI = 'https://financialmodelingprep.com/api/v3';\r\nconst _isArr = Array.isArray\r\n\r\nconst _crDataSource = ({\r\n  dataSource,\r\n  dialogConf\r\n}) => dataSource\r\n || (dialogConf || {}).contFullCaption || '';\r\n\r\nconst REG_BLANKS = /\\s/g;\r\nconst _toLowerCamelCase = str => str[0].toLowerCase()\r\n  + str.replace(REG_BLANKS,'').substring(1);\r\n\r\nconst _crDfPropName = (item, dfT) => {\r\n  const _caption = getCaption(item);\r\n  return dfT !== \"ratios\"\r\n    ? _caption\r\n    : _toLowerCamelCase(_caption);\r\n};\r\n\r\nconst _assignDf = option => {\r\n  const { dfT, items=[] } = option\r\n  , [ it1, it2 , it3 ] = items\r\n  , _symbol = getValue(it1, {isUpper: true})\r\n  , _period = getValue(it3)\r\n  , _propName = _crDfPropName(it2, dfT)\r\n  , _query = _period\r\n      ? `period=${_period}`\r\n      : ''\r\n  , _itemUrl = `${URI}/${dfT}/${_symbol}?${_query}`;\r\n\r\n  _assign(option, {\r\n    _symbol,\r\n    _itemUrl, _period,\r\n    _propName,\r\n    itemCaption: _symbol+'_'+_propName,\r\n    dataSource: _crDataSource(option)\r\n  })\r\n};\r\n\r\nconst _assignHp = option => {\r\n  const {\r\n     dfT, items=[], fromDate\r\n  } = option\r\n  , _fromDate = fromDate || getFromDate(3)\r\n  , _symbol = getValue(items[0], {isUpper: true})\r\n  //, _itemUrl = `${C.URI}/${dfT}/${_symbol}?from=${_fromDate}&serietype=line`;\r\n  , _itemUrl = `${URI}/${dfT}/${_symbol}?from=${_fromDate}`;\r\n\r\n  _assign(option, {\r\n    _symbol,\r\n    _itemUrl,\r\n    _propName: 'close',\r\n    itemCaption: _symbol,\r\n    dataSource: _crDataSource(option)\r\n  })\r\n};\r\n\r\nconst _assignCp = option => {\r\n  const {\r\n     dfT, items=[]\r\n  } = option\r\n  , _symbol = getValue(items[0], {isUpper: true})\r\n  , _interval = getValue(items[1])\r\n  , _itemUrl = `${URI}/${dfT}/${_interval}/${_symbol}`;\r\n\r\n  _assign(option, {\r\n    _symbol,\r\n    _itemUrl,\r\n    _propName: 'close',\r\n    itemCaption: _symbol,\r\n    dataSource: _crDataSource(option)\r\n  })\r\n};\r\n\r\nconst _rAssign = {\r\n  DF: _assignDf,\r\n  historical: _assignHp,\r\n  intraday: _assignCp\r\n};\r\n\r\nconst FmpApi = {\r\n  getRequestUrl(option){\r\n    const _assignTo = _rAssign[option.dfPn]\r\n      || _rAssign.DF;\r\n    _assignTo(option)\r\n    const { apiKey } = option\r\n    , _delimeter = option._itemUrl.indexOf('?') === -1\r\n         ? '?' : '&';\r\n    return `${option._itemUrl}${_delimeter}apikey=${apiKey}`;\r\n  },\r\n\r\n  checkResponse(json, options){\r\n    const { dfPn, _symbol } = options\r\n    , _json = json || {};\r\n    if (!dfPn && _isArr(json) && _json[0].symbol === _symbol\r\n     || dfPn === 'intraday' && _isArr(_json)\r\n     || _isArr(_json[dfPn]) && _json.symbol === _symbol) {\r\n       return true;\r\n    }\r\n    throw crError(_symbol, _json.Error);\r\n  }\r\n};\r\n\r\nexport default FmpApi\r\n"],"file":"FmpApi.js"}