{"version":3,"sources":["../../../src/adapters/db-nomics/DbNomicsApi.js"],"names":["URL","TAIL","DF_ID","_isArr","Array","isArray","_crErr","crError","bind","_crUrlImpl","dfProvider","dfCode","seriaId","_crUrl","option","_dfFnUrl","items","_crIdUrl","_trimStr","str","trim","_idFnUrl","value","arr","split","_crSeriaId","dfPrefix","dfSufix","args","filter","Boolean","join","_s1FnUrl","_seriaId","_s21FnUrl","df1Prefix","df2Prefix","_s12FnUrl","_s123BFnUrl","_s123FnUrl","_isIdWorldFrom2021Realease","id","realease","parseInt","substring","_s3S12FnUrl","subtitle","v1","v2","v3","_v1","_rFnUrl","DF","s1","s12","s21","s123B","s123","s3S12","DbNomicsApi","getRequestUrl","url","dfFnUrl","checkResponse","json","errors","message","docs","series","period"],"mappings":"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","sourcesContent":["import {\r\n  _assign,\r\n  crError,\r\n  getValue\r\n} from './fnAdapter';\r\n\r\nconst URL = 'https://api.db.nomics.world/v22/series'\r\n, TAIL = 'observations=1&format=json&metadata=false'\r\n, DF_ID = 'ECB/EXR/A.USD.EUR.SP00.A';\r\n\r\nconst _isArr = Array.isArray\r\n, _crErr = crError.bind(null, '');\r\n\r\nconst _crUrlImpl = (\r\n  dfProvider,\r\n  dfCode,\r\n  seriaId\r\n) => (!dfProvider || !dfCode || !seriaId)\r\n  ? `${URL}?series_ids=${DF_ID}&${TAIL}`\r\n  : `${URL}?series_ids=${dfProvider}/${dfCode}/${seriaId}&${TAIL}`;\r\n\r\nconst _crUrl = (seriaId, option) => {\r\n  const { dfProvider, dfCode } = option;\r\n  option.seriaId = seriaId\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\n\r\nconst _dfFnUrl = option => _isArr(option.items)\r\n  ? _crUrl(getValue(option.items[0]), option)\r\n  : _crUrl('', option);\r\n\r\nconst _crIdUrl = (option, dfProvider, dfCode, seriaId) => {\r\n  _assign(option, {seriaId, dfProvider, dfCode})\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\n\r\nconst _trimStr = (str='') => str.trim();\r\nconst _idFnUrl = (option) => {\r\n  const { items } = option\r\n  , value = getValue(items[0])\r\n  , arr = value.split('/');\r\n  return _crIdUrl(option,\r\n    _trimStr(arr[0]),\r\n    _trimStr(arr[1]),\r\n    _trimStr(arr[2])\r\n  );\r\n};\r\n\r\nconst _crSeriaId = ({ dfPrefix, dfSufix }, ...args) => [\r\n  dfPrefix,\r\n  ...args,\r\n  dfSufix\r\n].filter(Boolean)\r\n .join('.');\r\n\r\nconst _s1FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    getValue(items[0])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s21FnUrl = (option) => {\r\n  const { items, df1Prefix, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    df1Prefix,\r\n    getValue(items[1]),\r\n    df2Prefix,\r\n    getValue(items[0])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\nconst _s12FnUrl = (option) => {\r\n  const { items, df1Prefix, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    df1Prefix,\r\n    getValue(items[0]),\r\n    df2Prefix,\r\n    getValue(items[1])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s123BFnUrl = (option) => {\r\n  const { items, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    getValue(items[0]),\r\n    df2Prefix,\r\n    getValue(items[1]),\r\n    getValue(items[2])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s123FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n     getValue(items[0]),\r\n     getValue(items[1]),\r\n     getValue(items[2])\r\n    );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\n//IMF WEO\r\nconst _isIdWorldFrom2021Realease = (id, realease) =>\r\n  id === '001' && parseInt(realease.substring(0, 4), 10) > 2020;\r\nconst _s3S12FnUrl = (option) => {\r\n  const { items, dfCode, subtitle } = option\r\n  , v1 = getValue(items[0])\r\n  , v2 = getValue(items[1])\r\n  , v3 = getValue(items[2])\r\n  //patch for World id 2021 realease\r\n  , _v1 = _isIdWorldFrom2021Realease(v1, v3) ? '1' : v1\r\n  , _seriaId = _crSeriaId(option, _v1, v2);\r\n  _assign(option, {\r\n    dfCode: `${dfCode}:${v3}`,\r\n    subtitle: (subtitle || []).split(':')[0] || ''\r\n  })\r\n  return _crUrl(_seriaId, option);\r\n}\r\n\r\nconst _rFnUrl = {\r\n  DF: _dfFnUrl,\r\n  id: _idFnUrl,\r\n  s1: _s1FnUrl,\r\n  s12: _s12FnUrl,\r\n  s21: _s21FnUrl,\r\n  s123B: _s123BFnUrl,\r\n  s123: _s123FnUrl,\r\n  s3S12: _s3S12FnUrl\r\n};\r\n\r\nconst DbNomicsApi = {\r\n  getRequestUrl(option){\r\n    if (option.url) {\r\n      return option.url;\r\n    }\r\n    const { dfFnUrl } = option\r\n    , _crUrl = _rFnUrl[dfFnUrl] || _rFnUrl.DF;\r\n    return (option.url = _crUrl(option));\r\n  },\r\n\r\n  checkResponse(json){\r\n    if (json && _isArr(json.errors)) {\r\n      throw _crErr(json.errors[0].message);\r\n    }\r\n    const docs = json && json.series && json.series.docs;\r\n    if (!_isArr(docs) || !docs[0]\r\n      || !_isArr(docs[0].period)\r\n      || !_isArr(docs[0].value)) {\r\n      throw _crErr();\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nexport default DbNomicsApi\r\n"],"file":"DbNomicsApi.js"}