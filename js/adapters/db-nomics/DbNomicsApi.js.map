{"version":3,"sources":["../../../src/adapters/db-nomics/DbNomicsApi.js"],"names":["crError","fnAdapter","getValue","C","URL","TAIL","DF_ID","ERR_CAPTION","MSG_EMPTY","_isArr","Array","isArray","_crErr","bind","_crUrlImpl","dfProvider","dfCode","seriaId","_crUrl","option","_dfFnUrl","items","_crIdUrl","Object","assign","value","_trimStr","str","trim","_idFnUrl","arr","split","_crSeriaId","dfPrefix","dfSufix","args","filter","Boolean","join","_s1FnUrl","_seriaId","_s21FnUrl","df1Prefix","df2Prefix","_s12FnUrl","_s123BFnUrl","_s123FnUrl","_rFnUrl","DF","id","s1","s12","s21","s123B","s123","DbNomicsApi","getRequestUrl","url","dfFnUrl","checkResponse","json","errors","message","docs","series","period"],"mappings":"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","sourcesContent":["import fnAdapter from './fnAdapter'\r\n\r\nconst { crError, getValue } = fnAdapter;\r\n\r\nconst C = {\r\n  URL: 'https://api.db.nomics.world/v22/series',\r\n  TAIL: 'observations=1&format=json&metadata=false',\r\n  DF_ID: 'ECB/EXR/A.USD.EUR.SP00.A',\r\n  ERR_CAPTION: 'Server Response',\r\n  MSG_EMPTY: 'Dataset is empty'\r\n};\r\n\r\nconst _isArr = Array.isArray;\r\nconst _crErr = crError.bind(null, C.ERR_CAPTION);\r\n\r\nconst _crUrlImpl = (dfProvider, dfCode, seriaId) => {\r\n if (!dfProvider || !dfCode || !seriaId) {\r\n   return `${C.URL}?series_ids=${C.DF_ID}&${C.TAIL}`;\r\n }\r\n return `${C.URL}?series_ids=${dfProvider}/${dfCode}/${seriaId}&${C.TAIL}`;\r\n};\r\n\r\nconst _crUrl = (seriaId, option) => {\r\n  const { dfProvider, dfCode } = option;\r\n  option.seriaId = seriaId\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\n\r\nconst _dfFnUrl = option => _isArr(option.items)\r\n  ? _crUrl(getValue(option.items[0]), option)\r\n  : _crUrl('', option);\r\n\r\nconst _crIdUrl = (option, dfProvider, dfCode, seriaId) => {\r\n  Object.assign(option, {\r\n    seriaId: option.value,\r\n    dfProvider, dfCode\r\n  })\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\n\r\nconst _trimStr = (str='') => str.trim();\r\nconst _idFnUrl = (option) => {\r\n  const { value } = option || ''\r\n  , arr = value.split('/');\r\n  return _crIdUrl(option,\r\n    _trimStr(arr[0]),\r\n    _trimStr(arr[1]),\r\n    _trimStr(arr[2])\r\n  );\r\n};\r\n\r\nconst _crSeriaId = ({ dfPrefix, dfSufix }, ...args) => [\r\n    dfPrefix, ...args, dfSufix\r\n  ].filter(Boolean)\r\n   .join('.');\r\n\r\nconst _s1FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    getValue(items[0])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s21FnUrl = (option) => {\r\n  const { items, df1Prefix, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    df1Prefix,\r\n    getValue(items[1]),\r\n    df2Prefix,\r\n    getValue(items[0])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\nconst _s12FnUrl = (option) => {\r\n  const { items, df1Prefix, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    df1Prefix,\r\n    getValue(items[0]),\r\n    df2Prefix,\r\n    getValue(items[1])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s123BFnUrl = (option) => {\r\n  const { items, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    getValue(items[0]),\r\n    df2Prefix,\r\n    getValue(items[1]),\r\n    getValue(items[2])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s123FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n     getValue(items[0]),\r\n     getValue(items[1]),\r\n     getValue(items[2])\r\n    );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _rFnUrl = {\r\n  DF: _dfFnUrl,\r\n  id: _idFnUrl,\r\n  s1: _s1FnUrl,\r\n  s12: _s12FnUrl,\r\n  s21: _s21FnUrl,\r\n  s123B: _s123BFnUrl,\r\n  s123: _s123FnUrl\r\n};\r\n\r\nconst DbNomicsApi = {\r\n  getRequestUrl(option){\r\n    if (option.url) {\r\n      return option.url;\r\n    }\r\n    const { dfFnUrl } = option\r\n    , _crUrl = _rFnUrl[dfFnUrl] || _rFnUrl.DF;\r\n    return (option.url = _crUrl(option));\r\n  },\r\n\r\n  checkResponse(json){\r\n    if (json && _isArr(json.errors)) {\r\n      throw _crErr(json.errors[0].message);\r\n    }\r\n    const docs = json && json.series && json.series.docs;\r\n    if (!_isArr(docs) || !docs[0]\r\n      || !_isArr(docs[0].period)\r\n      || !_isArr(docs[0].value)) {\r\n      throw _crErr(C.MSG_EMPTY);\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nexport default DbNomicsApi\r\n"],"file":"DbNomicsApi.js"}