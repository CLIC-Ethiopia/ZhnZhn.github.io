{"version":3,"sources":["../../../src/adapters/db-nomics/DbNomicsApi.js"],"names":["crError","fnAdapter","C","URL","TAIL","DF_ID","ERR_CAPTION","MSG_EMPTY","_isArr","Array","isArray","_crErr","bind","_getValue","obj","value","_crUrlImpl","dfProvider","dfCode","seriaId","_crUrl","option","_dfFnUrl","items","_crIdUrl","Object","assign","_idFnUrl","arr","split","_crSeriaId","dfPrefix","dfSufix","args","filter","Boolean","join","_s1FnUrl","_seriaId","_s21FnUrl","df2Prefix","_s12FnUrl","_s123AFnUrl","df3Prefix","_s123BFnUrl","_s123FnUrl","_rFnUrl","DF","id","s1","s12","s21","s123A","s123B","s123","DbNomicsApi","getRequestUrl","dfFnUrl","checkResponse","json","errors","message","docs","series","period"],"mappings":"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","sourcesContent":["import fnAdapter from './fnAdapter'\r\n\r\nconst { crError } = fnAdapter;\r\n\r\nconst C = {\r\n  URL: 'https://api.db.nomics.world/v22/series',\r\n  TAIL: 'observations=1&format=json&metadata=false',\r\n  DF_ID: 'ECB/EXR/A.USD.EUR.SP00.A',\r\n  ERR_CAPTION: 'Server Response',\r\n  MSG_EMPTY: 'Dataset is empty'\r\n};\r\n\r\nconst _isArr = Array.isArray;\r\nconst _crErr = crError.bind(null, C.ERR_CAPTION);\r\n\r\nconst _getValue = obj => obj && obj.value\r\n   ? obj.value\r\n   : '';\r\n\r\nconst _crUrlImpl = (dfProvider, dfCode, seriaId) => {\r\n if (!dfProvider || !dfCode || !seriaId) {\r\n   return `${C.URL}?series_ids=${C.DF_ID}&${C.TAIL}`;\r\n }\r\n return `${C.URL}?series_ids=${dfProvider}/${dfCode}/${seriaId}&${C.TAIL}`;\r\n};\r\n\r\nconst _crUrl = (seriaId, option) => {\r\n  const { dfProvider, dfCode } = option;\r\n  option.seriaId = seriaId\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\n\r\nconst _dfFnUrl = option => _isArr(option.items)\r\n  ? _crUrl(_getValue(option.items[0]), option)\r\n  : _crUrl('', option);\r\n\r\nconst _crIdUrl = (option, dfProvider, dfCode, seriaId) => {\r\n  Object.assign(option, {\r\n    seriaId: option.value,\r\n    dfProvider, dfCode\r\n  })\r\n  return _crUrlImpl(dfProvider, dfCode, seriaId);\r\n};\r\nconst _idFnUrl = (option) => {\r\n  const { value } = option || ''\r\n  , arr = value.split('/');\r\n  return _crIdUrl(option, arr[0], arr[1], arr[2]);\r\n};\r\n\r\nconst _crSeriaId = ({ dfPrefix, dfSufix }, ...args) => [\r\n    dfPrefix, ...args, dfSufix\r\n  ].filter(Boolean)\r\n   .join('.');\r\n\r\nconst _s1FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[0]),\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s21FnUrl = (option) => {\r\n  const { items, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[1]),\r\n    df2Prefix,\r\n    _getValue(items[0]),\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\nconst _s12FnUrl = (option) => {\r\n  const { items, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[0]),\r\n    df2Prefix,\r\n    _getValue(items[1]),\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\nconst _s123AFnUrl = (option) => {\r\n  const { items, df3Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[0]),\r\n    _getValue(items[1]),\r\n    df3Prefix,\r\n    _getValue(items[2])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\nconst _s123BFnUrl = (option) => {\r\n  const { items, df2Prefix } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[0]),\r\n    df2Prefix,\r\n    _getValue(items[1]),\r\n    _getValue(items[2])\r\n  );\r\n  return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _s123FnUrl = (option) => {\r\n  const { items } = option\r\n  , _seriaId = _crSeriaId(option,\r\n    _getValue(items[0]),\r\n    _getValue(items[1]),\r\n    _getValue(items[2])\r\n    )\r\n    return _crUrl(_seriaId, option);\r\n};\r\n\r\nconst _rFnUrl = {\r\n  DF: _dfFnUrl,\r\n  id: _idFnUrl,\r\n  s1: _s1FnUrl,\r\n  s12: _s12FnUrl,\r\n  s21: _s21FnUrl,\r\n  s123A: _s123AFnUrl,\r\n  s123B: _s123BFnUrl,\r\n  s123: _s123FnUrl\r\n};\r\n\r\nconst DbNomicsApi = {\r\n  getRequestUrl(option){\r\n    const { dfFnUrl } = option\r\n    , _crUrl = _rFnUrl[dfFnUrl] || _rFnUrl.DF;\r\n    return _crUrl(option);\r\n  },\r\n\r\n  checkResponse(json){\r\n    if (json && _isArr(json.errors)) {\r\n      throw _crErr(json.errors[0].message);\r\n    }\r\n    const docs = json && json.series && json.series.docs;\r\n    if (!_isArr(docs) || !docs[0]\r\n      || !_isArr(docs[0].period)\r\n      || !_isArr(docs[0].value)) {\r\n      throw _crErr(C.MSG_EMPTY);\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nexport default DbNomicsApi\r\n"],"file":"DbNomicsApi.js"}