{"version":3,"sources":["../../../src/adapters/db-nomics/fnAdapter.js"],"names":["_assign","Object","assign","CHART_URL","SUBT_MAX","_crId","dfProvider","dfCode","seriaId","_crItemLink","crItemLink","bind","_crUpdatedDate","json","_date","split","_crDescr","option","_id","_crZhConfig","dataSource","_itemKey","title","id","key","itemCaption","itemConf","_crInfo","name","description","_isNumber","n","_isQuarter","str","indexOf","_isAnnualQuarter","period","_crPoint","date","y","_crAqPoint","crTitle","subtitle","_","_subtitle","length","crData","fromDate","data","_xFrom","value","crPoint","_len","_arrPoint","i","push","crConfOption","zhConfig","info"],"mappings":"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","sourcesContent":["export {\r\n  getValue\r\n} from '../AdapterFn';\r\nexport {\r\n  crError\r\n} from '../crFn';\r\n\r\nimport {\r\n  joinBy,\r\n  ymdToUTC,\r\n} from '../AdapterFn';\r\nimport {\r\n  crItemLink,\r\n  crItemConf\r\n} from '../crFn';\r\nimport {\r\n  getPeriodAndValue,\r\n  getTitle,\r\n  getSubtitle,\r\n  getIndexedAt\r\n} from './fnSelector';\r\n\r\nexport const _assign = Object.assign\r\n\r\nconst CHART_URL = 'https://db.nomics.world'\r\n, SUBT_MAX = 60;\r\n\r\nconst _crId = ({\r\n  dfProvider,\r\n  dfCode,\r\n  seriaId\r\n}) =>  joinBy('/', dfProvider, dfCode, seriaId);\r\n\r\nconst _crItemLink = crItemLink\r\n  .bind(null, 'DB Nomics Chart');\r\nconst _crUpdatedDate = json => {\r\n  const _date = getIndexedAt(json).split('T')[0];\r\n  return _date\r\n    ? `<p>Updated by DB Nomics on ${_date}</p>`\r\n    : '';\r\n};\r\nconst _crDescr = (json, option) => {\r\n  const _id = _crId(option);\r\n  return`<p>SeriaId: ${_id}</p>\r\n   ${_crUpdatedDate(json)}\r\n   ${_crItemLink(CHART_URL+'/'+_id)}`;\r\n};\r\n\r\nconst _crZhConfig = (option) => {\r\n  const {\r\n    dataSource,\r\n    _itemKey,\r\n    dfProvider,\r\n    dfCode,\r\n    seriaId,\r\n    title\r\n  } = option\r\n  , _id = _itemKey;\r\n  return {\r\n    id: _id, key: _id,\r\n    itemCaption: title,\r\n    dataSource,\r\n    itemConf: {\r\n       _itemKey: _id,\r\n       ...crItemConf(option),\r\n       dataSource,\r\n       dfProvider, dfCode, seriaId\r\n    }\r\n  }\r\n};\r\nconst _crInfo = (json, option) => ({\r\n  name: getSubtitle(json),\r\n  description: _crDescr(json, option)\r\n})\r\n\r\nconst _isNumber = n => typeof n === 'number'\r\n && n-n === 0;\r\n\r\nconst _isQuarter = str => (\"\"+str).indexOf(\"Q\") !== -1;\r\n\r\nconst _isAnnualQuarter = period =>\r\n  !_isQuarter(period[0]) && _isQuarter(period[1]);\r\n\r\nconst _crPoint = (date, y) => ([ymdToUTC(date), y]);\r\n\r\nconst _crAqPoint = (date, y) => _isQuarter(date)\r\n  ? _crPoint(date, y)\r\n  : [];\r\n\r\n\r\nexport const crTitle = (\r\n  { title, subtitle },\r\n  json\r\n) => {\r\n  const _ = getSubtitle(json)\r\n  , _subtitle = _.length > SUBT_MAX\r\n       ? joinBy(': ', title, subtitle)\r\n       : _;\r\n  return {\r\n    title: getTitle(json),\r\n    subtitle: _subtitle\r\n  };\r\n}\r\n\r\nexport const crData = (json, option) => {\r\n  const { fromDate } = option\r\n  , data = []\r\n  , _xFrom = fromDate ? ymdToUTC(fromDate) : 0\r\n  , { period, value } = getPeriodAndValue(json)\r\n  , crPoint = _isAnnualQuarter(period)\r\n     ? _crAqPoint\r\n     : _crPoint\r\n  , _len = period.length;\r\n  let _arrPoint;\r\n  for (let i=0; i<_len; i++){\r\n    _arrPoint = crPoint(period[i], value[i]);\r\n    if (_arrPoint[0] > _xFrom && _isNumber(_arrPoint[1])) {\r\n      data.push(_arrPoint)\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nexport const crConfOption = (\r\n  option,\r\n  json\r\n) => ({\r\n  zhConfig: _crZhConfig(option),\r\n  info: _crInfo(json, option)\r\n})\r\n"],"file":"fnAdapter.js"}