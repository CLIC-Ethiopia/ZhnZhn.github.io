{"version":3,"sources":["../../src/adapters/ToYearly.js"],"names":["CATEGORIES","C","NOW","index","color","PREV","AVG","isVisible","RANGE","_getYear","str","split","_getMonth","_crSeria","name","type","data","visible","_crItem","_crPoint","item","c","y","_crValuePoint","_crValueYearPoint","v","_findHighLow","arr","h","Number","NEGATIVE_INFINITY","l","POSITIVE_INFINITY","forEach","high","yHigh","low","yLow","_crHighLowPoint","key","_calcAvg","sum","reduce","acc","a","avg","length","parseFloat","toFixed","_crAvgPoint","_crSeriaData","i","year","crPoint","max","push","reverse","_crSeries","firtsItem","_yearNow","_dNow","prevItem","_yearPrev","_dPrev","nowSeria","nowItem","prevSeria","_hmToSeriaData","hm","_crBaseHm","Object","create","_crMonthHm","stopYear","isBreaked","_item","_y","_m","_crRangeSeria","refYear","_stopYear","_data","rangeSeria","areaRangeSeria","Tooltip","categoryRHLY","point","toSeria","rangeItem","_findStartYearIndex","yearStop","_crAvgSeria","yearNow","fromYear","startIndex","avgSeria","avgItem","_crZhConfig","option","legend","value","dataSource","itemCaption","_id","id","isWithoutIndicator","isWithoutAdd","isWithLegend","_crValueAndDate","seria","date","_crValueMoving","bNowValue","bPrevValue","dateTo","moving","Fn","crValueMoving","valueTo","numberFormat","isDenyToChange","toYearly","toConfig","title","subtitle","config","categoryConfig","addCaption","addSeriaBy","addTooltip","categorySimple","add","chart","spacingTop","marginTop","zhConfig","valueMoving"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAGA,IAAMA,UAAU,GAAG,CACjB,IADiB,EACX,IADW,EACL,IADK,EACC,IADD,EACO,IADP,EACa,IADb,EAEjB,IAFiB,EAEX,IAFW,EAEL,IAFK,EAEC,IAFD,EAEO,IAFP,EAEa,IAFb,CAAnB;AAKA,IAAMC,CAAC,GAAG;AACRC,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAE,CADJ;AAEHC,IAAAA,KAAK,EAAE;AAFJ,GADG;AAKRC,EAAAA,IAAI,EAAE;AACJF,IAAAA,KAAK,EAAE,CADH;AAEJC,IAAAA,KAAK,EAAE;AAFH,GALE;AASRE,EAAAA,GAAG,EAAE;AACHH,IAAAA,KAAK,EAAE,CADJ;AAEHC,IAAAA,KAAK,EAAE,OAFJ;AAGHG,IAAAA,SAAS,EAAE;AAHR,GATG;AAcRC,EAAAA,KAAK,EAAE;AACLL,IAAAA,KAAK,EAAE,CADF;AAELC,IAAAA,KAAK,EAAE;AAFF;AAdC,CAAV;;AAoBA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AACxB,SAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP;AACD,CAFD;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,GAAD,EAAS;AACzB,SAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP;AACD,CAFD;;AAIA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CACfC,IADe,QAEZ;AAAA,uBADKC,IACL;AAAA,MADKA,IACL,0BADU,QACV;AAAA,MADoBC,IACpB,QADoBA,IACpB;AAAA,MAD0BZ,KAC1B,QAD0BA,KAC1B;AAAA,4BADiCG,SACjC;AAAA,MADiCA,SACjC,+BAD2C,IAC3C;AACH,SAAO;AAAEQ,IAAAA,IAAI,EAAJA,IAAF;AAAQD,IAAAA,IAAI,EAAJA,IAAR;AAAcE,IAAAA,IAAI,EAAJA,IAAd;AAAoBZ,IAAAA,KAAK,EAALA,KAApB;AAA2Ba,IAAAA,OAAO,EAAEV;AAApC,GAAP;AACD,CAJD;;AAKA,IAAMW,OAAO,GAAG,SAAVA,OAAU,CACdJ,IADc,SAEX;AAAA,MADKX,KACL,SADKA,KACL;AAAA,MADYC,KACZ,SADYA,KACZ;AAAA,8BADmBG,SACnB;AAAA,MADmBA,SACnB,gCAD6B,IAC7B;AACH,SAAO;AAAEO,IAAAA,IAAI,EAAJA,IAAF;AAAQX,IAAAA,KAAK,EAALA,KAAR;AAAeC,IAAAA,KAAK,EAALA,KAAf;AAAsBG,IAAAA,SAAS,EAATA;AAAtB,GAAP;AACD,CAJD;;AAMA,IAAMY,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzB,SAAO;AACLC,IAAAA,CAAC,EAAET,SAAS,CAACQ,IAAI,CAAC,CAAD,CAAL,CADP;AAELE,IAAAA,CAAC,EAAEF,IAAI,CAAC,CAAD;AAFF,GAAP;AAID,CALD;;AAMA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAH,IAAI;AAAA,SAAIA,IAAI,CAAC,CAAD,CAAR;AAAA,CAA1B;;AACA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAJ,IAAI,EAAI;AAChC,SAAO;AACLK,IAAAA,CAAC,EAAEL,IAAI,CAAC,CAAD,CADF;AAELE,IAAAA,CAAC,EAAEb,QAAQ,CAACW,IAAI,CAAC,CAAD,CAAL;AAFN,GAAP;AAID,CALD;;AAMA,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5B,MAAIC,CAAC,GAAG;AAAEH,IAAAA,CAAC,EAAEI,MAAM,CAACC,iBAAZ;AAA+BR,IAAAA,CAAC,EAAE;AAAlC,GAAR;AAAA,MACIS,CAAC,GAAG;AAAEN,IAAAA,CAAC,EAAEI,MAAM,CAACG,iBAAZ;AAA+BV,IAAAA,CAAC,EAAE;AAAlC,GADR;AAEAK,EAAAA,GAAG,CAACM,OAAJ,CAAY,UAAAb,IAAI,EAAI;AAClB,QAAIA,IAAI,CAACK,CAAL,GAASG,CAAC,CAACH,CAAf,EAAkB;AAChBG,MAAAA,CAAC,GAAGR,IAAJ;AACD;;AACD,QAAIA,IAAI,CAACK,CAAL,GAASM,CAAC,CAACN,CAAf,EAAmB;AACjBM,MAAAA,CAAC,GAAGX,IAAJ;AACD;AACF,GAPD;AAQA,SAAO;AACLc,IAAAA,IAAI,EAAEN,CAAC,CAACH,CADH;AACMU,IAAAA,KAAK,EAAEP,CAAC,CAACN,CADf;AAELc,IAAAA,GAAG,EAAEL,CAAC,CAACN,CAFF;AAEKY,IAAAA,IAAI,EAAEN,CAAC,CAACT;AAFb,GAAP;AAID,CAfD;;AAgBA,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMZ,GAAN,EAAc;AACpC;AACIN,IAAAA,CAAC,EAAEkB;AADP,KAEOb,YAAY,CAACC,GAAD,CAFnB;AAID,CALD;;AAMA,IAAMa,QAAQ,GAAG,SAAXA,QAAW,CAACb,GAAD,EAAS;AACxB,MAAMc,GAAG,GAAGd,GAAG,CAACe,MAAJ,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAYD,GAAG,GAAGC,CAAlB;AAAA,GAAX,EAAgC,CAAhC,CAAZ;AAAA,MACMC,GAAG,GAAGlB,GAAG,CAACmB,MAAJ,KAAe,CAAf,GACFC,UAAU,CAAC,CAACN,GAAG,GAACd,GAAG,CAACmB,MAAT,EAAiBE,OAAjB,CAAyB,CAAzB,CAAD,CADR,GAEF,CAHV;AAIA,SAAOH,GAAP;AACD,CAND;;AAOA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACV,GAAD,EAAMZ,GAAN,EAAc;AAChC,SAAO;AACLL,IAAAA,CAAC,EAAEkB,QAAQ,CAACb,GAAD,CADN;AAELN,IAAAA,CAAC,EAAEkB;AAFE,GAAP;AAID,CALD;;AAOA,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAAClC,IAAD,EAAOmC,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,EAAqC;AAAA,MAArBA,OAAqB;AAArBA,IAAAA,OAAqB,GAAblC,QAAa;AAAA;;AACxD,MAAMQ,GAAG,GAAC,EAAV;AAAA,MAAc2B,GAAG,GAACtC,IAAI,CAAC8B,MAAvB;;AACA,SAAOK,CAAC,GAACG,GAAT,EAAcH,CAAC,EAAf,EAAkB;AAChB,QAAM/B,IAAI,GAAGJ,IAAI,CAACmC,CAAD,CAAjB;;AACA,QAAI1C,QAAQ,CAACW,IAAI,CAAC,CAAD,CAAL,CAAR,KAAsBgC,IAA1B,EAAgC;AAC9B;AACD;;AACDzB,IAAAA,GAAG,CAAC4B,IAAJ,CAAUF,OAAO,CAACjC,IAAD,CAAjB;AACD;;AACD,SAAO;AAAE+B,IAAAA,CAAC,EAADA,CAAF;AAAKxB,IAAAA,GAAG,EAAEA,GAAG,CAAC6B,OAAJ;AAAV,GAAP;AACD,CAVD;;AAYA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACzC,IAAD,EAAU;AACpB,MAAA0C,SAAS,GAAG1C,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAZ;AAAA,MACA2C,QADA,GACWlD,QAAQ,CAACiD,SAAD,CADnB;AAAA,sBAEmBR,YAAY,CAAClC,IAAD,EAAO,CAAP,EAAU2C,QAAV,CAF/B;AAAA,MAEER,CAFF,iBAEEA,CAFF;AAAA,MAESS,KAFT,iBAEKjC,GAFL;AAAA,MAGAkC,QAHA,GAGW7C,IAAI,CAACmC,CAAD,CAAJ,CAAQ,CAAR,CAHX;AAAA,MAIAW,SAJA,GAIYrD,QAAQ,CAACoD,QAAD,CAJpB;AAAA,sBAKiBX,YAAY,CAAClC,IAAD,EAAOmC,CAAP,EAAUW,SAAV,CAL7B;AAAA,MAKMC,MALN,iBAKEpC,GALF;;AAON,SAAO;AACLqC,IAAAA,QAAQ,EAAEnD,QAAQ,CAAC8C,QAAD,gCAAgB1D,CAAC,CAACC,GAAlB,MAA0B;AAACc,MAAAA,IAAI,EAAE4C;AAAP,KAA1B,EADb;AAELK,IAAAA,OAAO,EAAE/C,OAAO,CAACyC,QAAD,EAAW1D,CAAC,CAACC,GAAb,CAFX;AAGLgE,IAAAA,SAAS,EAAErD,QAAQ,CAACiD,SAAD,gCAAiB7D,CAAC,CAACI,IAAnB,MAA4B;AAACW,MAAAA,IAAI,EAAE+C;AAAP,KAA5B,EAHd;AAILF,IAAAA,QAAQ,EAAE3C,OAAO,CAAC4C,SAAD,EAAY7D,CAAC,CAACI,IAAd;AAJZ,GAAP;AAMD,CAdD;;AAgBA,IAAM8D,cAAc,GAAG,SAAjBA,cAAiB,CAACC,EAAD,EAAKf,OAAL,EAAiB;AACtC,MAAMrC,IAAI,GAAG,EAAb;AACAhB,EAAAA,UAAU,CAACiC,OAAX,CAAmB,UAAAM,GAAG,EAAI;AACxBvB,IAAAA,IAAI,CAACuC,IAAL,CAAUF,OAAO,CAACd,GAAD,EAAM6B,EAAE,CAAC7B,GAAD,CAAR,CAAjB;AACD,GAFD;AAGA,SAAOvB,IAAP;AACD,CAND;;AAQA,IAAMqD,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMD,EAAE,GAAGE,MAAM,CAACC,MAAP,CAAc,IAAd,CAAX;AACAvE,EAAAA,UAAU,CAACiC,OAAX,CAAmB,UAAAM,GAAG,EAAI;AACxB6B,IAAAA,EAAE,CAAC7B,GAAD,CAAF,GAAU,EAAV;AACD,GAFD;AAGA,SAAO6B,EAAP;AACD,CAND;;AAOA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACrB,CAAD,EAAInC,IAAJ,EAAUyD,QAAV,EAAoBpB,OAApB,EAA8C;AAAA,MAA1BA,OAA0B;AAA1BA,IAAAA,OAA0B,GAAlB9B,aAAkB;AAAA;;AAC/D,MAAM6C,EAAE,GAAGC,SAAS,EAApB;AAAA,MACMf,GAAG,GAAGtC,IAAI,CAAC8B,MADjB;;AAEA,MAAI4B,SAAS,GAAG,KAAhB;;AACA,SAAMvB,CAAC,GAACG,GAAR,EAAYH,CAAC,EAAb,EAAgB;AACd,QAAMwB,KAAK,GAAG3D,IAAI,CAACmC,CAAD,CAAlB;AAAA,QACMyB,EAAE,GAAGD,KAAK,CAAC,CAAD,CADhB;;AAEA,QAAIC,EAAE,KAAKH,QAAX,EAAsB;AACpBC,MAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACD,QAAMG,EAAE,GAAGjE,SAAS,CAAC+D,KAAK,CAAC,CAAD,CAAN,CAApB,CAPc,CAQd;;;AACAP,IAAAA,EAAE,CAACS,EAAD,CAAF,CAAOtB,IAAP,CAAYF,OAAO,CAACsB,KAAD,CAAnB;AACD;;AAED,SAAO;AAAEP,IAAAA,EAAE,EAAFA,EAAF;AAAMM,IAAAA,SAAS,EAATA;AAAN,GAAP;AACD,CAjBD;;AAoBA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAC9D,IAAD,EAAU;AACxB,MAAA+D,OAAO,GAAGhC,UAAU,CAACtC,QAAQ,CAACO,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAT,CAApB;AAAA,MACAyD,QADA,GACW,MAAMM,OAAO,GAAG,CAAhB,CADX;AAAA,oBAEoBP,UAAU,CAC1B,CAD0B,EACvBxD,IADuB,EACjByD,QADiB,EACPjD,iBADO,CAF9B;AAAA,MAEE4C,EAFF,eAEEA,EAFF;AAAA,MAEMM,SAFN,eAEMA,SAFN;AAAA,MAKApB,GALA,GAKMtC,IAAI,CAAC8B,MALX;AAAA,MAMAkC,SANA,GAMYN,SAAS,GAChBD,QADgB,GAEhBhE,QAAQ,CAACO,IAAI,CAACsC,GAAG,GAAC,CAAL,CAAJ,CAAY,CAAZ,CAAD,CARb;AAAA,MASAxC,IATA,cASgBiE,OAThB,SAS2BC,SAT3B;AAAA,MAUAC,KAVA,GAUQd,cAAc,CAACC,EAAD,EAAK9B,eAAL,CAVtB;;AAYN,SAAO;AACL4C,IAAAA,UAAU,EAAE,iCACTC,cADS,CAEPC,oBAAQC,YAFD,EAEe;AACpBrE,MAAAA,IAAI,EAAEiE,KADc;AAEpBnE,MAAAA,IAAI,EAAEA,IAFc;AAGpBwE,MAAAA,KAAK,EAAE;AAHa,KAFf,EAOPC,OAPO,EADP;AASLC,IAAAA,SAAS,EAAEtE,OAAO,CAACJ,IAAD,EAAOb,CAAC,CAACO,KAAT;AATb,GAAP;AAWD,CAxBD;;AA0BA,IAAMiF,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACzE,IAAD,EAAO0E,QAAP,EAAoB;AAC9C,MAAMpC,GAAG,GAAGtC,IAAI,CAAC8B,MAAjB;AACA,MAAIK,CAAC,GAAG,CAAR;;AACA,SAAKA,CAAC,GAACG,GAAP,EAAWH,CAAC,EAAZ,EAAe;AACb,QAAI1C,QAAQ,CAACO,IAAI,CAACmC,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAR,KAAyBuC,QAA7B,EAAwC;AACrC;AACF;AACF;;AACD,SAAOvC,CAAP;AACD,CATD;;AAWA,IAAMwC,WAAW,GAAG,SAAdA,WAAc,CAAC3E,IAAD,EAAU;AACtB,MAAA4E,OAAO,GAAGnF,QAAQ,CAACO,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAlB;AAAA,MACA6E,QADA,GACW9C,UAAU,CAAC6C,OAAD,CAAV,GAAsB,CADjC;AAAA,MAEAnB,QAFA,GAEW,MAAM1B,UAAU,CAAC6C,OAAD,CAAV,GAAsB,CAA5B,CAFX;AAAA,MAGAtC,GAHA,GAGMtC,IAAI,CAAC8B,MAHX;AAAA,MAIAgD,UAJA,GAIaL,mBAAmB,CAACzE,IAAD,EAAO4E,OAAP,CAJhC;AAAA,oBAKoBpB,UAAU,CAACsB,UAAD,EAAa9E,IAAb,EAAmByD,QAAnB,CAL9B;AAAA,MAKEL,EALF,eAKEA,EALF;AAAA,MAKMM,SALN,eAKMA,SALN;AAAA,MAMAM,SANA,GAMYN,SAAS,GAChBD,QADgB,GAEhBhE,QAAQ,CAACO,IAAI,CAACsC,GAAG,GAAC,CAAL,CAAJ,CAAY,CAAZ,CAAD,CARb;AAAA,MASA2B,KATA,GASQd,cAAc,CAACC,EAAD,EAAKnB,WAAL,CATtB;AAAA,MAUAnC,IAVA,YAUc+E,QAVd,SAU0Bb,SAV1B;;AAYN,SAAO;AACLe,IAAAA,QAAQ,EAAElF,QAAQ,CAACC,IAAD,gCAAWb,CAAC,CAACK,GAAb,MAAqB;AAACU,MAAAA,IAAI,EAAEiE;AAAP,KAArB,EADb;AAELe,IAAAA,OAAO,EAAE9E,OAAO,CAACJ,IAAD,EAAOb,CAAC,CAACK,GAAT;AAFX,GAAP;AAID,CAjBD;;AAoBA,IAAM2F,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,SAAwB;AAAA,MAAbC,MAAa,SAAbA,MAAa;;AAAA,MAClCC,KADkC,GACCF,MADD,CAClCE,KADkC;AAAA,MAC3BC,UAD2B,GACCH,MADD,CAC3BG,UAD2B;AAAA,MACfC,WADe,GACCJ,MADD,CACfI,WADe;AAAA,MAEpCC,GAFoC,GAE9BH,KAAK,GAAG,GAAR,GAAc,QAFgB;;AAG1C,SAAO;AACLI,IAAAA,EAAE,EAAED,GADC;AAELhE,IAAAA,GAAG,EAAEgE,GAFA;AAGLD,IAAAA,WAAW,EAAXA,WAHK;AAILG,IAAAA,kBAAkB,EAAE,IAJf;AAKLC,IAAAA,YAAY,EAAE,IALT;AAMLC,IAAAA,YAAY,EAAE,IANT;AAOLR,IAAAA,MAAM,EAAEA,MAPH;AAQLE,IAAAA,UAAU,EAAEA;AARP,GAAP;AAUD,CAbD;;AAgBA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQ1G,KAAR,EAAkB;AAAA,oBACd0G,KADc,CAChC7F,IADgC;AAAA,MAChCA,IADgC,4BAC3B,EAD2B;AAAA,MACvBF,IADuB,GACd+F,KADc,CACvB/F,IADuB;AAAA,oBAEjBE,IAAI,CAACb,KAAD,CAFa;AAAA,MAE9BiG,KAF8B,eAEhC9E,CAFgC;AAAA,MAEvBD,CAFuB,eAEvBA,CAFuB;AAGxC,SAAO;AACL+E,IAAAA,KAAK,EAALA,KADK;AAELU,IAAAA,IAAI,EAAKzF,CAAL,SAAUP;AAFT,GAAP;AAID,CAPD;;AAQA,IAAMiG,cAAc,GAAG,SAAjBA,cAAiB,CAAC/C,QAAD,EAAWE,SAAX,EAAyB;AAAA,uBAC1BF,QAD0B,CACtChD,IADsC;AAAA,MACtCA,IADsC,+BACjC,EADiC;AAAA,MAExCsC,GAFwC,GAElCtC,IAAI,CAAC8B,MAAL,GAAc,CAFoB;AAAA,yBAMpC8D,eAAe,CAAC5C,QAAD,EAAWV,GAAX,CANqB;AAAA,MAIhC0D,SAJgC,oBAItCZ,KAJsC;AAAA,MAKtCU,IALsC,oBAKtCA,IALsC;AAAA,yBAUpCF,eAAe,CAAC1C,SAAD,EAAYZ,GAAZ,CAVqB;AAAA,MAQhC2D,UARgC,oBAQtCb,KARsC;AAAA,MASjCc,MATiC,oBAStCJ,IATsC;AAAA,MAWxCK,MAXwC,GAW/BC,sBAAGC,aAAH,CAAiB;AACtBL,IAAAA,SAAS,EAATA,SADsB;AAEtBC,IAAAA,UAAU,EAAVA;AAFsB,GAAjB,CAX+B;;AAgB9C,uCACKE,MADL;AACaL,IAAAA,IAAI,EAAJA,IADb;AACmBI,IAAAA,MAAM,EAANA,MADnB;AAEEI,IAAAA,OAAO,EAAEF,sBAAGG,YAAH,CAAgBN,UAAhB,CAFX;AAGEO,IAAAA,cAAc,EAAE;AAHlB;AAKD,CArBD;;AAwBA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,QADe,oBACN1G,IADM,EACAkF,MADA,EACQ;AAAA,QACbyB,KADa,GACOzB,MADP,CACbyB,KADa;AAAA,QACNC,QADM,GACO1B,MADP,CACN0B,QADM;AAAA,qBAKfnE,SAAS,CAACzC,IAAD,CALM;AAAA,QAGjBgD,QAHiB,cAGjBA,QAHiB;AAAA,QAGPC,OAHO,cAGPA,OAHO;AAAA,QAIjBC,SAJiB,cAIjBA,SAJiB;AAAA,QAINL,QAJM,cAINA,QAJM;AAAA,yBAMSiB,aAAa,CAAC9D,IAAD,CANtB;AAAA,QAMjBkE,UANiB,kBAMjBA,UANiB;AAAA,QAMLM,SANK,kBAMLA,SANK;AAAA,uBAOKG,WAAW,CAAC3E,IAAD,CAPhB;AAAA,QAOjB+E,QAPiB,gBAOjBA,QAPiB;AAAA,QAOPC,OAPO,gBAOPA,OAPO;AAAA,QAQnBG,MARmB,GAQV,CAAElC,OAAF,EAAWJ,QAAX,EAAqB2B,SAArB,EAAgCQ,OAAhC,CARU;AAAA,QASnB6B,MATmB,GASV,iCACPC,cADO,CACQ9H,UADR,EAEP+H,UAFO,CAEIJ,KAFJ,EAEWC,QAFX,EAGPI,UAHO,CAGI,CAHJ,EAGO9C,UAHP,EAIP8C,UAJO,CAII,CAJJ,EAIOjC,QAJP,EAKPiC,UALO,CAKI,CALJ,EAKO9D,SALP,EAMP8D,UANO,CAMI,CANJ,EAMOhE,QANP,EAOPiE,UAPO,CAOI7C,oBAAQ8C,cAPZ,EAQPC,GARO,CAQH;AACHC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE,EAAd;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OADJ;AAEHC,MAAAA,QAAQ,EAAEtC,WAAW,CAACC,MAAD,EAAS;AAAEC,QAAAA,MAAM,EAANA;AAAF,OAAT,CAFlB;AAGHqC,MAAAA,WAAW,EAAGzB,cAAc,CAAC/C,QAAD,EAAWE,SAAX;AAHzB,KARG,EAaPwD,QAbO,EATU;;AAwBrB,WAAOG,MAAP;AACD;AA1Bc,CAAjB;eA6BeJ,Q","sourcesContent":["import Builder from '../charts/ConfigBuilder'\r\nimport Tooltip from '../charts/Tooltip'\r\n\r\nimport Fn from './AdapterFn'\r\n\r\n\r\nconst CATEGORIES = [\r\n  '01', '02', '03', '04', '05', '06',\r\n  '07', '08', '09', '10', '11', '12'\r\n];\r\n\r\nconst C = {\r\n  NOW: {\r\n    index: 3,\r\n    color: 'yellow',\r\n  },\r\n  PREV: {\r\n    index: 2,\r\n    color: '#f45b5b'\r\n  },\r\n  AVG: {\r\n    index: 1,\r\n    color: 'black',\r\n    isVisible: false\r\n  },\r\n  RANGE: {\r\n    index: 0,\r\n    color: '#7cb5ec'\r\n  }\r\n};\r\n\r\nconst _getYear = (str) => {\r\n  return str.split(\"-\")[0];\r\n}\r\nconst _getMonth = (str) => {\r\n  return str.split(\"-\")[1];\r\n}\r\n\r\nconst _crSeria = (\r\n  name, { type='spline', data, color, isVisible=true }\r\n) => {\r\n  return { type, name, data, color, visible: isVisible };\r\n}\r\nconst _crItem = (\r\n  name, { index, color, isVisible=true }\r\n) => {\r\n  return { name, index, color, isVisible };\r\n}\r\n\r\nconst _crPoint = (item) => {\r\n  return {\r\n    c: _getMonth(item[0]),\r\n    y: item[1]\r\n  };\r\n}\r\nconst _crValuePoint = item => item[1];\r\nconst _crValueYearPoint = item => {\r\n  return {\r\n    v: item[1],\r\n    y: _getYear(item[0])\r\n  }\r\n}\r\nconst _findHighLow = (arr) => {\r\n  let h = { v: Number.NEGATIVE_INFINITY, y: '' },\r\n      l = { v: Number.POSITIVE_INFINITY, y: '' };\r\n  arr.forEach(item => {\r\n    if (item.v > h.v) {\r\n      h = item\r\n    }\r\n    if (item.v < l.v ) {\r\n      l = item\r\n    }\r\n  })\r\n  return {\r\n    high: h.v, yHigh: h.y,\r\n    low: l.v, yLow: l.y\r\n  };\r\n}\r\nconst _crHighLowPoint = (key, arr) => {\r\n  return {\r\n      c: key,\r\n      ..._findHighLow(arr)\r\n  };\r\n}\r\nconst _calcAvg = (arr) => {\r\n  const sum = arr.reduce((acc, a) => acc + a, 0)\r\n      , avg = arr.length !== 0\r\n          ? parseFloat((sum/arr.length).toFixed(4))\r\n          : 0;\r\n  return avg;\r\n}\r\nconst _crAvgPoint = (key, arr) => {\r\n  return {\r\n    y: _calcAvg(arr),\r\n    c: key\r\n  };\r\n}\r\n\r\nconst _crSeriaData = (data, i, year, crPoint=_crPoint) => {\r\n  const arr=[], max=data.length;\r\n  for (; i<max; i++){\r\n    const item = data[i]\r\n    if (_getYear(item[0]) !== year) {\r\n      break;\r\n    }\r\n    arr.push( crPoint(item) )\r\n  }\r\n  return { i, arr: arr.reverse() };\r\n}\r\n\r\nconst _crSeries = (data) => {\r\n  const firtsItem = data[0][0]\r\n      , _yearNow = _getYear(firtsItem)\r\n      , { i, arr:_dNow } = _crSeriaData(data, 0, _yearNow)\r\n      , prevItem = data[i][0]\r\n      , _yearPrev = _getYear(prevItem)\r\n      , { arr:_dPrev } = _crSeriaData(data, i, _yearPrev);\r\n\r\n  return {\r\n    nowSeria: _crSeria(_yearNow, { ...C.NOW, ...{data: _dNow} } ),\r\n    nowItem: _crItem(_yearNow, C.NOW),\r\n    prevSeria: _crSeria(_yearPrev, { ...C.PREV, ...{data: _dPrev} }),\r\n    prevItem: _crItem(_yearPrev, C.PREV)\r\n  };\r\n}\r\n\r\nconst _hmToSeriaData = (hm, crPoint) => {\r\n  const data = [];\r\n  CATEGORIES.forEach(key => {\r\n    data.push(crPoint(key, hm[key]))\r\n  })\r\n  return data;\r\n}\r\n\r\nconst _crBaseHm = () => {\r\n  const hm = Object.create(null);\r\n  CATEGORIES.forEach(key => {\r\n    hm[key] = []\r\n  })\r\n  return hm;\r\n}\r\nconst _crMonthHm = (i, data, stopYear, crPoint=_crValuePoint) => {\r\n  const hm = _crBaseHm()\r\n      , max = data.length;\r\n  let isBreaked = false;\r\n  for (;i<max;i++){\r\n    const _item = data[i]\r\n        , _y = _item[0];\r\n    if (_y === stopYear ) {\r\n      isBreaked = true\r\n      break;\r\n    }\r\n    const _m = _getMonth(_item[0])\r\n    //hm[_m].push(_item[1])\r\n    hm[_m].push(crPoint(_item))\r\n  }\r\n\r\n  return { hm, isBreaked };\r\n}\r\n\r\n\r\nconst _crRangeSeria = (data) => {\r\n  const refYear = parseFloat(_getYear(data[0][0]))\r\n      , stopYear = '' + (refYear - 5)\r\n      , { hm, isBreaked } = _crMonthHm(\r\n            0, data, stopYear, _crValueYearPoint\r\n        )\r\n      , max = data.length\r\n      , _stopYear = isBreaked\r\n           ? stopYear\r\n           : _getYear(data[max-1][0])\r\n      , name = `Range ${refYear}:${_stopYear}`\r\n      , _data = _hmToSeriaData(hm, _crHighLowPoint);\r\n\r\n  return {\r\n    rangeSeria: Builder()\r\n      .areaRangeSeria(\r\n         Tooltip.categoryRHLY, {\r\n           data: _data,\r\n           name: name,\r\n           point: {}\r\n         }\r\n       ).toSeria(),\r\n    rangeItem: _crItem(name, C.RANGE)\r\n  };\r\n}\r\n\r\nconst _findStartYearIndex = (data, yearStop) => {\r\n  const max = data.length;\r\n  let i = 0;\r\n  for(;i<max;i++){\r\n    if (_getYear(data[i][0]) !== yearStop ) {\r\n       break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nconst _crAvgSeria = (data) => {\r\n  const yearNow = _getYear(data[0][0])\r\n      , fromYear = parseFloat(yearNow) - 1\r\n      , stopYear = '' + (parseFloat(yearNow) - 5)\r\n      , max = data.length\r\n      , startIndex = _findStartYearIndex(data, yearNow)\r\n      , { hm, isBreaked } = _crMonthHm(startIndex, data, stopYear)\r\n      , _stopYear = isBreaked\r\n           ? stopYear\r\n           : _getYear(data[max-1][0])\r\n      , _data = _hmToSeriaData(hm, _crAvgPoint)\r\n      , name = `Avg ${fromYear}:${_stopYear}`;\r\n\r\n  return {\r\n    avgSeria: _crSeria(name, {...C.AVG, ...{data: _data}}),\r\n    avgItem: _crItem(name, C.AVG)\r\n  };\r\n}\r\n\r\n\r\nconst _crZhConfig = (option, { legend }) => {\r\n  const { value, dataSource, itemCaption } = option\r\n      , _id = value + '_' + 'YEARLY';\r\n  return {\r\n    id: _id,\r\n    key: _id,\r\n    itemCaption,\r\n    isWithoutIndicator: true,\r\n    isWithoutAdd: true,\r\n    isWithLegend: true,\r\n    legend: legend,\r\n    dataSource: dataSource\r\n  };\r\n}\r\n\r\n\r\nconst _crValueAndDate = (seria, index) => {\r\n  const { data=[], name } = seria\r\n      , { y:value, c } = data[index];\r\n  return {\r\n    value,\r\n    date: `${c}-${name}`\r\n  };\r\n}\r\nconst _crValueMoving = (nowSeria, prevSeria) => {\r\n  const { data=[] } = nowSeria\r\n      , max = data.length - 1\r\n      , {\r\n          value:bNowValue,\r\n          date\r\n        } = _crValueAndDate(nowSeria, max)\r\n      , {\r\n          value:bPrevValue,\r\n          date:dateTo\r\n        } = _crValueAndDate(prevSeria, max)\r\n      , moving = Fn.crValueMoving({\r\n            bNowValue,\r\n            bPrevValue\r\n        });\r\n\r\n  return {\r\n    ...moving, date, dateTo,\r\n    valueTo: Fn.numberFormat(bPrevValue),\r\n    isDenyToChange: true\r\n  };\r\n};\r\n\r\n\r\nconst toYearly = {\r\n  toConfig(data, option) {\r\n    const { title, subtitle } = option\r\n    , {\r\n        nowSeria, nowItem,\r\n        prevSeria, prevItem\r\n      } = _crSeries(data)\r\n    , { rangeSeria, rangeItem } = _crRangeSeria(data)\r\n    , { avgSeria, avgItem } = _crAvgSeria(data)\r\n    , legend = [ nowItem, prevItem, rangeItem, avgItem ]\r\n    , config = Builder()\r\n       .categoryConfig(CATEGORIES)\r\n       .addCaption(title, subtitle)\r\n       .addSeriaBy(0, rangeSeria)\r\n       .addSeriaBy(1, avgSeria)\r\n       .addSeriaBy(2, prevSeria)\r\n       .addSeriaBy(3, nowSeria)\r\n       .addTooltip(Tooltip.categorySimple)\r\n       .add({\r\n         chart: { spacingTop: 25, marginTop: 45 },\r\n         zhConfig: _crZhConfig(option, { legend }),\r\n         valueMoving:  _crValueMoving(nowSeria, prevSeria)\r\n       })\r\n       .toConfig();\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\nexport default toYearly\r\n"],"file":"ToYearly.js"}