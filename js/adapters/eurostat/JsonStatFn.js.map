{"version":3,"sources":["../../../src/adapters/eurostat/JsonStatFn.js"],"names":["URL_ID_COUNTRY","hmIdCountry","isHmFetched","_fnFetchHmIdCountry","fetch","then","response","json","hm","catch","err","Promise","resolve","_fnIdToCountry","id","name","_combineToArr","dGeo","sGeo","arr","forEach","index","value","push","_splitForConfig","categories","data","max","Number","NEGATIVE_INFINITY","min","POSITIVE_INFINITY","item","_combineToHm","ids","_trHmToData","JsonStatFn","createGeoSlice","configSlice","ds","Dataset","Dimension","Data","trJsonToCategory","map","fold","trJsonToSeria"],"mappings":"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","file":"JsonStatFn.js","sourcesContent":["import JSONstat from 'jsonstat';\r\nimport sortBy from 'lodash.sortby';\r\n\r\nimport { Box, getFromNullable } from '../../utils/fnStyle'\r\n\r\nconst URL_ID_COUNTRY = './data/eurostat/id-country.json';\r\n\r\nlet hmIdCountry = {};\r\nlet isHmFetched = false;\r\nconst _fnFetchHmIdCountry = () => {\r\n   return (!isHmFetched)\r\n      ? fetch(URL_ID_COUNTRY)\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((json) => {\r\n             hmIdCountry = json.hm;\r\n             isHmFetched = true;\r\n             return hmIdCountry;\r\n          })\r\n          .catch((err) => { return hmIdCountry; })\r\n     : Promise.resolve(hmIdCountry);\r\n}\r\n\r\nconst _fnIdToCountry = (id) => {\r\n   const name = hmIdCountry[id];\r\n   return (name) ? name : id;\r\n}\r\n\r\nconst _combineToArr = (dGeo, sGeo) => {\r\n  const arr = [];\r\n  dGeo.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      arr.push({ id, value : sGeo[index].value });\r\n    }\r\n  })\r\n  return arr;\r\n}\r\nconst _splitForConfig = (arr) => {\r\n   const categories = []\r\n       , data = [];\r\n   let max = Number.NEGATIVE_INFINITY\r\n     , min = Number.POSITIVE_INFINITY;\r\n   arr.forEach((item) => {\r\n     const { id, value } = item\r\n     categories.push(_fnIdToCountry(id));\r\n     data.push(value);\r\n     if (value>=max) { max = value; }\r\n     if (value<=min) { min = value; }\r\n   })\r\n   return { categories, data, min, max };\r\n}\r\n\r\n/***********************/\r\n\r\nconst _combineToHm = (ids, sGeo) => {\r\n  const hm = {};\r\n  ids.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      hm[_fnIdToCountry(id)] = sGeo[index].value;\r\n    }\r\n  })\r\n  return hm;\r\n}\r\nconst _trHmToData = (hm, categories) => {\r\n  const data = []\r\n  categories.forEach((id) => {\r\n    if (hm[id] != null){\r\n      data.push(hm[id]);\r\n    }\r\n    else {\r\n      data.push(0);\r\n    }\r\n  })\r\n  return data;\r\n}\r\n\r\nconst JsonStatFn = {\r\n  createGeoSlice : (json, configSlice) => {\r\n    const  ds = JSONstat(json).Dataset(0)\r\n    return {\r\n      dGeo : getFromNullable(ds.Dimension(\"geo\"), { id : []}),\r\n      sGeo : getFromNullable(ds.Data(configSlice), [])\r\n    };\r\n  },\r\n\r\n  trJsonToCategory : (json, configSlice) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n\r\n    return _fnFetchHmIdCountry().then(() => {\r\n       return Box( _combineToArr(dGeo.id, sGeo) )\r\n               .map( (arr) => sortBy(arr, ['value', 'id']))\r\n               .fold(_splitForConfig);\r\n       });\r\n  },\r\n  trJsonToSeria : (json, configSlice, categories) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n    return Box(_combineToHm(dGeo.id, sGeo))\r\n             .fold((hm) => _trHmToData(hm, categories));\r\n  }\r\n}\r\n\r\nexport default JsonStatFn\r\n"]}