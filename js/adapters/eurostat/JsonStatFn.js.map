{"version":3,"sources":["../../../src/adapters/eurostat/JsonStatFn.js"],"names":["URL_ID_COUNTRY","hmIdCountry","isHmFetched","_fnFetchHmIdCountry","fetch","then","res","json","hm","err","Promise","resolve","_fnIdToCountry","id","name","_combineToArr","dGeo","sGeo","arr","forEach","index","value","push","_splitForConfig","categories","data","max","Number","NEGATIVE_INFINITY","min","POSITIVE_INFINITY","item","country","y","c","_combineToHm","ids","_trHmToData","JsonStatFn","createGeoSlice","configSlice","ds","Dataset","_sGeo","Data","time","length","maxIndex","Dimension","crGeoSeria","map","obj","filter","date","trJsonToCategory","sort","AdapterFn","compareByValueId","fold","trJsonToSeria"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport AdapterFn from '../AdapterFn'\r\nimport { Box, getFromNullable } from '../../utils/fnStyle'\r\n\r\nconst URL_ID_COUNTRY = './data/eurostat/id-country.json';\r\n\r\nlet hmIdCountry = {};\r\nlet isHmFetched = false;\r\nconst _fnFetchHmIdCountry = () => {\r\n   return (!isHmFetched)\r\n      ? fetch(URL_ID_COUNTRY)\r\n          .then(res => res.json())\r\n          .then(json => {\r\n             hmIdCountry = json.hm;\r\n             isHmFetched = true;\r\n             return hmIdCountry;\r\n          })\r\n          .catch((err) => { return hmIdCountry; })\r\n     : Promise.resolve(hmIdCountry);\r\n}\r\n\r\nconst _fnIdToCountry = (id) => {\r\n   const name = hmIdCountry[id];\r\n   return (name) ? name : id;\r\n}\r\n\r\nconst _combineToArr = (dGeo, sGeo) => {\r\n  const arr = [];\r\n  dGeo.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      arr.push({ id, value : sGeo[index].value });\r\n    }\r\n  })\r\n  return arr;\r\n}\r\nconst _splitForConfig = (arr) => {\r\n   const categories = []\r\n       , data = [];\r\n   let max = Number.NEGATIVE_INFINITY\r\n     , min = Number.POSITIVE_INFINITY;\r\n   arr.forEach((item) => {\r\n     const { id, value } = item\r\n         , country = _fnIdToCountry(id);\r\n     categories.push(country);\r\n     data.push({ y: value, c: country, id: country })\r\n     if (value>=max) { max = value; }\r\n     if (value<=min) { min = value; }\r\n    })\r\n   return { categories, data, min, max };\r\n}\r\n\r\n/***********************/\r\n\r\nconst _combineToHm = (ids, sGeo) => {\r\n  const hm = {};\r\n  ids.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      hm[_fnIdToCountry(id)] = sGeo[index].value;\r\n    }\r\n  })\r\n  return hm;\r\n}\r\nconst _trHmToData = (hm, categories) => {\r\n  const data = []\r\n  categories.forEach((id) => {\r\n    if (hm[id] != null){\r\n      data.push(hm[id]);\r\n      //data.push({ y: hm[id], c: id });\r\n    }\r\n    else {\r\n      //data.push({ y: 0, c: id });\r\n      data.push(0);\r\n    }\r\n  })\r\n  return data;\r\n}\r\n\r\nconst JsonStatFn = {\r\n  createGeoSlice : (json, configSlice) => {\r\n    const  ds = JSONstat(json).Dataset(0);\r\n    let _sGeo = ds.Data(configSlice)\r\n       , time;\r\n    if (!_sGeo || _sGeo.length === 0){\r\n      const maxIndex = getFromNullable(ds.Dimension(\"time\").id, []).length;\r\n      if (maxIndex>0) {\r\n        time = ds.Dimension(\"time\").id[maxIndex-1];\r\n        _sGeo = ds.Data({...configSlice, ...{ time } })\r\n      }\r\n    } else if (configSlice) {\r\n       time = configSlice.time\r\n    }\r\n\r\n    return {\r\n      dGeo: getFromNullable(ds.Dimension(\"geo\"), { id : []}),\r\n      sGeo: getFromNullable(_sGeo, []),\r\n      time\r\n    };\r\n  },\r\n\r\n  crGeoSeria: (json, configSlice) => {\r\n    const ds = JSONstat(json).Dataset(0)\r\n        , data = getFromNullable(ds.Data(configSlice), [])\r\n            .map(obj => obj.value)\r\n            .filter(value => value !== null);\r\n    return {\r\n      date: getFromNullable(ds.Dimension(\"time\")),\r\n      data: data\r\n    };\r\n  },\r\n\r\n  trJsonToCategory : (json, configSlice) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n    return _fnFetchHmIdCountry().then(() => {\r\n       return Box( _combineToArr(dGeo.id, sGeo) )\r\n         .map(arr => arr.sort(AdapterFn.compareByValueId))\r\n         .fold(_splitForConfig);\r\n       });\r\n  },\r\n  trJsonToSeria : (json, configSlice, categories) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n    return Box(_combineToHm(dGeo.id, sGeo))\r\n      .fold((hm) => _trHmToData(hm, categories));\r\n  }\r\n}\r\n\r\nexport default JsonStatFn\r\n"],"file":"JsonStatFn.js"}