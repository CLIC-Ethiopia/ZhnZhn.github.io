{"version":3,"sources":["../../../src/adapters/eurostat/JsonStatFn.js"],"names":["URL_ID_COUNTRY","_isArr","Array","isArray","hmIdCountry","isHmFetched","_fnFetchHmIdCountry","fetch","then","res","json","hm","err","Promise","resolve","_fnIdToCountry","id","name","_combineToArr","dGeo","sGeo","status","arr","forEach","index","value","push","_splitForConfig","categories","data","max","Number","NEGATIVE_INFINITY","min","POSITIVE_INFINITY","item","country","y","c","_combineToHm","ids","_trHmToData","_isEmptyGeoSlice","_sGeo","filter","Boolean","length","JsonStatFn","createGeoSlice","configSlice","dfTime","ds","Dataset","time","Data","maxIndex","Dimension","crGeoSeria","map","obj","date","trJsonToCategory","sort","AdapterFn","compareByValueId","fold","trJsonToSeria"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport AdapterFn from '../AdapterFn'\r\nimport Box from '../../utils/Box'\r\n\r\nconst URL_ID_COUNTRY = './data/eurostat/id-country.json';\r\n\r\nconst _isArr = Array.isArray;\r\n\r\nlet hmIdCountry = {};\r\nlet isHmFetched = false;\r\nconst _fnFetchHmIdCountry = () => {\r\n   return (!isHmFetched)\r\n      ? fetch(URL_ID_COUNTRY)\r\n          .then(res => res.json())\r\n          .then(json => {\r\n             hmIdCountry = json.hm;\r\n             isHmFetched = true;\r\n             return hmIdCountry;\r\n          })\r\n          .catch((err) => { return hmIdCountry; })\r\n     : Promise.resolve(hmIdCountry);\r\n}\r\n\r\nconst _fnIdToCountry = (id) => {\r\n   const name = hmIdCountry[id];\r\n   return name ? name : id;\r\n}\r\n\r\nconst _combineToArr = (dGeo, sGeo, status={}) => {\r\n  const arr = [];\r\n  dGeo.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      arr.push({ id,\r\n         value: sGeo[index].value,\r\n         status: status[index]\r\n      });\r\n    }\r\n  })\r\n  return arr;\r\n}\r\nconst _splitForConfig = (arr) => {\r\n   const categories = []\r\n       , data = [];\r\n   let max = Number.NEGATIVE_INFINITY\r\n     , min = Number.POSITIVE_INFINITY;\r\n   arr.forEach((item) => {\r\n     const { id, value, status } = item\r\n         , country = _fnIdToCountry(id);\r\n     categories.push(country);\r\n     data.push({ y: value, c: country, id: country, status })\r\n     if (value>=max) { max = value; }\r\n     if (value<=min) { min = value; }\r\n    })\r\n   return { categories, data, min, max };\r\n}\r\n\r\n/***********************/\r\n\r\nconst _combineToHm = (ids, sGeo) => {\r\n  const hm = {};\r\n  ids.forEach((id, index) => {\r\n    if (sGeo[index] != null && sGeo[index].value != null){\r\n      hm[_fnIdToCountry(id)] = sGeo[index].value;\r\n    }\r\n  })\r\n  return hm;\r\n}\r\nconst _trHmToData = (hm, categories) => {\r\n  const data = []\r\n  categories.forEach((id) => {\r\n    if (hm[id] != null){\r\n      data.push(hm[id]);\r\n      //data.push({ y: hm[id], c: id });\r\n    }\r\n    else {\r\n      //data.push({ y: 0, c: id });\r\n      data.push(0);\r\n    }\r\n  })\r\n  return data;\r\n}\r\n\r\nconst _isEmptyGeoSlice = (_sGeo) => {\r\n  if (!_isArr(_sGeo)) { return true; }\r\n  return _sGeo\r\n   .filter(({ value }) => Boolean(value))\r\n   .length === 0\r\n      ? true\r\n      : false;\r\n};\r\n\r\nconst JsonStatFn = {\r\n  createGeoSlice : (json, configSlice={}, dfTime) => {\r\n    const  ds = JSONstat(json).Dataset(0);\r\n\r\n    // 1) Try create _sGeo with configSlice\r\n    let time = configSlice.time\r\n    , _sGeo = ds.Data(configSlice);\r\n\r\n    // 2) Try create _sGeo with configSlice and dfTime from dialog\r\n    if (dfTime && _isEmptyGeoSlice(_sGeo)) {\r\n      _sGeo = ds.Data({ ...configSlice, ...{time: dfTime}})\r\n      time = dfTime\r\n    }\r\n\r\n    // 3) Try create _sGeo with maxIndex time available in ds\r\n    if (_isEmptyGeoSlice(_sGeo)){\r\n      const maxIndex = (ds.Dimension(\"time\").id || []).length;\r\n      if (maxIndex>0) {\r\n        time = ds.Dimension(\"time\").id[maxIndex-1];\r\n        _sGeo = ds.Data({...configSlice, ...{ time } })\r\n      }\r\n    }\r\n\r\n    return {\r\n      dGeo: ds.Dimension(\"geo\") || { id: [] },\r\n      sGeo: _sGeo || [],\r\n      time\r\n    };\r\n  },\r\n\r\n  crGeoSeria: (json, configSlice) => {\r\n    const ds = JSONstat(json).Dataset(0) || {}\r\n    , data = (ds.Data?.(configSlice) || [])\r\n        .map(obj => obj.value)\r\n        .filter(value => value !== null);\r\n    return {\r\n      date: ds.Dimension?.(\"time\") || {},\r\n      data\r\n    };\r\n  },\r\n\r\n  trJsonToCategory : (json, configSlice) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n    return _fnFetchHmIdCountry().then(() => {\r\n       return Box( _combineToArr(dGeo.id, sGeo, json.status) )\r\n         .map(arr => arr.sort(AdapterFn.compareByValueId))\r\n         .fold(_splitForConfig);\r\n       });\r\n  },\r\n  trJsonToSeria : (json, configSlice, categories) => {\r\n    const { dGeo, sGeo } = JsonStatFn.createGeoSlice(json, configSlice);\r\n    return Box(_combineToHm(dGeo.id, sGeo))\r\n      .fold((hm) => _trHmToData(hm, categories));\r\n  }\r\n}\r\n\r\nexport default JsonStatFn\r\n"],"file":"JsonStatFn.js"}