{"version":3,"sources":["../../../src/adapters/eurostat/toCategory.js"],"names":["_crScatterProps","seriaColor","type","marker","fillColor","radius","symbol","toCategory","createConfig","json","option","configSlice","zhMapSlice","JsonStatFn","trJsonToCategory","then","categories","data","min","config","FactoryChart","EuroStatFn","addToCategoryConfig","createSeria","chart","options","xAxis","time","seriaType","_name","trJsonToSeria","_seriaProps","zhSeriaId","zhValueText","minY","findMinY","name","color","tooltip","crCategoryTooltip"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD;AAAA,SAAkB;AACxCC,IAAAA,IAAI,EAAE,SADkC;AAExCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAEH,UADL;AAENI,MAAAA,MAAM,EAAE,CAFF;AAGNC,MAAAA,MAAM,EAAE;AAHF;AAFgC,GAAlB;AAAA,CAAxB;;AASA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,YAAY,EAAE,sBAACC,IAAD,EAAOC,MAAP,EAAkB;AAAA,QACXC,WADW,GACKD,MADL,CACtBE,UADsB;AAE9B,WAAOC,uBAAWC,gBAAX,CAA4BL,IAA5B,EAAkCE,WAAlC,EACHI,IADG,CACE,gBAA+B;AAAA,UAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,UAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,UAAVC,GAAU,QAAVA,GAAU;;AAClC,UAAMC,MAAM,GAAGC,yBAAaZ,YAAb,CAA0BE,MAA1B,CAAf;;AACAW,6BAAWC,mBAAX,CAA+BH,MAA/B,EAAuC;AACrCV,QAAAA,IAAI,EAAJA,IADqC;AAC/BC,QAAAA,MAAM,EAANA,MAD+B;AACvBO,QAAAA,IAAI,EAAJA,IADuB;AACjBD,QAAAA,UAAU,EAAVA,UADiB;AACLE,QAAAA,GAAG,EAAHA;AADK,OAAvC;;AAGA,aAAOC,MAAP;AACF,KAPG,CAAP;AAQD,GAXgB;AAajBI,EAAAA,WAAW,EAAE,qBAACd,IAAD,EAAOC,MAAP,EAAec,KAAf,EAAyB;AACpC,QAAMR,UAAU,GAAGQ,KAAK,CAACC,OAAN,CAAcC,KAAd,CAAoB,CAApB,EAAuBV,UAA1C;;AADoC,6BAO1BN,MAP0B,CAG5BE,UAH4B;AAAA,QAGjBD,WAHiB,mCAGL,EAHK;AAAA,QAI5BgB,IAJ4B,GAO1BjB,MAP0B,CAI5BiB,IAJ4B;AAAA,QAK5B1B,UAL4B,GAO1BS,MAP0B,CAK5BT,UAL4B;AAAA,QAM5B2B,SAN4B,GAO1BlB,MAP0B,CAM5BkB,SAN4B;AAAA,QAQ9BC,KAR8B,GAQtBlB,WAAW,CAACgB,IAAZ,IAAoBA,IARE;AAAA,QAS9BV,IAT8B,GASvBJ,uBAAWiB,aAAX,CAAyBrB,IAAzB,EAA+BE,WAA/B,EAA4CK,UAA5C,CATuB;AAAA,QAU9Be,WAV8B,GAUhBH,SAAS,KAAK,SAAd,GACV5B,eAAe,CAACC,UAAD,CADL,GAEV,KAAK,CAZqB;;AAapC;AACE+B,MAAAA,SAAS,EAAE,WADb;AAEEC,MAAAA,WAAW,EAAE,OAFf;AAGEC,MAAAA,IAAI,EAAEb,uBAAWc,QAAX,CAAoBlB,IAApB,CAHR;AAIEmB,MAAAA,IAAI,EAAEP,KAJR;AAKEQ,MAAAA,KAAK,EAAEpC,UALT;AAMEgB,MAAAA,IAAI,EAAEA,IANR;AAOEqB,MAAAA,OAAO,EAAEjB,uBAAWkB,iBAAX;AAPX,OAQKR,WARL;AAUD;AApCgB,CAAnB;eAuCexB,U","sourcesContent":["\r\nimport FactoryChart from './FactoryChart';\r\nimport JsonStatFn from './JsonStatFn';\r\nimport EuroStatFn from './EuroStatFn';\r\n\r\nconst _crScatterProps = (seriaColor)  => ({\r\n  type: 'scatter',\r\n  marker: {\r\n    fillColor: seriaColor,\r\n    radius: 5,\r\n    symbol: 'circle'\r\n  }\r\n});\r\n\r\nconst toCategory = {\r\n  createConfig: (json, option) => {\r\n    const { zhMapSlice:configSlice } = option;\r\n    return JsonStatFn.trJsonToCategory(json, configSlice)\r\n       .then(({ categories, data, min }) => {\r\n          const config = FactoryChart.createConfig(option)\r\n          EuroStatFn.addToCategoryConfig(config, {\r\n            json, option, data, categories, min\r\n          })\r\n          return config;\r\n       });\r\n  },\r\n\r\n  createSeria: (json, option, chart) => {\r\n    const categories = chart.options.xAxis[0].categories;\r\n    const {\r\n            zhMapSlice:configSlice={},\r\n            time,\r\n            seriaColor,\r\n            seriaType\r\n          } = option\r\n        , _name = configSlice.time || time\r\n        , data = JsonStatFn.trJsonToSeria(json, configSlice, categories)\r\n        , _seriaProps = seriaType === 'DOT_SET'\r\n            ? _crScatterProps(seriaColor)\r\n            : void 0;\r\n    return {\r\n      zhSeriaId: 'optionKey',\r\n      zhValueText: 'Value',\r\n      minY: EuroStatFn.findMinY(data),\r\n      name: _name,\r\n      color: seriaColor,\r\n      data: data,\r\n      tooltip: EuroStatFn.crCategoryTooltip(),\r\n      ..._seriaProps\r\n    };\r\n  }\r\n}\r\n\r\nexport default toCategory\r\n"],"file":"toCategory.js"}