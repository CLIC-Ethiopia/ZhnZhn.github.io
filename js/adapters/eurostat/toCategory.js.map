{"version":3,"sources":["../../../src/adapters/eurostat/toCategory.js"],"names":["addToCategoryConfig","EuroStatFn","findMinY","crCategoryTooltip","_filterZeroIf","data","is","map","value","_crScatterProps","seriaColor","type","marker","fillColor","radius","symbol","toCategory","createConfig","json","option","configSlice","zhMapSlice","JsonStatFn","trJsonToCategory","then","categories","min","config","FactoryChart","createSeria","chart","options","xAxis","isFilterZero","time","seriaType","trJsonToSeria","_data","_seriaProps","zhValueText","minY","name","color","tooltip"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;IAGEA,mB,GAGEC,sB,CAHFD,mB;IACAE,Q,GAEED,sB,CAFFC,Q;IACAC,iB,GACEF,sB,CADFE,iB;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,EAAP;AAAA,SAAcA,EAAE,GAClCD,IAAI,CAACE,GAAL,CAAS,UAAAC,KAAK;AAAA,WAAIA,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqBA,KAAzB;AAAA,GAAd,CADkC,GAElCH,IAFkB;AAAA,CAAtB;;AAIA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD;AAAA,SAAkB;AACxCC,IAAAA,IAAI,EAAE,SADkC;AAExCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAEH,UADL;AAENI,MAAAA,MAAM,EAAE,CAFF;AAGNC,MAAAA,MAAM,EAAE;AAHF;AAFgC,GAAlB;AAAA,CAAxB;;AASA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,YAAY,EAAE,sBAACC,IAAD,EAAOC,MAAP,EAAkB;AAAA,QACXC,WADW,GACKD,MADL,CACtBE,UADsB;AAE9B,WAAOC,uBAAWC,gBAAX,CAA4BL,IAA5B,EAAkCE,WAAlC,EACHI,IADG,CACE,gBAA+B;AAAA,UAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,UAAhBpB,IAAgB,QAAhBA,IAAgB;AAAA,UAAVqB,GAAU,QAAVA,GAAU;;AAClC,UAAMC,MAAM,GAAGC,yBAAaX,YAAb,CAA0BE,MAA1B,CAAf;;AACAnB,MAAAA,mBAAmB,CAAC2B,MAAD,EAAS;AAC1BT,QAAAA,IAAI,EAAJA,IAD0B;AACpBC,QAAAA,MAAM,EAANA,MADoB;AACZd,QAAAA,IAAI,EAAJA,IADY;AACNoB,QAAAA,UAAU,EAAVA,UADM;AACMC,QAAAA,GAAG,EAAHA;AADN,OAAT,CAAnB;AAGA,aAAOC,MAAP;AACF,KAPG,CAAP;AAQD,GAXgB;AAajBE,EAAAA,WAAW,EAAE,qBAACX,IAAD,EAAOC,MAAP,EAAeW,KAAf,EAAyB;AACpC,QAAML,UAAU,GAAGK,KAAK,CAACC,OAAN,CAAcC,KAAd,CAAoB,CAApB,EAAuBP,UAA1C;;AADoC,QAGhCQ,YAHgC,GAQ9Bd,MAR8B,CAGhCc,YAHgC;AAAA,6BAQ9Bd,MAR8B,CAIhCE,UAJgC;AAAA,QAIrBD,WAJqB,mCAIT,EAJS;AAAA,QAKhCc,IALgC,GAQ9Bf,MAR8B,CAKhCe,IALgC;AAAA,QAMhCxB,UANgC,GAQ9BS,MAR8B,CAMhCT,UANgC;AAAA,QAOhCyB,SAPgC,GAQ9BhB,MAR8B,CAOhCgB,SAPgC;AAAA,QASlC9B,IATkC,GAS3BiB,uBAAWc,aAAX,CAAyBlB,IAAzB,EAA+BE,WAA/B,EAA4CK,UAA5C,CAT2B;AAAA,QAUlCY,KAVkC,GAU1BjC,aAAa,CAACC,IAAD,EAAO4B,YAAP,CAVa;AAAA,QAWlCK,WAXkC,GAWpBH,SAAS,KAAK,SAAd,GACV1B,eAAe,CAACC,UAAD,CADL,GAEV,KAAK,CAbyB;;AAcpC;AACE6B,MAAAA,WAAW,EAAE,OADf;AAEEC,MAAAA,IAAI,EAAEtC,QAAQ,CAACG,IAAD,CAFhB;AAGEoC,MAAAA,IAAI,EAAErB,WAAW,CAACc,IAAZ,IAAoBA,IAH5B;AAIEQ,MAAAA,KAAK,EAAEhC,UAJT;AAKEL,MAAAA,IAAI,EAAEgC,KALR;AAMEM,MAAAA,OAAO,EAAExC,iBAAiB;AAN5B,OAOKmC,WAPL;AASD;AApCgB,CAAnB;eAuCetB,U","sourcesContent":["\r\nimport FactoryChart from './FactoryChart';\r\nimport JsonStatFn from './JsonStatFn';\r\nimport EuroStatFn from './EuroStatFn';\r\n\r\nconst {\r\n  addToCategoryConfig,\r\n  findMinY,\r\n  crCategoryTooltip\r\n} = EuroStatFn\r\n\r\nconst _filterZeroIf = (data, is) => is\r\n  ? data.map(value => value === 0 ? null : value)\r\n  : data;\r\n\r\nconst _crScatterProps = (seriaColor)  => ({\r\n  type: 'scatter',\r\n  marker: {\r\n    fillColor: seriaColor,\r\n    radius: 5,\r\n    symbol: 'circle'\r\n  }\r\n});\r\n\r\nconst toCategory = {\r\n  createConfig: (json, option) => {\r\n    const { zhMapSlice:configSlice } = option;\r\n    return JsonStatFn.trJsonToCategory(json, configSlice)\r\n       .then(({ categories, data, min }) => {\r\n          const config = FactoryChart.createConfig(option)\r\n          addToCategoryConfig(config, {\r\n            json, option, data, categories, min\r\n          })\r\n          return config;\r\n       });\r\n  },\r\n\r\n  createSeria: (json, option, chart) => {\r\n    const categories = chart.options.xAxis[0].categories;\r\n    const {\r\n        isFilterZero,\r\n        zhMapSlice:configSlice={},\r\n        time,\r\n        seriaColor,\r\n        seriaType\r\n      } = option\r\n    , data = JsonStatFn.trJsonToSeria(json, configSlice, categories)\r\n    , _data = _filterZeroIf(data, isFilterZero)\r\n    , _seriaProps = seriaType === 'DOT_SET'\r\n        ? _crScatterProps(seriaColor)\r\n        : void 0;\r\n    return {\r\n      zhValueText: 'Value',\r\n      minY: findMinY(data),\r\n      name: configSlice.time || time,\r\n      color: seriaColor,\r\n      data: _data,\r\n      tooltip: crCategoryTooltip(),\r\n      ..._seriaProps\r\n    };\r\n  }\r\n}\r\n\r\nexport default toCategory\r\n"],"file":"toCategory.js"}