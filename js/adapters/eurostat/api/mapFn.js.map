{"version":3,"sources":["../../../../src/adapters/eurostat/api/mapFn.js"],"names":["_typeI","createMapValue","props","item","mapPropName","value","createMapSlice","mapSlice","_typeZ","_typeV","indexOf","substr","split","forEach","pStr","_arr","R_MAP_VALUE","R_MAP_SLICE","_addParamTo","q","p","mapFn","toQuery","dfParams","items","dfTail","_q","i","_v","length","toMapSlice","tail","option","time","dfSlice","zhMapSlice","query","_tail","_mapType","mapType","_fnCreate","undefined"],"mappings":"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","sourcesContent":["\r\nconst _typeI = {\r\n  createMapValue(props, item){\r\n    const { mapPropName=\"indic\" } = props;\r\n    return `?${mapPropName}=${item.value}`;\r\n  },\r\n  createMapSlice(props, item){\r\n    const { mapSlice, mapPropName=\"indic\" } = props;\r\n    return {\r\n      ...mapSlice,\r\n      [mapPropName]: item.value\r\n    };\r\n  }\r\n};\r\nconst _typeZ = {\r\n  createMapValue(props, item){\r\n    return `${item.value}?`;\r\n  },\r\n  createMapSlice(){\r\n    return { };\r\n  }\r\n};\r\nconst _typeV = {\r\n  createMapValue(props, item){\r\n    return item.value;\r\n  },\r\n  createMapSlice(props, item){\r\n    const { value } = item\r\n        , mapSlice = {};\r\n    if (typeof value !== 'string'\r\n        || value.indexOf('?') === -1) {\r\n      return mapSlice;\r\n    }\r\n    value.substr(value.indexOf('?'))\r\n      .split('&')\r\n      .forEach(pStr => {\r\n        const _arr = pStr.split('=');\r\n        if (_arr[0] && _arr[1]) {\r\n          mapSlice[_arr[0]] = _arr[1]\r\n        }\r\n      })\r\n\r\n    return mapSlice;\r\n  }\r\n};\r\n\r\nconst R_MAP_VALUE = {\r\n  \"I\": _typeI.createMapValue,\r\n  \"Z\": _typeZ.createMapValue,\r\n  \"V\": _typeV.createMapValue\r\n};\r\nconst R_MAP_SLICE = {\r\n  \"I\": _typeI.createMapSlice,\r\n  \"Z\": _typeZ.createMapSlice,\r\n  \"V\": _typeV.createMapSlice,\r\n};\r\n\r\nconst _addParamTo = (q, p) => q ? q + '&' + p : p;\r\n\r\nconst mapFn = {\r\n  toQuery: ({ dfParams, items, dfTail }) => {\r\n    let _q = '', i = 0, _v;\r\n    for (;i<dfParams.length; i++) {\r\n      _v = items[i] && items[i].value || ''\r\n      if (_v) {\r\n        _q = _addParamTo(_q, `${dfParams[i]}=${_v}`)\r\n      }\r\n    }\r\n    return dfTail\r\n      ? _addParamTo(_q, dfTail)\r\n      : _q;\r\n  },\r\n\r\n  toMapSlice: (tail, option) => {\r\n    const {\r\n           dfParams, items,\r\n           time, dfSlice,\r\n           dfTail\r\n          } = option\r\n         , zhMapSlice = { ...dfSlice, time };\r\n\r\n    let query='', i;\r\n    for (i=1 ;i<dfParams.length; i++){\r\n      query = _addParamTo(query, `${dfParams[i]}=${items[i].value}`)\r\n      zhMapSlice[dfParams[i]] = items[i].value\r\n    }\r\n    const _tail = _addParamTo(dfTail, tail);\r\n    query = _addParamTo(query, _tail)\r\n\r\n    return {\r\n      query, zhMapSlice\r\n    };\r\n  },\r\n\r\n  createMapValue: (props, item) => {\r\n     const _mapType = props.mapType || item.mapType\r\n         , _fnCreate = R_MAP_VALUE[_mapType];\r\n     return _fnCreate\r\n       ? _fnCreate(props, item)\r\n       : undefined;\r\n  },\r\n  createMapSlice: (props, item) => {\r\n    const _mapType = props.mapType || item.mapType\r\n        , _fnCreate = R_MAP_SLICE[_mapType];\r\n    return  _fnCreate\r\n      ? _fnCreate(props, item)\r\n      : undefined;\r\n  }\r\n}\r\n\r\nexport default mapFn\r\n"],"file":"mapFn.js"}