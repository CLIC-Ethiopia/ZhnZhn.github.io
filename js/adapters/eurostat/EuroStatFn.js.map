{"version":3,"sources":["../../../src/adapters/eurostat/EuroStatFn.js"],"names":["SPAN_UNIT","_rFrequency","default","m","q","_crDataSourceLink","json","href","_crSubTitle","subTitle","EuroStatFn","createData","timeIndex","value","data","max","Number","NEGATIVE_INFINITY","min","POSITIVE_INFINITY","Object","keys","map","key","pointValue","push","convertToUTC","setDataAndInfo","config","option","title","subtitle","seriaType","setDefaultTitle","zhConfig","createZhConfig","info","createDatasetInfo","valueMoving","createValueMovingFromSeria","series","zhSeriaId","setCategories","categories","time","xAxis","yAxis","name","itemCaption","itemTime","str","indexOf","arrDate","split","_month","parseInt","_day","Date","UTC","setLineExtrems","plotLines","label","text","fnNumberFormat","calcMinY","maxPoint","minPoint","id","isWithoutIndicator","isWithoutAdd","group","arr","_frequency","length","extension","description","_descr","newest_available_date","updated","oldest_available_date","frequency","findMinY"],"mappings":"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","file":"EuroStatFn.js","sourcesContent":["import ChartConfig from '../../charts/ChartConfig';\r\nimport Chart from '../../charts/Chart';\r\n\r\nimport QuandlFn2 from '../QuandlFn2';\r\n\r\nimport ChoroplethMapSlice from './ChoroplethMapSlice';\r\n\r\nconst SPAN_UNIT = '<span style=\"color:#1b75bb;font-weight:bold;\">Unit: </span>';\r\n\r\nconst _rFrequency = {\r\n  default : '',\r\n  m : 'Monthly',\r\n  q : 'Quarterly'\r\n}\r\n\r\nconst _crDataSourceLink = function(json){\r\n  const { href } = json\r\n  return (href)\r\n            ? `<a href=${href}>Eurostat Data Link</a>`\r\n            : '';\r\n}\r\n\r\nconst _crSubTitle = function(subTitle){\r\n  return `<span style=\"color:black;font-weight:bold;\">${subTitle}</span>`;\r\n}\r\n\r\nconst EuroStatFn = {\r\n\r\n  createData(timeIndex, value){\r\n    const data = [];\r\n    let max = Number.NEGATIVE_INFINITY\r\n      , min = Number.POSITIVE_INFINITY;\r\n\r\n    Object.keys(timeIndex).map((key) => {\r\n       const pointValue = value[timeIndex[key]];\r\n       if ( !(pointValue == null) ){\r\n         data.push([\r\n            this.convertToUTC(key),\r\n            pointValue\r\n          ]);\r\n\r\n          if (pointValue>=max) { max = pointValue; }\r\n          if (pointValue<=min) { min = pointValue; }\r\n       }\r\n    })\r\n\r\n    return { data, max, min };\r\n  },\r\n\r\n  setDataAndInfo({ config, data, json, option }){\r\n    const { title, subtitle, seriaType } = option;\r\n    Chart.setDefaultTitle(config, title, subtitle);\r\n\r\n    config.zhConfig = this.createZhConfig(option);\r\n    config.info = this.createDatasetInfo(json, option);\r\n\r\n    if (seriaType === 'AREA'){\r\n      config.valueMoving = QuandlFn2.createValueMovingFromSeria(data);\r\n    }\r\n    config.series[0].zhSeriaId = option.key;\r\n    config.series[0].data = data;\r\n  },\r\n\r\n  setCategories({ config, categories, min, time, subtitle}){\r\n    config.xAxis.categories = categories\r\n    config.yAxis.min = min;\r\n    config.series[0].name = time;\r\n\r\n    config.zhConfig.itemCaption = `EU:${subtitle}`;\r\n    config.zhConfig.itemTime = time;\r\n  },\r\n\r\n  convertToUTC(str){\r\n    if (str.indexOf('M') !== -1) {\r\n      const arrDate = str.split('M')\r\n          , _month = parseInt(arrDate[1], 10)-1\r\n          , _day = (_month === 1) ? 28 : 30\r\n\r\n      return Date.UTC(arrDate[0], _month, _day);\r\n    } else if (str.indexOf('Q') !== -1){\r\n      const arrDate = str.split('Q')\r\n          , _month = (parseInt(arrDate[1], 10)*3) - 1\r\n\r\n      return Date.UTC(arrDate[0], _month, 30);\r\n    } else {\r\n      return Date.UTC(str, 11, 31);\r\n    }\r\n  },\r\n\r\n  setLineExtrems({ config, max, min }){\r\n    const plotLines = config.yAxis.plotLines;\r\n\r\n    if ( max>Number.NEGATIVE_INFINITY ){\r\n      plotLines[0].value = max;\r\n      plotLines[0].label.text = ChartConfig.fnNumberFormat(max);\r\n    }\r\n    if ( min<Number.POSITIVE_INFINITY){\r\n      plotLines[1].value = min;\r\n      plotLines[1].label.text = ChartConfig.fnNumberFormat(min);\r\n    }\r\n\r\n    config.yAxis.min = Chart.calcMinY({ maxPoint: max, minPoint: min });\r\n\r\n  },\r\n\r\n  createZhConfig(option){\r\n    const { key, itemCaption } = option\r\n    return {\r\n      id : key,\r\n      key : key,\r\n      itemCaption : itemCaption,\r\n      isWithoutIndicator : true,\r\n      isWithoutAdd : true\r\n    }\r\n  },\r\n\r\n  createDatasetInfo(json, option){\r\n    const  { group='' } = option\r\n        ,  arr = group.split('_')\r\n        , _frequency = (_rFrequency[arr[arr.length-1]])\r\n              ? _rFrequency[arr[arr.length-1]]\r\n              : _rFrequency.default\r\n        , { extension={} } = json\r\n        , { description, subTitle } = extension;\r\n\r\n    let _descr = '';\r\n    if (subTitle){\r\n      _descr = SPAN_UNIT + _crSubTitle(subTitle) + '<br>';\r\n    }\r\n    if (description) {\r\n      _descr = _descr + description + '<br>';\r\n    }\r\n    _descr = _descr + _crDataSourceLink(json);\r\n\r\n    return {\r\n      name : json.label,\r\n      description : _descr,\r\n      newest_available_date : json.updated,\r\n      oldest_available_date : '1996-01-30',\r\n      frequency : _frequency\r\n    }\r\n  },\r\n\r\n  findMinY(data){\r\n    return QuandlFn2.findMinY(data);\r\n  },\r\n\r\n  ...ChoroplethMapSlice\r\n}\r\n\r\nexport default EuroStatFn\r\n"]}