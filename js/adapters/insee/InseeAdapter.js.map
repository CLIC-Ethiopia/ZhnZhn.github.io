{"version":3,"sources":["../../../src/adapters/insee/InseeAdapter.js"],"names":["Builder","crConfigType1","_parser","window","DOMParser","_isNaN","Number","isNaN","_crZhConfig","id","key","dataSource","_toData","str","xml","parseFromString","series","getElementsByTagName","data","info","i","max","length","_seria","_getAttr","_v","getAttribute","bind","push","title","frequency","updatedOn","unitMeasure","unitMult","childNodes","forEach","node","parseFloat","sort","compareByDate","_crConfigOption","value","fnDescr","toInfo","zhConfig","InseeAdapter","toConfig","option","confOption","config","toSeries","subtitle","_text","initSeria","minY","findMinY","addPoints","toSeria"],"mappings":";;;;;;;AACA;;AACA;;AAIA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,qBAApB;AAAA,MACEC,OAAO,GAAG,IAAIC,MAAM,CAACC,SAAX,EADZ;AAAA,MAEEC,MAAM,GAAGC,MAAM,CAACC,KAFlB,C,CAIA;;;AAEA,MAAMC,WAAW,GAAGC,EAAE,KAAK;AACzBA,EAAAA,EAAE,EAAEA,EADqB;AAEzBC,EAAAA,GAAG,EAAED,EAFoB;AAGzBE,EAAAA,UAAU,EAAE;AAHa,CAAL,CAAtB;;AAMA,MAAMC,OAAO,GAAIC,GAAD,IAAS;AACvB,QAAMC,GAAG,GAAGZ,OAAO,CAACa,eAAR,CAAwBF,GAAxB,EAA6B,UAA7B,CAAZ;AAAA,QACMG,MAAM,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,QAAzB,CADf;AAAA,QAEMC,IAAI,GAAG,EAFb;AAAA,QAEiBC,IAAI,GAAG,EAFxB;;AAGA,MAAIC,CAAC,GAAC,CAAN;AAAA,MAASC,GAAG,GAAGL,MAAM,CAACM,MAAtB;AAAA,MACEC,MADF;AAAA,MACUC,QADV;AAAA,MACoBC,EADpB;;AAGA,OAAIL,CAAJ,EAAOA,CAAC,GAACC,GAAT,EAAcD,CAAC,EAAf,EAAkB;AAChBG,IAAAA,MAAM,GAAGP,MAAM,CAACI,CAAD,CAAf;AACAI,IAAAA,QAAQ,GAAGD,MAAM,CAACG,YAAP,CAAoBC,IAApB,CAAyBJ,MAAzB,CAAX;AACAJ,IAAAA,IAAI,CAACS,IAAL,CAAU;AACRnB,MAAAA,EAAE,EAAEe,QAAQ,CAAC,QAAD,CADJ;AAERK,MAAAA,KAAK,EAAEL,QAAQ,CAAC,UAAD,CAFP;AAGRM,MAAAA,SAAS,EAAEN,QAAQ,CAAC,MAAD,CAHX;AAIRO,MAAAA,SAAS,EAAEP,QAAQ,CAAC,aAAD,CAJX;AAKRQ,MAAAA,WAAW,EAAER,QAAQ,CAAC,cAAD,CALb;AAMRS,MAAAA,QAAQ,EAAET,QAAQ,CAAC,WAAD;AANV,KAAV;;AASAD,IAAAA,MAAM,CAACW,UAAP,CAAkBC,OAAlB,CAA0BC,IAAI,IAAI;AAChCX,MAAAA,EAAE,GAAGY,UAAU,CAACD,IAAI,CAACV,YAAL,CAAkB,WAAlB,CAAD,CAAf;;AACA,UAAI,CAACrB,MAAM,CAACoB,EAAD,CAAX,EAAiB;AACfP,QAAAA,IAAI,CAACU,IAAL,CAAU,CACR,yBAASQ,IAAI,CAACV,YAAL,CAAkB,aAAlB,CAAT,CADQ,EAERD,EAFQ,CAAV;AAID;AACF,KARD;AASD;;AAED,SAAO;AACLP,IAAAA,IAAI,EAAEA,IAAI,CAACoB,IAAL,CAAUC,0BAAV,CADD;AAELpB,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CAlCD;;AAoCA,MAAMqB,eAAe,GAAG,OAAiBrB,IAAjB;AAAA,MAAC;AAACsB,IAAAA,KAAD;AAAQZ,IAAAA;AAAR,GAAD;AAAA,SAA2B;AACjDV,IAAAA,IAAI,EAAEuB,iBAAQC,MAAR,CAAexB,IAAf,EAAqBU,KAArB,CAD2C;AAEjDe,IAAAA,QAAQ,EAAEpC,WAAW,CAACiC,KAAD;AAF4B,GAA3B;AAAA,CAAxB;;AAKA,MAAMI,YAAY,GAAG;AACnBC,EAAAA,QAAQ,CAACjC,GAAD,EAAMkC,MAAN,EAAc;AACpB,UAAM;AAAE7B,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBP,OAAO,CAACC,GAAD,CAA9B;AAAA,UACEmC,UAAU,GAAGR,eAAe,CAACO,MAAD,EAAS5B,IAAT,CAD9B;;AAGA,WAAO;AACL8B,MAAAA,MAAM,EAAE,2BAAc;AACpBF,QAAAA,MADoB;AACZ7B,QAAAA,IADY;AACN8B,QAAAA;AADM,OAAd;AADH,KAAP;AAKD,GAVkB;;AAYnBE,EAAAA,QAAQ,CAACrC,GAAD,EAAMkC,MAAN,EAAc;AACnB,UAAM;AAAEN,MAAAA,KAAF;AAASZ,MAAAA,KAAT;AAAgBsB,MAAAA;AAAhB,QAA6BJ,MAAnC;AAAA,UACEK,KAAK,GAAGD,QAAQ,GAAGA,QAAH,GAActB,KADhC;AAAA,UAEE;AAAEX,MAAAA;AAAF,QAAWN,OAAO,CAACC,GAAD,CAFpB;;AAGA,WAAOb,OAAO,GACXqD,SADI,CACM;AAAEC,MAAAA,IAAI,EAAEC;AAAR,KADN,EAEJC,SAFI,CAEMf,KAFN,EAEavB,IAFb,EAEmBkC,KAFnB,EAGJK,OAHI,EAAP;AAIF;;AApBkB,CAArB;eAuBeZ,Y","sourcesContent":["\r\nimport crConfigType1 from '../../charts/crConfigType1'\r\nimport {\r\n  ymdToUTC,\r\n  findMinY\r\n} from '../AdapterFn';\r\nimport { compareByDate } from '../compareByFn';\r\nimport fnDescr from './fnDescr'\r\n\r\nconst { Builder } = crConfigType1\r\n, _parser = new window.DOMParser()\r\n, _isNaN = Number.isNaN;\r\n\r\n//â‚¬\r\n\r\nconst _crZhConfig = id => ({\r\n  id: id,\r\n  key: id,\r\n  dataSource: \"INSEE\"\r\n});\r\n\r\nconst _toData = (str) => {\r\n  const xml = _parser.parseFromString(str, 'text/xml')\r\n      , series = xml.getElementsByTagName('Series')\r\n      , data = [], info = [];\r\n  let i=0, max = series.length\r\n  , _seria, _getAttr, _v;\r\n\r\n  for(i; i<max; i++){\r\n    _seria = series[i]\r\n    _getAttr = _seria.getAttribute.bind(_seria)\r\n    info.push({\r\n      id: _getAttr('IDBANK'),\r\n      title: _getAttr('TITLE_EN'),\r\n      frequency: _getAttr('FREQ'),\r\n      updatedOn: _getAttr('LAST_UPDATE'),\r\n      unitMeasure: _getAttr('UNIT_MEASURE'),\r\n      unitMult: _getAttr('UNIT_MULT')\r\n    })\r\n\r\n    _seria.childNodes.forEach(node => {\r\n      _v = parseFloat(node.getAttribute('OBS_VALUE'))\r\n      if (!_isNaN(_v)) {\r\n        data.push([\r\n          ymdToUTC(node.getAttribute('TIME_PERIOD')),\r\n          _v\r\n        ])\r\n      }\r\n    })\r\n  }\r\n\r\n  return {\r\n    data: data.sort(compareByDate),\r\n    info: info\r\n  };\r\n}\r\n\r\nconst _crConfigOption = ({value, title}, info) => ({\r\n  info: fnDescr.toInfo(info, title),\r\n  zhConfig: _crZhConfig(value)\r\n})\r\n\r\nconst InseeAdapter = {\r\n  toConfig(str, option) {\r\n    const { data, info } = _toData(str)\r\n    , confOption = _crConfigOption(option, info);\r\n\r\n    return {\r\n      config: crConfigType1({\r\n        option, data, confOption\r\n      })\r\n     };\r\n  },\r\n\r\n  toSeries(str, option) {\r\n     const { value, title, subtitle } = option\r\n     , _text = subtitle ? subtitle : title\r\n     , { data } = _toData(str);\r\n     return Builder()\r\n       .initSeria({ minY: findMinY })\r\n       .addPoints(value, data, _text)\r\n       .toSeria();\r\n  }\r\n}\r\n\r\nexport default InseeAdapter\r\n"],"file":"InseeAdapter.js"}