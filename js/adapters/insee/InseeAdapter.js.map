{"version":3,"sources":["../../../src/adapters/insee/InseeAdapter.js"],"names":["ymdToUTC","AdapterFn","compareByDate","valueMoving","findMinY","_parser","window","DOMParser","_crZhConfig","id","key","dataSource","_toData","str","xml","parseFromString","series","getElementsByTagName","data","info","i","max","length","_seria","_v","push","getAttribute","title","frequency","updatedOn","unitMeasure","unitMult","childNodes","forEach","node","parseFloat","Number","isNaN","sort","InseeAdapter","toConfig","option","value","subtitle","config","areaConfig","spacingTop","addCaption","addPoints","addMinMax","add","fnDescr","toInfo","zhConfig","toSeries","_text","initSeria","minY","toSeria"],"mappings":"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","sourcesContent":["import AdapterFn from '../AdapterFn'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport fnDescr from './fnDescr'\r\n\r\nconst {\r\n  ymdToUTC,\r\n  compareByDate,\r\n  valueMoving,\r\n  findMinY\r\n} = AdapterFn\r\n\r\nconst _parser = new window.DOMParser();\r\n\r\n//â‚¬\r\n\r\nconst _crZhConfig = id => ({\r\n  id: id,\r\n  key: id,\r\n  dataSource: \"INSEE\"\r\n});\r\n\r\nconst _toData = (str) => {\r\n  const xml = _parser.parseFromString(str, 'text/xml')\r\n      , series = xml.getElementsByTagName('Series')\r\n      , data = [], info = [];\r\n  let i=0, max = series.length\r\n  , _seria, _v;\r\n\r\n  for(i; i<max; i++){\r\n    _seria = series[i]\r\n    info.push({\r\n      id: _seria.getAttribute('IDBANK'),\r\n      title: _seria.getAttribute('TITLE_EN'),\r\n      frequency: _seria.getAttribute('FREQ'),\r\n      updatedOn: _seria.getAttribute('LAST_UPDATE'),\r\n      unitMeasure: _seria.getAttribute('UNIT_MEASURE'),\r\n      unitMult: _seria.getAttribute('UNIT_MULT')\r\n    })\r\n\r\n    _seria.childNodes.forEach(node => {\r\n      _v = parseFloat(node.getAttribute('OBS_VALUE'))\r\n      if (!Number.isNaN(_v)) {\r\n        data.push([\r\n          ymdToUTC(node.getAttribute('TIME_PERIOD')),\r\n          _v\r\n        ])\r\n      }\r\n    })\r\n  }\r\n\r\n  return {\r\n    data: data.sort(compareByDate),\r\n    info: info\r\n  };\r\n}\r\n\r\nconst InseeAdapter = {\r\n  toConfig(str, option) {\r\n    const { value, title, subtitle } = option\r\n        , { data, info } = _toData(str)\r\n        , config = Builder()\r\n            .areaConfig({ spacingTop: 25 })\r\n            .addCaption(title, subtitle)\r\n            .addPoints(value, data)\r\n            .addMinMax(data, option)\r\n            .add({\r\n              info: fnDescr.toInfo(info, title),\r\n              valueMoving: valueMoving(data),\r\n              zhConfig: _crZhConfig(value)\r\n            })\r\n            .toConfig();\r\n\r\n    return { config };\r\n  },\r\n\r\n  toSeries(str, option) {\r\n     const { value, title, subtitle } = option\r\n     , _text = subtitle ? subtitle : title\r\n     , { data } = _toData(str);\r\n     return Builder()\r\n       .initSeria({ minY: findMinY })\r\n       .addPoints(value, data, _text)\r\n       .toSeria();\r\n  }\r\n}\r\n\r\nexport default InseeAdapter\r\n"],"file":"InseeAdapter.js"}