{"version":3,"sources":["../../../src/adapters/insee/InseeAdapter.js"],"names":["Builder","crConfigType1","ymdToUTC","AdapterFn","compareByDate","findMinY","_parser","window","DOMParser","_crZhConfig","id","key","dataSource","_toData","str","xml","parseFromString","series","getElementsByTagName","data","info","i","max","length","_seria","_getAttr","_v","getAttribute","bind","push","title","frequency","updatedOn","unitMeasure","unitMult","childNodes","forEach","node","parseFloat","Number","isNaN","sort","_crConfigOption","value","fnDescr","toInfo","zhConfig","InseeAdapter","toConfig","option","confOption","config","toSeries","subtitle","_text","initSeria","minY","addPoints","toSeria"],"mappings":"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","sourcesContent":["\r\nimport crConfigType1 from '../../charts/crConfigType1'\r\nimport AdapterFn from '../AdapterFn'\r\nimport fnDescr from './fnDescr'\r\n\r\nconst { Builder } = crConfigType1\r\n, {\r\n  ymdToUTC,\r\n  compareByDate,\r\n  findMinY\r\n} = AdapterFn\r\n, _parser = new window.DOMParser();\r\n\r\n//â‚¬\r\n\r\nconst _crZhConfig = id => ({\r\n  id: id,\r\n  key: id,\r\n  dataSource: \"INSEE\"\r\n});\r\n\r\nconst _toData = (str) => {\r\n  const xml = _parser.parseFromString(str, 'text/xml')\r\n      , series = xml.getElementsByTagName('Series')\r\n      , data = [], info = [];\r\n  let i=0, max = series.length\r\n  , _seria, _getAttr, _v;\r\n\r\n  for(i; i<max; i++){\r\n    _seria = series[i]\r\n    _getAttr = _seria.getAttribute.bind(_seria)\r\n    info.push({\r\n      id: _getAttr('IDBANK'),\r\n      title: _getAttr('TITLE_EN'),\r\n      frequency: _getAttr('FREQ'),\r\n      updatedOn: _getAttr('LAST_UPDATE'),\r\n      unitMeasure: _getAttr('UNIT_MEASURE'),\r\n      unitMult: _getAttr('UNIT_MULT')\r\n    })\r\n\r\n    _seria.childNodes.forEach(node => {\r\n      _v = parseFloat(node.getAttribute('OBS_VALUE'))\r\n      if (!Number.isNaN(_v)) {\r\n        data.push([\r\n          ymdToUTC(node.getAttribute('TIME_PERIOD')),\r\n          _v\r\n        ])\r\n      }\r\n    })\r\n  }\r\n\r\n  return {\r\n    data: data.sort(compareByDate),\r\n    info: info\r\n  };\r\n}\r\n\r\nconst _crConfigOption = ({value, title}, info) => ({\r\n  info: fnDescr.toInfo(info, title),\r\n  zhConfig: _crZhConfig(value)\r\n})\r\n\r\nconst InseeAdapter = {\r\n  toConfig(str, option) {\r\n    const { data, info } = _toData(str)\r\n    , confOption = _crConfigOption(option, info);\r\n\r\n    return {\r\n      config: crConfigType1({\r\n        option, data, confOption\r\n      })\r\n     };\r\n  },\r\n\r\n  toSeries(str, option) {\r\n     const { value, title, subtitle } = option\r\n     , _text = subtitle ? subtitle : title\r\n     , { data } = _toData(str);\r\n     return Builder()\r\n       .initSeria({ minY: findMinY })\r\n       .addPoints(value, data, _text)\r\n       .toSeria();\r\n  }\r\n}\r\n\r\nexport default InseeAdapter\r\n"],"file":"InseeAdapter.js"}