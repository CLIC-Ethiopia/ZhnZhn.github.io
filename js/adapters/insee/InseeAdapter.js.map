{"version":3,"sources":["../../../src/adapters/insee/InseeAdapter.js"],"names":["_parser","window","DOMParser","_crZhConfig","id","key","isWithLegend","dataSource","_toData","str","xml","parseFromString","series","getElementsByTagName","data","info","i","max","length","_seria","_v","minClose","Number","POSITIVE_INFINITY","maxClose","NEGATIVE_INFINITY","push","getAttribute","title","frequency","updatedOn","unitMeasure","unitMult","childNodes","forEach","parseFloat","node","isNaN","ymdToUTC","sort","compareByDate","InseeAdapter","toConfig","option","value","subtitle","config","initBaseArea","add","spacingTop","addCaption","addPoints","setMinMax","toInfo","valueMoving","zhConfig","zhFnAddSeriesSma","zhFnRemoveSeries","toSeries","_text","initBaseSeria"],"mappings":"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","file":"InseeAdapter.js","sourcesContent":["import AdapterFn from '../AdapterFn'\r\n\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\n\r\nimport { fnAddSeriesSma, fnRemoveSeries } from '../IndicatorSma'\r\nimport fnDescr from './fnDescr'\r\n\r\nconst _parser = new window.DOMParser();\r\n\r\n//â‚¬\r\n\r\nconst _crZhConfig = id => ({\r\n  id: id,\r\n  key: id,\r\n  isWithLegend: false,\r\n  dataSource: \"INSEE\"\r\n});\r\n\r\nconst _toData = (str) => {\r\n  const xml = _parser.parseFromString(str, 'text/xml')\r\n      , series = xml.getElementsByTagName('Series')\r\n      , data = [], info = [];\r\n  let i=0, max = series.length, _seria, _v\r\n    , minClose = Number.POSITIVE_INFINITY\r\n    , maxClose = Number.NEGATIVE_INFINITY;\r\n  for(i; i<max; i++){\r\n    _seria = series[i]\r\n    info.push({\r\n      id: _seria.getAttribute('IDBANK'),\r\n      title: _seria.getAttribute('TITLE_EN'),\r\n      frequency: _seria.getAttribute('FREQ'),\r\n      updatedOn: _seria.getAttribute('LAST_UPDATE'),\r\n      unitMeasure: _seria.getAttribute('UNIT_MEASURE'),\r\n      unitMult: _seria.getAttribute('UNIT_MULT')\r\n    })\r\n\r\n    _seria.childNodes.forEach(node => {\r\n      _v = parseFloat(node.getAttribute('OBS_VALUE'))\r\n      if (!Number.isNaN(_v)) {\r\n        data.push([\r\n          AdapterFn.ymdToUTC(node.getAttribute('TIME_PERIOD')),\r\n          _v\r\n        ])\r\n\r\n        if (minClose > _v) {\r\n          minClose = _v\r\n        }\r\n        if (maxClose < _v ) {\r\n          maxClose = _v\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  return {\r\n    data: data.sort(AdapterFn.compareByDate),\r\n    info: info,\r\n    minClose, maxClose\r\n  };\r\n}\r\n\r\nconst InseeAdapter = {\r\n  toConfig(str, option) {\r\n    const { value, title, subtitle } = option\r\n        , { data, info, minClose, maxClose } = _toData(str)\r\n        , config = ConfigBuilder()\r\n            .initBaseArea()\r\n            .add('chart', { spacingTop: 25 })\r\n            .addCaption(title, subtitle)\r\n            .addPoints(value, data)\r\n            .setMinMax(minClose, maxClose)\r\n            .add({\r\n              info: fnDescr.toInfo(info, title),\r\n              valueMoving: AdapterFn.valueMoving(data),\r\n              zhConfig: _crZhConfig(value),\r\n              zhFnAddSeriesSma: fnAddSeriesSma,\r\n              zhFnRemoveSeries: fnRemoveSeries\r\n            })\r\n            .toConfig();\r\n\r\n    return { config };\r\n  },\r\n\r\n  toSeries(str, option) {\r\n     const { value, title, subtitle } = option\r\n         , _text = subtitle ? subtitle : title\r\n         , { data } = _toData(str);\r\n      return ConfigBuilder()\r\n        .initBaseSeria()\r\n        .addPoints(value, data, _text)\r\n        .toConfig();\r\n  }\r\n}\r\n\r\nexport default InseeAdapter\r\n"]}