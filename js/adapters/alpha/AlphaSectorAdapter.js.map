{"version":3,"sources":["../../../src/adapters/alpha/AlphaSectorAdapter.js"],"names":["C","PN_RT","PN_MD","PN_LR","TITLE","ID","M_PERIOD","t","r","Y_PERIOD","_isInArray","arr","value","max","length","i","indexOf","_initRows","sectors","map","str","Sector","_addToRows","rows","obj","pn","forEach","parseFloat","_crConfig","json","forSectors","Object","keys","slices","mRows","yRows","k","mPropName","yPropName","M_HEADERS","name","style","fontWeight","isR","Y_HEADERS","_crTitle","md","lr","AlphaSectorAdapter","toConfig","option","id","config","zhCompType","zhConfig","key","m","title","headers","y","toSeries","Error"],"mappings":"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","sourcesContent":["\r\nconst C = {\r\n  PN_RT: 'Rank A: Real-Time Performance',\r\n  PN_MD: 'Meta Data',\r\n  PN_LR: 'Last Refreshed',\r\n  TITLE: 'S&P 500 Performance by Sector',\r\n  ID: 'alp_perf'\r\n};\r\n\r\nconst M_PERIOD = [\r\n  { t: 'Real-Time', r: 'RT' },\r\n  { t: '1 Day', r: '1D' },\r\n  { t: '5 Day', r: '5D' },\r\n  { t: '1 Month', r: '1M' },\r\n  { t: '3 Month', r: '3M'},\r\n  { t: 'YTD', r: 'YTD' },\r\n  { t: '1 Year', r: '1Y' }\r\n];\r\nconst Y_PERIOD = [\r\n  { t: '1 Year', r: '1Y' },\r\n  { t: '3 Year', r: '3Y' },\r\n  { t: '5 Year', r: '5Y' },\r\n  { t: '10 Year', r: '10Y' }\r\n];\r\n\r\nconst _isInArray = function(arr=[], value){\r\n  const max = arr.length;\r\n  let i=0;\r\n  for (; i<max; i++){\r\n    if (value.indexOf(arr[i].t) !== -1){\r\n      return arr[i].r;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst _initRows = (sectors) => {\r\n  return sectors.map(str => {\r\n    return { Sector: str };\r\n  })\r\n}\r\n\r\nconst _addToRows = (rows, obj, pn) => {\r\n  rows.forEach(r => {\r\n    r[pn] = parseFloat(obj[r.Sector]);\r\n  })\r\n}\r\n\r\nconst _crConfig = (json) => {\r\n  const forSectors = json[C.PN_RT]\r\n      , sectors = Object.keys(forSectors)\r\n      , slices = Object.keys(json)\r\n      , mRows = _initRows(sectors)\r\n      , yRows = _initRows(sectors);\r\n  slices.forEach(k => {\r\n    const mPropName = _isInArray(M_PERIOD, k)\r\n    if (mPropName) {\r\n      _addToRows(mRows, json[k], mPropName)\r\n    }\r\n    const yPropName = _isInArray(Y_PERIOD, k)\r\n    if (yPropName) {\r\n      _addToRows(yRows, json[k], yPropName)\r\n    }\r\n  })\r\n  return { mRows, yRows };\r\n}\r\n\r\nconst M_HEADERS = [{\r\n  name: 'Sector',\r\n  pn: 'Sector',\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n },{\r\n   name: 'RT',\r\n   pn: 'RT',\r\n   isR: true\r\n },{\r\n   name: '1D',\r\n   pn: '1D',\r\n   isR: true\r\n },{\r\n   name: '5D',\r\n   pn: '5D',\r\n   isR: true\r\n },{\r\n   name: '1M',\r\n   pn: '1M',\r\n   isR: true\r\n },{\r\n   name: '3M',\r\n   pn: '3M',\r\n   isR: true\r\n },{\r\n   name: 'YTD',\r\n   pn: 'YTD',\r\n   isR: true\r\n },{\r\n   name: '1Y',\r\n   pn: '1Y',\r\n   isR: true\r\n }\r\n];\r\nconst Y_HEADERS = [{\r\n  name: 'Sector',\r\n  pn: 'Sector',\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n},{\r\n  name: '1Y',\r\n  pn: '1Y',\r\n  isR: true\r\n},{\r\n  name: '3Y',\r\n  pn: '3Y',\r\n  isR: true\r\n},{\r\n  name: '5Y',\r\n  pn: '5Y',\r\n  isR: true\r\n},{\r\n  name: '10Y',\r\n  pn: '10Y',\r\n  isR: true\r\n}];\r\n\r\nconst _crTitle = (json) => {\r\n  const md = json[C.PN_MD] || {}\r\n      , lr = md[C.PN_LR] || '';\r\n  return `${C.TITLE} ${lr}`;\r\n}\r\n\r\nconst AlphaSectorAdapter = {\r\n  toConfig(json, option) {\r\n    const id = C.ID\r\n        , { mRows, yRows } = _crConfig(json)\r\n        , config = {\r\n          id: id,\r\n          zhCompType: 'ALPHA_PERF',\r\n          zhConfig: {\r\n            id: id, key: id\r\n          },\r\n          m: {\r\n            id: `${id}_m`,\r\n            title: _crTitle(json),\r\n            headers: M_HEADERS,\r\n            rows: mRows,\r\n          },\r\n          y: {\r\n            id: `${id}_y`,\r\n            title: `${C.TITLE} Yearly`,\r\n            headers: Y_HEADERS,\r\n            rows: yRows,\r\n          }\r\n        };\r\n\r\n    return { config };\r\n  },\r\n\r\n  toSeries(json, option) {\r\n    throw new Error('ZH_1000');\r\n  }\r\n}\r\n\r\nexport default AlphaSectorAdapter\r\n"],"file":"AlphaSectorAdapter.js"}