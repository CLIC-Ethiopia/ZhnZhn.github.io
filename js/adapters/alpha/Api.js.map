{"version":3,"sources":["../../../src/adapters/alpha/Api.js"],"names":["ROOT","DF_TICKET","DF_SIZE","DF_PERIOD","ERR_PROP","REQ_ERROR","_assign","Object","assign","_isArr","Array","isArray","_getOneTwo","value","outputsize","items","_crSectorQuery","_crIntradayQuery","option","ticket","interval","title","itemCaption","_crDailyQuery","_crIncomeQuery","_symbol","replace","dfItem","dfPeriod","_crEarningQuery","_crDfQuery","period","_routerQuery","DF","SECTOR","TIME_SERIES_INTRADAY","TIME_SERIES_DAILY","TIME_SERIES_DAILY_ADJUSTED","INCOME_STATEMENT","BALANCE_SHEET","CASH_FLOW","EARNINGS","AlphaApi","getRequestUrl","indicator","dfFn","apiKey","_crQuery","_queryParam","checkResponse","json"],"mappings":"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","sourcesContent":["import isEmpty from '../../utils/isEmpty';\r\nimport {\r\n  crError,\r\n  getValue,\r\n  getCaption,\r\n  joinBy\r\n} from './fnAdapter';\r\n\r\nconst ROOT = 'https://www.alphavantage.co/query'\r\n, DF_TICKET = 'MSFT'\r\n, DF_SIZE = 'compact'\r\n, DF_PERIOD = '50'\r\n, ERR_PROP = 'Error Message'\r\n, REQ_ERROR = 'Request Error'\r\n\r\n, _assign = Object.assign\r\n, _isArr = Array.isArray;\r\n\r\n\r\nconst _getOneTwo = ({ value, outputsize, items }) => {\r\n  return _isArr(items)\r\n    ? [getValue(items[0]), getValue(items[1])]\r\n    //Stocks by Sectors case\r\n    : [value || DF_TICKET, outputsize || DF_SIZE];\r\n};\r\n\r\nconst _crSectorQuery = () => {};\r\nconst _crIntradayQuery = option => {\r\n  const [ticket, interval] = _getOneTwo(option)\r\n  , title = `${ticket} (${interval})`;\r\n  _assign(option, {\r\n    ticket, interval,\r\n    title, itemCaption: title\r\n  })\r\n  return `interval=${interval}&symbol=${ticket}`;\r\n};\r\nconst _crDailyQuery = option => {\r\n  const [ticket, outputsize] = _getOneTwo(option)\r\n  , title = `${ticket} (Daily)`;\r\n  _assign(option, {\r\n     ticket, outputsize, interval: \"Daily\",\r\n     title, itemCaption: title\r\n   })\r\n  return `outputsize=${outputsize}&symbol=${ticket}`;\r\n};\r\nconst _crIncomeQuery = option => {\r\n  const { items, itemCaption } = option\r\n  , _symbol = getValue(items[0]);\r\n  _assign(option, {\r\n    itemCaption: itemCaption.replace(getCaption(items[0]), _symbol),\r\n    dfItem: getValue(items[1]),\r\n    dfPeriod: getValue(items[2])\r\n  })\r\n  return `symbol=${_symbol}`;\r\n};\r\nconst _crEarningQuery = option => {\r\n  const { items } = option\r\n  , _symbol = getValue(items[0]);\r\n  _assign(option, {\r\n    itemCaption: _symbol,\r\n    dfPeriod: getValue(items[1])\r\n  })\r\n  return `symbol=${_symbol}`;\r\n};\r\nconst _crDfQuery = ({\r\n  ticket=DF_TICKET,\r\n  period=DF_PERIOD\r\n}) => `symbol=${ticket}&interval=daily&time_period=${period}&series_type=close`;\r\n\r\nconst _routerQuery = {\r\n  DF: _crDfQuery,\r\n  SECTOR: _crSectorQuery,\r\n  TIME_SERIES_INTRADAY: _crIntradayQuery,\r\n\r\n  TIME_SERIES_DAILY: _crDailyQuery,\r\n  TIME_SERIES_DAILY_ADJUSTED: _crDailyQuery,\r\n\r\n  INCOME_STATEMENT: _crIncomeQuery,\r\n  BALANCE_SHEET: _crIncomeQuery,\r\n  CASH_FLOW: _crIncomeQuery,\r\n\r\n  EARNINGS: _crEarningQuery\r\n};\r\n\r\nconst AlphaApi = {\r\n  getRequestUrl(option) {\r\n    const { indicator='SMA', dfFn=indicator, apiKey } = option\r\n    , _crQuery = _routerQuery[dfFn] || _routerQuery.DF\r\n    , _queryParam = joinBy('&',\r\n        `function=${dfFn}`,\r\n        _crQuery(option),\r\n        `apikey=${apiKey}`\r\n    );\r\n    return `${ROOT}?${_queryParam}`;\r\n  },\r\n\r\n  checkResponse(json){\r\n    if (isEmpty(json)) {\r\n      throw crError();\r\n    }\r\n    if (json[ERR_PROP]) {\r\n      throw crError(REQ_ERROR, json[ERR_PROP]);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default AlphaApi\r\n"],"file":"Api.js"}