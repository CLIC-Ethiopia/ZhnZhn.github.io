{"version":3,"sources":["../../../src/adapters/alpha/IntradayAdapter.js"],"names":["crIntradayConfigOption","fnAdapter","INTRADAY","DAILY_ADJUSTED","_getKeys","Object","keys","_crSeriaOptions","dfT","isFilterZero","_isAdjusted","notFilterZero","isDividend","toUTC","ymdhmsToUTC","pnClose","pnVolume","PN_DIVIDENT","PN_ADJ_CLOSE","_addDividendPointTo","arr","dateMs","p","_strDivident","_exValue","parseFloat","push","ChartConfig","crMarkerExDividend","x","exValue","price","_notZeros","v1","v2","_getObjValues","json","option","interval","_propName","_crSeriaData","_objValues","_dateKeys","sort","dC","dH","dL","dO","dDividend","dVc","dV","i","_max","length","minClose","Number","POSITIVE_INFINITY","maxClose","NEGATIVE_INFINITY","_dateMs","_date","_point","_open","_high","_low","_closeV","_close","_volume","y","open","close","volume","date","_crDataDaily","data","IntradayAdapter","crKey","_itemKey","toConfig","title","dfFn","dataSource","isNotZoomToMinMax","isDrawDeltaExtrems","seriaType","seriaColor","seriaWidth","replace","dataDaily","config","stockConfig","addCaption","add","id","addDividend","toSeries","Builder","crSeria","adapter","type"],"mappings":"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","sourcesContent":["import ChartConfig from '../../charts/ChartConfig'\r\nimport Builder from '../../charts/ConfigBuilder'\r\nimport { ymdhmsToUTC } from '../AdapterFn'\r\nimport { crVolumePoint } from '../pointFn'\r\nimport {\r\n  crMarkerColor,\r\n  crDataDaily\r\n} from '../IntradayFns';\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst { crIntradayConfigOption } = fnAdapter;\r\n\r\nconst INTRADAY = 'INTRADAY';\r\nconst DAILY_ADJUSTED = 'DAILY_ADJUSTED';\r\n\r\nconst _getKeys = Object.keys;\r\n\r\nconst _crSeriaOptions = ({\r\n  isFilterZero\r\n}, dfT) => {\r\n  const _isAdjusted = dfT === DAILY_ADJUSTED;\r\n  return {\r\n    notFilterZero: !isFilterZero,\r\n    isDividend: _isAdjusted,\r\n    toUTC: ymdhmsToUTC,\r\n    pnClose: _isAdjusted\r\n      ? '5. adjusted close'\r\n      : '4. close',\r\n    pnVolume: _isAdjusted\r\n      ? '6. volume'\r\n      : '5. volume'\r\n  };\r\n};\r\n\r\nconst PN_DIVIDENT = '7. dividend amount';\r\nconst PN_ADJ_CLOSE = '5. adjusted close';\r\nconst _addDividendPointTo = (arr, dateMs, p) => {\r\n  const _strDivident = p[PN_DIVIDENT]\r\n  , _exValue = _strDivident && parseFloat(_strDivident);\r\n  if (_exValue) {\r\n    arr.push({\r\n      ...ChartConfig.crMarkerExDividend(), ...{\r\n         x: dateMs,\r\n         exValue: _exValue,\r\n         price: parseFloat(p[PN_ADJ_CLOSE])\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\nconst _notZeros = (v1, v2) => v1 !== 0 && v2 !== 0;\r\n\r\nconst _getObjValues = (json, option) => {\r\n  const { interval } = option\r\n  , _propName = `Time Series (${interval})`;\r\n  return json[_propName];\r\n};\r\n\r\nconst _crSeriaData = (json, option, dfT) => {\r\n  const _objValues = _getObjValues(json, option)\r\n  , _dateKeys = _objValues\r\n      ? _getKeys(_objValues).sort()\r\n      : []\r\n  , dC = [], dH = [], dL = [], dO = []\r\n  , dDividend = []\r\n  , dVc = [], dV = []\r\n  , {\r\n    notFilterZero, isDividend,\r\n    toUTC, pnClose, pnVolume\r\n  } = _crSeriaOptions(option, dfT);\r\n\r\n  let i = 0, _max = _dateKeys.length\r\n  , minClose = Number.POSITIVE_INFINITY\r\n  , maxClose = Number.NEGATIVE_INFINITY\r\n  , _dateMs\r\n  , _date, _point\r\n  , _open, _high, _low, _closeV, _close, _volume ;\r\n  for (i; i<_max; i++) {\r\n    _date = _dateKeys[i]\r\n    _point = _objValues[_date]\r\n    _closeV = parseFloat(_point['4. close'])\r\n    _close = parseFloat(_point[pnClose])\r\n\r\n    if (notFilterZero || _notZeros(_closeV, _close) ) {\r\n      _open = parseFloat(_point['1. open'])\r\n      _high = parseFloat(_point['2. high'])\r\n      _low = parseFloat(_point['3. low'])\r\n      _volume = parseFloat(_point[pnVolume])\r\n\r\n      _dateMs = toUTC(_date)\r\n      dC.push({\r\n        x: _dateMs,\r\n        y: _close,\r\n        ...crMarkerColor(_date)\r\n      })\r\n\r\n      dH.push([_dateMs, _high])\r\n      dL.push([_dateMs, _low])\r\n      dO.push([_dateMs, _open])\r\n\r\n      dV.push([_dateMs, _volume])\r\n      dVc.push(\r\n          crVolumePoint({\r\n             open: _open,\r\n             close: _closeV,\r\n             volume: _volume,\r\n             date: _dateMs,\r\n             option: { _high: _high, _low: _low }\r\n          })\r\n      )\r\n      if (isDividend) {\r\n        _addDividendPointTo(dDividend, _dateMs, _point)\r\n      }\r\n\r\n      if (minClose > _close ) { minClose = _close }\r\n      if (maxClose < _close ) { maxClose = _close }\r\n    }\r\n  }\r\n  return {\r\n    dC, dH, dL, dO,\r\n    dDividend,\r\n    minClose, maxClose,\r\n    dVc, dV\r\n  };\r\n}\r\n\r\nconst _crDataDaily = (dfT, data) => dfT === INTRADAY\r\n  ? crDataDaily(data)\r\n  : data;\r\n\r\nconst IntradayAdapter = {\r\n  crKey: ({ _itemKey }) => _itemKey,\r\n  toConfig(json, option){\r\n    const {\r\n      _itemKey, title,\r\n      dfFn,\r\n      dataSource,\r\n      isNotZoomToMinMax,\r\n      isDrawDeltaExtrems,\r\n      seriaType,\r\n      seriaColor,\r\n      seriaWidth\r\n    } = option\r\n    , dfT = dfFn.replace('TIME_SERIES_', '')\r\n    , {\r\n        dC, dH, dL, dO,\r\n        minClose, maxClose,\r\n        dDividend,\r\n        dVc, dV\r\n      } = _crSeriaData(json, option, dfT)\r\n    , dataDaily  = _crDataDaily(dfT, dC);\r\n\r\n    const config = Builder()\r\n      .stockConfig(_itemKey, {\r\n        dC, dO, dH, dL,\r\n        minClose, maxClose,\r\n        dVc, dV,\r\n        isNotZoomToMinMax,\r\n        isDrawDeltaExtrems,\r\n        seriaType,\r\n        seriaColor,\r\n        seriaWidth\r\n      })\r\n      .addCaption(title)\r\n      .add(crIntradayConfigOption({\r\n          id: _itemKey,\r\n          data: dataDaily,\r\n          dataSource\r\n      }, option))\r\n      .addDividend(dDividend, minClose, maxClose)\r\n      .toConfig();\r\n\r\n    return { config };\r\n  },\r\n\r\n  toSeries(json, option){\r\n    return Builder.crSeria({\r\n      adapter: IntradayAdapter,\r\n      json, option,\r\n      type: 'line'\r\n    });\r\n  }\r\n}\r\n\r\nexport default IntradayAdapter\r\n"],"file":"IntradayAdapter.js"}