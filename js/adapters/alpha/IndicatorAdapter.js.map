{"version":3,"sources":["../../../src/adapters/alpha/IndicatorAdapter.js"],"names":["C","TWO_YEARS_DAYS","TA","MACD","MACD_S","MACD_H","STOCH","SLOW_K","SLOW_D","BBANDS","BBANDS_U","BBANDS_M","BBANDS_L","BLACK","color","RED","BLUE","COLOR_BLUE_A","GREEN","_assign","Object","assign","_crZhConfig","id","key","itemCaption","dataSource","_crValuePropName","indicator","_crValue","json","option","forDays","_indicator","value","dateKeys","keys","sort","reverse","_len","length","max","_toDataArrs","arrProp","i","j","_date","_x","_v","result","_maxProp","push","parseFloat","_crSplineSeria","data","name","ChartConfig","crSeria","type","visible","marker","symbol","_crSeriaData","_data","_crDfSeria","_crMacdSeries","_arrs","sMcad","sSignal","sHist","shadow","borderWidth","pointPlacement","pointPadding","groupPadding","turboThreshold","_crStochSeries","sSlowK","sSlowD","_crBbandsSeries","sMiddle","sUpper","sLow","_rSeries","DF","_toSeries","_crSeries","IndicatorAdapter","crKey","ticket","chartId","toConfig","_title","_series","config","area2Config","addSeries","add","zhConfig","isDrawDeltaExtrems","isNotZoomToMinMax","toSeries"],"mappings":"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","sourcesContent":["import { ymdToUTC } from '../AdapterFn';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\nimport Builder from '../../charts/ConfigBuilder';\r\n\r\nconst C = {\r\n  TWO_YEARS_DAYS: 501,\r\n  TA: 'Technical Analysis:',\r\n\r\n  MACD: 'MACD',\r\n  MACD_S: 'MACD_Signal',\r\n  MACD_H: 'MACD_Hist',\r\n\r\n  STOCH: 'STOCH',\r\n  SLOW_K: 'SlowK',\r\n  SLOW_D: 'SlowD',\r\n\r\n  BBANDS: 'BBANDS',\r\n  BBANDS_U: 'Real Upper Band',\r\n  BBANDS_M: 'Real Middle Band',\r\n  BBANDS_L: 'Real Lower Band',\r\n\r\n  BLACK: { color: 'black' },\r\n  RED: { color: '#f44336' },\r\n  BLUE: { color: 'rgb(47, 126, 216)' },\r\n  COLOR_BLUE_A: 'rgba(47, 126, 216, 0.75)',\r\n  GREEN: { color: '#4caf50' }\r\n}\r\n\r\nconst _assign = Object.assign\r\n\r\nconst _crZhConfig = (id) => ({\r\n  id: id,\r\n  key: id,\r\n  itemCaption: id,\r\n  dataSource: \"Alpha Vantage\"\r\n});\r\n\r\nconst _crValuePropName = (indicator) => {\r\n  switch(indicator){\r\n    case 'AD': return 'Chaikin A/D';\r\n    default: return indicator;\r\n  }\r\n};\r\n\r\nconst _crValue = ( json, option ) => {\r\n  const {\r\n          indicator,\r\n          forDays=C.TWO_YEARS_DAYS\r\n        } = option\r\n      , _indicator = _crValuePropName(indicator)\r\n      , value = json[`${C.TA} ${_indicator}`]\r\n      , dateKeys = value\r\n           ? Object.keys(value).sort().reverse()\r\n           : []\r\n      , _len = dateKeys.length\r\n      , max = _len < forDays\r\n          ? _len-1\r\n          : forDays;\r\n    return { value, dateKeys, max };\r\n}\r\n\r\nconst _toDataArrs = ({dateKeys, value, max}, arrProp) => {\r\n  let i, j, _date, _x, _v;\r\n\r\n  const result=[], _maxProp=arrProp.length;\r\n  for(j=0; j<_maxProp;j++) {\r\n    result.push([])\r\n  }\r\n\r\n  for(i=max; i>-1; i--) {\r\n    _date = dateKeys[i]\r\n    _x = ymdToUTC(_date)\r\n    _v = value[_date]\r\n    for(j=0; j<_maxProp; j++){\r\n      result[j].push([_x, parseFloat(_v[arrProp[j]])])\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nconst _crSplineSeria = ({ data, name }, option) =>\r\n  _assign(ChartConfig.crSeria(), {\r\n    data, name,\r\n    type: 'spline',\r\n    visible: true,\r\n    marker: {\r\n      symbol: 'circle'\r\n    }\r\n  }, option);\r\n\r\n\r\nconst _crSeriaData = (json, option) => {\r\n  const { indicator } = option\r\n      , _indicator = _crValuePropName(indicator)\r\n      , { value, dateKeys, max } = _crValue(json, option)\r\n      , _data = [];\r\n\r\n  let i=max, _date, _v;\r\n  for(; i>-1; i--) {\r\n    _date = dateKeys[i]\r\n    _v = parseFloat(value[_date][_indicator])\r\n    _data.push([ymdToUTC(_date), _v])\r\n  }\r\n\r\n  return _data;\r\n}\r\n\r\nconst _crDfSeria = (json, option ) => {\r\n  const { indicator } = option\r\n  , _data = _crSeriaData(json, option);\r\n  return _crSplineSeria({\r\n    data: _data,\r\n    name: indicator\r\n  });\r\n}\r\n\r\n\r\nconst _crMacdSeries = (json, option) => {\r\n  const _arrs = _toDataArrs(\r\n     _crValue(json, option),\r\n     [C.MACD, C.MACD_S, C.MACD_H]\r\n  )\r\n  , sMcad = _crSplineSeria({\r\n       data: _arrs[0], name: C.MACD\r\n    }, C.BLACK)\r\n  , sSignal = _crSplineSeria({\r\n       data: _arrs[1], name: C.MACD_S\r\n    }, C.RED)\r\n  , sHist = _assign(ChartConfig.crSeria(), {\r\n       color: C.COLOR_BLUE_A,\r\n       data: _arrs[2],\r\n       name: C.MACD_H,\r\n       type: 'column',\r\n       visible: false,\r\n       shadow: false,\r\n       borderWidth: 0,\r\n       pointPlacement: 'on',\r\n       pointPadding: 0,\r\n       groupPadding: 0,\r\n       turboThreshold: 20000\r\n    });\r\n\r\n  return [ sHist, sSignal, sMcad ];\r\n}\r\n\r\nconst _crStochSeries = (json, option) => {\r\n  const _arrs = _toDataArrs(\r\n    _crValue(json, option), [C.SLOW_K, C.SLOW_D]\r\n  )\r\n  , sSlowK = _crSplineSeria({\r\n      data: _arrs[0], name: C.SLOW_K\r\n    }, C.BLUE)\r\n , sSlowD = _crSplineSeria({\r\n      data: _arrs[1], name: C.SLOW_D\r\n   }, C.RED);\r\n\r\n  return [sSlowK, sSlowD];\r\n}\r\n\r\nconst _crBbandsSeries = (json, option) => {\r\n  const _arrs = _toDataArrs(\r\n      _crValue(json, option),\r\n      [C.BBANDS_M, C.BBANDS_U, C.BBANDS_L]\r\n    )\r\n    , sMiddle = _crSplineSeria({\r\n        data: _arrs[0], name: C.BBANDS_M\r\n      }, C.BLUE)\r\n   , sUpper = _crSplineSeria({\r\n        data: _arrs[1], name: C.BBANDS_U\r\n     }, C.GREEN)\r\n   , sLow = _crSplineSeria({\r\n          data: _arrs[2], name: C.BBANDS_L\r\n     }, C.RED);\r\n\r\n    return [sMiddle, sUpper, sLow];\r\n}\r\n\r\nconst _rSeries = {\r\n  DF: _crDfSeria,\r\n  [C.MACD]: _crMacdSeries,\r\n  [C.STOCH]: _crStochSeries,\r\n  [C.BBANDS]: _crBbandsSeries,\r\n}\r\n\r\nconst _toSeries = (json, option) => {\r\n  const _crSeries = _rSeries[option.indicator]\r\n    || _rSeries.DF;\r\n  return _crSeries(json, option);\r\n};\r\n\r\nconst IndicatorAdapter = {\r\n  crKey(option){\r\n    const { ticket, value } = option;\r\n    return (option.chartId = `${ticket}-${value}`);\r\n  },\r\n  toConfig(json, option) {\r\n    const { ticket, value, chartId } = option\r\n    //, _chartId = `${ticket}-${value}`\r\n    , _title = `${ticket}: ${value}`\r\n    , _series = _toSeries(json, option)\r\n    , config = Builder()\r\n        .area2Config(_title)\r\n        .addSeries(_series)\r\n        .add({ zhConfig: _crZhConfig(chartId) })\r\n        .toConfig();\r\n    return {\r\n      config,\r\n      isDrawDeltaExtrems: false,\r\n      isNotZoomToMinMax: false\r\n    };\r\n  },\r\n\r\n  toSeries: _toSeries\r\n};\r\n\r\nexport default IndicatorAdapter\r\n"],"file":"IndicatorAdapter.js"}