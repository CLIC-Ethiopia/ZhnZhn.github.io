{"version":3,"sources":["../../../src/adapters/alpha/AlphaIntradayAdapter.js"],"names":["C","TIME_START_DAY","TIME_END_DAY","START_DAY","END_DAY","CLOSE","HIGH","LOW","OPEN","_crZhConfig","id","key","isWithLegend","legend","stockSeriesLegend","dataSource","_fMarker","radius","enabled","fillColor","color","_fMarkerColor","date","marker","indexOf","undefined","_createSeriaData","json","option","config","chartId","interval","_propName","_value","_dateKeys","Object","keys","sort","i","_max","length","_data","_dataVolume","_dataVolumeColumn","_dataHigh","_dataLow","_dataOpen","_minClose","Number","POSITIVE_INFINITY","_maxClose","NEGATIVE_INFINITY","_dateMs","_date","_point","_open","_high","_low","_close","_volume","parseFloat","ymdhmsToUTC","push","x","y","volumeColumnPoint","open","close","volume","setStockSerias","setMinMax","assign","zhVolumeConfig","fIndicatorVolumeConfig","value","series","tooltip","fTooltip","fnVolumePointFormatterT","AlphaIntradayAdapter","toConfig","fBaseAreaConfig","_chartId","baseConfig","init","add","spacingTop","addCaption","addTooltip","fnBasePointFormatterT","isDrawDeltaExtrems","isNotZoomToMinMax","toSeries","Error"],"mappings":"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","file":"AlphaIntradayAdapter.js","sourcesContent":["\r\nimport ChartConfig from '../../charts/ChartConfig'\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport {\r\n  fnAddSeriesSma, fnRemoveSeries\r\n} from '../IndicatorSma';\r\n\r\nimport Chart from '../../charts/Chart'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nconst C = {\r\n  TIME_START_DAY: '09:30:00',\r\n  TIME_END_DAY: '16:00:00',\r\n\r\n  START_DAY: \"#90ed7d\",\r\n  END_DAY: \"#f7a35c\",\r\n  CLOSE: \"#2f7ed8\",\r\n  HIGH: \"#4caf50\",\r\n  LOW: \"#f44336\",\r\n  OPEN: \"#90ed7d\"\r\n}\r\n\r\nconst _crZhConfig = id => ({\r\n  id: id,\r\n  key: id,\r\n  isWithLegend: true,\r\n  legend: AdapterFn.stockSeriesLegend(),\r\n  dataSource: \"Alpha Vantage\"\r\n});\r\n\r\nconst _fMarker = color => ({\r\n  radius: 3,\r\n  enabled: true,\r\n  fillColor: color\r\n});\r\n\r\nconst _fMarkerColor = (date) => {\r\n  let marker, color;\r\n  if (date.indexOf(C.TIME_START_DAY) !== -1) {\r\n   marker = _fMarker(C.START_DAY)\r\n   color = C.START_DAY\r\n } else if (date.indexOf(C.TIME_END_DAY) !== -1) {\r\n    marker = _fMarker(C.END_DAY)\r\n    color = C.END_DAY\r\n  }  else {\r\n   marker = undefined\r\n   color = undefined\r\n  }\r\n  return { marker, color };\r\n}\r\n\r\nconst _createSeriaData = (json, option, config, chartId) => {\r\n  const { interval } = option\r\n  , _propName = `Time Series (${interval})`\r\n  , _value = json[_propName]\r\n  , _dateKeys = ( _value)\r\n       ? Object.keys(_value).sort()\r\n       : [];\r\n  let i = 0, _max = _dateKeys.length\r\n  , _data = []\r\n  , _dataVolume = [], _dataVolumeColumn = []\r\n  , _dataHigh = [], _dataLow = [], _dataOpen = []\r\n  , _minClose = Number.POSITIVE_INFINITY\r\n  , _maxClose = Number.NEGATIVE_INFINITY\r\n  , _dateMs\r\n  , _date, _point, _open, _high, _low, _close, _volume ;\r\n  for (i; i<_max; i++) {\r\n    _date = _dateKeys[i]\r\n    _point = _value[_date]\r\n    _open = parseFloat(_point['1. open'])\r\n    _high = parseFloat(_point['2. high'])\r\n    _low = parseFloat(_point['3. low'])\r\n    _close = parseFloat(_point['4. close'])\r\n    _volume = parseFloat(_point['5. volume'])\r\n\r\n    _dateMs =  AdapterFn.ymdhmsToUTC(_date)\r\n    _data.push({\r\n      x: _dateMs, y: _close, ..._fMarkerColor(_date)\r\n    })\r\n\r\n    _dataHigh.push([_dateMs, _high])\r\n    _dataLow.push([_dateMs, _low])\r\n    _dataOpen.push([_dateMs, _open])\r\n\r\n    _dataVolume.push([_dateMs, _volume])\r\n    _dataVolumeColumn.push(\r\n        AdapterFn.volumeColumnPoint({\r\n           open: _open, close: _close, volume: _volume,\r\n           date: _dateMs,\r\n           option: { _high: _high, _low: _low }\r\n        })\r\n    )\r\n\r\n    if (_minClose > _close) {\r\n      _minClose = _close\r\n    }\r\n    if (_maxClose < _close ) {\r\n      _maxClose = _close\r\n    }\r\n  }\r\n\r\n  ChartConfig.setStockSerias(\r\n    config, _data, _dataHigh, _dataLow, _dataOpen, chartId\r\n  )\r\n  ChartConfig.setMinMax(config, _minClose, _maxClose)\r\n\r\n  Object.assign(config, {\r\n    zhVolumeConfig: ChartConfig.fIndicatorVolumeConfig(\r\n      option.value, _dataVolumeColumn, _dataVolume\r\n    )\r\n  })\r\n  config.zhVolumeConfig.series[1].tooltip = Chart.fTooltip(Tooltip.fnVolumePointFormatterT)\r\n\r\n}\r\n\r\nconst AlphaIntradayAdapter = {\r\n  toConfig(json, option){\r\n    const baseConfig = ChartConfig.fBaseAreaConfig()\r\n        , { value, interval } = option\r\n        , _chartId = value;\r\n\r\n    _createSeriaData(json, option, baseConfig, _chartId );\r\n\r\n    const config = ConfigBuilder()\r\n      .init(baseConfig)\r\n      .add('chart', { spacingTop: 25 })\r\n      .addCaption(value, `Time Series (${interval})`)\r\n      .addTooltip(Tooltip.fnBasePointFormatterT)\r\n      .add('zhConfig', _crZhConfig())\r\n      .add('zhFnAddSeriesSma', fnAddSeriesSma)\r\n      .add('zhFnRemoveSeries', fnRemoveSeries)\r\n      .toConfig();\r\n\r\n    return {\r\n      config,\r\n      isDrawDeltaExtrems: false,\r\n      isNotZoomToMinMax: false\r\n    };\r\n  },\r\n\r\n  toSeries(json, option){\r\n    throw new Error('ZH_1000');\r\n  }\r\n}\r\n\r\nexport default AlphaIntradayAdapter\r\n"]}