{"version":3,"sources":["../../../src/adapters/alpha/AlphaIntradayAdapter.js"],"names":["ymdToUTC","AdapterFn","ymdhmsToUTC","volumeColumnPoint","crSeria","crMarkerColor","IntradayFns","crDataDaily","crIntradayConfigOption","fnAdapter","INTRADAY","DAILY_ADJUSTED","_crSeriaOptions","dfT","hasFilterZero","hasDividend","_isIntraday","_isAdjusted","notFilterZero","isDividend","toUTC","pnClose","pnVolume","PN_DIVIDENT","PN_ADJ_CLOSE","_addDividendPointTo","arr","dateMs","p","_exValue","parseFloat","push","ChartConfig","crMarkerExDividend","x","exValue","price","_notZeros","v1","v2","_getObjValues","json","option","interval","_propName","_crSeriaData","objValues","_dateKeys","Object","keys","sort","data","dH","dL","dO","dataDividend","dVolume","dColumn","i","_max","length","minClose","Number","POSITIVE_INFINITY","maxClose","NEGATIVE_INFINITY","_dateMs","_date","_point","_open","_high","_low","_closeV","_close","_volume","y","open","close","volume","date","_crChartOptions","dataDaily","seriaTooltip","Tooltip","fnBasePointFormatterT","fnBasePointFormatter","volumeTooltip","volumeDmyt","AlphaIntradayAdapter","toConfig","_chartId","value","dataSource","_objValues","minY","maxY","config","areaConfig","add","spacingTop","addCaption","addTooltip","addMinMax","setStockSerias","addDividend","addMiniVolume","id","tooltipColumn","Chart","fTooltip","toSeries","adapter","type"],"mappings":"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","sourcesContent":["\r\nimport ChartConfig from '../../charts/ChartConfig'\r\nimport ConfigBuilder from '../../charts/ConfigBuilder'\r\nimport AdapterFn from '../AdapterFn'\r\nimport IntradayFns from '../IntradayFns'\r\n\r\nimport Chart from '../../charts/Chart'\r\nimport Tooltip from '../../charts/Tooltip'\r\n\r\nimport fnAdapter from './fnAdapter'\r\n\r\nconst {\r\n   ymdToUTC,\r\n   ymdhmsToUTC,\r\n   volumeColumnPoint,\r\n   crSeria\r\n} = AdapterFn;\r\nconst { crMarkerColor, crDataDaily } = IntradayFns\r\n\r\nconst { crIntradayConfigOption } = fnAdapter;\r\n\r\n//const DAILY = 'Daily';\r\nconst INTRADAY = 'INTRADAY'\r\nconst DAILY_ADJUSTED = 'DAILY_ADJUSTED'\r\n\r\nconst _crSeriaOptions = ({ dfT, hasFilterZero, hasDividend }) => {\r\n  const _isIntraday = dfT === INTRADAY;\r\n  const _isAdjusted = dfT === DAILY_ADJUSTED;\r\n  return {\r\n    notFilterZero: !hasFilterZero,\r\n    isDividend: _isAdjusted && hasDividend,\r\n    toUTC: _isIntraday\r\n      ? ymdhmsToUTC\r\n      : ymdToUTC,\r\n    pnClose: _isAdjusted\r\n      ? '5. adjusted close'\r\n      : '4. close',\r\n    pnVolume: _isAdjusted\r\n      ? '6. volume'\r\n      : '5. volume'\r\n  };\r\n};\r\n\r\nconst PN_DIVIDENT = '7. dividend amount';\r\nconst PN_ADJ_CLOSE = '5. adjusted close';\r\nconst _addDividendPointTo = (arr, dateMs, p) => {\r\n  const _exValue = p[PN_DIVIDENT]\r\n    && parseFloat(p[PN_DIVIDENT]);\r\n  if (_exValue) {\r\n    arr.push({\r\n      ...ChartConfig.crMarkerExDividend(), ...{\r\n         x: dateMs,\r\n         exValue: _exValue,\r\n         price: parseFloat(p[PN_ADJ_CLOSE])\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\nconst _notZeros = (v1, v2) => v1 !== 0 && v2 !== 0;\r\n\r\nconst _getObjValues = (json, option) => {\r\n  const { interval } = option\r\n  , _propName = `Time Series (${interval})`\r\n  return json[_propName];\r\n};\r\n\r\nconst _crSeriaData = (objValues, option) => {\r\n  const _dateKeys = objValues\r\n     ? Object.keys(objValues).sort()\r\n     : []\r\n  , data = [], dH = [], dL = [], dO = []\r\n  , dataDividend = []\r\n  , dVolume = [], dColumn = []\r\n  , {\r\n    notFilterZero, isDividend,\r\n    toUTC, pnClose, pnVolume\r\n  } = _crSeriaOptions(option);\r\n\r\n  let i = 0, _max = _dateKeys.length\r\n  , minClose = Number.POSITIVE_INFINITY\r\n  , maxClose = Number.NEGATIVE_INFINITY\r\n  , _dateMs\r\n  , _date, _point\r\n  , _open, _high, _low, _closeV, _close, _volume ;\r\n  for (i; i<_max; i++) {\r\n    _date = _dateKeys[i]\r\n    _point = objValues[_date]\r\n    _closeV = parseFloat(_point['4. close'])\r\n    _close = parseFloat(_point[pnClose])\r\n\r\n    if (notFilterZero || _notZeros(_closeV, _close) ) {\r\n      _open = parseFloat(_point['1. open'])\r\n      _high = parseFloat(_point['2. high'])\r\n      _low = parseFloat(_point['3. low'])\r\n      _volume = parseFloat(_point[pnVolume])\r\n\r\n      _dateMs = toUTC(_date)\r\n      data.push({\r\n        x: _dateMs,\r\n        y: _close,\r\n        ...crMarkerColor(_date)\r\n      })\r\n\r\n      dH.push([_dateMs, _high])\r\n      dL.push([_dateMs, _low])\r\n      dO.push([_dateMs, _open])\r\n\r\n      dVolume.push([_dateMs, _volume])\r\n      dColumn.push(\r\n          volumeColumnPoint({\r\n             open: _open,\r\n             close: _closeV,\r\n             volume: _volume,\r\n             date: _dateMs,\r\n             option: { _high: _high, _low: _low }\r\n          })\r\n      )\r\n      if (isDividend) {\r\n        _addDividendPointTo(dataDividend, _dateMs, _point)\r\n      }\r\n\r\n      if (minClose > _close ) { minClose = _close }\r\n      if (maxClose < _close ) { maxClose = _close }\r\n    }\r\n  }\r\n\r\n  return {\r\n    data, dH, dL, dO,\r\n    dataDividend,\r\n    minClose, maxClose,\r\n    dVolume, dColumn\r\n  };\r\n}\r\n\r\nconst _crChartOptions = (dfT, data) => {\r\n  const _isIntraday = dfT === INTRADAY;\r\n  return {\r\n    dataDaily: _isIntraday\r\n       ? crDataDaily(data)\r\n       : data,\r\n    seriaTooltip: _isIntraday\r\n      ? Tooltip.fnBasePointFormatterT\r\n      : Tooltip.fnBasePointFormatter,\r\n    volumeTooltip: _isIntraday\r\n      ? Tooltip.volumeDmyt\r\n      : Tooltip.volume\r\n  };\r\n};\r\n\r\nconst AlphaIntradayAdapter = {\r\n  toConfig(json, option){\r\n    const {\r\n      value:_chartId,\r\n      interval, dfT,\r\n      dataSource\r\n    } = option\r\n    , _objValues = _getObjValues(json, option)\r\n    , {\r\n        data, dH, dL, dO,\r\n        minClose, maxClose,\r\n        dataDividend,\r\n        dColumn, dVolume\r\n      } = _crSeriaData(_objValues, option)\r\n    , {\r\n        dataDaily,\r\n        seriaTooltip, volumeTooltip\r\n      } = _crChartOptions(dfT, data);\r\n\r\n    option.minY = minClose\r\n    option.maxY = maxClose\r\n\r\n    const config = ConfigBuilder()\r\n      .areaConfig()\r\n      .add('chart', { spacingTop: 25 })\r\n      .addCaption(_chartId, `Time Series (${interval})`)\r\n      .addTooltip(seriaTooltip)\r\n      .addMinMax(dataDaily, option)\r\n      .setStockSerias(_chartId, data, dH, dL, dO)\r\n      .addDividend({ dataDividend, minClose, maxClose })\r\n      .addMiniVolume({\r\n        id: _chartId,\r\n        dVolume, dColumn,\r\n        tooltipColumn: Chart.fTooltip(volumeTooltip)\r\n      })\r\n      .add({\r\n        ...crIntradayConfigOption({\r\n          id: _chartId,\r\n          data: dataDaily,\r\n          dataSource\r\n        }, option)\r\n      })\r\n      .toConfig();\r\n    return { config };\r\n  },\r\n\r\n  toSeries(json, option){\r\n    return crSeria({\r\n      adapter: AlphaIntradayAdapter,\r\n      json, option,\r\n      type: 'spline'\r\n    });\r\n  }\r\n}\r\n\r\nexport default AlphaIntradayAdapter\r\n"],"file":"AlphaIntradayAdapter.js"}