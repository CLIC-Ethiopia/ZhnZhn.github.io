{"version":3,"sources":["../../../src/adapters/coin-lore/ClAdapter.js"],"names":["HEADERS","name","pn","style","textAlign","toN","isF","fontWeight","isHide","_crTimeDate","time","split","_isNotEmptyPair","base","quote","volume","_crRows","json","pairs","_rows","_len","length","tMin","NaN","tMax","item","i","id","_time","date","push","rows","_crTimePeriod","tdMin","tdMax","minArr","maxArr","dmy","_crTitle","items","_title","c","_period","ClAdapter","toConfig","option","_itemKey","dataSource","title","config","headers"],"mappings":";;;;;AAAA;;AACA;;AAKA,MAAMA,OAAO,GAAG,CAAC;AACfC,EAAAA,IAAI,EAAE,MADS;AAEfC,EAAAA,EAAE,EAAE,IAFW;AAGfC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAHQ,CAAD,EAId;AACAH,EAAAA,IAAI,EAAE,MADN;AAEAC,EAAAA,EAAE,EAAE;AAFJ,CAJc,EAOd;AACAD,EAAAA,IAAI,EAAE,OADN;AAEAC,EAAAA,EAAE,EAAE;AAFJ,CAPc,EAUd;AACAD,EAAAA,IAAI,EAAE,QADN;AAEAC,EAAAA,EAAE,EAAE,QAFJ;AAGAG,EAAAA,GAAG,EAAE,CAAC,CAAD,CAHL;AAIAC,EAAAA,GAAG,EAAE,IAJL;AAKAH,EAAAA,KAAK,EAAE;AACLI,IAAAA,UAAU,EAAE;AADP;AALP,CAVc,EAkBd;AACAN,EAAAA,IAAI,EAAE,OADN;AAEAC,EAAAA,EAAE,EAAE,OAFJ;AAGAG,EAAAA,GAAG,EAAE,EAHL;AAIAC,EAAAA,GAAG,EAAE,IAJL;AAKAH,EAAAA,KAAK,EAAE;AACLI,IAAAA,UAAU,EAAE;AADP;AALP,CAlBc,EA0Bd;AACAC,EAAAA,MAAM,EAAE,IADR;AAEAP,EAAAA,IAAI,EAAE,WAFN;AAGAC,EAAAA,EAAE,EAAE,WAHJ;AAIAG,EAAAA,GAAG,EAAE,EAJL;AAKAC,EAAAA,GAAG,EAAE,IALL;AAMAH,EAAAA,KAAK,EAAE;AACLI,IAAAA,UAAU,EAAE;AADP;AANP,CA1Bc,EAmCd;AACAC,EAAAA,MAAM,EAAE,IADR;AAEAP,EAAAA,IAAI,EAAE,MAFN;AAGAC,EAAAA,EAAE,EAAE;AAHJ,CAnCc,EAuCd;AACAM,EAAAA,MAAM,EAAE,IADR;AAEAP,EAAAA,IAAI,EAAE,MAFN;AAGAC,EAAAA,EAAE,EAAE;AAHJ,CAvCc,CAAhB;;AA6CA,MAAMO,WAAW,GAAIC,IAAD,IAAU,qBAAKA,IAAI,GAAC,IAAV,EAAgBC,KAAhB,CAAsB,GAAtB,CAA9B,CACA;AADA;AAAA,MAEEC,eAAe,GAAG;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD;AAAA,SAA6BF,IAAI,IAAIC,KAAR,IAAiBC,MAAM,KAAK,CAAzD;AAAA,CAFpB;AAAA,MAGEC,OAAO,GAAIC,IAAD,IAAU;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAYD,IAAlB;AAAA,QACEE,KAAK,GAAG,EADV;AAAA,QAEEC,IAAI,GAAGF,KAAK,CAACG,MAFf;AAGA,MAAIC,IAAI,GAAGC,GAAX;AAAA,MAAgBC,IAAI,GAAGD,GAAvB;AAAA,MACEE,IADF;AAAA,MACQC,CAAC,GAAG,CADZ;AAAA,MACeC,EAAE,GAAG,CADpB;;AAEA,OAAKD,CAAL,EAAQA,CAAC,GAACN,IAAV,EAAgBM,CAAC,EAAjB,EAAoB;AAClBD,IAAAA,IAAI,GAAGP,KAAK,CAACQ,CAAD,CAAZ;;AACA,QAAId,eAAe,CAACa,IAAD,CAAnB,EAA2B;AACzB,YAAMG,KAAK,GAAIH,IAAI,CAACf,IAApB;AAAA,YACE,CAACA,IAAI,GAAC,EAAN,EAAUmB,IAAI,GAAC,EAAf,IAAqBpB,WAAW,CAACmB,KAAD,CADlC;;AAEAT,MAAAA,KAAK,CAACW,IAAN,CAAW,EAAE,GAAGL,IAAL;AAAWf,QAAAA,IAAX;AAAiBmB,QAAAA,IAAjB;AAAuBF,QAAAA;AAAvB,OAAX;;AACAL,MAAAA,IAAI,GAAGA,IAAI,GAAGM,KAAP,GAAeN,IAAf,GAAsBM,KAA7B;AACAJ,MAAAA,IAAI,GAAGA,IAAI,GAAGI,KAAP,GAAeJ,IAAf,GAAsBI,KAA7B;AACAD,MAAAA,EAAE;AACH;AACF;;AACD,SAAO;AACLI,IAAAA,IAAI,EAAE,4BAAY/B,OAAZ,EAAqBmB,KAArB,CADD;AAELG,IAAAA,IAFK;AAECE,IAAAA;AAFD,GAAP;AAID,CAxBD;AAAA,MAyBAQ,aAAa,GAAG,CAACV,IAAD,EAAOE,IAAP,KAAgB;AAC9B,QAAMS,KAAK,GAAG,qBAAKX,IAAI,GAAC,IAAV,CAAd;AAAA,QACEY,KAAK,GAAG,qBAAKV,IAAI,GAAC,IAAV,CADV;AAAA,QAEEW,MAAM,GAAGF,KAAK,CAACtB,KAAN,CAAY,GAAZ,CAFX;AAAA,QAGEyB,MAAM,GAAGF,KAAK,CAACvB,KAAN,CAAY,GAAZ,CAHX;AAAA,QAIE0B,GAAG,GAAGF,MAAM,CAAC,CAAD,CAAN,KAAcC,MAAM,CAAC,CAAD,CAApB,GACFD,MAAM,CAAC,CAAD,CADJ,GAEF,KAAK,CANX;AAOA,SAAOE,GAAG,GACHF,MAAM,CAAC,CAAD,CADH,WACYC,MAAM,CAAC,CAAD,CADlB,SACyBC,GADzB,GAEHJ,KAFG,SAEMC,KAFhB;AAGD,CApCD;AAAA,MAqCAI,QAAQ,GAAG,CAACrB,IAAD,SAAkBK,IAAlB,EAAwBE,IAAxB,KAAiC;AAAA,MAA1B;AAAEe,IAAAA;AAAF,GAA0B;;AAC1C,QAAMC,MAAM,GAAG,CAACvB,IAAI,CAAC,GAAD,CAAJ,IAAa,EAAd,EAAkBhB,IAAlB,IAA0BsC,KAAK,CAAC,CAAD,CAAL,CAASE,CAAlD;AAAA,QACEC,OAAO,GAAGV,aAAa,CAACV,IAAD,EAAOE,IAAP,CADzB;;AAEA,SAAUgB,MAAV,SAAoBE,OAApB;AACD,CAzCD;;AA2CA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,CAAC3B,IAAD,EAAO4B,MAAP,EAAc;AACpB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2BF,MAAjC;AAAA,UACE;AAAEd,MAAAA,IAAF;AAAQT,MAAAA,IAAR;AAAcE,MAAAA;AAAd,QAAuBR,OAAO,CAACC,IAAD,CADhC;AAAA,UAEE+B,KAAK,GAAGV,QAAQ,CAACrB,IAAD,EAAO4B,MAAP,EAAevB,IAAf,EAAqBE,IAArB,CAFlB;AAAA,UAGEyB,MAAM,GAAG,8BAAc;AACtBtB,MAAAA,EAAE,EAAEmB,QADkB;AACRE,MAAAA,KADQ;AAEtBE,MAAAA,OAAO,EAAElD,OAFa;AAGtB+B,MAAAA,IAHsB;AAGhBgB,MAAAA;AAHgB,KAAd,CAHX;;AAQA,WAAO;AAAEE,MAAAA;AAAF,KAAP;AACD;;AAXe,CAAlB;eAceN,S","sourcesContent":["import { toTd } from '../AdapterFn';\r\nimport {\r\n  crTableConfig,\r\n  crTableRows\r\n} from '../toTableFn';\r\n\r\nconst HEADERS = [{\r\n  name: 'Rank',\r\n  pn: 'id',\r\n  style: { textAlign: 'center' }\r\n},{\r\n  name: 'Base',\r\n  pn: 'base'\r\n},{\r\n  name: 'Quote',\r\n  pn: 'quote'\r\n},{\r\n  name: 'Volume',\r\n  pn: 'volume',\r\n  toN: [0],\r\n  isF: true,\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n},{\r\n  name: 'Price',\r\n  pn: 'price',\r\n  toN: [],\r\n  isF: true,\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n},{\r\n  isHide: true,\r\n  name: 'Price USD',\r\n  pn: 'price_usd',\r\n  toN: [],\r\n  isF: true,\r\n  style: {\r\n    fontWeight: 'bold'\r\n  }\r\n},{\r\n  isHide: true,\r\n  name: 'Time',\r\n  pn: 'time'\r\n},{\r\n  isHide: true,\r\n  name: 'Date',\r\n  pn: 'date'\r\n}];\r\n\r\nconst _crTimeDate = (time) => toTd(time*1000).split(' ')\r\n// base = null or quote = null or volume = 0\r\n, _isNotEmptyPair = ({ base, quote, volume }) => base && quote && volume !== 0\r\n, _crRows = (json) => {\r\n  const { pairs } = json\r\n  , _rows = []\r\n  , _len = pairs.length;\r\n  let tMin = NaN, tMax = NaN\r\n  , item, i = 0, id = 1;\r\n  for (i; i<_len; i++){\r\n    item = pairs[i]\r\n    if (_isNotEmptyPair(item)) {\r\n      const _time  = item.time\r\n      , [time='', date=''] = _crTimeDate(_time);\r\n      _rows.push({ ...item, time, date, id })\r\n      tMin = tMin < _time ? tMin : _time\r\n      tMax = tMax > _time ? tMax : _time\r\n      id++\r\n    }\r\n  }\r\n  return {\r\n    rows: crTableRows(HEADERS, _rows),\r\n    tMin, tMax\r\n  };\r\n},\r\n_crTimePeriod = (tMin, tMax) => {\r\n  const tdMin = toTd(tMin*1000)\r\n  , tdMax = toTd(tMax*1000)\r\n  , minArr = tdMin.split(' ')\r\n  , maxArr = tdMax.split(' ')\r\n  , dmy = minArr[1] === maxArr[1]\r\n      ? minArr[1]\r\n      : void 0;\r\n  return dmy\r\n    ? `${minArr[0]} - ${maxArr[0]} ${dmy}`\r\n    : `${tdMin} ${tdMax}`;\r\n},\r\n_crTitle = (json, { items }, tMin, tMax) => {\r\n  const _title = (json[\"0\"] || {}).name || items[0].c\r\n  , _period = _crTimePeriod(tMin, tMax);\r\n  return `${_title} ${_period}`;\r\n};\r\n\r\nconst ClAdapter = {\r\n  toConfig(json, option){\r\n    const { _itemKey, dataSource } = option\r\n    , { rows, tMin, tMax } = _crRows(json)\r\n    , title = _crTitle(json, option, tMin, tMax)\r\n    , config = crTableConfig({\r\n       id: _itemKey, title,\r\n       headers: HEADERS,\r\n       rows, dataSource\r\n    });\r\n    return { config };\r\n  }\r\n};\r\n\r\nexport default ClAdapter\r\n"],"file":"ClAdapter.js"}