{"version":3,"sources":["../../../src/adapters/stat-json/fTableApi.js"],"names":["_crTidTop","v","code","selection","filter","values","_checkTop","isTop","strN","arr","push","fTableApi","ROOT_URL","getRequestUrl","option","proxy","metric","dfId","id","crOptionFetch","items","isTop12","isTop6","arrQuery","forEach","item","slice","propName","method","body","JSON","stringify","query","response","format","checkResponse"],"mappings":";;;;;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD;AAAA,SAAQ;AACxBC,IAAAA,IAAI,EAAE,KADkB;AAExBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,MAAM,EAAE,CAAC,KAAGJ,CAAJ;AAFC;AAFa,GAAR;AAAA,CAAlB;;AAQA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,IAAR,EAAcC,GAAd,EAAsB;AACtC,MAAIF,KAAJ,EAAW;AACTE,IAAAA,GAAG,CAACC,IAAJ,CAASV,SAAS,CAACQ,IAAD,CAAlB;AACD;AACF,CAJD;;AAMA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD;AAAA,SAAe;AAC/BC,IAAAA,aAD+B,yBACjBC,MADiB,EACV;AAAA,0BACgBA,MADhB,CACXC,KADW;AAAA,UACXA,KADW,8BACL,EADK;AAAA,UACDC,MADC,GACgBF,MADhB,CACDE,MADC;AAAA,UACOC,IADP,GACgBH,MADhB,CACOG,IADP;AAAA,UAEjBC,EAFiB,GAEZD,IAAI,IAAID,MAFI;AAGnB,kBAAUD,KAAV,GAAkBH,QAAlB,SAA8BM,EAA9B;AACD,KAL8B;AAO/BC,IAAAA,aAP+B,yBAOjBL,MAPiB,EAOV;AAAA,0BACmBA,MADnB,CACXM,KADW;AAAA,UACXA,KADW,8BACL,EADK;AAAA,UACDC,OADC,GACmBP,MADnB,CACDO,OADC;AAAA,UACQC,MADR,GACmBR,MADnB,CACQQ,MADR;AAAA,UAEbC,QAFa,GAEF,EAFE;AAGnBH,MAAAA,KAAK,CAACI,OAAN,CAAc,UAAAC,IAAI,EAAI;AAAA,mBACDA,IAAI,IAAI,EADP;AAAA,YACXC,KADW,QACXA,KADW;;AAEnB,aAAI,IAAMC,QAAV,IAAsBD,KAAtB,EAA4B;AAC1BH,UAAAA,QAAQ,CAACb,IAAT,CAAc;AACZR,YAAAA,IAAI,EAAEyB,QADM;AAEZxB,YAAAA,SAAS,EAAE;AACTC,cAAAA,MAAM,EAAE,MADC;AAETC,cAAAA,MAAM,EAAE,CAACqB,KAAK,CAACC,QAAD,CAAN,CAFC,CAGT;AACA;;AAJS;AAFC,WAAd;AASD;AACH,OAbD;;AAeArB,MAAAA,SAAS,CAACe,OAAD,EAAU,IAAV,EAAgBE,QAAhB,CAAT;;AACAjB,MAAAA,SAAS,CAACgB,MAAD,EAAS,GAAT,EAAcC,QAAd,CAAT;;AAEA,aAAO;AACLK,QAAAA,MAAM,EAAE,MADH;AAELC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAClBC,UAAAA,KAAK,EAAET,QADW;AAElBU,UAAAA,QAAQ,EAAE;AACPC,YAAAA,MAAM,EAAE;AADD;AAFQ,SAAf;AAFD,OAAP;AASD,KArC8B;AAuC/BC,IAAAA,aAvC+B,2BAuChB;AACb,aAAO,IAAP;AACD;AAzC8B,GAAf;AAAA,CAAlB;;eA4CexB,S","sourcesContent":["\r\nconst _crTidTop = (v) => ({\r\n  code: \"Tid\",\r\n  selection: {\r\n    filter: \"top\",\r\n    values: [''+v]\r\n  }\r\n});\r\n\r\nconst _checkTop = (isTop, strN, arr) => {\r\n  if (isTop) {\r\n    arr.push(_crTidTop(strN))\r\n  }\r\n};\r\n\r\nconst fTableApi = (ROOT_URL) => ({\r\n  getRequestUrl(option){\r\n    const { proxy='', metric, dfId } = option\r\n    , id = dfId || metric;\r\n    return `${proxy}${ROOT_URL}/${id}`;\r\n  },\r\n\r\n  crOptionFetch(option){\r\n    const { items=[], isTop12, isTop6 } = option\r\n        , arrQuery = [];\r\n    items.forEach(item => {\r\n       const { slice } = item || {};\r\n       for(const propName in slice){\r\n         arrQuery.push({\r\n           code: propName,\r\n           selection: {\r\n             filter: 'item',\r\n             values: [slice[propName]]\r\n             //filter: 'all',\r\n             //values: ['*']\r\n           }\r\n         })\r\n       }\r\n    })\r\n\r\n    _checkTop(isTop12, '12', arrQuery)\r\n    _checkTop(isTop6, '6', arrQuery)\r\n\r\n    return {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n         query: arrQuery,\r\n         response: {\r\n            format: \"json-stat\"\r\n         }\r\n      })\r\n    };\r\n  },\r\n\r\n  checkResponse(){\r\n    return true;\r\n  }\r\n});\r\n\r\nexport default fTableApi\r\n"],"file":"fTableApi.js"}