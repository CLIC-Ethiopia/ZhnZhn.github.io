{"version":3,"sources":["../../../src/adapters/stat-json/fTableApi.js"],"names":["_crTidTop","v","code","selection","filter","values","_checkTop","isTop","strN","arr","push","_crArrQuery","items","arrQuery","forEach","item","slice","propName","_isCategory","seriaType","_checkSeriaCategory","dfC","_arr","unshift","fTableApi","ROOT_URL","getRequestUrl","option","proxy","dfId","url","crOptionFetch","isTop12","isTop6","optionFetch","method","body","JSON","stringify","query","response","format","checkResponse"],"mappings":"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","sourcesContent":["\r\nconst _crTidTop = (v) => ({\r\n  code: \"Tid\",\r\n  selection: {\r\n    filter: \"top\",\r\n    values: [''+v]\r\n  }\r\n});\r\n\r\nconst _checkTop = (isTop, strN, arr) => {\r\n  if (isTop) {\r\n    arr.push(_crTidTop(strN))\r\n  }\r\n};\r\n\r\nconst _crArrQuery = (items) => {\r\n  const arrQuery = [];\r\n  items.forEach(item => {\r\n     const { slice } = item || {};\r\n     for(const propName in slice){\r\n       arrQuery.push({\r\n         code: propName,\r\n         selection: {\r\n           filter: 'item',\r\n           values: [slice[propName]]\r\n           //filter: 'all',\r\n           //values: ['*']\r\n         }\r\n       })\r\n     }\r\n  })\r\n  return arrQuery;\r\n}\r\n\r\nconst _isCategory = seriaType =>\r\n   seriaType === \"BAR_CLUSTER\"\r\n|| seriaType === \"BAR_SET\"\r\n|| seriaType === \"COLUMN_SET\"\r\n|| seriaType === \"COLUMN_CLUSTER\"\r\n|| seriaType === \"TREE_MAP\"\r\n|| seriaType === \"TREE_MAP_CLUSTER\"\r\n|| seriaType === \"TREE_MAP_2\"\r\n|| seriaType === \"TREE_MAP_2_CLUSTER\";\r\n\r\nconst _checkSeriaCategory = (arr, { dfC, seriaType }) => {\r\n  if (dfC && _isCategory(seriaType)) {\r\n    const _arr = arr.filter(item => item.code !== dfC);\r\n    _arr.unshift({\r\n      code: dfC,\r\n      selection: {\r\n       filter: \"all\",\r\n       values: [\"*\"]\r\n     }\r\n    })\r\n    return _arr;\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst fTableApi = (ROOT_URL) => ({\r\n  getRequestUrl(option){\r\n    const { proxy='', dfId, url } = option;\r\n        \r\n    if (url) { return url; }\r\n    return (option.url = `${proxy}${ROOT_URL}/${dfId}`);\r\n  },\r\n\r\n  crOptionFetch(option){\r\n    const {\r\n      items=[],\r\n      isTop12, isTop6,\r\n      optionFetch\r\n    } = option;\r\n\r\n    if (optionFetch) { return optionFetch; }\r\n\r\n    const arrQuery = _crArrQuery(items);\r\n\r\n    _checkTop(isTop12, '12', arrQuery)\r\n    _checkTop(isTop6, '6', arrQuery)\r\n\r\n    return (option.optionFetch = {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n         query: _checkSeriaCategory(arrQuery, option),\r\n         response: {\r\n            format: \"json-stat\"\r\n         }\r\n      })\r\n    });\r\n  },\r\n\r\n  checkResponse(){\r\n    return true;\r\n  }\r\n});\r\n\r\nexport default fTableApi\r\n"],"file":"fTableApi.js"}