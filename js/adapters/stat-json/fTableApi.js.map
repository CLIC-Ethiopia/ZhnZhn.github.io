{"version":3,"sources":["../../../src/adapters/stat-json/fTableApi.js"],"names":["crError","fnAdapter","_crErr","bind","_hmCrQuery","DF","crDfQuery","SDN","crSdnQuery","SIR","crSirQuery","_crDfId","option","loadId","dfId","fTableApi","ROOT_URL","getRequestUrl","resErrStatus","url","_dfId","proxy","crOptionFetch","optionFetch","_crQuery","checkResponse","json","error"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,kBAApB;AAAA,MACEC,MAAM,GAAGF,OAAO,CAACG,IAAR,CAAa,IAAb,EAAmB,EAAnB,CADX;;AAGA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,EAAE,EAAEC,kBADa;AAEjBC,EAAAA,GAAG,EAAEC,mBAFY;AAGjBC,EAAAA,GAAG,EAAEC;AAHY,CAAnB;;AAMA,MAAMC,OAAO,GAAGC,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,KAAlB,GACtB,EADsB,GAEtB,MAAID,MAAM,CAACE,IAFf;;AAIA,MAAMC,SAAS,GAAIC,QAAD,KAAe;AAC/BC,EAAAA,aAAa,CAACL,MAAD,EAAQ;AACnBA,IAAAA,MAAM,CAACM,YAAP,GAAsB,CAAC,GAAD,CAAtB;;AACA,QAAIN,MAAM,CAACO,GAAX,EAAgB;AAAE,aAAOP,MAAM,CAACO,GAAd;AAAoB;;AAEtC,UAAMC,KAAK,GAAGT,OAAO,CAACC,MAAD,CAArB;;AACA,WAAQA,MAAM,CAACO,GAAP,SAAgBP,MAAM,CAACS,KAAP,IAAgB,EAAhC,IAAqCL,QAArC,GAAgDI,KAAxD;AACD,GAP8B;;AAS/BE,EAAAA,aAAa,CAACV,MAAD,EAAQ;AACnB,QAAIA,MAAM,CAACW,WAAX,EAAwB;AACtB,aAAOX,MAAM,CAACW,WAAd;AACD;;AACD,UAAMC,QAAQ,GAAGpB,UAAU,CAACQ,MAAM,CAACC,MAAR,CAAV,IACZT,UAAU,CAACC,EADhB;;AAEA,WAAQO,MAAM,CAACW,WAAP,GAAmBC,QAAQ,CAACZ,MAAD,CAAnC;AACD,GAhB8B;;AAkB/Ba,EAAAA,aAAa,CAACC,IAAD,EAAM;AACjB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,IAAI,IAAI,EAA1B;;AACA,QAAIC,KAAJ,EAAW;AACT,YAAMzB,MAAM,CAACyB,KAAD,CAAZ;AACD;;AACD,WAAO,IAAP;AACD;;AAxB8B,CAAf,CAAlB;;eA2BeZ,S","sourcesContent":["import fnAdapter from './fnAdapter';\r\n\r\nimport crDfQuery from './crDfQuery';\r\nimport crSdnQuery from './crSdnQuery';\r\nimport crSirQuery from './crSirQuery';\r\n\r\nconst { crError } = fnAdapter\r\n, _crErr = crError.bind(null, '');\r\n\r\nconst _hmCrQuery = {\r\n  DF: crDfQuery,\r\n  SDN: crSdnQuery,\r\n  SIR: crSirQuery\r\n};\r\n\r\nconst _crDfId = option => option.loadId === 'SDN'\r\n  ? ''\r\n  : '/'+option.dfId;\r\n\r\nconst fTableApi = (ROOT_URL) => ({\r\n  getRequestUrl(option){\r\n    option.resErrStatus = [400]\r\n    if (option.url) { return option.url; }\r\n\r\n    const _dfId = _crDfId(option);\r\n    return (option.url = `${option.proxy || ''}${ROOT_URL}${_dfId}`);\r\n  },\r\n\r\n  crOptionFetch(option){\r\n    if (option.optionFetch) {\r\n      return option.optionFetch;\r\n    }\r\n    const _crQuery = _hmCrQuery[option.loadId]\r\n      || _hmCrQuery.DF;\r\n    return (option.optionFetch=_crQuery(option));\r\n  },\r\n\r\n  checkResponse(json){\r\n    const { error } = json || {};\r\n    if (error) {\r\n      throw _crErr(error);\r\n    }\r\n    return true;\r\n  }\r\n});\r\n\r\nexport default fTableApi\r\n"],"file":"fTableApi.js"}