{"version":3,"sources":["../../../src/adapters/stat-json/toSpline.js"],"names":["_isArr","Array","isArray","_filterLeadingNulls","data","_len","length","i","j","slice","_isReverse","_checkOrder","reverse","_isPerJanuary","label","indexOf","_fCrDataPoint","values","hasPerJanuary","time","_pIndex","isP","_time","x","y","value","_postProcessData","_toData","times","_values","_crPoint","map","toArea","crConfig","json","option","ds","_hasPerJanuary","confOption"],"mappings":"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","sourcesContent":["import crConfigType1 from '../../charts/crConfigType1';\r\nimport {\r\n  toUTC,\r\n  compose\r\n} from './fnUtil';\r\nimport {\r\n  crDsValuesTimes,\r\n  crConfOption\r\n} from './fnAdapter';\r\n\r\nconst _isArr = Array.isArray;\r\n\r\nconst _filterLeadingNulls = data => {\r\n  const _len = data.length;\r\n  let i = 0;\r\n  for(i; i<_len; i++){\r\n    if (data[i][1] !== null) break;\r\n  }\r\n  let j = _len - 1;\r\n  for(j; j>-1; j--){\r\n    if (data[j][1] !== null) break;\r\n  }\r\n  return data.slice(i, j+1);\r\n};\r\n\r\nconst _isReverse = data => data.length > 2\r\n  && data[0][0] > data[1][0];\r\nconst _checkOrder = data => _isReverse(data)\r\n  ? data.reverse()\r\n  : data;\r\n\r\nconst _isPerJanuary = (label) => (label || '')\r\n  .indexOf('per 1 January') !== -1;\r\n\r\nconst _fCrDataPoint = (values, hasPerJanuary) => (time, i) => {\r\n  const _pIndex = time.length - 1\r\n  , isP = time[_pIndex] === '*'\r\n  , _time = isP ? time.slice(0, _pIndex) : time\r\n  , x = toUTC(_time, hasPerJanuary)\r\n  , y = values[i] ? values[i].value : null;\r\n  return isP ? [x, y, 'p'] : [x, y];\r\n};\r\n\r\nconst _postProcessData = compose(\r\n  _filterLeadingNulls,\r\n  _checkOrder\r\n);\r\n\r\nconst _toData = (values, times, hasPerJanuary) => {\r\n  const _values = _isArr(values) ? values : [values]\r\n  , _crPoint = _fCrDataPoint(_values, hasPerJanuary);\r\n  return _isArr(times)\r\n    ? _postProcessData(times.map(_crPoint))\r\n    : [];\r\n};\r\n\r\n\r\nconst toArea = {\r\n  crConfig: (json, option) => {\r\n    const [ ds, values, times ] = crDsValuesTimes(json, option)\r\n    , _hasPerJanuary = _isPerJanuary(ds.label)\r\n    , data = _toData(values, times, _hasPerJanuary)\r\n    , confOption = crConfOption(ds, option);\r\n\r\n    return crConfigType1({\r\n      option, data, confOption\r\n    });\r\n  }\r\n};\r\n\r\nexport default toArea\r\n"],"file":"toSpline.js"}