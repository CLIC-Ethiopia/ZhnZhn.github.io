{"version":3,"sources":["../../../src/adapters/stat-json/toTreeMap.js"],"names":["NUMBER_STYLE","_isArr","Array","isArray","_crPointName","label","value","_fCrTreeMapPoint","c","title","v","i","Category","name","_toHm","arr","hm","Object","create","forEach","item","caption","_fIsPoint","dfT","depth","p","d","y","_findLevelBy","data","from","sum","stopSum","_maxIndex","length","index","_findLevelIndex","level1","level2","_t","reduce","acc","_v1","_v2","index1","sum1","index2","_compareByValue","a","b","_crCategory","option","by","items","dfC","dfC2","dfT2","category","cTotal","itemSlice","slice","_addPercent","_total","_onePercent","map","percent","_addColor","level60","level90","period","Chart","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","_level90","deltaColor","point","pointIndex","color","crMonoColor","getMonoColor","_crData","values","categories","Tid","selectOptions","filter","sort","reverse","toTreeMap","crConfig","json","time","dfTSlice","seriaType","isCluster","ds","Dataset","Dimension","_title","_subtitle","Data","_d1","_c","_seria","treeMapSeria","Tooltip","treeMap","toSeria","config","treeMapConfig","addCaption","addSeries","add","toConfig","fCrConfig","param"],"mappings":"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","sourcesContent":["import JSONstat from 'jsonstat';\r\n\r\nimport Chart from '../../charts/Chart';\r\nimport Builder from '../../charts/ConfigBuilder';\r\nimport Tooltip from '../../charts/Tooltip';\r\nimport {\r\n  crTitle,\r\n  crTid,\r\n  crChartOption,\r\n  numberFormat,\r\n  roundBy\r\n} from './fnAdapter';\r\n\r\nconst NUMBER_STYLE = 'style=\"color:#333;\"';\r\nconst _isArr = Array.isArray;\r\nconst _crPointName = (label, value) => {\r\n  return `${label} <br/>\r\n  <span ${NUMBER_STYLE}>${numberFormat(value)}</span>`;\r\n};\r\n\r\nconst _fCrTreeMapPoint = (c, title) => {\r\n  return (v, i) => {\r\n    const label = c.Category(i).label\r\n       ,  value = v.value;\r\n    return {\r\n      name: _crPointName(label, value),\r\n      value, label, title\r\n    };\r\n  };\r\n};\r\n\r\nconst _toHm = (arr) => {\r\n  const hm = Object.create(null)\r\n  arr.forEach(item => {\r\n    hm[item.caption] = item\r\n  })\r\n  return hm;\r\n};\r\n\r\nconst _fIsPoint = (dfT, hm, depth) => {\r\n  return p => {\r\n    if (dfT && p.label === dfT) {\r\n      return false;\r\n    }\r\n    if ( hm[p.label].d !== depth) {\r\n      return false;\r\n    }\r\n    return p.y !== null && p.y !== 0;\r\n  };\r\n};\r\n\r\nconst _findLevelBy = (data, from, sum, stopSum) => {\r\n  const _maxIndex = data.length;\r\n  if ( from >= _maxIndex ){\r\n    return { index: _maxIndex, sum };\r\n  }\r\n\r\n  let index = _maxIndex, i = from;\r\n  for(;i<_maxIndex;i++){\r\n    sum +=data[i].value\r\n    if (sum>=stopSum) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (index < _maxIndex ){\r\n    index += 1\r\n  }\r\n  return { index, sum };\r\n};\r\n\r\nconst _findLevelIndex = (data, level1, level2) => {\r\n  const _t = data.reduce((acc, p) => acc + p.value, 0)\r\n      , _v1 = (_t/100)*level1\r\n      , _v2 = (_t/100)*level2\r\n      , {\r\n          index:index1,\r\n          sum: sum1\r\n        } = _findLevelBy(data, 0, 0, _v1)\r\n      , {\r\n          index:index2\r\n        } = _findLevelBy(data, index1, sum1, _v2);\r\n\r\n  return { index1, index2 };\r\n};\r\n\r\nconst _compareByValue = (a, b) => a.value - b.value;\r\n\r\nconst _crCategory = (option, by, depth) => {\r\n  const { items=[], dfC, dfT, dfC2, dfT2 } = option;\r\n  switch(by){\r\n    case '2':\r\n      return {\r\n        category: dfC2,\r\n        cTotal: dfT2,\r\n        itemSlice: items[0].slice,\r\n        depth\r\n      };\r\n    default:\r\n      return {\r\n        category: dfC,\r\n        cTotal: dfT,\r\n        itemSlice: items[1].slice,\r\n        depth\r\n      };\r\n  }\r\n};\r\n\r\nconst _addPercent = (data) => {\r\n  const _total = data.reduce((acc, item) => acc + item.value, 0)\r\n     , _onePercent = _total/100;\r\n  return data.map(p => ({\r\n    ...p,\r\n    percent: roundBy(p.value/_onePercent)\r\n  }));\r\n};\r\n\r\nconst _addColor = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  const _level90 = level90 - level60;\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.crMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+_level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / _level90 );\r\n       point.color = Chart.crMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.getMonoColor(pointIndex-level60-_level90)\r\n     }\r\n   })\r\n};\r\n\r\n\r\nconst _crData = (values, categories, Tid, option) => {\r\n  const { selectOptions, depth, cTotal } = option;\r\n  if (!_isArr(values)) {\r\n    return [];\r\n  }\r\n  return values\r\n    .map(_fCrTreeMapPoint(categories, Tid))\r\n    .filter(_fIsPoint(cTotal, _toHm(selectOptions[0]), depth))\r\n    .sort(_compareByValue)\r\n    .reverse();\r\n};\r\n\r\nconst toTreeMap = {\r\n  crConfig: (json, option) => {\r\n    const  {\r\n       category, itemSlice, time, dfTSlice,\r\n       seriaType, isCluster, items=[]\r\n    } = option\r\n    , ds = JSONstat(json).Dataset(0)\r\n    , categories = ds.Dimension(category)\r\n    , Tid = crTid(time, ds)\r\n    , _title = crTitle(option)\r\n    , _subtitle = `${items[1].caption || ''}: ${Tid}`\r\n    , values = ds.Data({ Tid, ...itemSlice, ...dfTSlice })\r\n    , _d1 = _crData(values, categories, Tid, option )\r\n    , _c = _d1.map(item => item.c)\r\n    , data = _addPercent(_d1)\r\n    , { index1, index2 } = _findLevelIndex(data, 60, 90);\r\n\r\n    if (isCluster) {\r\n      _addColor(data, index1, index2)\r\n    }\r\n\r\n    const _seria = Builder()\r\n       .treeMapSeria(Tooltip.treeMap, { data })\r\n       .toSeria();\r\n    const config = Builder()\r\n       .treeMapConfig(_c, seriaType)\r\n       .addCaption(_title, _subtitle)\r\n       .addSeries(_seria)\r\n       .add(crChartOption(ds, Tid, option))\r\n       .toConfig();\r\n\r\n    return config;\r\n  },\r\n\r\n  fCrConfig: (param={}, config={}) => {\r\n    return (json, option) => toTreeMap.crConfig(json, {\r\n      ...option, ...param,\r\n      ..._crCategory(option, config.by, config.depth)\r\n    });\r\n  }\r\n};\r\n\r\nexport default toTreeMap\r\n"],"file":"toTreeMap.js"}