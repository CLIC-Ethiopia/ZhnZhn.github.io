{"version":3,"sources":["../../src/adapters/pointFn.js"],"names":["_assign","Object","assign","pointFn","crVolumePoint","date","open","close","volume","option","_color","C","GREEN","RED","GRAY","x","y","color","_open","_close","crAthPoint","_bDelta","minus","_bPercent","times","div","abs","toFixed","gt","gte","WHITE","parseFloat"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAMA,OAAO,GAAGC,MAAM,CAACC,MAAvB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAE,6BAA2C;AAAA,QAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,QAArBC,MAAqB,QAArBA,MAAqB;AAAA,QAAbC,MAAa,QAAbA,MAAa;;AACxD,QAAIC,MAAJ;;AACA,QAAIJ,IAAI,IAAIC,KAAK,GAACD,IAAlB,EAAwB;AACtBI,MAAAA,MAAM,GAAGC,kBAAEC,KAAX;AACD,KAFD,MAEO,IAAIN,IAAI,IAAIC,KAAK,GAACD,IAAlB,EAAwB;AAC7BI,MAAAA,MAAM,GAAGC,kBAAEE,GAAX;AACD,KAFM,MAEA;AACLH,MAAAA,MAAM,GAAGC,kBAAEG,IAAX;AACD;;AAED,WAAOd,OAAO,CAAC;AACbe,MAAAA,CAAC,EAAEV,IADU;AACJW,MAAAA,CAAC,EAAER,MADC;AACOS,MAAAA,KAAK,EAAEP,MADd;AAEbQ,MAAAA,KAAK,EAAEZ,IAFM;AAEAa,MAAAA,MAAM,EAAEZ;AAFR,KAAD,EAGXE,MAHW,CAAd;AAID,GAfa;AAiBd;AACAW,EAAAA,UAAU,EAAE,2BAA2B;AAAA,QAAxBf,IAAwB,SAAxBA,IAAwB;AAAA,QAAlBE,KAAkB,SAAlBA,KAAkB;AAAA,QAAXD,IAAW,SAAXA,IAAW;;AACrC,QAAMe,OAAO,GAAIf,IAAI,IAAIC,KAAT,GACL,qBAAIA,KAAJ,EAAWe,KAAX,CAAiBhB,IAAjB,CADK,GAEL,qBAAI,KAAJ,CAFX;AAAA,QAGMiB,SAAS,GAAGhB,KAAK,GACZc,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmBC,GAAnB,CAAuBlB,KAAvB,EAA8BmB,GAA9B,GAAoCC,OAApC,CAA4C,CAA5C,CADY,GAEZ,qBAAI,KAAJ,CALX;;AAOA,QAAIjB,MAAJ;;AACA,QAAIW,OAAO,CAACO,EAAR,CAAW,GAAX,CAAJ,EAAoB;AAClBlB,MAAAA,MAAM,GAAGC,kBAAEE,GAAX;AACD,KAFD,MAGK,IAAI,CAACQ,OAAO,CAACQ,GAAR,CAAY,GAAZ,CAAL,EAAsB;AACzBnB,MAAAA,MAAM,GAAGC,kBAAEC,KAAX;AACD,KAFI,MAEE;AACLF,MAAAA,MAAM,GAAIJ,IAAD,GAASK,kBAAEG,IAAX,GAAkBH,kBAAEmB,KAA7B;AACD;;AAED,WAAO;AACLf,MAAAA,CAAC,EAAEV,IADE;AAELW,MAAAA,CAAC,EAAEe,UAAU,CAACR,SAAD,CAFR;AAGLhB,MAAAA,KAAK,EAAEA,KAHF;AAILD,MAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU,SAJf;AAKLW,MAAAA,KAAK,EAAEP;AALF,KAAP;AAOD;AA3Ca,CAAhB;eA8CeP,O","sourcesContent":["import Big from 'big.js'\r\nimport C from '../constants/Color'\r\n\r\nconst _assign = Object.assign\r\n\r\nconst pointFn = {\r\n  crVolumePoint: ({ date, open, close, volume, option }) => {\r\n    let _color;\r\n    if (open && close>open) {\r\n      _color = C.GREEN\r\n    } else if (open && close<open) {\r\n      _color = C.RED\r\n    } else {\r\n      _color = C.GRAY\r\n    }\r\n\r\n    return _assign({\r\n      x: date, y: volume, color: _color,\r\n      _open: open, _close: close\r\n    }, option);\r\n  },\r\n\r\n  //date, prevClose as close, open\r\n  crAthPoint: ({ date, close, open }) => {\r\n    const _bDelta = (open && close)\r\n             ? Big(close).minus(open)\r\n             : Big('0.0')\r\n        , _bPercent = close\r\n             ? _bDelta.times(100).div(close).abs().toFixed(2)\r\n             : Big('0.0');\r\n\r\n    let _color;\r\n    if (_bDelta.gt(0.0)){\r\n      _color = C.RED;\r\n    }\r\n    else if (!_bDelta.gte(0.0)){\r\n      _color = C.GREEN;\r\n    } else {\r\n      _color = (open) ? C.GRAY : C.WHITE;\r\n    }\r\n\r\n    return {\r\n      x: date,\r\n      y: parseFloat(_bPercent),\r\n      close: close,\r\n      open: open ? open : 'Unknown',\r\n      color: _color\r\n    };\r\n  }\r\n}\r\n\r\nexport default pointFn\r\n"],"file":"pointFn.js"}