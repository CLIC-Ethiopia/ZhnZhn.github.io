{"version":3,"sources":["../../../src/adapters/coin-paprika/toCiConfig.js"],"names":["getValue","fnAdapter","joinBy","toUpperCaseFirst","_crCaption","name","symbol","rank","_getDate","str","split","_crToken","value","_crTokens","started_at","development_status","hardware_wallet","org_structure","hash_algorithm","proof_type","platform","filter","Boolean","_crOpenSource","is","_crIsActive","_crTokensCaption","type","open_source","is_active","_crDescr","json","description","toCiConfig","crKey","option","items","_itemKey","toConfig","config","zhCompType","id","caption","tokens","style","fontWeight","descr","zhConfig","key"],"mappings":"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","sourcesContent":["import fnAdapter from './fnAdapter'\r\n\r\nconst {\r\n  getValue,\r\n  joinBy,\r\n  toUpperCaseFirst\r\n} = fnAdapter;\r\n\r\nconst _crCaption = ({ name='', symbol='', rank='' }) =>\r\n  `${name} (${symbol}) (${rank})`;\r\n\r\nconst _getDate = str => str\r\n  ? (''+str).split('T')[0]\r\n  : '';\r\nconst _crToken = (name, value) => value\r\n  ? `${name}: ${value}`\r\n  : '';\r\nconst _crTokens = ({\r\n  started_at,\r\n  development_status,\r\n  hardware_wallet,\r\n  org_structure,\r\n  hash_algorithm,\r\n  proof_type,\r\n  platform\r\n}) => [\r\n  _crToken('Started At', _getDate(started_at)),\r\n  _crToken('Dev Status', development_status),\r\n  _crToken('Org', org_structure),\r\n  _crToken('Hardware Wallet', hardware_wallet),\r\n  _crToken('Hash Alg.', hash_algorithm),\r\n  _crToken('Proof Type', proof_type),\r\n  _crToken('Platform', platform)\r\n].filter(Boolean);\r\n\r\nconst _crOpenSource = is => is ? 'OpenSource': 'not OpenSource';\r\nconst _crIsActive = is => is ? 'Active': 'not Active';\r\nconst _crTokensCaption = ({ type, open_source, is_active}) => joinBy(' ',\r\n  toUpperCaseFirst(type),\r\n  _crOpenSource(open_source),\r\n  _crIsActive(is_active)\r\n);\r\n\r\nconst _crDescr = (json) => json.description || '';\r\n\r\nconst toCiConfig = {\r\n  crKey(option){\r\n    const { items=[] } = option;\r\n    return (option._itemKey = getValue(items[0]));\r\n  },\r\n\r\n  toConfig(json, option) {\r\n    const { _itemKey } = option\r\n    , config = {\r\n        zhCompType: \"INFO_ITEM\",\r\n        id: _itemKey,\r\n        caption: _crCaption(json),\r\n        items: [\r\n          {\r\n            caption: _crTokensCaption(json),\r\n            tokens: _crTokens(json)\r\n          },{\r\n            style: {\r\n              fontWeight: 'bold'\r\n            },\r\n            descr: _crDescr(json)\r\n          }\r\n        ],\r\n        zhConfig: {\r\n          id: _itemKey,\r\n          key: _itemKey\r\n        }\r\n    };\r\n    return { config };\r\n  }\r\n}\r\n\r\nexport default toCiConfig\r\n"],"file":"toCiConfig.js"}