{"version":3,"sources":["../../../src/adapters/binance/BnApi.js"],"names":["C","URL","RESEARCH_URL","TRADE_URL","_isArr","Array","isArray","_crDays","fromDate","_d","dt","getDaysFromYmd","_setLinks","option","c","s","_toIndex","indexOf","_caption","substring","trim","toLowerCase","replace","_s","_researchLink","_tradeLink","BnApi","getRequestUrl","items","_symbol","_limit","checkResponse","json","errCaption"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,CAAC,GAAG;AACRC,EAAAA,GAAG,EAAE,mDADG;AAERC,EAAAA,YAAY,EAAE,0CAFN;AAGRC,EAAAA,SAAS,EAAE;AAHH,CAAV;AAMA,IAAMC,MAAM,GAAGC,KAAK,CAACC,OAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAChC,MAAMC,EAAE,GAAGC,sBAAGC,cAAH,CAAkBH,QAAlB,CAAX;;AACA,SAAOC,EAAE,GAAG,IAAL,GAAYA,EAAZ,GAAiB,IAAxB;AACD,CAHD;;AAKA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,CAAT,EAAYC,CAAZ,EAAkB;AAClC,MAAMC,QAAQ,GAAGF,CAAC,CAACG,OAAF,CAAU,GAAV,CAAjB;AAAA,MACEC,QAAQ,GAAGJ,CAAC,CAACK,SAAF,CAAY,CAAZ,EAAeH,QAAf,EACRI,IADQ,GAERC,WAFQ,GAGRC,OAHQ,CAGA,GAHA,EAGK,GAHL,CADb;AAAA,MAKEC,EAAE,GAAGR,CAAC,CAACO,OAAF,CAAU,GAAV,EAAe,GAAf,EAAoBD,WAApB,EALP;;AAMAR,EAAAA,MAAM,CAACW,aAAP,GAA0BxB,CAAC,CAACE,YAA5B,SAA4CgB,QAA5C;AACAL,EAAAA,MAAM,CAACY,UAAP,GAAuBzB,CAAC,CAACG,SAAzB,SAAsCoB,EAAtC;AACD,CATD;;AAWA,IAAMG,KAAK,GAAG;AACZC,EAAAA,aADY,yBACEd,MADF,EACS;AAAA,wBACEA,MADF,CACXe,KADW;AAAA,QACXA,KADW,8BACL,EADK;AAAA,gBAEAA,KAAK,CAAC,CAAD,CAAL,IAAY,EAFZ;AAAA,wBAEfb,CAFe;AAAA,QAEfA,CAFe,wBAEb,EAFa;AAAA,wBAETD,CAFS;AAAA,QAETA,CAFS,wBAEP,EAFO;AAAA,QAGjBe,OAHiB,GAGPd,CAAC,CAACO,OAAF,CAAU,GAAV,EAAc,EAAd,CAHO;AAAA,QAIjBQ,MAJiB,GAIRvB,OAAO,CAACM,MAAD,CAJC;;AAKnBD,IAAAA,SAAS,CAACC,MAAD,EAASC,CAAT,EAAYC,CAAZ,CAAT;;AACA,WAAUf,CAAC,CAACC,GAAZ,gBAA0B4B,OAA1B,eAA2CC,MAA3C;AACD,GARW;AAUZC,EAAAA,aAVY,yBAUEC,IAVF,EAUQnB,MAVR,EAUe;AACzB,QAAIT,MAAM,CAAC4B,IAAD,CAAV,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,UAAM;AACJC,MAAAA,UAAU,EAAE;AADR,KAAN;AAGD;AAjBW,CAAd;eAoBeP,K","sourcesContent":["import dt from '../../utils/DateUtils'\r\n\r\nconst C = {\r\n  URL: 'https://api.binance.com/api/v3/klines?interval=1d',\r\n  RESEARCH_URL: 'https://research.binance.com/en/projects',\r\n  TRADE_URL: 'https://binance.com/en/trade'\r\n}\r\n\r\nconst _isArr = Array.isArray;\r\n\r\nconst _crDays = ({ fromDate }) => {\r\n  const _d = dt.getDaysFromYmd(fromDate);\r\n  return _d < 1001 ? _d : 1000;\r\n};\r\n\r\nconst _setLinks = (option, c, s) => {\r\n  const _toIndex = c.indexOf('(')\r\n  , _caption = c.substring(0, _toIndex)\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(' ', '-')\r\n  , _s = s.replace('/', '_').toLowerCase();\r\n  option._researchLink = `${C.RESEARCH_URL}/${_caption}`\r\n  option._tradeLink = `${C.TRADE_URL}/${_s}`\r\n}\r\n\r\nconst BnApi = {\r\n  getRequestUrl(option){\r\n    const { items=[] } = option\r\n    , { s='', c='' } = items[0] || {}\r\n    , _symbol = s.replace('/','')\r\n    , _limit = _crDays(option);\r\n    _setLinks(option, c, s)\r\n    return `${C.URL}&symbol=${_symbol}&limit=${_limit}`;\r\n  },\r\n\r\n  checkResponse(json, option){\r\n    if (_isArr(json)) {\r\n      return true;\r\n    }\r\n    throw {\r\n      errCaption: \"Response Empty\",\r\n    };\r\n  }\r\n}\r\n\r\nexport default BnApi\r\n"],"file":"BnApi.js"}