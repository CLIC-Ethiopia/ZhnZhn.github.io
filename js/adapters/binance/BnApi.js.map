{"version":3,"sources":["../../../src/adapters/binance/BnApi.js"],"names":["C","URL","RESEARCH_URL","TRADE_URL","_isArr","Array","isArray","REG_BLANKS","_setLinks","option","c","s","_toIndex","indexOf","_caption","substring","trim","toLowerCase","replace","_s","_researchLink","_tradeLink","_crSymbol","_crDfUrl","items","v","interval","limit","_symbol","_crObUrl","_rCrUrl","DF","OB","BnApi","getRequestUrl","dfSubId","_crUrl","checkResponse","json","bids","asks"],"mappings":"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","sourcesContent":["import { crError } from '../crFn';\r\n\r\nconst C = {\r\n  URL: 'https://api.binance.com/api/v3',\r\n  RESEARCH_URL: 'https://research.binance.com/en/projects',\r\n  TRADE_URL: 'https://binance.com/en/trade'\r\n};\r\n\r\nconst _isArr = Array.isArray\r\n, REG_BLANKS = /\\s/g;\r\n\r\nconst _setLinks = (option, c, s='') => {\r\n  const _toIndex = c.indexOf('(')\r\n  , _caption = c.substring(0, _toIndex)\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(REG_BLANKS, '-')\r\n  , _s = s.replace('/', '_').toLowerCase();\r\n  option._researchLink = `${C.RESEARCH_URL}/${_caption}`\r\n  option._tradeLink = `${C.TRADE_URL}/${_s}`\r\n};\r\n\r\nconst _crSymbol = (s='') => s.replace('/','');\r\n\r\nconst _crDfUrl = option => {\r\n  const { items=[] } = option\r\n  , { s, c='' } = items[0]\r\n  , { v:interval } = items[1]\r\n  , { v:limit } = items[2]\r\n  , _symbol = _crSymbol(s);\r\n\r\n  _setLinks(option, c, s)\r\n  return `${C.URL}/klines?symbol=${_symbol}&interval=${interval}&limit=${limit}`;\r\n}\r\n\r\nconst _crObUrl = option => {\r\n  const { items=[] } = option\r\n  , { s } = items[0]\r\n  , { v:limit } = items[1]\r\n  , _symbol = _crSymbol(s);\r\n  return `${C.URL}/depth?symbol=${_symbol}&limit=${limit}`;\r\n}\r\n\r\nconst _rCrUrl = {\r\n  DF: _crDfUrl,\r\n  OB: _crObUrl\r\n};\r\n\r\nconst BnApi = {\r\n  getRequestUrl(option){\r\n    const { dfSubId } = option\r\n    const _crUrl = dfSubId && _rCrUrl[dfSubId]\r\n      || _rCrUrl.DF\r\n    return _crUrl(option);\r\n  },\r\n\r\n  checkResponse(json, option){\r\n    const { dfSubId } = option\r\n    if (!dfSubId && _isArr(json)) {\r\n      return true;\r\n    }\r\n    const { bids, asks } = json;\r\n    if (dfSubId === 'OB' && _isArr(bids) && _isArr(asks)) {\r\n      return true;\r\n    }\r\n    throw crError();\r\n  }\r\n};\r\n\r\nexport default BnApi\r\n"],"file":"BnApi.js"}