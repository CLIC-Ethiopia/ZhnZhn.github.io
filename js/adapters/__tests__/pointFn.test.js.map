{"version":3,"sources":["../../../src/adapters/__tests__/pointFn.test.js"],"names":["describe","fn","crVolumePoint","_p","date","volume","option","_high","_low","it","expect","open","close","toEqual","x","y","color","C","GREEN","_open","_close","RED","GRAY","NaN","crAthPoint","_upBy10","_downBy10","_equal","_pUndef","_pNull","_pZero","WHITE"],"mappings":"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","sourcesContent":["import {\r\n  crVolumePoint,\r\n  crAthPoint\r\n} from '../pointFn';\r\nimport C from '../../constants/Color'\r\n\r\ndescribe('crVolumePoint', ()=>{\r\n  const fn = crVolumePoint\r\n  const _p = { date: 12345, volume: 10 }\r\n  const option = { _high: 2.2, _low: 0.8 }\r\n  it('should cr volume point with option', ()=>{\r\n    expect(fn({ ..._p, open: 1, close: 2, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GREEN, _open: 1, _close: 2,\r\n      ...option\r\n    })\r\n    expect(fn({ ..._p, open: 2, close: 1, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.RED, _open: 2, _close: 1,\r\n      ...option\r\n    })\r\n    expect(fn({ ..._p, open: 2, close: 2, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: 2, _close: 2,\r\n      ...option\r\n    })\r\n  })\r\n  it('should cr point C.GRAY for open falsy edge case', ()=>{\r\n    expect(fn({ ..._p, open: null, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: null, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: void 0, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: void 0, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: 0, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: 0, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: NaN, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: NaN, _close: 2,\r\n    })\r\n  })\r\n})\r\n\r\ndescribe('crAthPoint',()=>{\r\n  const fn = crAthPoint\r\n  const _p = { date: 12345 }\r\n  it('should cr ath point',()=>{\r\n    const _upBy10 = { close: 100, open: 110}\r\n    expect(fn({..._p, ..._upBy10 })).toEqual({\r\n      x: _p.date,\r\n      y: 10, ..._upBy10, color: C.GREEN\r\n    })\r\n\r\n    const _downBy10 = { close: 100, open: 90 }\r\n    expect(fn({..._p, ..._downBy10 })).toEqual({\r\n      x: _p.date,\r\n      y: 10, ..._downBy10, color: C.RED\r\n    })\r\n\r\n    const _equal = { close: 100, open: 100 }\r\n    expect(fn({..._p, ..._equal })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._equal, color: C.GRAY\r\n    })\r\n  })\r\n  it('should return point with y=0 for falsy prevClose', ()=>{\r\n    const _pUndef = { close: void 0, open: 100 }\r\n    expect(fn({..._p, ..._pUndef })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pUndef, color: C.GRAY\r\n    })\r\n    const _pNull = { close: null, open: 100}\r\n    expect(fn({..._p, ..._pNull })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pNull, color: C.GRAY\r\n    })\r\n    const _pZero = { close: 0, open: 100 }\r\n    expect(fn({..._p, ..._pZero })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pZero, color: C.GRAY\r\n    })\r\n  })\r\n  it('should return point with color=C.WHITE && open=Unknown for falsy open',()=>{\r\n    expect(fn({..._p, close: 100, open: null })).toEqual({\r\n      x: _p.date, y: 0,\r\n      close: 100, open: 'Unknown',\r\n      color: C.WHITE\r\n    })\r\n    expect(fn({..._p, close: 100, open: 0 })).toEqual({\r\n      x: _p.date, y: 0,\r\n      close: 100, open: 'Unknown',\r\n      color: C.WHITE\r\n    })\r\n  })\r\n})\r\n"],"file":"pointFn.test.js"}