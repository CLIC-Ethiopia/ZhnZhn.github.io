{"version":3,"sources":["../../../src/adapters/__tests__/pointFn.test.js"],"names":["crVolumePoint","crPoint","crAthPoint","describe","fn","_p","date","volume","option","_high","_low","it","expect","open","close","toEqual","x","y","color","C","GREEN","_open","_close","RED","GRAY","NaN","_upBy10","_downBy10","_equal","_pUndef","_pNull","_pZero","WHITE"],"mappings":"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","sourcesContent":["import crPoint from '../pointFn'\r\n\r\nimport C from '../../constants/Color'\r\n\r\nconst {\r\n  crVolumePoint,\r\n  crAthPoint\r\n} = crPoint\r\n\r\ndescribe('crVolumePoint', ()=>{\r\n  const fn = crVolumePoint\r\n  const _p = { date: 12345, volume: 10 }\r\n  const option = { _high: 2.2, _low: 0.8 }\r\n  it('should cr volume point with option', ()=>{\r\n    expect(fn({ ..._p, open: 1, close: 2, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GREEN, _open: 1, _close: 2,\r\n      ...option\r\n    })\r\n    expect(fn({ ..._p, open: 2, close: 1, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.RED, _open: 2, _close: 1,\r\n      ...option\r\n    })\r\n    expect(fn({ ..._p, open: 2, close: 2, option })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: 2, _close: 2,\r\n      ...option\r\n    })\r\n  })\r\n  it('should cr point C.GRAY for open falsy edge case', ()=>{\r\n    expect(fn({ ..._p, open: null, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: null, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: void 0, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: void 0, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: 0, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: 0, _close: 2,\r\n    })\r\n    expect(fn({ ..._p, open: NaN, close: 2 })).toEqual({\r\n      x: _p.date, y: _p.volume,\r\n      color: C.GRAY, _open: NaN, _close: 2,\r\n    })\r\n  })\r\n})\r\n\r\ndescribe('crAthPoint',()=>{\r\n  const fn = crAthPoint\r\n  const _p = { date: 12345 }\r\n  it('should cr ath point',()=>{\r\n    const _upBy10 = { close: 100, open: 110}\r\n    expect(fn({..._p, ..._upBy10 })).toEqual({\r\n      x: _p.date,\r\n      y: 10, ..._upBy10, color: C.GREEN\r\n    })\r\n\r\n    const _downBy10 = { close: 100, open: 90 }\r\n    expect(fn({..._p, ..._downBy10 })).toEqual({\r\n      x: _p.date,\r\n      y: 10, ..._downBy10, color: C.RED\r\n    })\r\n\r\n    const _equal = { close: 100, open: 100 }\r\n    expect(fn({..._p, ..._equal })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._equal, color: C.GRAY\r\n    })\r\n  })\r\n  it('should return point with y=0 for falsy prevClose', ()=>{\r\n    const _pUndef = { close: void 0, open: 100 }\r\n    expect(fn({..._p, ..._pUndef })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pUndef, color: C.GRAY\r\n    })\r\n    const _pNull = { close: null, open: 100}\r\n    expect(fn({..._p, ..._pNull })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pNull, color: C.GRAY\r\n    })\r\n    const _pZero = { close: 0, open: 100 }\r\n    expect(fn({..._p, ..._pZero })).toEqual({\r\n      x: _p.date,\r\n      y: 0, ..._pZero, color: C.GRAY\r\n    })\r\n  })\r\n  it('should return point with color=C.WHITE && open=Unknown for falsy open',()=>{\r\n    expect(fn({..._p, close: 100, open: null })).toEqual({\r\n      x: _p.date, y: 0,\r\n      close: 100, open: 'Unknown',\r\n      color: C.WHITE\r\n    })\r\n    expect(fn({..._p, close: 100, open: 0 })).toEqual({\r\n      x: _p.date, y: 0,\r\n      close: 100, open: 'Unknown',\r\n      color: C.WHITE\r\n    })\r\n  })\r\n})\r\n"],"file":"pointFn.test.js"}