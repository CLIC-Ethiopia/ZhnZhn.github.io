{"version":3,"sources":["../../src/adapters/ToScatter.js"],"names":["C","COLOR_PLUS","COLOR_MINUS","_crZhConfig","option","dataSource","id","crId","key","isWithoutAdd","isWithLegend","_calcScatterY","chart","seriaType","SCATTER_UP","yAxis","max","min","onePercent","SCATTER_DOWN","_updateLabelY","p","dataLabels","y","_crSeria","arr","data","map","date","v","_color","_p","fMarkerExDividend","Object","assign","x","ymdToUTC","exValue","type","tooltip","pointFormatter","headerFormat","_getSeriaFrom","config","seria","series","_d","ToScatter","toConfig","initBaseArea","add","zhConfig","toSeria"],"mappings":"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","file":"ToScatter.js","sourcesContent":["\r\nimport { ChartType as CT } from '../constants/Type'\r\n\r\nimport ChartConfig from '../charts/ChartConfig'\r\nimport Tooltip from '../charts/Tooltip'\r\nimport ConfigBuilder from '../charts/ConfigBuilder'\r\n\r\nimport AdapterFn from './AdapterFn'\r\n\r\nconst C = {\r\n  COLOR_PLUS: '#4caf50',\r\n  COLOR_MINUS: '#f44336'\r\n}\r\n\r\nconst _crZhConfig = (option) => {\r\n  const { dataSource } = option\r\n      , id = AdapterFn.crId();\r\n  return {\r\n    id, key: id,\r\n    isWithoutAdd: true,\r\n    isWithLegend: false,\r\n    dataSource\r\n  };\r\n}\r\n\r\nconst _calcScatterY = (option, chart) => {\r\n  const { seriaType=CT.SCATTER_UP } = option\r\n      , { max, min } = chart.yAxis[0]\r\n      , onePercent = (max - min)/100;\r\n  switch(seriaType){\r\n    case CT.SCATTER_DOWN:\r\n      return (min + 4*onePercent);\r\n    default:\r\n      return (max - 7*onePercent);\r\n  }\r\n}\r\n\r\n\r\nconst _updateLabelY = (p, seriaType) => {\r\n  if (seriaType === CT.SCATTER_UP) {\r\n     p.dataLabels.y = 0\r\n  }\r\n}\r\n\r\nconst _crSeria = (arr, option) => {\r\n  const { seriaType=CT.SCATTER_UP } = option;\r\n  const data = arr.map(p => {\r\n    const date = p[0]\r\n        , v = p[1]\r\n        , _color = v >= 0 ? C.COLOR_PLUS : C.COLOR_MINUS\r\n        , _p = ChartConfig.fMarkerExDividend(_color);\r\n\r\n    _updateLabelY(_p, seriaType)\r\n    return Object.assign(_p, {\r\n         x: AdapterFn.ymdToUTC(date),\r\n         exValue: v,\r\n         ...p\r\n      });\r\n  })\r\n  return {\r\n    type: 'scatter',\r\n    tooltip: {\r\n      pointFormatter: Tooltip.exValue,\r\n      headerFormat: ''\r\n    },\r\n    data: data\r\n    //zhSeriaId : zhSeriaId\r\n  };\r\n}\r\n\r\nconst _getSeriaFrom = (config, option, chart) => {\r\n  const y = _calcScatterY(option, chart)\r\n      , seria = config.series[0]\r\n      , _d = seria.data.map(p => {\r\n         p.y = y\r\n         return p;\r\n      });\r\n  seria.data = _d\r\n  return seria;\r\n}\r\n\r\nconst ToScatter = {\r\n\r\n  toConfig: (data, option) => {\r\n    const seria = _crSeria(data, option)\r\n        , config = ConfigBuilder()\r\n           .initBaseArea()\r\n           .add({\r\n              zhConfig: _crZhConfig(option)\r\n            })\r\n           .toConfig();\r\n    config.series[0] = seria\r\n    return config;\r\n  },\r\n\r\n  toSeria: (data, option, chart) => {\r\n    const config = ToScatter.toConfig(data, option)\r\n        , seria = _getSeriaFrom(config, option, chart)\r\n    return seria;\r\n  }\r\n\r\n}\r\n\r\nexport default ToScatter\r\n"]}