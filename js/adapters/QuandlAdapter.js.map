{"version":3,"sources":["../../src/adapters/QuandlAdapter.js"],"names":["C","OPEN","CLOSE","LOW","HIGH","VOLUME","EX_DIVIDEND","SPLIT_RATIO","UNKNOWN","COLOR_BLUE","COLOR_GREEN","COLOR_RED","COLOR_WHITE","COLOR_GRAY","_fnConvertToUTC","point","result","arrDate","split","dateUTC","Date","UTC","parseInt","_fnCheckExtrems","yPointIndex","maxPoint","minPoint","_fnAddToSeria","seria","push","_fnAddSplitRatio","splitRationIndex","dataSplitRatio","x","splitRatio","price","Object","assign","fMarkerSplitRatio","_fnAddExDividend","exDividendIndex","dataExDividend","exValue","isPrevDateAfter","fMarkerExDividend","marker","dataLabels","y","_fnAddVolume","optionIndex","volume","open","close","low","high","dataVolume","dataVolumeColumn","_open","_close","_low","_high","color","_fnAddATH","dataATH","len","length","prevPoint","_closePrev","_bDelta","minus","_bPercent","times","div","abs","toFixed","_color","gt","gte","parseFloat","_fnAddHighLow","dataHighLow","_closeValue","_openValue","_bHigh","_bLow","_dayHigh","_dayLow","dayHigh","dayLow","_fnAddCustomSeries","columns","legendSeries","i","max","data","_fLegendConfig","seriaColumnNames","column_names","columnName","columnIndex","findColumnIndex","fLegendConfig","_fnCreatePointFlow","json","option","fnStep","dataset","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","exDividend","bind","fnPointsFlow","_fnSeriesPipe","points","zhPoints","minY","calcMinY","_fnSetYForPoints","_fnAddSeriesExDivident","config","chartId","series","fExDividendSeria","chart","spacingBottom","_fnAddSeriesSplitRatio","fSplitRatioSeria","_fnCheckIsMfi","names","zhIsMfi","zhFnGetMfiConfig","_fnSetChartTitle","title","subtitle","setDefaultTitle","_fnSetLegendSeriesToConfig","legend","_len","name","zhValueText","index","isVisible","symbol","isSecondAxes","fSeries","zhSeriaId","visible","fSeriaMarker","zhConfig","fnGetSeries","dataColumn","value","createZhConfig","info","createDatasetInfo","zhFnAddSeriesSma","zhFnRemoveSeries","valueMoving","createValueMovingFromSeria","date","getRecentDate","zhVolumeConfig","fIndicatorVolumeConfig","undefined","zhATHConfig","fIndicatorATHConfig","zhHighLowConfig","fIndicatorHighLowConfig","isWithLegend","fnConfigAxes","_maxPoint","round","toString","_minPoint","plotLines","yAxis","label","text","fnNumberFormat","min","fnQuandlFlow","_fCreateAreaConfig","fBaseAreaConfig","getDataColumnIndex","_rToConfig","AREA","SEMI_DONUT","STACKED_AREA","STACKED_AREA_PERCENT","STACKED_COLUMN","STACKED_COLUMN_PERCENT","TREE_MAP","QuandlAdapter","toConfig","seriaType","toSeries","parentId","map","valueText","substring","configSeries","findMinY"],"mappings":"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","file":"QuandlAdapter.js","sourcesContent":["\r\nimport flow from 'lodash.flow';\r\nimport sortBy from 'lodash.sortby';\r\nimport Big from 'big.js';\r\n\r\nimport {ChartType} from '../constants/Type';\r\nimport Chart from '../charts/Chart';\r\nimport ChartConfig from '../charts/ChartConfig';\r\nimport ChartLegend from '../charts/ChartLegend';\r\n\r\nimport { fnAddSeriesSma, fnRemoveSeries, fnGetConfigMfi } from './IndicatorSma';\r\n\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\nimport {fCreatePieConfig} from './QuandlToPie';\r\nimport {fCreateStackedAreaConfig} from './QuandlToStackedArea';\r\nimport {fCreateStackedColumnConfig} from './QuandlToStackedColumn';\r\nimport {fCreateTreeMapConfig} from './QuandlToTreeMap';\r\n\r\n\r\nconst C = {\r\n  OPEN : \"Open\",\r\n  CLOSE : \"Close\",\r\n  LOW : \"Low\",\r\n  HIGH : \"High\",\r\n  VOLUME : \"Volume\",\r\n  EX_DIVIDEND : \"Ex-Dividend\",\r\n  SPLIT_RATIO : \"Split Ratio\",\r\n  UNKNOWN : \"Unknown\",\r\n\r\n  COLOR_BLUE : \"#2f7ed8\", // #7cb5ec\r\n  COLOR_GREEN : \"#80c040\",\r\n  COLOR_RED : \"#F44336\",\r\n  COLOR_WHITE : \"white\",\r\n  COLOR_GRAY : \"gray\"\r\n}\r\n\r\n\r\nconst _fnConvertToUTC = function(point, result){\r\n   const arrDate = point[0].split('-');\r\n   result.dateUTC = Date.UTC(arrDate[0], (parseInt(arrDate[1], 10)-1), arrDate[2]);\r\n   result.point = point;\r\n   return result;\r\n}\r\n\r\nconst _fnCheckExtrems = function(result){\r\n  const {point, yPointIndex, maxPoint, minPoint} = result;\r\n  if (!(point[yPointIndex] == null) && point[yPointIndex]>=maxPoint){\r\n    result.maxPoint = point[yPointIndex];\r\n  }\r\n  if (!(point[yPointIndex] == null) && point[yPointIndex]<=minPoint) {\r\n    result.minPoint = point[yPointIndex];\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nconst _fnAddToSeria = function(result){\r\n   const {seria, dateUTC, point, yPointIndex} = result;\r\n   seria.push([dateUTC, point[yPointIndex]]);\r\n\r\n   return result;\r\n}\r\n\r\nconst _fnAddSplitRatio = function(splitRationIndex, result){\r\n  const { point, dateUTC, yPointIndex, dataSplitRatio } = result;\r\n  if (point[splitRationIndex] !== 1){\r\n    const x = dateUTC\r\n        , splitRatio = point[splitRationIndex]\r\n        , price = point[yPointIndex];\r\n\r\n    dataSplitRatio.push(Object.assign(ChartConfig.fMarkerSplitRatio(), {x, splitRatio, price}));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst _fnAddExDividend = function(exDividendIndex, result){\r\n     const { point, dateUTC, yPointIndex, dataExDividend } = result;\r\n\r\n     if (point[exDividendIndex] !== 0){\r\n       const x = dateUTC\r\n           , exValue = point[exDividendIndex]\r\n           , price = point[yPointIndex];\r\n\r\n       if (QuandlFn2.isPrevDateAfter(dataExDividend, x , 14)) {\r\n          dataExDividend.push(Object.assign(ChartConfig.fMarkerExDividend(), {x, exValue, price}));\r\n       } else {\r\n          const marker = Object.assign(ChartConfig.fMarkerExDividend(), {x, exValue, price});\r\n          marker.dataLabels.y = 0;\r\n          dataExDividend.push(marker);\r\n       }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst _fnAddVolume = function(optionIndex, result){\r\n  const { volume, open=1, close=4, low=3, high=2 } = optionIndex\r\n      , { point, dateUTC, dataVolume, dataVolumeColumn } = result;\r\n  dataVolume.push([dateUTC, point[volume]]);\r\n  if (point[close]>point[open]){\r\n    dataVolumeColumn.push({\r\n      x : dateUTC, y : point[volume],\r\n      _open : point[open], _close : point[close],\r\n      _low: point[low], _high: point[high],\r\n      color: C.COLOR_GREEN\r\n    });\r\n  } else if (point[close]<point[open]){\r\n    dataVolumeColumn.push({\r\n      x : dateUTC, y : point[volume],\r\n      _open : point[open], _close : point[close],\r\n      _low: point[low], _high: point[high],\r\n      color: C.COLOR_RED\r\n    });\r\n  } else {\r\n    dataVolumeColumn.push({\r\n      x : dateUTC, y : point[volume],\r\n      _open : point[open], _close : point[close],\r\n      _low: point[low], _high: point[high],\r\n      color: C.COLOR_GRAY\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nconst _fnAddATH = function(optionIndex, result){\r\n  const { open=1 } = optionIndex\r\n      , { dateUTC, point, seria, dataATH } = result\r\n      , len = seria.length;\r\n\r\n  if (len>1){\r\n    const prevPoint = seria[len-2]\r\n        , _closePrev = prevPoint[1]\r\n        , _bDelta = (point[open] && _closePrev)\r\n            ? Big(_closePrev).minus(point[open])\r\n            : Big('0.0')\r\n        , _bPercent = ( _closePrev )\r\n            ? _bDelta.times(100).div(_closePrev).abs().toFixed(2)\r\n            : Big('0.0');\r\n\r\n    let _color;\r\n    if (_bDelta.gt(0.0)){\r\n      _color = C.COLOR_RED;\r\n    }\r\n    else if (!_bDelta.gte(0.0)){\r\n      _color = C.COLOR_GREEN;\r\n    } else {\r\n      _color = (point[open]) ? C.COLOR_GRAY : C.COLOR_WHITE;\r\n    }\r\n\r\n    dataATH.push({\r\n      x : dateUTC,\r\n      y : parseFloat(_bPercent),\r\n      close : _closePrev,\r\n      open : (point[open]) ? point[open] : C.UNKNOWN,\r\n      color : _color\r\n    })\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst _fnAddHighLow = function(optionIndex, result){\r\n  const { open=1, high=2, low=3 } = optionIndex\r\n      , { dateUTC, yPointIndex, point, dataHighLow } = result;\r\n\r\n  const _closeValue = point[yPointIndex]\r\n      , _openValue = (point[open]) ? point[open] : C.UNKNOWN\r\n      , _bHigh = (point[high]) ? Big(point[high]).minus(_closeValue) : Big('0.0')\r\n      , _bLow = (point[low]) ? Big(point[low]).minus(_closeValue) : Big('0.0')\r\n      , _dayHigh = (point[high]) ? point[high] : C.UNKNOWN\r\n      , _dayLow = (point[low]) ? point[low] : C.UNKNOWN\r\n\r\n  dataHighLow.push({\r\n    x : dateUTC,\r\n    high : parseFloat(_bHigh),\r\n    low : parseFloat(_bLow),\r\n    open : _openValue,\r\n    dayHigh : _dayHigh,\r\n    dayLow : _dayLow,\r\n    close : _closeValue\r\n  });\r\n\r\n  return result\r\n}\r\n\r\nconst _fnAddCustomSeries = function(columns, result){\r\n   const { dateUTC, point, legendSeries } = result;\r\n   for (var i=0, max=columns.length ; i<max; i++ ){\r\n      legendSeries[i].data.push([dateUTC, point[columns[i]]])\r\n   }\r\n}\r\n\r\nconst _fLegendConfig = function(seriaColumnNames, column_names){\r\n  const legendSeries = []\r\n      , columns =[];\r\n\r\n  for (let i=0, max=seriaColumnNames.length; i<max; i++ ){\r\n     const columnName = seriaColumnNames[i]\r\n         , columnIndex = QuandlFn2.findColumnIndex(column_names, columnName);\r\n     if (columnIndex) {\r\n        legendSeries.push(ChartLegend.fLegendConfig(columnName));\r\n        columns.push(columnIndex);\r\n     }\r\n  }\r\n\r\n  return { legendSeries, columns }\r\n}\r\n\r\nconst _fnCreatePointFlow = function(json, yPointIndex, option){\r\n\r\n  const fnStep = [_fnConvertToUTC, _fnCheckExtrems, _fnAddToSeria]\r\n      , column_names = json.dataset.column_names\r\n      , result = {\r\n         yPointIndex : yPointIndex,\r\n         minPoint : Number.POSITIVE_INFINITY,\r\n         maxPoint : Number.NEGATIVE_INFINITY,\r\n         seria : [],\r\n         dataVolume : [], dataVolumeColumn : [],\r\n         dataExDividend : [], dataSplitRatio : [],\r\n         dataATH : [], dataHighLow : []\r\n      };\r\n\r\n  const open = QuandlFn2.findColumnIndex(column_names, C.OPEN)\r\n      , close = QuandlFn2.findColumnIndex(column_names, C.CLOSE)\r\n      , low = QuandlFn2.findColumnIndex(column_names, C.LOW)\r\n      , high = QuandlFn2.findColumnIndex(column_names, C.HIGH)\r\n      , volume = QuandlFn2.findColumnIndex(column_names, C.VOLUME)\r\n      , exDividend = QuandlFn2.findColumnIndex(column_names, C.EX_DIVIDEND)\r\n      , splitRatio = QuandlFn2.findColumnIndex(column_names, C.SPLIT_RATIO);\r\n\r\n  if (volume){\r\n    fnStep.push(_fnAddVolume.bind(null, {\r\n      volume, open, close, low, high\r\n    }));\r\n  }\r\n\r\n  if (exDividend) {\r\n    fnStep.push(_fnAddExDividend.bind(null, exDividend));\r\n  }\r\n\r\n  if (splitRatio){\r\n    fnStep.push(_fnAddSplitRatio.bind(null, splitRatio));\r\n  }\r\n\r\n  if (open){\r\n    fnStep.push(_fnAddATH.bind(null, { open }));\r\n  }\r\n\r\n  if (high && low ){\r\n    fnStep.push(_fnAddHighLow.bind(null, { open, high, low }));\r\n  }\r\n\r\n  const { seriaColumnNames } = option;\r\n  if (seriaColumnNames) {\r\n    const { legendSeries, columns } = _fLegendConfig(seriaColumnNames, column_names);\r\n\r\n    if (legendSeries.length !== 0){\r\n      result.legendSeries = legendSeries\r\n      fnStep.push(_fnAddCustomSeries.bind(null, columns));\r\n    }\r\n  }\r\n\r\n  return {\r\n    fnPointsFlow : flow(fnStep),\r\n    result : result\r\n  };\r\n}\r\n\r\nconst _fnSeriesPipe = function(json, yPointIndex, option){\r\n  const {fnPointsFlow, result} = _fnCreatePointFlow(json, yPointIndex, option)\r\n      , points = sortBy(json.dataset.data, '0');\r\n\r\n  for(var i=0, max=points.length; i<max; i++){\r\n    fnPointsFlow(points[i], result);\r\n  }\r\n\r\n  result.zhPoints = points;\r\n  result.minY = Chart.calcMinY(result);\r\n\r\n  return result\r\n}\r\n\r\nconst _fnSetYForPoints = function(data, y){\r\n  for (let i=0, max=data.length; i<max; i++ ){\r\n    data[i].y = y;\r\n  }\r\n}\r\n\r\nconst _fnAddSeriesExDivident = function(config, data, chartId, y){\r\n  if (data.length>0){\r\n    _fnSetYForPoints(data, y);\r\n    config.series.push(ChartConfig.fExDividendSeria(data, chartId));\r\n    config.chart.spacingBottom = 40;\r\n  }\r\n}\r\n\r\nconst _fnAddSeriesSplitRatio = function(config, data, chartId, y){\r\n  if (data.length>0){\r\n    _fnSetYForPoints(data, y);\r\n    config.series.push(ChartConfig.fSplitRatioSeria(data, chartId));\r\n    config.chart.spacingBottom = 40;\r\n  }\r\n};\r\n\r\nconst _fnCheckIsMfi = function(config, json, zhPoints){\r\n  const names= json.dataset.column_names;\r\n  if ( names[2] === C.HIGH && names[3] === C.LOW  &&\r\n       names[4] === C.CLOSE && names[5] === C.VOLUME) {\r\n    config.zhPoints = zhPoints;\r\n    config.zhIsMfi = true;\r\n    config.zhFnGetMfiConfig = fnGetConfigMfi;\r\n  }\r\n};\r\n\r\nconst _fnSetChartTitle = function(config, option){\r\n  const { title, subtitle } = option;\r\n  if (title){\r\n    Chart.setDefaultTitle(config, title, subtitle);\r\n  }\r\n}\r\n\r\nconst _fnSetLegendSeriesToConfig = function(legendSeries, config, chartId){\r\n  const legend = []\r\n      , _len = config.series.length;\r\n\r\n  if (_len !== 0){\r\n     legend.push({\r\n        name: config.series[0].zhValueText,\r\n        index: 0,\r\n        color: C.COLOR_BLUE,\r\n        isVisible : true\r\n    });\r\n  }\r\n\r\n  for (let i=0, max=legendSeries.length; i<max; i++){\r\n    const { data, name, color, symbol, isSecondAxes } = legendSeries[i]\r\n        , seria = ChartConfig.fSeries({\r\n             zhSeriaId : i + '_' + chartId,\r\n             zhValueText : name,\r\n             visible : false,\r\n             marker : Chart.fSeriaMarker({ color, symbol }),\r\n             color: color,\r\n             data : data\r\n          });\r\n\r\n     if (!isSecondAxes){\r\n        config.series.push(seria);\r\n        legend.push({\r\n          name : name,\r\n          index : config.series.length - 1,\r\n          color : color,\r\n          isVisible : false\r\n        });\r\n     } else {\r\n       legend.push({\r\n          name : name,\r\n          color : color,\r\n          isVisible : false,\r\n          isSecondAxes : true,\r\n          seria : seria\r\n        });\r\n     }\r\n  }\r\n\r\n  config.zhConfig.legend = legend;\r\n};\r\n\r\nconst fnGetSeries = function(config, json, option){\r\n   const { dataColumn:yPointIndex, value:chartId } = option;\r\n\r\n   _fnSetChartTitle(config, option);\r\n   config.zhConfig = QuandlFn2.createZhConfig(option);\r\n   config.info = QuandlFn2.createDatasetInfo(json);\r\n\r\n   const {\r\n     seria, minPoint, maxPoint, minY,\r\n     dataExDividend, dataSplitRatio,\r\n     dataVolume, dataVolumeColumn,\r\n     dataATH, dataHighLow,\r\n     legendSeries, zhPoints\r\n   } = _fnSeriesPipe(json, yPointIndex, option);\r\n\r\n   _fnCheckIsMfi(config, json, zhPoints);\r\n   config.zhFnAddSeriesSma = fnAddSeriesSma;\r\n   config.zhFnRemoveSeries = fnRemoveSeries;\r\n\r\n   config.valueMoving = QuandlFn2.createValueMovingFromSeria(seria);\r\n   config.valueMoving.date = QuandlFn2.getRecentDate(seria, json);\r\n   config.series[0].data = seria;\r\n   config.series[0].zhSeriaId = chartId;\r\n\r\n   _fnAddSeriesExDivident(config, dataExDividend, chartId, minY);\r\n   _fnAddSeriesSplitRatio(config, dataSplitRatio, chartId, minY);\r\n\r\n   config.zhVolumeConfig = (dataVolume.length>0)\r\n            ? ChartConfig.fIndicatorVolumeConfig(chartId, dataVolumeColumn, dataVolume)\r\n            : undefined;\r\n   config.zhATHConfig = (dataATH.length>0)\r\n            ? ChartConfig.fIndicatorATHConfig(chartId, dataATH)\r\n            : undefined;\r\n   config.zhHighLowConfig = (dataHighLow.length>0)\r\n            ? ChartConfig.fIndicatorHighLowConfig(chartId, dataHighLow)\r\n            : undefined;\r\n\r\n    if (legendSeries){\r\n      _fnSetLegendSeriesToConfig(legendSeries, config, chartId);\r\n      config.zhConfig.isWithLegend = true;\r\n    }\r\n\r\n   return { config, minPoint, maxPoint, minY }\r\n}\r\n\r\nconst fnConfigAxes = function(result){\r\n  const { config, minPoint, maxPoint, minY } = result\r\n      , _maxPoint = parseFloat(Big(maxPoint).round(4).toString(), 10)\r\n      , _minPoint = parseFloat(Big(minPoint).round(4).toString(), 10)\r\n      , plotLines = config.yAxis.plotLines;\r\n\r\n  plotLines[0].value = _maxPoint;\r\n  plotLines[0].label.text = ChartConfig.fnNumberFormat(_maxPoint);\r\n  plotLines[1].value = _minPoint;\r\n  plotLines[1].label.text = ChartConfig.fnNumberFormat(_minPoint);\r\n\r\n  config.yAxis.min = minY;\r\n\r\n  return result\r\n}\r\n\r\nconst fnQuandlFlow = flow(fnGetSeries, fnConfigAxes);\r\n\r\nconst _fCreateAreaConfig = function(json, option){\r\n  const config = ChartConfig.fBaseAreaConfig()\r\n      , { columnName } = option;\r\n\r\n  option.dataColumn = QuandlFn2.getDataColumnIndex(json, option);\r\n  if ( columnName ){\r\n    config.series[0].zhValueText = columnName;\r\n  }\r\n\r\n  return fnQuandlFlow(config, json, option);\r\n}\r\n\r\nconst _rToConfig = {\r\n  [ChartType.AREA] : _fCreateAreaConfig,\r\n  [ChartType.SEMI_DONUT] : fCreatePieConfig,\r\n  [ChartType.STACKED_AREA] : fCreateStackedAreaConfig,\r\n  [ChartType.STACKED_AREA_PERCENT] : fCreateStackedAreaConfig,\r\n  [ChartType.STACKED_COLUMN] : fCreateStackedColumnConfig,\r\n  [ChartType.STACKED_COLUMN_PERCENT] : fCreateStackedColumnConfig,\r\n  [ChartType.TREE_MAP] : fCreateTreeMapConfig\r\n}\r\n\r\nconst QuandlAdapter = {\r\n  toConfig(json, option){\r\n     const {seriaType=ChartType.AREA} = option;\r\n\r\n     return _rToConfig[seriaType](json, option);\r\n  },\r\n\r\n  toSeries(json, option){\r\n    const { value:chartId, parentId } = option\r\n        , yPointIndex = QuandlFn2.getDataColumnIndex(json, option);\r\n\r\n    let data = json.dataset.data.map((point, index)=> {\r\n      const arrDate = point[0].split('-');\r\n      return [Date.UTC(arrDate[0], (parseInt(arrDate[1], 10)-1), arrDate[2]), point[yPointIndex]];\r\n    });\r\n    data = sortBy(data, '0');\r\n\r\n    const valueText = (chartId.length<12) ? chartId : chartId.substring(0,12)\r\n        , configSeries = ChartConfig.fSeries();\r\n\r\n    configSeries.zhSeriaId = parentId + '_' + chartId;\r\n    configSeries.zhValueText = valueText;\r\n    configSeries.data = data;\r\n    configSeries.minY = QuandlFn2.findMinY(data);\r\n\r\n    return configSeries;\r\n  }\r\n\r\n}\r\n\r\nexport default QuandlAdapter;\r\n"]}