{"version":3,"sources":["../../../src/adapters/bea/fnAdapter.js"],"names":["_isArr","Array","isArray","_getResults","json","BEAAPI","Results","_getData","Data","_getInfo","_crName","info","Statistic","UTCProductionTime","t","replace","_crDescr","Notes","arr","map","note","NoteRef","NoteText","join","_crInfo","_info","name","description","_crZhConfig","_itemKey","itemCaption","dataSource","id","key","MD","DF","_crUTC","item","Frequency","Year","Quarter","md","crData","option","dfFilterName","items","two","value","d","isFilter","data","forEach","v","parseFloat","DataValue","y","push","x","crConfOption","zhConfig"],"mappings":"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","sourcesContent":["export { joinBy } from '../AdapterFn';\r\nexport { crError } from '../crFn';\r\n\r\nimport {\r\n  _isNaN,\r\n  ymdToUTC\r\n} from '../AdapterFn';\r\n\r\nconst _isArr = Array.isArray\r\n, _getResults = json => json.BEAAPI.Results\r\n, _getData = Results => _isArr(Results)\r\n    ? Results[0].Data\r\n    : Results.Data\r\n, _getInfo = Results => _isArr(Results)\r\n    ? Results[0]\r\n    : Results;\r\n\r\nconst _crName = info => {\r\n  const { Statistic='', UTCProductionTime='' } = info\r\n      , t = UTCProductionTime.replace('T', ' ');\r\n  return `${Statistic}: ${t}`;\r\n};\r\nconst _crDescr = info => {\r\n  const { Notes=[] } = info\r\n  , arr = Notes.map(note => {\r\n      const { NoteRef='', NoteText='' } = note;\r\n      return `<P>${NoteRef}: ${NoteText}</P><BR/>`;\r\n  });\r\n  return arr.join('');\r\n};\r\nconst _crInfo = (Results) => {\r\n  const _info = _getInfo(Results);\r\n  return {\r\n    name: _crName(_info),\r\n    description: _crDescr(_info)\r\n  }\r\n};\r\n\r\nconst _crZhConfig = ({\r\n  _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n}) => ({\r\n  id: _itemKey, key: _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n});\r\n\r\nconst MD = {\r\n  DF: '-12-31',\r\n  'I': '-03-31',\r\n  'II': '-06-30',\r\n  'III': '-09-30'\r\n};\r\n\r\nconst _crUTC = (item) => {\r\n  const { Frequency, Year, Quarter } = item\r\n  , md = Frequency === 'Q'\r\n     ? MD[Quarter] || MD.DF\r\n     : MD.DF;\r\n  return ymdToUTC(Year + md);\r\n};\r\n\r\n\r\nexport const crData = (\r\n  json,\r\n  option\r\n) => {\r\n  const Results = _getResults(json)\r\n  , { dfFilterName, items } = option\r\n  , two = (items[1] || {}).value\r\n  , d = []\r\n  , isFilter = dfFilterName ? true : false\r\n  , data = _getData(Results) || [];\r\n\r\n  data.forEach(item => {\r\n    const v = parseFloat(item.DataValue)\r\n        , y = _isNaN(v) ? null : v;\r\n    if ( !(isFilter && item[dfFilterName] !== two) ) {\r\n      d.push({\r\n        x: _crUTC(item),\r\n        y: y\r\n      })\r\n    }\r\n  })\r\n\r\n  return d;\r\n}\r\n\r\nexport const crConfOption = (\r\n  option,\r\n  json\r\n) => {\r\n  const Results = _getResults(json);\r\n  return {\r\n    zhConfig: _crZhConfig(option),\r\n    info: _crInfo(Results)\r\n  };\r\n}\r\n"],"file":"fnAdapter.js"}