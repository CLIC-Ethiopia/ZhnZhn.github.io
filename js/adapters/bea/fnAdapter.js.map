{"version":3,"sources":["../../../src/adapters/bea/fnAdapter.js"],"names":["_isArr","Array","isArray","_isNaN","Number","isNaN","_getResults","json","BEAAPI","Results","_getData","Data","_getInfo","_crName","info","Statistic","UTCProductionTime","t","replace","_crDescr","Notes","arr","map","note","NoteRef","NoteText","join","_crInfo","_info","name","description","_crZhConfig","_itemKey","itemCaption","dataSource","id","key","MD","DF","_crUTC","item","Frequency","Year","Quarter","md","fnAdapter","crData","option","dfFilterName","items","two","value","d","isFilter","data","forEach","v","parseFloat","DataValue","y","push","x","crConfOption","zhConfig"],"mappings":";;;;;AAAA;;AAEA,MAAMA,MAAM,GAAGC,KAAK,CAACC,OAArB;AAAA,MACEC,MAAM,GAAGC,MAAM,CAACC,KADlB;;AAGA,MAAMC,WAAW,GAAGC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAYC,OAAxC;AAAA,MACEC,QAAQ,GAAGD,OAAO,IAAIT,MAAM,CAACS,OAAD,CAAN,GAClBA,OAAO,CAAC,CAAD,CAAP,CAAWE,IADO,GAElBF,OAAO,CAACE,IAHd;AAAA,MAIEC,QAAQ,GAAGH,OAAO,IAAIT,MAAM,CAACS,OAAD,CAAN,GAClBA,OAAO,CAAC,CAAD,CADW,GAElBA,OANN;;AAQA,MAAMI,OAAO,GAAGC,IAAI,IAAI;AACtB,QAAM;AAAEC,IAAAA,SAAS,GAAC,EAAZ;AAAgBC,IAAAA,iBAAiB,GAAC;AAAlC,MAAyCF,IAA/C;AAAA,QACMG,CAAC,GAAGD,iBAAiB,CAACE,OAAlB,CAA0B,GAA1B,EAA+B,GAA/B,CADV;AAEA,SAAUH,SAAV,UAAwBE,CAAxB;AACD,CAJD;;AAKA,MAAME,QAAQ,GAAGL,IAAI,IAAI;AACvB,QAAM;AAAEM,IAAAA,KAAK,GAAC;AAAR,MAAeN,IAArB;AAAA,QACEO,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AACtB,UAAM;AAAEC,MAAAA,OAAO,GAAC,EAAV;AAAcC,MAAAA,QAAQ,GAAC;AAAvB,QAA8BF,IAApC;AACA,mBAAaC,OAAb,UAAyBC,QAAzB;AACH,GAHO,CADR;AAKA,SAAOJ,GAAG,CAACK,IAAJ,CAAS,EAAT,CAAP;AACD,CAPD;;AAQA,MAAMC,OAAO,GAAIlB,OAAD,IAAa;AAC3B,QAAMmB,KAAK,GAAGhB,QAAQ,CAACH,OAAD,CAAtB;;AACA,SAAO;AACLoB,IAAAA,IAAI,EAAEhB,OAAO,CAACe,KAAD,CADR;AAELE,IAAAA,WAAW,EAAEX,QAAQ,CAACS,KAAD;AAFhB,GAAP;AAID,CAND;;AAQA,MAAMG,WAAW,GAAG;AAAA,MAAC;AACnBC,IAAAA,QADmB;AAEnBC,IAAAA,WAFmB;AAGnBC,IAAAA;AAHmB,GAAD;AAAA,SAIb;AACLC,IAAAA,EAAE,EAAEH,QADC;AACSI,IAAAA,GAAG,EAAEJ,QADd;AAELC,IAAAA,WAFK;AAGLC,IAAAA;AAHK,GAJa;AAAA,CAApB;;AAUA,MAAMG,EAAE,GAAG;AACTC,EAAAA,EAAE,EAAE,QADK;AAET,OAAK,QAFI;AAGT,QAAM,QAHG;AAIT,SAAO;AAJE,CAAX;;AAOA,MAAMC,MAAM,GAAIC,IAAD,IAAU;AACvB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,MAA+BH,IAArC;AAAA,QACEI,EAAE,GAAGH,SAAS,KAAK,GAAd,GACFJ,EAAE,CAACM,OAAD,CAAF,IAAeN,EAAE,CAACC,EADhB,GAEFD,EAAE,CAACC,EAHR;AAIA,SAAO,yBAASI,IAAI,GAAGE,EAAhB,CAAP;AACD,CAND;;AAQA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,CAACvC,IAAD,EAAOwC,MAAP,KAAkB;AACxB,UAAMtC,OAAO,GAAGH,WAAW,CAACC,IAAD,CAA3B;AAAA,UACE;AAAEyC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA0BF,MAD5B;AAAA,UAEEG,GAAG,GAAG,CAACD,KAAK,CAAC,CAAD,CAAL,IAAY,EAAb,EAAiBE,KAFzB;AAAA,UAGEC,CAAC,GAAG,EAHN;AAAA,UAIEC,QAAQ,GAAGL,YAAY,GAAG,IAAH,GAAU,KAJnC;AAAA,UAKEM,IAAI,GAAG5C,QAAQ,CAACD,OAAD,CAAR,IAAqB,EAL9B;;AAOA6C,IAAAA,IAAI,CAACC,OAAL,CAAaf,IAAI,IAAI;AACnB,YAAMgB,CAAC,GAAGC,UAAU,CAACjB,IAAI,CAACkB,SAAN,CAApB;AAAA,YACMC,CAAC,GAAGxD,MAAM,CAACqD,CAAD,CAAN,GAAY,IAAZ,GAAmBA,CAD7B;;AAEA,UAAK,EAAEH,QAAQ,IAAIb,IAAI,CAACQ,YAAD,CAAJ,KAAuBE,GAArC,CAAL,EAAiD;AAC/CE,QAAAA,CAAC,CAACQ,IAAF,CAAO;AACLC,UAAAA,CAAC,EAAEtB,MAAM,CAACC,IAAD,CADJ;AAELmB,UAAAA,CAAC,EAAEA;AAFE,SAAP;AAID;AACF,KATD;AAWA,WAAOP,CAAP;AACD,GArBe;AAuBhBU,EAAAA,YAAY,EAAE,CAACf,MAAD,EAASxC,IAAT,KAAkB;AAC9B,UAAME,OAAO,GAAGH,WAAW,CAACC,IAAD,CAA3B;;AACA,WAAO;AACLwD,MAAAA,QAAQ,EAAEhC,WAAW,CAACgB,MAAD,CADhB;AAELjC,MAAAA,IAAI,EAAEa,OAAO,CAAClB,OAAD;AAFR,KAAP;AAID;AA7Be,CAAlB;eAgCeoC,S","sourcesContent":["import { ymdToUTC } from '../AdapterFn';\r\n\r\nconst _isArr = Array.isArray\r\n, _isNaN = Number.isNaN;\r\n\r\nconst _getResults = json => json.BEAAPI.Results\r\n, _getData = Results => _isArr(Results)\r\n    ? Results[0].Data\r\n    : Results.Data\r\n, _getInfo = Results => _isArr(Results)\r\n    ? Results[0]\r\n    : Results;\r\n\r\nconst _crName = info => {\r\n  const { Statistic='', UTCProductionTime='' } = info\r\n      , t = UTCProductionTime.replace('T', ' ');\r\n  return `${Statistic}: ${t}`;\r\n};\r\nconst _crDescr = info => {\r\n  const { Notes=[] } = info\r\n  , arr = Notes.map(note => {\r\n      const { NoteRef='', NoteText='' } = note;\r\n      return `<P>${NoteRef}: ${NoteText}</P><BR/>`;\r\n  });\r\n  return arr.join('');\r\n};\r\nconst _crInfo = (Results) => {\r\n  const _info = _getInfo(Results);\r\n  return {\r\n    name: _crName(_info),\r\n    description: _crDescr(_info)\r\n  }\r\n};\r\n\r\nconst _crZhConfig = ({\r\n  _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n}) => ({\r\n  id: _itemKey, key: _itemKey,\r\n  itemCaption,\r\n  dataSource\r\n});\r\n\r\nconst MD = {\r\n  DF: '-12-31',\r\n  'I': '-03-31',\r\n  'II': '-06-30',\r\n  'III': '-09-30'\r\n};\r\n\r\nconst _crUTC = (item) => {\r\n  const { Frequency, Year, Quarter } = item\r\n  , md = Frequency === 'Q'\r\n     ? MD[Quarter] || MD.DF\r\n     : MD.DF;\r\n  return ymdToUTC(Year + md);\r\n};\r\n\r\nconst fnAdapter = {\r\n  crData: (json, option) => {\r\n    const Results = _getResults(json)\r\n    , { dfFilterName, items } = option\r\n    , two = (items[1] || {}).value\r\n    , d = []\r\n    , isFilter = dfFilterName ? true : false\r\n    , data = _getData(Results) || [];\r\n\r\n    data.forEach(item => {\r\n      const v = parseFloat(item.DataValue)\r\n          , y = _isNaN(v) ? null : v;\r\n      if ( !(isFilter && item[dfFilterName] !== two) ) {\r\n        d.push({\r\n          x: _crUTC(item),\r\n          y: y\r\n        })\r\n      }\r\n    })\r\n\r\n    return d;\r\n  },\r\n\r\n  crConfOption: (option, json) => {\r\n    const Results = _getResults(json);\r\n    return {\r\n      zhConfig: _crZhConfig(option),\r\n      info: _crInfo(Results)\r\n    };\r\n  }\r\n};\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}