{"version":3,"sources":["../../../src/adapters/bea/fnAdapter.js"],"names":["crId","AdapterFn","ymdToUTC","_crName","Results","Statistic","UTCProductionTime","t","replace","_crDescr","Notes","arr","map","note","NoteRef","NoteText","join","_crInfo","name","description","_crZhConfig","option","itemCaption","dataSource","id","key","_crUTC","item","Frequency","Year","Quarter","md","_isArr","Array","isArray","_getData","Data","fnAdapter","crData","dfFilterName","two","d","isFilter","data","forEach","v","parseFloat","DataValue","y","Number","isNaN","push","x","crConfigOption","zhConfig","info"],"mappings":"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","sourcesContent":["\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nconst {\r\n  crId,\r\n  ymdToUTC\r\n} = AdapterFn;\r\n\r\nconst _crName = (Results) => {\r\n  const { Statistic='', UTCProductionTime='' } = Results\r\n      , t = UTCProductionTime.replace('T', ' ');\r\n  return `${Statistic}: ${t}`;\r\n};\r\nconst _crDescr = (Results) => {\r\n  const { Notes=[] } = Results\r\n      , arr = Notes.map(note => {\r\n          const { NoteRef='', NoteText='' } = note;\r\n          return `<P>${NoteRef}: ${NoteText}</P><BR/>`;\r\n        });\r\n  return arr.join('');\r\n};\r\nconst _crInfo = (Results) => ({\r\n  name: _crName(Results),\r\n  description: _crDescr(Results)\r\n});\r\n\r\nconst _crZhConfig = (option) => {\r\n  const { itemCaption, dataSource } = option\r\n       , id = crId();\r\n  return {\r\n    id, key: id,\r\n    itemCaption,\r\n    dataSource\r\n  };\r\n};\r\n\r\nconst _crUTC = (item) => {\r\n  const { Frequency, Year, Quarter } = item;\r\n  let md = '-12-31';\r\n  if (Frequency === 'A') {\r\n    md = '-12-31';\r\n  } else if (Frequency === 'Q') {\r\n    switch(Quarter){\r\n      case 'I': md = '-03-31'; break;\r\n      case 'II': md = '-06-30'; break;\r\n      case 'III': md = '-09-30'; break;\r\n      default: md = '-12-31';\r\n    }\r\n  }\r\n  return ymdToUTC(Year + md);\r\n};\r\n\r\nconst _isArr = Array.isArray\r\n\r\nconst _getData = Results => _isArr(Results)\r\n  ? Results[0].Data\r\n  : Results.Data;\r\n\r\nconst fnAdapter = {\r\n  crData: (Results, option) => {\r\n    const { dfFilterName, two } = option\r\n    , d = []\r\n    , isFilter = dfFilterName ? true : false\r\n    , data = _getData(Results) || [];\r\n\r\n    data.forEach(item => {\r\n      const v = parseFloat(item.DataValue)\r\n          , y = !Number.isNaN(v) ? v : null;\r\n      if ( !(isFilter && item[dfFilterName] !== two) ) {\r\n        d.push({\r\n          x: _crUTC(item),\r\n          y: y\r\n        })\r\n      }\r\n    })\r\n\r\n    return d;\r\n  },\r\n\r\n  crConfigOption: (Results, option) => ({\r\n    zhConfig: _crZhConfig(option),\r\n    info: _crInfo(Results)\r\n  })\r\n\r\n}\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}