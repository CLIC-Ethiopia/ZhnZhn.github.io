{"version":3,"sources":["../../../src/adapters/bitfinex/toKline.js"],"names":["_crAddConfig","option","zhConfig","_isNumber","n","_compareByDate","a","b","date","_roundBy","_crDataOHLCV","json","_data","forEach","arrItem","push","open","high","low","close","volume","sort","toKline","getArr","toDate","crAddConfig"],"mappings":";;;;;;;AAAA;;AAIA;;AAEA,MAAMA,YAAY,GAAG;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAiB;AACpCC,IAAAA,QAAQ,EAAE,2BAAWD,MAAX;AAD0B,GAAjB;AAAA,CAArB;;AAIA,MAAME,SAAS,GAAGC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAApC;AAAA,MACEC,cAAc,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IADxC;AAAA,MAEEC,QAAQ,GAAGL,CAAC,IAAI;AAChB,MAAIA,CAAC,GAAC,CAAC,CAAH,IAAQA,CAAC,GAAC,CAAd,EAAiB;AAAE,WAAOA,CAAP;AAAW;;AAC9B,SAAO,wBAAQA,CAAR,EAAW,CAAX,CAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMM,YAAY,GAAG,CAACC,IAAD,EAAOV,MAAP,KAAkB;AACrC,QAAMW,KAAK,GAAG,EAAd;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAaC,OAAO,IAAI;AACtB,QAAIX,SAAS,CAACW,OAAO,CAAC,CAAD,CAAR,CAAb,EAA2B;AACzBF,MAAAA,KAAK,CAACG,IAAN,CAAW;AACRP,QAAAA,IAAI,EAAEM,OAAO,CAAC,CAAD,CADL;AAERE,QAAAA,IAAI,EAAEP,QAAQ,CAACK,OAAO,CAAC,CAAD,CAAR,CAFN;AAGRG,QAAAA,IAAI,EAAER,QAAQ,CAACK,OAAO,CAAC,CAAD,CAAR,CAHN;AAIRI,QAAAA,GAAG,EAAET,QAAQ,CAACK,OAAO,CAAC,CAAD,CAAR,CAJL;AAKRK,QAAAA,KAAK,EAAEV,QAAQ,CAACK,OAAO,CAAC,CAAD,CAAR,CALP;AAMRM,QAAAA,MAAM,EAAEN,OAAO,CAAC,CAAD;AANP,OAAX;AAQD;AACF,GAXD;AAYA,SAAOF,KAAK,CAACS,IAAN,CAAWhB,cAAX,CAAP;AACD,CAfD;;AAiBA,MAAMiB,OAAO,GAAG,6BAAe;AAC7BC,EAAAA,MAAM,EAAEb,YADqB;AAE7Bc,EAAAA,MAAM,EAAEhB,IAAI,IAAIA,IAFa;AAG7BiB,EAAAA,WAAW,EAAEzB;AAHgB,CAAf,CAAhB;eAMesB,O","sourcesContent":["import {\r\n  crZhConfig,\r\n  roundBy\r\n} from '../AdapterFn';\r\nimport crAdapterOHLCV from '../crAdapterOHLCV';\r\n\r\nconst _crAddConfig = ({ option }) => ({\r\n  zhConfig: crZhConfig(option)\r\n});\r\n\r\nconst _isNumber = n => typeof n === 'number'\r\n, _compareByDate = (a, b) => a.date - b.date\r\n, _roundBy = n => {\r\n  if (n>-1 && n<1) { return n; }\r\n  return roundBy(n, 2);\r\n};\r\n\r\n/*\r\nFrom Bitfinex Documentation\r\n[[\r\n MTS:\tint\tmillisecond time stamp,\r\n OPEN:\tfloat\tFirst execution during the time frame,\r\n CLOSE:\tfloat\tLast execution during the time frame,\r\n HIGH:\tfloat\tHighest execution during the time frame,\r\n LOW:\tfloat\tLowest execution during the timeframe,\r\n VOLUME:\tfloat\tQuantity of symbol traded within the timeframe\r\n]]\r\n*/\r\n\r\nconst _crDataOHLCV = (json, option) => {\r\n  const _data = [];\r\n  json.forEach(arrItem => {\r\n    if (_isNumber(arrItem[0])) {\r\n      _data.push({\r\n         date: arrItem[0],\r\n         open: _roundBy(arrItem[1]),\r\n         high: _roundBy(arrItem[3]),\r\n         low: _roundBy(arrItem[4]),\r\n         close: _roundBy(arrItem[2]),\r\n         volume: arrItem[5]\r\n       })\r\n    }\r\n  })\r\n  return _data.sort(_compareByDate);\r\n};\r\n\r\nconst toKline = crAdapterOHLCV({\r\n  getArr: _crDataOHLCV,\r\n  toDate: date => date,\r\n  crAddConfig: _crAddConfig\r\n});\r\n\r\nexport default toKline\r\n"],"file":"toKline.js"}