{"version":3,"sources":["../../../src/adapters/quandl/QuandlToStackedArea.js"],"names":["fCreateStackedAreaConfig","json","option","chartType","seriaType","stacking","ChartType","STACKED_AREA_PERCENT","PERCENT","config","ChartConfig","fBaseStackAreaConfig","sliceItems","items100","value","zhSeriaId","jsonData","dataset","data","bNowTotal","date","bPrevTotal","dateTo","series","categories","xAxis","chart","height","Chart","STACKED_HEIGHT","title","QuandlFn2","setTitleToConfig","valueMoving","zhConfig","info","createDatasetInfo"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;AAMA;;AAEO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAASC,IAAT,EAAeC,MAAf,EAAsB;AACtD,MAAYC,SAAZ,GAA0BD,MAA1B,CAAEE,SAAF;AAAA,MACAC,QADA,GACYF,SAAS,KAAKG,gBAAUC,oBAAzB,GAAiD,SAAjD,GAA6D,QADxE;AAAA,MAEAC,OAFA,GAEYH,QAAQ,KAAK,SAAf,GAA6B,UAA7B,GAA0C,EAFpD;AAAA,MAGAI,MAHA,GAGSC,wBAAYC,oBAAZ,CAAiC;AAAEN,IAAAA,QAAQ,EAARA;AAAF,GAAjC,CAHT;AAAA,2BAIqCH,MAJrC,CAICU,UAJD;AAAA,MAIYC,QAJZ,mCAIqB,EAJrB;AAAA,sBAIqCX,MAJrC,CAIyBY,KAJzB;AAAA,MAIyBA,KAJzB,8BAI+B,EAJ/B;AAAA,MAKAC,SALA,GAKeD,KALf,SAKwBX,SALxB;AAAA,MAMAa,QANA,GAMYf,IAAI,CAACgB,OAAL,IAAgBhB,IAAI,CAACgB,OAAL,CAAaC,IAA9B,GAAsCjB,IAAI,CAACgB,OAAL,CAAaC,IAAnD,GAA0D,EANrE;AAAA,8BAQO,sCAAsB;AAAEF,IAAAA,QAAQ,EAARA,QAAF;AAAYH,IAAAA,QAAQ,EAARA,QAAZ;AAAsBE,IAAAA,SAAS,EAATA,SAAtB;AAAiCZ,IAAAA,SAAS,EAATA,SAAjC;AAA4CE,IAAAA,QAAQ,EAARA;AAA5C,GAAtB,CARP;AAAA,MAOEc,SAPF,yBAOEA,SAPF;AAAA,MAOaC,IAPb,yBAOaA,IAPb;AAAA,MAOmBC,UAPnB,yBAOmBA,UAPnB;AAAA,MAO+BC,MAP/B,yBAO+BA,MAP/B;AAAA,MAOuCC,MAPvC,yBAOuCA,MAPvC;AAAA,MAO+CC,UAP/C,yBAO+CA,UAP/C;;AAUNf,EAAAA,MAAM,CAACc,MAAP,GAAgBA,MAAhB;AACAd,EAAAA,MAAM,CAACgB,KAAP,CAAaD,UAAb,GAA0BA,UAA1B;AACAf,EAAAA,MAAM,CAACiB,KAAP,CAAaC,MAAb,GAAsBC,kBAAMC,cAA5B;AAEA3B,EAAAA,MAAM,CAAC4B,KAAP,QAAkB5B,MAAM,CAAC4B,KAAzB,GAAiCtB,OAAjC;;AACAuB,uBAAUC,gBAAV,CAA2BvB,MAA3B,EAAmCP,MAAnC;;AAEAO,EAAAA,MAAM,CAACwB,WAAP,GAAqB,8BAAcd,SAAd,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,MAA3C,CAArB;AACAb,EAAAA,MAAM,CAACyB,QAAP,GAAkB,2BAAWhC,MAAX,EAAmBa,SAAnB,CAAlB;AAEAN,EAAAA,MAAM,CAAC0B,IAAP,GAAcJ,qBAAUK,iBAAV,CAA4BnC,IAA5B,CAAd;AAEA,SAAO;AAACQ,IAAAA,MAAM,EAANA;AAAD,GAAP;AACD,CAxBM","sourcesContent":["\r\nimport {ChartType} from '../../constants/Type';\r\nimport Chart from '../../charts/Chart';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport {\r\n  fnCreateStackedConfig,\r\n  crValueMoving,\r\n  crZhConfig\r\n} from './StackedFn';\r\n\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\nexport const fCreateStackedAreaConfig = function(json, option){\r\n  const { seriaType:chartType } = option\r\n      , stacking = (chartType === ChartType.STACKED_AREA_PERCENT) ? 'percent' : 'normal'\r\n      , PERCENT = ( stacking === 'percent' ) ? ':PERCENT' : ''\r\n      , config = ChartConfig.fBaseStackAreaConfig({ stacking })\r\n      , {sliceItems:items100=[], value=''} = option\r\n      , zhSeriaId = `${value}_${chartType}`\r\n      , jsonData = (json.dataset && json.dataset.data) ? json.dataset.data : []\r\n      , { bNowTotal, date, bPrevTotal, dateTo, series, categories }\r\n             = fnCreateStackedConfig({ jsonData, items100, zhSeriaId, chartType, stacking });\r\n\r\n  config.series = series;\r\n  config.xAxis.categories = categories;\r\n  config.chart.height = Chart.STACKED_HEIGHT;\r\n\r\n  option.title = `${option.title}${PERCENT}`\r\n  QuandlFn2.setTitleToConfig(config, option);\r\n\r\n  config.valueMoving = crValueMoving(bNowTotal, date, bPrevTotal, dateTo)\r\n  config.zhConfig = crZhConfig(option, zhSeriaId)\r\n\r\n  config.info = QuandlFn2.createDatasetInfo(json);\r\n\r\n  return {config};\r\n}\r\n"],"file":"QuandlToStackedArea.js"}