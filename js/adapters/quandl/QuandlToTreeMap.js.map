{"version":3,"sources":["../../../src/adapters/quandl/QuandlToTreeMap.js"],"names":["_fnCreateYearTotals","jsonData","items","map","year","_fnCreateDataAndTotal","bYearTotals","yearData","_year","split","bTotal","data","forEach","item","itemIndex","value","caption","_value","sparkvalues","sparkpercent","push","reverse","name","nameFull","sort","AdapterFn","compareByValue","_fnCalcLevelAndSetPercent","_bLevel","level60","level90","point","pointIndex","percent","QuandlFn2","createPercent","bValue","toString","total","gte","dataLabels","style","fontSize","substring","plus","_fnSetColorToPoint","period","Chart","COLOR_PERIOD","base1","COLOR_BASE1","base2","COLOR_BASE2","deltaColor","color","fCreateMonoColor","fnGetMonoColor","fCreateTreeMapConfig","json","option","config","ChartConfig","fBaseTreeMapConfig","sliceItems","items100","zhSeriaId","ChartType","TREE_MAP","dataset","bPrevTotal","dateTo","chart","height","STACKED_HEIGHT","yearTitle","title","setTitleToConfig","Object","assign","series","fCreateTreeMapSeria","valueMoving","zhConfig","info","createDatasetInfo"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport { ChartType } from '../../constants/Type';\r\nimport Chart from '../../charts/Chart';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport {\r\n  fnCalcTotal,\r\n  fnCreateSparkData,\r\n  crValueMoving,\r\n  crZhConfig\r\n} from './StackedFn';\r\nimport QuandlFn2 from './QuandlFn2';\r\n\r\n\r\nconst _fnCreateYearTotals = function(jsonData, items){\r\n   return jsonData.map(year => fnCalcTotal(year, items) );\r\n}\r\n\r\nconst _fnCreateDataAndTotal = function(jsonData=[], items=[], bYearTotals=[]){\r\n  const yearData = jsonData[0]\r\n     , _year = yearData[0]\r\n          ? yearData[0].split('-')[0]\r\n          : ''\r\n     , bTotal = bYearTotals[0]\r\n          ? bYearTotals[0]\r\n          : Big('0.0');\r\n  let data = [];\r\n\r\n  items.forEach((item, itemIndex) =>{\r\n    const { value, caption } = item\r\n        , _value = yearData[value];\r\n    if (_value){\r\n       const { sparkvalues, sparkpercent } = fnCreateSparkData(jsonData, value, bYearTotals);\r\n       data.push({\r\n          sparkvalues : sparkvalues.reverse(),\r\n          sparkpercent : sparkpercent.reverse(),\r\n          year : _year,\r\n          name : caption,\r\n          nameFull: caption,\r\n          value : _value\r\n        });\r\n    }\r\n  });\r\n\r\n  data.sort(AdapterFn.compareByValue)\r\n      .reverse();\r\n\r\n  return { data, bTotal };\r\n}\r\n\r\nconst _fnCalcLevelAndSetPercent = function(data, bTotal){\r\n  let _bLevel = Big('0.0')\r\n    , level60 = 0\r\n    , level90 = 0;\r\n\r\n   data.forEach((point, pointIndex) => {\r\n      const {value, name} = point\r\n          , percent = QuandlFn2.createPercent({\r\n              bValue: Big(value), bTotal: bTotal\r\n            }).toString();\r\n      point.total = bTotal.toString();\r\n      point.percent = percent;\r\n      if ( !_bLevel.gte('60.0') ){\r\n         point.name = `${percent} ${name}`;\r\n         point.dataLabels = {\r\n           style : {\r\n             fontSize : '16px'\r\n           }\r\n         }\r\n         level60 +=1;\r\n       } else if ( !_bLevel.gte('90.0') ){\r\n          point.name = `${percent} ${name.split(';')[0].substring(0, 9)}`;\r\n          level90 +=1;\r\n       } else {\r\n          point.name = percent;\r\n       }\r\n       _bLevel = _bLevel.plus(percent);\r\n    })\r\n\r\n    return { level60, level90 };\r\n}\r\n\r\nconst _fnSetColorToPoint = function(data, level60, level90){\r\n  const period = Chart.COLOR_PERIOD\r\n      , base1 = Chart.COLOR_BASE1\r\n      , base2 = Chart.COLOR_BASE2;\r\n\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = Chart.fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / level90 );\r\n       point.color = Chart.fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = Chart.fnGetMonoColor(pointIndex-level60-level90)\r\n     }\r\n   })\r\n}\r\n\r\nexport const fCreateTreeMapConfig = function(json, option){\r\n  const config = ChartConfig.fBaseTreeMapConfig()\r\n     ,  { sliceItems:items100=[], value='' } = option\r\n     ,  zhSeriaId = `${value}_${ChartType.TREE_MAP}`\r\n     ,  jsonData = json.dataset && json.dataset.data\r\n           ? json.dataset.data\r\n           : []\r\n     ,  bYearTotals = _fnCreateYearTotals(jsonData, items100)\r\n     , { data, bTotal } = _fnCreateDataAndTotal(jsonData, items100, bYearTotals)\r\n     , { level60, level90 } = _fnCalcLevelAndSetPercent(data, bTotal)\r\n     , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n     , dateTo = jsonData[1][0] ? jsonData[1][0] : '';\r\n\r\n   _fnSetColorToPoint(data, level60, level90);\r\n\r\n  config.chart.height = Chart.STACKED_HEIGHT;\r\n\r\n  const yearTitle = jsonData[0] && jsonData[0][0]\r\n          ? jsonData[0][0].split('-')[0]\r\n          : '';\r\n  option.title = `${yearTitle}:${option.title}`\r\n  QuandlFn2.setTitleToConfig(config, option)\r\n\r\n  Object.assign(config, {\r\n    series: [ ChartConfig.fCreateTreeMapSeria(zhSeriaId, data) ],\r\n    valueMoving: crValueMoving(bTotal, yearTitle, bPrevTotal, dateTo),\r\n    zhConfig: crZhConfig(option, zhSeriaId),\r\n    info: QuandlFn2.createDatasetInfo(json)\r\n  })\r\n\r\n  return { config };\r\n}\r\n"],"file":"QuandlToTreeMap.js"}