{"version":3,"sources":["../../../src/adapters/quandl/QuandlApi.js"],"names":["C","ROOT_URL","TABLE_URL","LIMIT_REMAINING","_addTo","q","pN","pV","_crSetUrl","option","value","fromDate","toDate","apiKey","transform","_q","_crTableUrl","proxy","dfTable","dfTail","dfColumn","one","two","key","_checkErr","err","message","_checkDataEmpty","dataset","datatable","_checkDataset","data","newest_available_date","oldest_available_date","length","QuandlApi","getRequestUrl","getLimitRemaiming","headers","get","checkResponse","json","quandl_error"],"mappings":"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","sourcesContent":["import { crError } from '../crFn';\r\n\r\nconst C = {\r\n  ROOT_URL: \"https://www.quandl.com/api/v3/datasets/\",\r\n  TABLE_URL: \"https://www.quandl.com/api/v3/datatables/\",\r\n\r\n  LIMIT_REMAINING: 'X-RateLimit-Remaining'\r\n};\r\n\r\nconst _addTo = (q, pN, pV) => {\r\n  if (!pV) {\r\n    return q || '';\r\n  }\r\n  return q ? `${q}&${pN}=${pV}` : `${pN}=${pV}`;\r\n};\r\n\r\nconst _crSetUrl = (option) => {\r\n  const { value, fromDate, toDate, apiKey, transform } = option;\r\n  let _q = 'sort_order=asc';\r\n  _q = _addTo(_q, 'trim_start', fromDate)\r\n  _q = _addTo(_q, 'trim_end', toDate)\r\n  _q = _addTo(_q, 'transform', transform)\r\n  _q = _addTo(_q, 'api_key', apiKey)\r\n\r\n  return `${C.ROOT_URL}${value}.json?${_q}`;\r\n};\r\n\r\n\r\nconst _crTableUrl = (option) => {\r\n  const {\r\n          proxy,\r\n          dfTable,\r\n          dfTail, dfColumn,\r\n          value,\r\n          apiKey\r\n        } = option\r\n      , { one, two } = value;\r\n  option.key = (option.value = `${one}_${two}`);\r\n  return `${proxy}${C.TABLE_URL}${dfTable}.json?ticker=${one}&api_key=${apiKey}&${dfTail}&qopts.columns=${dfColumn},${two}`;\r\n};\r\n\r\nconst _checkErr = (err) => {\r\n  if ( err ){\r\n    throw crError('', err.message);\r\n  }\r\n};\r\nconst _checkDataEmpty = (dataset, datatable) => {\r\n  if (!dataset && !datatable) {\r\n    throw crError();\r\n  }\r\n};\r\nconst _checkDataset = (dataset) => {\r\n  const {\r\n    data,\r\n    newest_available_date,\r\n    oldest_available_date\r\n  } = dataset;\r\n  if (!data || data.length === 0 ) {\r\n    throw crError('',\r\n       `Result dataset for request is empty:\r\n        Newest Date: ${newest_available_date || ''}\r\n        Oldest Date: ${oldest_available_date || ''}`\r\n    );\r\n  }\r\n};\r\n\r\nconst QuandlApi = {\r\n\r\n  getRequestUrl(option={}) {\r\n    return !option.dfTable\r\n      ? _crSetUrl(option)\r\n      : _crTableUrl(option);\r\n  },\r\n\r\n  // headers && headers.get existed\r\n  getLimitRemaiming: headers => headers.get(C.LIMIT_REMAINING),\r\n\r\n  checkResponse(json) {\r\n    const {\r\n      quandl_error,\r\n      dataset,\r\n      datatable\r\n    } = json;\r\n\r\n    _checkErr(quandl_error)\r\n    _checkDataEmpty(dataset, datatable)\r\n    _checkDataset(dataset)\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default QuandlApi\r\n"],"file":"QuandlApi.js"}