{"version":3,"sources":["../../../src/adapters/quandl/QuandlApi.js"],"names":["C","ROOT_URL","TABLE_URL","LIMIT_REMAINING","REQUEST_ERROR","DATASET_EMPTY","_crErr","errCaption","message","_addTo","q","pN","pV","_crSetUrl","option","value","fromDate","toDate","apiKey","transform","_q","_crTableUrl","proxy","dfTable","dfTail","dfColumn","one","two","key","_checkErr","err","_checkDataEmpty","dataset","datatable","_checkDataset","data","length","newest_available_date","oldest_available_date","QuandlApi","getRequestUrl","getLimitRemaiming","headers","get","checkResponse","json","quandl_error"],"mappings":"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","sourcesContent":["\r\nconst C = {\r\n  ROOT_URL: \"https://www.quandl.com/api/v3/datasets/\",\r\n  TABLE_URL: \"https://www.quandl.com/api/v3/datatables/\",\r\n\r\n  LIMIT_REMAINING: 'X-RateLimit-Remaining',\r\n\r\n  REQUEST_ERROR: 'Request Error',\r\n  DATASET_EMPTY: 'Dataset Empty'\r\n}\r\n\r\nconst _crErr = (errCaption, message='') => ({\r\n    errCaption, message\r\n});\r\n\r\nconst _addTo = (q, pN, pV) => {\r\n  if (!pV) {\r\n    return q || '';\r\n  }\r\n  return q ? `${q}&${pN}=${pV}` : `${pN}=${pV}`;\r\n};\r\n\r\nconst _crSetUrl = (option) => {\r\n  const { value, fromDate, toDate, apiKey, transform } = option;\r\n  let _q = 'sort_order=asc';\r\n  _q = _addTo(_q, 'trim_start', fromDate)\r\n  _q = _addTo(_q, 'trim_end', toDate)\r\n  _q = _addTo(_q, 'transform', transform)\r\n  _q = _addTo(_q, 'api_key', apiKey)\r\n\r\n  return `${C.ROOT_URL}${value}.json?${_q}`;\r\n};\r\n\r\n\r\nconst _crTableUrl = (option) => {\r\n  const {\r\n          proxy,\r\n          dfTable,\r\n          dfTail, dfColumn,\r\n          value,\r\n          apiKey\r\n        } = option\r\n      , { one, two } = value;\r\n  option.key = (option.value = `${one}_${two}`);\r\n  return `${proxy}${C.TABLE_URL}${dfTable}.json?ticker=${one}&api_key=${apiKey}&${dfTail}&qopts.columns=${dfColumn},${two}`;\r\n};\r\n\r\nconst _checkErr = (err) => {\r\n  if ( err ){\r\n    throw _crErr(C.REQUEST_ERROR, err.message);\r\n  }\r\n};\r\nconst _checkDataEmpty = (dataset, datatable) => {\r\n  if (!dataset && !datatable) {\r\n    throw _crErr(C.DATASET_EMPTY);\r\n  }\r\n};\r\nconst _checkDataset = (dataset) => {\r\n  if ( dataset && (!dataset.data || dataset.data.length === 0) ) {\r\n      const {\r\n              newest_available_date,\r\n              oldest_available_date\r\n            } = dataset;\r\n      throw _crErr(\r\n         C.DATASET_EMPTY,\r\n         `Result dataset for request is empty:\r\n          Newest Date: ${newest_available_date || ''}\r\n          Oldest Date: ${oldest_available_date || ''}`\r\n      );\r\n  }\r\n};\r\n\r\nconst QuandlApi = {\r\n\r\n  getRequestUrl(option={}) {\r\n    return !option.dfTable\r\n      ? _crSetUrl(option)\r\n      : _crTableUrl(option);\r\n  },\r\n\r\n  // headers && headers.get existed\r\n  getLimitRemaiming: headers => headers.get(C.LIMIT_REMAINING),          \r\n\r\n  checkResponse(json) {\r\n    const {\r\n      quandl_error\r\n      , dataset\r\n      , datatable\r\n    } = json;\r\n\r\n    _checkErr(quandl_error)\r\n    _checkDataEmpty(dataset, datatable)\r\n    _checkDataset(dataset)\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default QuandlApi\r\n"],"file":"QuandlApi.js"}