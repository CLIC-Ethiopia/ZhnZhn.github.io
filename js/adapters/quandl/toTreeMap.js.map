{"version":3,"sources":["../../../src/adapters/quandl/toTreeMap.js"],"names":["_assign","Object","assign","crValueMoving","fnStacked","crZhConfig","compareByValue","AdapterFn","createPercent","QuandlFn","setTitleToConfig","createDatasetInfo","COLOR_PERIOD","Chart","COLOR_BASE1","COLOR_BASE2","STACKED_HEIGHT","fCreateMonoColor","fnGetMonoColor","crTreeMapConfig","ChartConfig","crTreeMapSeria","_crYearTotals","jsonData","items","map","year","_crDataAndTotal","bYearTotals","yearData","_year","split","bTotal","data","forEach","item","value","caption","_value","sparkvalues","sparkpercent","push","reverse","name","nameFull","sort","_calcLevelAndSetPercent","_bLevel","level60","level90","point","percent","bValue","toString","total","gte","dataLabels","style","fontSize","substring","plus","_setColorToPoint","period","base1","base2","deltaColor","pointIndex","color","toTreeMap","json","option","config","sliceItems","items100","id","ChartType","TREE_MAP","dataset","bPrevTotal","dateTo","chart","height","yearTitle","title","series","valueMoving","zhConfig","info"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport { ChartType } from '../../constants/Type';\r\nimport Chart from '../../charts/Chart';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport {\r\n  fnCalcTotal,\r\n  fnCreateSparkData\r\n} from './StackedFn';\r\nimport QuandlFn from './QuandlFn';\r\nimport fnStacked from './fnStacked'\r\n\r\nconst _assign = Object.assign\r\n, { crValueMoving, crZhConfig } = fnStacked\r\n, { compareByValue } = AdapterFn\r\n, {\r\n    createPercent,\r\n    setTitleToConfig,\r\n    createDatasetInfo\r\n  } = QuandlFn\r\n, {\r\n   COLOR_PERIOD,\r\n   COLOR_BASE1,\r\n   COLOR_BASE2,\r\n   STACKED_HEIGHT,\r\n   fCreateMonoColor,\r\n   fnGetMonoColor\r\n } = Chart\r\n , {\r\n   crTreeMapConfig,\r\n   crTreeMapSeria\r\n } = ChartConfig;\r\n\r\nconst _crYearTotals = (jsonData, items) => jsonData\r\n  .map(year => fnCalcTotal(year, items))\r\n\r\n\r\nconst _crDataAndTotal = (jsonData=[], items=[], bYearTotals=[]) => {\r\n  const yearData = jsonData[0]\r\n  , _year = yearData[0]\r\n      ? yearData[0].split('-')[0]\r\n      : ''\r\n  , bTotal = bYearTotals[0]\r\n      ? bYearTotals[0]\r\n      : Big('0.0');\r\n  let data = [];\r\n\r\n  items.forEach(item => {\r\n    const { value, caption } = item\r\n        , _value = yearData[value];\r\n    if (_value){\r\n       const { sparkvalues, sparkpercent } = fnCreateSparkData(jsonData, value, bYearTotals);\r\n       data.push({\r\n          sparkvalues: sparkvalues.reverse(),\r\n          sparkpercent: sparkpercent.reverse(),\r\n          year: _year,\r\n          name: caption,\r\n          nameFull: caption,\r\n          value: _value\r\n        });\r\n    }\r\n  });\r\n\r\n  data.sort(compareByValue).reverse();\r\n\r\n  return { data, bTotal };\r\n}\r\n\r\nconst _calcLevelAndSetPercent = (data, bTotal) => {\r\n  let _bLevel = Big('0.0')\r\n  , level60 = 0\r\n  , level90 = 0;\r\n\r\n   data.forEach(point => {\r\n      const { value, name } = point\r\n      , percent = createPercent({\r\n          bValue: Big(value),\r\n          bTotal: bTotal\r\n        }).toString();\r\n      point.total = bTotal.toString();\r\n      point.percent = percent;\r\n      if ( !_bLevel.gte('60.0') ){\r\n         point.name = `${percent} ${name}`;\r\n         point.dataLabels = {\r\n           style: {\r\n             fontSize: '16px'\r\n           }\r\n         }\r\n         level60 +=1;\r\n       } else if ( !_bLevel.gte('90.0') ){\r\n          point.name = `${percent} ${name.split(';')[0].substring(0, 9)}`;\r\n          level90 +=1;\r\n       } else {\r\n          point.name = percent;\r\n       }\r\n       _bLevel = _bLevel.plus(percent);\r\n    })\r\n\r\n    return { level60, level90 };\r\n}\r\n\r\nconst _setColorToPoint = (data, level60, level90) => {\r\n  const period = COLOR_PERIOD\r\n  , base1 = COLOR_BASE1\r\n  , base2 = COLOR_BASE2;\r\n\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = fCreateMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / level90 );\r\n       point.color = fCreateMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = fnGetMonoColor(pointIndex-level60-level90)\r\n     }\r\n   })\r\n}\r\n\r\nconst toTreeMap = function(json, option){\r\n  const config = crTreeMapConfig()\r\n  ,  { sliceItems:items100=[], value='' } = option\r\n  ,  id = `${value}_${ChartType.TREE_MAP}`\r\n  ,  jsonData = json.dataset.data\r\n  ,  bYearTotals = _crYearTotals(jsonData, items100)\r\n  , { data, bTotal } = _crDataAndTotal(jsonData, items100, bYearTotals)\r\n  , { level60, level90 } = _calcLevelAndSetPercent(data, bTotal)\r\n  , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n  , dateTo = jsonData[1][0] ? jsonData[1][0] : '';\r\n\r\n   _setColorToPoint(data, level60, level90);\r\n\r\n  config.chart.height = STACKED_HEIGHT;\r\n\r\n  const yearTitle = jsonData[0] && jsonData[0][0]\r\n    ? jsonData[0][0].split('-')[0]\r\n    : '';\r\n  option.title = `${yearTitle}:${option.title}`\r\n  setTitleToConfig(config, option)\r\n\r\n  _assign(config, {\r\n    series: [crTreeMapSeria(data)],\r\n    valueMoving: crValueMoving(bTotal, yearTitle, bPrevTotal, dateTo),\r\n    zhConfig: crZhConfig(option, id),\r\n    info: createDatasetInfo(json)\r\n  })\r\n\r\n  return { config };\r\n}\r\n\r\nexport default toTreeMap\r\n"],"file":"toTreeMap.js"}