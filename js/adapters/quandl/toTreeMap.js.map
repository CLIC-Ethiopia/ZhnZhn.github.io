{"version":3,"sources":["../../../src/adapters/quandl/toTreeMap.js"],"names":["_assign","Object","assign","crValueMoving","crZhConfig","fnStacked","createPercent","setTitleToConfig","createDatasetInfo","QuandlFn","COLOR_PERIOD","COLOR_BASE1","COLOR_BASE2","crMonoColor","getMonoColor","Chart","crTreeMapConfig","crTreeMapSeria","ChartConfig","_crYearTotals","jsonData","items","map","year","_crDataAndTotal","bYearTotals","yearData","_year","split","bTotal","data","forEach","item","value","caption","_value","sparkvalues","sparkpercent","push","reverse","name","nameFull","sort","compareByValue","_calcLevelAndSetPercent","_bLevel","level60","level90","point","percent","bValue","toString","total","gte","dataLabels","style","fontSize","substring","plus","_setColorToPoint","period","base1","base2","deltaColor","pointIndex","color","toTreeMap","json","option","config","sliceItems","items100","id","CHT_TREE_MAP","dataset","bPrevTotal","dateTo","yearTitle","title","series","valueMoving","zhConfig","info"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport { compareByValue } from '../compareByFn';\r\n\r\nimport { CHT_TREE_MAP } from '../../constants/ChartType';\r\nimport Chart from '../../charts/Chart';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport {\r\n  fnCalcTotal,\r\n  fnCreateSparkData\r\n} from './StackedFn';\r\nimport QuandlFn from './QuandlFn';\r\nimport fnStacked from './fnStacked'\r\n\r\nconst _assign = Object.assign\r\n, { crValueMoving, crZhConfig } = fnStacked\r\n, {\r\n    createPercent,\r\n    setTitleToConfig,\r\n    createDatasetInfo\r\n  } = QuandlFn\r\n, {\r\n   COLOR_PERIOD,\r\n   COLOR_BASE1,\r\n   COLOR_BASE2,\r\n   crMonoColor,\r\n   getMonoColor\r\n } = Chart\r\n , {\r\n   crTreeMapConfig,\r\n   crTreeMapSeria\r\n } = ChartConfig;\r\n\r\nconst _crYearTotals = (jsonData, items) => jsonData\r\n  .map(year => fnCalcTotal(year, items))\r\n\r\n\r\nconst _crDataAndTotal = (jsonData=[], items=[], bYearTotals=[]) => {\r\n  const yearData = jsonData[0]\r\n  , _year = yearData[0]\r\n      ? yearData[0].split('-')[0]\r\n      : ''\r\n  , bTotal = bYearTotals[0]\r\n      ? bYearTotals[0]\r\n      : Big('0.0');\r\n  let data = [];\r\n\r\n  items.forEach(item => {\r\n    const { value, caption } = item\r\n        , _value = yearData[value];\r\n    if (_value){\r\n       const { sparkvalues, sparkpercent } = fnCreateSparkData(jsonData, value, bYearTotals);\r\n       data.push({\r\n          sparkvalues: sparkvalues.reverse(),\r\n          sparkpercent: sparkpercent.reverse(),\r\n          year: _year,\r\n          name: caption,\r\n          nameFull: caption,\r\n          value: _value\r\n        });\r\n    }\r\n  });\r\n\r\n  data.sort(compareByValue).reverse();\r\n\r\n  return { data, bTotal };\r\n}\r\n\r\nconst _calcLevelAndSetPercent = (data, bTotal) => {\r\n  let _bLevel = Big('0.0')\r\n  , level60 = 0\r\n  , level90 = 0;\r\n\r\n   data.forEach(point => {\r\n      const { value, name } = point\r\n      , percent = createPercent({\r\n          bValue: Big(value),\r\n          bTotal: bTotal\r\n        }).toString();\r\n      point.total = bTotal.toString();\r\n      point.percent = percent;\r\n      if ( !_bLevel.gte('60.0') ){\r\n         point.name = `${percent} ${name}`;\r\n         point.dataLabels = {\r\n           style: {\r\n             fontSize: '16px'\r\n           }\r\n         }\r\n         level60 +=1;\r\n       } else if ( !_bLevel.gte('90.0') ){\r\n          point.name = `${percent} ${name.split(';')[0].substring(0, 9)}`;\r\n          level90 +=1;\r\n       } else {\r\n          point.name = percent;\r\n       }\r\n       _bLevel = _bLevel.plus(percent);\r\n    })\r\n\r\n    return { level60, level90 };\r\n}\r\n\r\nconst _setColorToPoint = (data, level60, level90) => {\r\n  const period = COLOR_PERIOD\r\n  , base1 = COLOR_BASE1\r\n  , base2 = COLOR_BASE2;\r\n\r\n  let deltaColor;\r\n  data.forEach((point, pointIndex) => {\r\n     if (pointIndex < level60){\r\n       deltaColor = pointIndex * ( period / level60 );\r\n       point.color = crMonoColor(base1, deltaColor);\r\n     } else if ( pointIndex < level60+level90 ) {\r\n       deltaColor = (pointIndex-level60) * ( period / level90 );\r\n       point.color = crMonoColor(base2, deltaColor);\r\n     } else {\r\n       point.color = getMonoColor(pointIndex-level60-level90)\r\n     }\r\n   })\r\n}\r\n\r\nconst toTreeMap = function(json, option){\r\n  const config = crTreeMapConfig()\r\n  ,  { sliceItems:items100=[], value='' } = option\r\n  ,  id = `${value}_${CHT_TREE_MAP}`\r\n  ,  jsonData = json.dataset.data\r\n  ,  bYearTotals = _crYearTotals(jsonData, items100)\r\n  , { data, bTotal } = _crDataAndTotal(jsonData, items100, bYearTotals)\r\n  , { level60, level90 } = _calcLevelAndSetPercent(data, bTotal)\r\n  , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n  , dateTo = jsonData[1][0] ? jsonData[1][0] : '';\r\n\r\n   _setColorToPoint(data, level60, level90);\r\n\r\n  const yearTitle = jsonData[0] && jsonData[0][0]\r\n    ? jsonData[0][0].split('-')[0]\r\n    : '';\r\n  option.title = `${yearTitle}:${option.title}`\r\n  setTitleToConfig(config, option)\r\n\r\n  _assign(config, {\r\n    series: [crTreeMapSeria(data)],\r\n    valueMoving: crValueMoving(bTotal, yearTitle, bPrevTotal, dateTo),\r\n    zhConfig: crZhConfig(option, id),\r\n    info: createDatasetInfo(json)\r\n  })\r\n\r\n  return { config };\r\n}\r\n\r\nexport default toTreeMap\r\n"],"file":"toTreeMap.js"}