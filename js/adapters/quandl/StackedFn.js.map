{"version":3,"sources":["../../../src/adapters/quandl/StackedFn.js"],"names":["crStackedAreaSeria","ChartConfig","crStackedColumnSeria","_rFactorySeria","ChartType","STACKED_AREA","STACKED_AREA_PERCENT","STACKED_COLUMN","STACKED_COLUMN_PERCENT","fnCalcTotal","jsonData","items","_bTotal","i","max","length","y","value","plus","_fnCreateReferenceDataAndTotal","_data","forEach","item","caption","_arr","split","_name","substring","push","name","nameFull","_jsonIndex","sort","AdapterFn","compareByY","reverse","referenceData","bTotal","_fnCreateDataTopPercent","data","percent","_dataTopPercent","_bTotal90","times","_bArrTotal","gte","_fnInitSeries","chartType","fSeria","map","itemIndex","color","Chart","fnGetMonoColor","_fnCalcPercent","bValue","eq","div","abs","toFixed","_fnCreateStackedSeries","items100","items90","stacking","series","categories","dataOther","yearData","yearTotal100","yearTotal90","isFullYearData","total","parseInt","toString","yOther","minus","fnCreateStackedConfig","bPrevTotal","dateTo","date","bNowTotal","fnCreateSparkData","bYearTotals","sparkvalues","sparkpercent","yearIndex","parseFloat","QuandlFn","createPercent"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport AdapterFn from '../AdapterFn'\r\n\r\nimport {ChartType} from '../../constants/Type';\r\nimport Chart from '../../charts/Chart';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport QuandlFn from './QuandlFn';\r\n\r\nconst {\r\n  crStackedAreaSeria,\r\n  crStackedColumnSeria\r\n} = ChartConfig\r\n\r\nconst _rFactorySeria = {\r\n  [ChartType.STACKED_AREA]: crStackedAreaSeria,\r\n  [ChartType.STACKED_AREA_PERCENT]: crStackedAreaSeria,\r\n  [ChartType.STACKED_COLUMN]: crStackedColumnSeria,\r\n  [ChartType.STACKED_COLUMN_PERCENT]: crStackedColumnSeria\r\n}\r\n\r\nexport const fnCalcTotal = function(jsonData=[], items=[]){\r\n   let _bTotal = Big('0.0');\r\n   for(let i=0, max=items.length; i<max; i++ ){\r\n     let y = jsonData[items[i].value]\r\n     if (y){\r\n       _bTotal = _bTotal.plus(y);\r\n     }\r\n   }\r\n   return _bTotal;\r\n}\r\n\r\nconst _fnCreateReferenceDataAndTotal = function(jsonData, items){\r\n  let _data = []\r\n    , _bTotal = Big('0.0');\r\n\r\n  items.forEach( item => {\r\n    const { caption, value } = item\r\n        , y = jsonData[value];\r\n    if (y) {\r\n       const _arr = caption.split(';')\r\n            , _name = _arr[0]\r\n                ? _arr[0].substring(0, 9)\r\n                : caption;\r\n       _data.push({\r\n          name : _name,\r\n          nameFull: caption,\r\n          y: y,\r\n          _jsonIndex : value\r\n        });\r\n       _bTotal = _bTotal.plus(y);\r\n    }\r\n  });\r\n\r\n  _data.sort(AdapterFn.compareByY).reverse()\r\n\r\n  return { referenceData : _data, bTotal : _bTotal };\r\n}\r\n\r\nconst _fnCreateDataTopPercent = function(data, bTotal, percent){\r\n  const _dataTopPercent = []\r\n      , _bTotal90 = bTotal.times(percent);\r\n  let _bArrTotal = Big('0.0');\r\n  for (let i=0, max=data.length; i<max; i++ ){\r\n    let item = data[i];\r\n    if ( i === 0 ||\r\n         !_bArrTotal.gte(_bTotal90) ||\r\n         i === max-1 )\r\n    {\r\n      _dataTopPercent.push(item);\r\n    } else { break; }\r\n\r\n    _bArrTotal = _bArrTotal.plus(item.y);\r\n  }\r\n\r\n  return _dataTopPercent;\r\n}\r\n\r\n\r\nconst _fnInitSeries = function({ items, chartType, fSeria }){\r\n  return items.map((item, itemIndex)=>{\r\n           const color = Chart.fnGetMonoColor(itemIndex)\r\n               , {name} = item\r\n               return fSeria({ name, color })\r\n         });\r\n}\r\n\r\n\r\nconst _fnCalcPercent = (\r\n  bTotal=Big('0.0'),\r\n  bValue=Big('0.0')\r\n) => !bTotal.eq(Big(0.0))\r\n   ? bValue.times(100).div(bTotal).abs().toFixed(2) + '%'\r\n   : Big(0.0) + '%';\r\n\r\n\r\nconst _fnCreateStackedSeries = function({\r\n  jsonData, items100, items90, chartType, stacking\r\n}){\r\n   const fSeria = _rFactorySeria[chartType]\r\n       , series = _fnInitSeries({ items:items90, chartType, fSeria })\r\n       , categories = []\r\n       , dataOther = []\r\n\r\n   jsonData = jsonData.reverse();\r\n   jsonData.forEach((yearData, i) =>{\r\n     let yearTotal100 = fnCalcTotal(yearData, items100)\r\n       , yearTotal90  = Big('0.0')\r\n       , isFullYearData = true;\r\n     items90.forEach((item, itemIndex) => {\r\n        const y = yearData[item._jsonIndex]\r\n            , percent = (y) ? _fnCalcPercent(yearTotal100, Big(y)) : '0.0%';\r\n        series[itemIndex].data.push({\r\n           y : y,\r\n           nameFull : item.nameFull,\r\n           percent : percent,\r\n           total : parseInt(yearTotal100.toString(), 10)\r\n         })\r\n        if (y) {\r\n          yearTotal90 = yearTotal90.plus(y);\r\n        } else {\r\n          isFullYearData = false;\r\n        }\r\n     })\r\n     if ( stacking === 'percent' && !isFullYearData && categories.length === 0 ){\r\n        items90.forEach((item, itemIndex) => {\r\n           series[itemIndex].data = [];\r\n        })\r\n     } else {\r\n        categories.push(yearData[0].split('-')[0]);\r\n        const yOther = parseInt(yearTotal100.minus(yearTotal90).toString(), 10);\r\n        dataOther.push({\r\n          y : yOther,\r\n          nameFull : 'Other',\r\n          percent : _fnCalcPercent(yearTotal100, Big(yOther)),\r\n          total : parseInt(yearTotal100.toString(), 10)\r\n       })\r\n     }\r\n   })\r\n\r\n   series.push(\r\n     fSeria({\r\n       name : 'Other',\r\n       data : dataOther,\r\n       color: 'gray'\r\n     })\r\n   )\r\n\r\n   return { series, categories };\r\n}\r\n\r\nexport const fnCreateStackedConfig = function({\r\n   jsonData, items100, chartType=ChartType.STACKED_AREA, stacking='normal'\r\n }){\r\n  const {referenceData , bTotal} = _fnCreateReferenceDataAndTotal(jsonData[0], items100)\r\n      , items90 = _fnCreateDataTopPercent(referenceData, bTotal, 0.9)\r\n      , bPrevTotal = fnCalcTotal(jsonData[1], items100)\r\n      , dateTo = (jsonData[1][0]) ? jsonData[1][0] : ''\r\n      , { series, categories } = _fnCreateStackedSeries({\r\n          jsonData, items100, items90, chartType, stacking\r\n        })\r\n      , date = ( categories && categories.length>1 )\r\n           ? categories[categories.length-1]\r\n           : '';\r\n\r\n  return {bNowTotal : bTotal, date, bPrevTotal, dateTo, series, categories};\r\n}\r\n\r\nexport const fnCreateSparkData = function(jsonData, itemIndex, bYearTotals){\r\n  const sparkvalues = []\r\n      , sparkpercent = [];\r\n\r\n  jsonData.forEach( (yearData, yearIndex) => {\r\n      sparkvalues.push( yearData[itemIndex] );\r\n      if ( yearData[itemIndex] ) {\r\n         sparkpercent.push( parseFloat(QuandlFn.createPercent({\r\n            bValue : Big(yearData[itemIndex]),\r\n            bTotal : bYearTotals[yearIndex]\r\n         }), 10) );\r\n      } else {\r\n        sparkpercent.push( null );\r\n      }\r\n  })\r\n\r\n  return { sparkvalues, sparkpercent };\r\n}\r\n"],"file":"StackedFn.js"}