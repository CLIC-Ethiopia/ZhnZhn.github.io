{"version":3,"sources":["../../../src/adapters/quandl/QuandlAdapter.js"],"names":["getData","getDataColumnIndex","QuandlFn","_fToConfig","builder","json","option","data","config","toConfig","_fToSeria","chart","toSeria","_rToConfig","ChartType","AREA","toArea","SEMI_DONUT","toSemiDonut","STACKED_AREA","toStackedArea","STACKED_AREA_PERCENT","STACKED_COLUMN","toStackedColumn","STACKED_COLUMN_PERCENT","TREE_MAP","toTreeMap","YEARLY","toYearly","SCATTER","toScatter","SCATTER_UP","SCATTER_DOWN","_crSeriaData","yIndex","map","p","sort","compareByDate","_toSeria","value","chartId","yPointIndex","ChartConfig","crSeria","name","substring","minY","_rToSeria","DF","QuandlAdapter","seriaType","toSeries"],"mappings":"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","sourcesContent":["\r\nimport {ChartType} from '../../constants/Type';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport { ymdToUTC, findMinY } from '../AdapterFn';\r\nimport { compareByDate } from '../compareByFn';\r\nimport QuandlFn from './QuandlFn';\r\n\r\nimport toArea from './toArea';\r\nimport toSemiDonut from './toSemiDonut';\r\nimport toStackedArea  from './toStackedArea';\r\nimport toStackedColumn from './toStackedColumn';\r\nimport toTreeMap from './toTreeMap';\r\nimport toYearly from '../toYearsByMonths';\r\nimport toScatter from './toScatter';\r\n\r\nconst {\r\n  getData,\r\n  getDataColumnIndex\r\n} = QuandlFn;\r\n\r\nconst _fToConfig = builder => (json, option) => {\r\n  const data = getData(json);\r\n  return { config: builder.toConfig(data, option) };\r\n};\r\nconst _fToSeria = builder => (json, option, chart) => {\r\n  const data = getData(json);\r\n  return builder.toSeria(data, option, chart);\r\n};\r\n\r\nconst _rToConfig = {\r\n  [ChartType.AREA]: toArea,\r\n  [ChartType.SEMI_DONUT]: toSemiDonut,\r\n  [ChartType.STACKED_AREA]: toStackedArea,\r\n  [ChartType.STACKED_AREA_PERCENT]: toStackedArea,\r\n  [ChartType.STACKED_COLUMN]: toStackedColumn,\r\n  [ChartType.STACKED_COLUMN_PERCENT]: toStackedColumn,\r\n  [ChartType.TREE_MAP]: toTreeMap,\r\n  [ChartType.YEARLY]: _fToConfig(toYearly),\r\n  [ChartType.SCATTER]: _fToConfig(toScatter),\r\n  [ChartType.SCATTER_UP]: _fToConfig(toScatter),\r\n  [ChartType.SCATTER_DOWN]: _fToConfig(toScatter)\r\n};\r\n\r\nconst _crSeriaData = (data, yIndex) => {\r\n  return data\r\n    .map(p => [ ymdToUTC(p[0]), p[yIndex] ])\r\n    .sort(compareByDate);\r\n};\r\n\r\nconst _toSeria = (json, option) => {\r\n  const { value:chartId } = option\r\n  , yPointIndex = getDataColumnIndex(json, option)\r\n  , data = _crSeriaData(getData(json), yPointIndex);\r\n  return ChartConfig.crSeria({\r\n      name : chartId.substring(0,12),\r\n      data : data,\r\n      minY : findMinY(data)\r\n  });\r\n};\r\n\r\nconst _rToSeria = {\r\n  DF: _toSeria,\r\n  [ChartType.SCATTER]: _fToSeria(toScatter),\r\n  [ChartType.SCATTER_UP]: _fToSeria(toScatter),\r\n  [ChartType.SCATTER_DOWN]: _fToSeria(toScatter)\r\n};\r\n\r\nconst QuandlAdapter = {\r\n  toConfig(json, option){\r\n     const { seriaType=ChartType.AREA } = option;\r\n     return _rToConfig[seriaType](json, option);\r\n  },\r\n\r\n  toSeries(json, option, chart){\r\n    const { seriaType } = option\r\n    , _toSeria = _rToSeria[seriaType] || _rToSeria.DF;\r\n    return _toSeria(json, option, chart);\r\n  }\r\n};\r\n\r\nexport default QuandlAdapter\r\n"],"file":"QuandlAdapter.js"}