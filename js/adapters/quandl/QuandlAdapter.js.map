{"version":3,"sources":["../../../src/adapters/quandl/QuandlAdapter.js"],"names":["getData","getDataColumnIndex","QuandlFn","_fToConfig","builder","json","option","data","config","toConfig","_fToSeria","chart","toSeria","_rToConfig","CHT_AREA","toArea","CHT_SEMI_DONUT","toSemiDonut","CHT_STACKED_AREA","toStackedArea","CHT_STACKED_AREA_PERCENT","CHT_STACKED_COLUMN","toStackedColumn","CHT_STACKED_COLUMN_PERCENT","CHT_TREE_MAP","toTreeMap","CHT_YEARLY","toYearly","CHT_SCATTER","toScatter","CHT_SCATTER_UP","CHT_SCATTER_DOWN","_crSeriaData","yIndex","map","p","sort","compareByDate","_toSeria","value","chartId","yPointIndex","ChartConfig","crSeria","name","substring","minY","_rToSeria","DF","QuandlAdapter","seriaType","toSeries"],"mappings":"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","sourcesContent":["import {\r\n  CHT_AREA,\r\n  CHT_SEMI_DONUT,\r\n  CHT_STACKED_AREA,\r\n  CHT_STACKED_AREA_PERCENT,\r\n  CHT_STACKED_COLUMN,\r\n  CHT_STACKED_COLUMN_PERCENT,\r\n  CHT_TREE_MAP,\r\n  CHT_YEARLY,\r\n  CHT_SCATTER,\r\n  CHT_SCATTER_UP,\r\n  CHT_SCATTER_DOWN\r\n} from '../../constants/ChartType';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\n\r\nimport { ymdToUTC, findMinY } from '../AdapterFn';\r\nimport { compareByDate } from '../compareByFn';\r\nimport QuandlFn from './QuandlFn';\r\n\r\nimport toArea from './toArea';\r\nimport toSemiDonut from './toSemiDonut';\r\nimport toStackedArea  from './toStackedArea';\r\nimport toStackedColumn from './toStackedColumn';\r\nimport toTreeMap from './toTreeMap';\r\nimport toYearly from '../toYearsByMonths';\r\nimport toScatter from './toScatter';\r\n\r\nconst {\r\n  getData,\r\n  getDataColumnIndex\r\n} = QuandlFn;\r\n\r\nconst _fToConfig = builder => (json, option) => {\r\n  const data = getData(json);\r\n  return { config: builder.toConfig(data, option) };\r\n};\r\nconst _fToSeria = builder => (json, option, chart) => {\r\n  const data = getData(json);\r\n  return builder.toSeria(data, option, chart);\r\n};\r\n\r\nconst _rToConfig = {\r\n  [CHT_AREA]: toArea,\r\n  [CHT_SEMI_DONUT]: toSemiDonut,\r\n  [CHT_STACKED_AREA]: toStackedArea,\r\n  [CHT_STACKED_AREA_PERCENT]: toStackedArea,\r\n  [CHT_STACKED_COLUMN]: toStackedColumn,\r\n  [CHT_STACKED_COLUMN_PERCENT]: toStackedColumn,\r\n  [CHT_TREE_MAP]: toTreeMap,\r\n  [CHT_YEARLY]: _fToConfig(toYearly),\r\n  [CHT_SCATTER]: _fToConfig(toScatter),\r\n  [CHT_SCATTER_UP]: _fToConfig(toScatter),\r\n  [CHT_SCATTER_DOWN]: _fToConfig(toScatter)\r\n};\r\n\r\nconst _crSeriaData = (data, yIndex) => {\r\n  return data\r\n    .map(p => [ ymdToUTC(p[0]), p[yIndex] ])\r\n    .sort(compareByDate);\r\n};\r\n\r\nconst _toSeria = (json, option) => {\r\n  const { value:chartId } = option\r\n  , yPointIndex = getDataColumnIndex(json, option)\r\n  , data = _crSeriaData(getData(json), yPointIndex);\r\n  return ChartConfig.crSeria({\r\n      name : chartId.substring(0,12),\r\n      data : data,\r\n      minY : findMinY(data)\r\n  });\r\n};\r\n\r\nconst _rToSeria = {\r\n  DF: _toSeria,\r\n  [CHT_SCATTER]: _fToSeria(toScatter),\r\n  [CHT_SCATTER_UP]: _fToSeria(toScatter),\r\n  [CHT_SCATTER_DOWN]: _fToSeria(toScatter)\r\n};\r\n\r\nconst QuandlAdapter = {\r\n  toConfig(json, option){\r\n     const { seriaType=CHT_AREA } = option;\r\n     return _rToConfig[seriaType](json, option);\r\n  },\r\n\r\n  toSeries(json, option, chart){\r\n    const { seriaType } = option\r\n    , _toSeria = _rToSeria[seriaType] || _rToSeria.DF;\r\n    return _toSeria(json, option, chart);\r\n  }\r\n};\r\n\r\nexport default QuandlAdapter\r\n"],"file":"QuandlAdapter.js"}