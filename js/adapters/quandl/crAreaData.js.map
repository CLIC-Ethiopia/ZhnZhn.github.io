{"version":3,"sources":["../../../src/adapters/quandl/crAreaData.js"],"names":["crLegendConfig","ChartLegend","compareByDate","roundBy","AdapterFn","getData","getColumnNames","getDataColumnIndex","findColumnIndex","QuandlFn","_assign","Object","assign","_isUndef","v","_notNull2","a","b","_isNumber","n","_fnConvertToUTC","point","result","arrDate","split","dateUTC","Date","UTC","parseInt","_fnCheckExtrems","yPointIndex","maxY","minY","value","_fnAddToSeria","seria","push","_fnAddSplitRatio","splitRationIndex","dataSplitRatio","x","splitRatio","price","ChartConfig","crMarkerSplitRatio","_fnAddExDividend","exDividendIndex","dataExDividend","exValue","marker","crMarkerExDividend","isPrevDateAfter","dataLabels","y","_fnAddVolume","optionIndex","volume","open","close","low","high","dataVolume","dataVolumeColumn","_open","date","option","_low","_high","_fnAddATH","dataATH","len","length","_prevPoint","_crBigDiff","closeValue","minus","_fnAddHighLow","dataHighLow","_closeValue","_openValue","C","UNKNOWN","_bHigh","_bLow","_dayHigh","_dayLow","parseFloat","dayHigh","dayLow","_fnAddCustomSeries","columns","legendSeries","i","max","data","_crLegendConfig","seriaColumnNames","columnNames","j","_len","columnName","columnIndex","_isTransform","dataset","transform","_crPointFlow","json","fnStep","OPEN","_closeIndex","CLOSE","PRICE","LOW","HIGH","VOLUME","exDividend","EX_DIVIDEND","SPLIT_RATIO","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","bind","_hasNotTransform","crAreaData","callPointFlow","points","sort","_max","zhPoints"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport pipe from '../../utils/pipe';\r\nimport ChartConfig from '../../charts/ChartConfig';\r\nimport ChartLegend from '../../charts/ChartLegend';\r\n\r\nimport AdapterFn from '../AdapterFn';\r\nimport {\r\n  crVolumePoint,\r\n  crAthPoint\r\n} from '../pointFn';\r\nimport QuandlFn from './QuandlFn';\r\nimport C from './C';\r\n\r\nconst { crLegendConfig } = ChartLegend;\r\n\r\nconst {\r\n  compareByDate,\r\n  roundBy\r\n} = AdapterFn;\r\n\r\nconst {\r\n  getData,\r\n  getColumnNames,\r\n  getDataColumnIndex,\r\n  findColumnIndex\r\n} = QuandlFn;\r\n\r\nconst _assign = Object.assign\r\n, _isUndef = v => typeof v === 'undefined'\r\n, _notNull2 = (a, b) => a !== null && b !== null\r\n, _isNumber = n => typeof n === 'number' && n-n === 0;\r\n\r\nconst _fnConvertToUTC = function(point, result){\r\n   const arrDate = point[0].split('-');\r\n   result.dateUTC = Date.UTC(arrDate[0], (parseInt(arrDate[1], 10)-1), arrDate[2]);\r\n   result.point = point;\r\n   return result;\r\n};\r\n\r\nconst _fnCheckExtrems = function(result){\r\n  const {point, yPointIndex, maxY, minY} = result\r\n  , value = point[yPointIndex];\r\n  if (_isNumber(value)){\r\n    if (value>maxY) { result.maxY = value; }\r\n    if (value<minY) { result.minY = value; }\r\n  }\r\n  return result;\r\n};\r\n\r\nconst _fnAddToSeria = function(result){\r\n   const {seria, dateUTC, point, yPointIndex} = result;\r\n   seria.push([dateUTC, point[yPointIndex]]);\r\n\r\n   return result;\r\n};\r\n\r\nconst _fnAddSplitRatio = function(splitRationIndex, result){\r\n  const { point, dateUTC, yPointIndex, dataSplitRatio } = result;\r\n  if (point[splitRationIndex] !== 1){\r\n    const x = dateUTC\r\n    , splitRatio = roundBy(point[splitRationIndex])\r\n    , price = point[yPointIndex];\r\n\r\n    dataSplitRatio.push(_assign(ChartConfig.crMarkerSplitRatio(), {x, splitRatio, price}));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst _fnAddExDividend = function(exDividendIndex, result){\r\n     const { point, dateUTC, yPointIndex, dataExDividend } = result;\r\n\r\n     if (point[exDividendIndex] !== 0){\r\n       const x = dateUTC\r\n           , exValue = point[exDividendIndex]\r\n           , price = point[yPointIndex]\r\n           , marker = _assign(\r\n                ChartConfig.crMarkerExDividend(),\r\n                { x, exValue, price }\r\n             );\r\n       if (!QuandlFn.isPrevDateAfter(dataExDividend, x , 14)) {\r\n         marker.dataLabels.y = 0;\r\n       }\r\n       dataExDividend.push(marker);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst _fnAddVolume = function(optionIndex, result){\r\n  const { volume, open, close=4, low=3, high=2 } = optionIndex\r\n  , { point, dateUTC, dataVolume, dataVolumeColumn } = result\r\n  , _open = open ? point[open] : void 0;\r\n\r\n  dataVolume.push([dateUTC, point[volume]]);\r\n  dataVolumeColumn.push(crVolumePoint({\r\n    open: _open,\r\n    close: point[close],\r\n    date: dateUTC,\r\n    volume: point[volume],\r\n    option: {_low: point[low], _high: point[high]},\r\n  }))\r\n\r\n  return result;\r\n};\r\n\r\nconst _fnAddATH = function(optionIndex, result){\r\n  const { open=1 } = optionIndex\r\n      , { dateUTC, point, seria, dataATH } = result\r\n      , len = seria.length;\r\n\r\n  if (len>1) {\r\n    const _prevPoint = seria[len-2];\r\n    dataATH.push(crAthPoint({\r\n      date: dateUTC,\r\n      close: _prevPoint[1],\r\n      open: point[open]\r\n    }))\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst _crBigDiff = (value, closeValue) =>\r\n  _notNull2(value, closeValue)\r\n     ? Big(value).minus(closeValue)\r\n     : Big('0.0');\r\n\r\nconst _fnAddHighLow = function(optionIndex, result){\r\n  const { open=1, high=2, low=3 } = optionIndex\r\n  , { dateUTC, yPointIndex, point, dataHighLow } = result\r\n  , _closeValue = point[yPointIndex]\r\n  , _openValue = _notNull2(point[open], _closeValue)\r\n       ? point[open]\r\n       : C.UNKNOWN\r\n  , _bHigh = _crBigDiff(point[high], _closeValue)\r\n  , _bLow = _crBigDiff(point[low], _closeValue)\r\n  , _dayHigh = point[high] || C.UNKNOWN\r\n  , _dayLow = point[low] || C.UNKNOWN;\r\n\r\n  dataHighLow.push({\r\n    x : dateUTC,\r\n    high : parseFloat(_bHigh),\r\n    low : parseFloat(_bLow),\r\n    open : _openValue,\r\n    dayHigh : _dayHigh,\r\n    dayLow : _dayLow,\r\n    close : _closeValue\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst _fnAddCustomSeries = function(columns, result){\r\n   const { dateUTC, point, legendSeries } = result;\r\n   let i=0, max=columns.length;\r\n   for (; i<max; i++ ){\r\n      legendSeries[i].data.push([dateUTC, point[columns[i]]])\r\n   }\r\n};\r\n\r\nconst _crLegendConfig = function(seriaColumnNames, columnNames){\r\n  const legendSeries = []\r\n      , columns = [];\r\n\r\n  if (seriaColumnNames[0] === 'All'){\r\n    let j=1, _len = columnNames.length;\r\n    for (j; j<_len; j++){\r\n      legendSeries.push(crLegendConfig(columnNames[j]))\r\n      columns.push(j)\r\n    }\r\n  } else {\r\n    let i=0, max=seriaColumnNames.length;\r\n    for (; i<max; i++ ){\r\n       const columnName = seriaColumnNames[i]\r\n       , columnIndex = findColumnIndex(columnNames, columnName);\r\n       if (columnIndex) {\r\n          legendSeries.push(crLegendConfig(columnName))\r\n          columns.push(columnIndex)\r\n       }\r\n    }\r\n  }\r\n\r\n  return { legendSeries, columns };\r\n};\r\n\r\nconst _isTransform = ({ dataset }) => {\r\n  const { transform } = dataset || {};\r\n  return !!(transform && transform !== 'none');\r\n};\r\n\r\nconst _crPointFlow = function(json, option){\r\n  const yPointIndex = getDataColumnIndex(json, option)\r\n  , fnStep = [_fnConvertToUTC, _fnCheckExtrems, _fnAddToSeria]\r\n  , columnNames = getColumnNames(json)\r\n\r\n  , open = findColumnIndex(columnNames, C.OPEN)\r\n  , _closeIndex = findColumnIndex(columnNames, C.CLOSE)\r\n  , close = !_isUndef(_closeIndex)\r\n      ? _closeIndex\r\n      : findColumnIndex(columnNames, C.PRICE)\r\n  , low = findColumnIndex(columnNames, C.LOW)\r\n  , high = findColumnIndex(columnNames, C.HIGH)\r\n  , volume = findColumnIndex(columnNames, C.VOLUME)\r\n  , exDividend = findColumnIndex(columnNames, C.EX_DIVIDEND)\r\n  , splitRatio = findColumnIndex(columnNames, C.SPLIT_RATIO)\r\n\r\n  , result = {\r\n     yPointIndex,\r\n     minY : Number.POSITIVE_INFINITY,\r\n     maxY : Number.NEGATIVE_INFINITY,\r\n     seria : [],\r\n     dataVolume : [], dataVolumeColumn : [],\r\n     dataExDividend : [], dataSplitRatio : [],\r\n     dataATH : [], dataHighLow : []\r\n  };\r\n\r\n\r\n  if (volume){\r\n    fnStep.push(_fnAddVolume.bind(null, {\r\n      volume, open, close, low, high\r\n    }));\r\n  }\r\n\r\n  const _hasNotTransform = !_isTransform(json);\r\n  if (exDividend && _hasNotTransform) {\r\n    fnStep.push(_fnAddExDividend.bind(null, exDividend));\r\n  }\r\n\r\n  if (splitRatio && _hasNotTransform){\r\n    fnStep.push(_fnAddSplitRatio.bind(null, splitRatio));\r\n  }\r\n\r\n  if (open){\r\n    fnStep.push(_fnAddATH.bind(null, { open }));\r\n  }\r\n\r\n  if (high && low ){\r\n    fnStep.push(_fnAddHighLow.bind(null, { open, high, low }));\r\n  }\r\n\r\n  const { seriaColumnNames } = option;\r\n  if (seriaColumnNames) {\r\n    const { legendSeries, columns } = _crLegendConfig(seriaColumnNames, columnNames);\r\n\r\n    if (legendSeries.length !== 0){\r\n      result.legendSeries = legendSeries\r\n      fnStep.push(_fnAddCustomSeries.bind(null, columns))\r\n    }\r\n  }\r\n\r\n  return [pipe(...fnStep), result];\r\n};\r\n\r\n\r\nconst crAreaData = function(json, option){\r\n  const [\r\n    callPointFlow, result\r\n  ] = _crPointFlow(json, option)\r\n  , points = getData(json).sort(compareByDate);\r\n\r\n  let i=0, _max=points.length;\r\n  for(; i<_max; i++) {\r\n    callPointFlow(points[i], result)\r\n  }\r\n\r\n  _assign(result, { zhPoints: points })\r\n\r\n  return result;\r\n};\r\n\r\nexport default crAreaData\r\n"],"file":"crAreaData.js"}