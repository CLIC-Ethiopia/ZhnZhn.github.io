{"version":3,"sources":["../../../src/adapters/quandl/QuandlFn.js"],"names":["valueMoving","AdapterFn","_isArr","Array","isArray","_isStr","str","_isNumber","n","_crItemCaption","dfItemCaption","items","itemCaption","caption","_isStrEqTo","strTo","toLowerCase","_crLinkId","database_code","dataset_code","QuandlFn","getData","json","dataset","datatable","data","getColumnNames","column_names","columns","map","c","name","isPrevDateAfter","arr","checkedDate","predicate","length","prevDate","x","Math","abs","valueOf","createDatasetInfo","description","newest_available_date","oldest_available_date","frequency","linkId","toDate","fromDate","createZhConfig","option","item","title","subtitle","value","id","key","columnName","dataColumn","seriaColumnNames","linkFn","dataSource","_dataSource","_itemCaption","itemConf","_itemKey","createPercent","bValue","bTotal","mathFn","calcPercent","createValueMoving","bNowValue","bPrevValue","crValueMoving","nowValue","prevValue","fnFormat","formatAllNumber","getRecentDate","seria","len","mlsUTC","Date","getUTCFullYear","setTitleToConfig","config","text","findColumnIndex","obj","_columnName","i","max","getDataColumnIndex","_dataColumn"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport formatAllNumber from '../../utils/formatAllNumber'\r\nimport mathFn from '../../math/mathFn';\r\n\r\nimport { mlsToDmy } from '../../utils/DateUtils';\r\n\r\nimport AdapterFn from '../AdapterFn';\r\n\r\nconst { valueMoving } = AdapterFn;\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isStr = str => typeof str === 'string';\r\nconst _isNumber = n => typeof n === 'number'\r\n  && (n - n === 0);\r\n\r\nconst _crItemCaption = ({ dfItemCaption, items, itemCaption }) => _isNumber(dfItemCaption)\r\n  && _isArr(items) && items[dfItemCaption-1]\r\n      ? items[dfItemCaption-1].caption || itemCaption\r\n      : itemCaption;\r\n\r\nconst _isStrEqTo = (str, strTo) => _isStr(str)\r\n && str.toLowerCase() === strTo;\r\n\r\n const _crLinkId = (database_code, dataset_code) =>\r\n   database_code && dataset_code\r\n     ? `${database_code}/${dataset_code}`\r\n     : void 0;\r\n\r\nconst QuandlFn = {\r\n  valueMoving,\r\n\r\n  getData: (json) => {\r\n    const { dataset={}, datatable={} } = json;\r\n    return dataset.data || datatable.data || [];\r\n  },\r\n\r\n  getColumnNames: (json) => {\r\n    const { dataset, datatable } = json;\r\n    if (dataset) {\r\n      return dataset.column_names || [];\r\n    }\r\n    if (datatable && _isArr(datatable.columns)) {\r\n      return datatable.columns.map(c => c.name);\r\n    }\r\n    return [];\r\n  },\r\n\r\n  isPrevDateAfter(arr, checkedDate, predicate){\r\n     const length = arr.length;\r\n     if (length === 0){\r\n       return true;\r\n     }\r\n     const prevDate = arr[length-1].x;\r\n     if (Math.abs((checkedDate.valueOf()-prevDate.valueOf())/(24*60*60*1000)) < predicate){\r\n       return false;\r\n     } else {\r\n       return true;\r\n     }\r\n  },\r\n\r\n  createDatasetInfo({ dataset }){\r\n     const {\r\n       name,\r\n       description,\r\n       newest_available_date,\r\n       oldest_available_date,\r\n       frequency,\r\n       database_code,\r\n       dataset_code\r\n     } = dataset || {}\r\n     , linkId = _crLinkId(database_code, dataset_code);\r\n\r\n     return  {\r\n       name,\r\n       toDate: newest_available_date,\r\n       fromDate: oldest_available_date,\r\n       frequency,\r\n       linkId,\r\n       description\r\n    };\r\n  },\r\n\r\n  createZhConfig(option){\r\n    const {\r\n            item, title, subtitle='',\r\n            value:id, key, columnName, dataColumn,\r\n            fromDate, seriaColumnNames,\r\n            linkFn, dataSource\r\n          } = option\r\n        , _dataSource = dataSource\r\n             ? `Quandl: ${dataSource}`\r\n             : 'Quandl'\r\n        , _itemCaption = _crItemCaption(option);\r\n    return {\r\n      item,\r\n      title, subtitle,\r\n      id, key,\r\n      linkFn,\r\n      itemConf: {\r\n        _itemKey: id,\r\n        columnName, dataColumn,\r\n        fromDate, seriaColumnNames\r\n      },\r\n      itemCaption: _itemCaption,\r\n      dataSource: _dataSource\r\n    };\r\n  },\r\n\r\n  createPercent({ bValue=Big('0.0'), bTotal=Big('0.0') }){\r\n    return mathFn.calcPercent({ bValue, bTotal });\r\n  },\r\n\r\n  createValueMoving({ bNowValue=Big('0.0'), bPrevValue=Big('0.0') }){\r\n    return mathFn.crValueMoving({\r\n      nowValue: bNowValue,\r\n      prevValue: bPrevValue,\r\n      fnFormat: formatAllNumber\r\n    });\r\n  },\r\n\r\n  getRecentDate(seria=[], json){\r\n     const len = seria.length\r\n         , { dataset={} } = json\r\n         , { frequency='' } = dataset\r\n         , mlsUTC = (len>0 && seria[len-1][0] && _isNumber(seria[len-1][0]) )\r\n              ? seria[len-1][0]\r\n              : '';\r\n      return mlsUTC\r\n         ? frequency.toLowerCase() === 'annual'\r\n              ? new Date(mlsUTC).getUTCFullYear()\r\n              : mlsToDmy(mlsUTC)\r\n         : '';\r\n  },\r\n\r\n  setTitleToConfig(config, option){\r\n    const { title, subtitle } = option || {};\r\n    config.title.text = title || '';\r\n    config.subtitle.text = subtitle ? `${subtitle}:` : '';\r\n  },\r\n\r\n  findColumnIndex(obj, columnName=''){\r\n     const column_names = _isArr(obj)\r\n       ? obj\r\n       : QuandlFn.getColumnNames(obj)\r\n     , _columnName = columnName.toLowerCase();\r\n\r\n     if ( _columnName && column_names ) {\r\n      for (let i=0, max=column_names.length; i<max; i++){\r\n       if ( _isStrEqTo(column_names[i], _columnName) ) {\r\n         return i;\r\n       }\r\n      }\r\n     }\r\n     return void 0;\r\n  },\r\n\r\n  getDataColumnIndex(json, option){\r\n    const { columnName, dataColumn } = option\r\n    , _dataColumn = QuandlFn.findColumnIndex(json, columnName);\r\n    return _dataColumn || dataColumn || 1;\r\n  }\r\n\r\n};\r\n\r\nexport default QuandlFn\r\n"],"file":"QuandlFn.js"}