{"version":3,"sources":["../../../src/adapters/coin-metrics/fnAdapter.js"],"names":["ymdhmsToUTC","crItemConf","crValueConf","AdapterFn","_crZhConfig","option","data","_itemKey","dataSource","itemCaption","id","key","itemConf","fnAdapter","crError","bind","crData","json","arr","metricData","series","map","time","values","replace","parseFloat","crConfOption","zhConfig"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAM;AACJA,EAAAA,WADI;AAEJC,EAAAA,UAFI;AAGJC,EAAAA;AAHI,IAIFC,kBAJJ;;AAMA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACpC,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA;AAHI,MAIFJ,MAJJ;AAKA,SAAO;AACLK,IAAAA,EAAE,EAAEH,QADC;AACSI,IAAAA,GAAG,EAAEJ,QADd;AAELE,IAAAA,WAFK;AAGLD,IAAAA,UAHK;AAILI,IAAAA,QAAQ,EAAE;AACRL,MAAAA,QADQ;AAER,SAAGN,UAAU,CAACI,MAAD,CAFL;AAGR,SAAGH,WAAW,CAACI,IAAD,CAHN;AAIRE,MAAAA;AAJQ;AAJL,GAAP;AAWD,CAjBD;;AAmBA,MAAMK,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAEA,cAAQC,IAAR,CAAa,IAAb,EAAmB,iBAAnB,CADK;AAGdC,EAAAA,MAAM,EAAEC,IAAI,IAAI;AACd,UAAMC,GAAG,GAAGD,IAAI,CAACE,UAAL,CAAgBC,MAA5B;AACA,WAAOF,GAAG,CAACG,GAAJ,CAAQ;AAAA,UAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD;AAAA,aAAsB,CACnCvB,WAAW,CAAC,CAACsB,IAAI,IAAI,EAAT,EAAaE,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAD,EAAgC,GAAhC,CADwB,EAEnCC,UAAU,CAAC,CAACF,MAAM,IAAI,EAAX,EAAe,CAAf,CAAD,CAFyB,CAAtB;AAAA,KAAR,CAAP;AAID,GATa;AAWdG,EAAAA,YAAY,EAAE,CAACrB,MAAD,EAASY,IAAT,EAAeX,IAAf,MAAyB;AACrCqB,IAAAA,QAAQ,EAAEvB,WAAW,CAACC,MAAD,EAASC,IAAT;AADgB,GAAzB;AAXA,CAAlB;eAgBeO,S","sourcesContent":["import AdapterFn from '../AdapterFn'\r\nimport { crError } from '../crFn';\r\n\r\nconst {\r\n  ymdhmsToUTC,\r\n  crItemConf,\r\n  crValueConf\r\n} = AdapterFn;\r\n\r\nconst _crZhConfig = (option, data) => {\r\n  const {\r\n    _itemKey,\r\n    dataSource,\r\n    itemCaption\r\n  } = option;\r\n  return {\r\n    id: _itemKey, key: _itemKey,\r\n    itemCaption,\r\n    dataSource,\r\n    itemConf: {\r\n      _itemKey,\r\n      ...crItemConf(option),\r\n      ...crValueConf(data),\r\n      dataSource\r\n    }\r\n  };\r\n};\r\n\r\nconst fnAdapter = {\r\n    crError: crError.bind(null, \"Server Response\"),\r\n\r\n    crData: json => {\r\n      const arr = json.metricData.series;\r\n      return arr.map(({ time, values }) => [\r\n        ymdhmsToUTC((time || '').replace('Z', ''), 'T'),\r\n        parseFloat((values || [])[0])\r\n      ]);\r\n    },\r\n\r\n    crConfOption: (option, json, data) => ({\r\n      zhConfig: _crZhConfig(option, data)\r\n    })\r\n};\r\n\r\nexport default fnAdapter\r\n"],"file":"fnAdapter.js"}