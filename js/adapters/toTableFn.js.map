{"version":3,"sources":["../../src/adapters/toTableFn.js"],"names":["_isNumber","n","_replaceNaN","str","_getCellValue","r","h","pn","toN","_isToNumber","_toFixedBy","_strV","parseFloat","crTableConfig","id","title","headers","rows","dataSource","fns","tableFn","numberFormat","zhCompType","zhConfig","key","crTableRows","idPropName","map","rIndex","forEach"],"mappings":";;;;;AAAA;;AAKA,MAAMA,SAAS,GAAGC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAApC;AAAA,MACEC,WAAW,GAAG,UAACD,CAAD,EAAIE,GAAJ;AAAA,MAAIA,GAAJ;AAAIA,IAAAA,GAAJ,GAAQ,EAAR;AAAA;;AAAA,SAAeF,CAAC,GAAGA,CAAJ,KAAU,CAAV,GACzBA,CADyB,GACrBE,GADM;AAAA,CADhB;;AAIA,MAAMC,aAAa,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAcF,CAApB;AAAA,QACEG,WAAW,GAAG,CAAC,CAACD,GADlB;AAAA,QAEEE,UAAU,GAAGD,WAAW,IAAID,GAAG,CAAC,CAAD,CAFjC;AAAA,QAGEG,KAAK,GAAGN,CAAC,CAACE,EAAD,CAHX;;AAIA,SAAOE,WAAW,GACdT,SAAS,CAACU,UAAD,CAAT,GACI,wBAAQC,KAAR,EAAeD,UAAf,CADJ,GAEIR,WAAW,CAACU,UAAU,CAACD,KAAD,CAAX,CAHD,GAIdA,KAJJ;AAKD,CAVD;;AAYO,MAAME,aAAa,GAAG;AAAA,MAAC;AAC5BC,IAAAA,EAD4B;AAE5BC,IAAAA,KAF4B;AAG5BC,IAAAA,OAH4B;AAI5BC,IAAAA,IAJ4B;AAK5BC,IAAAA,UAL4B;AAM5BC,IAAAA;AAN4B,GAAD;AAAA,SAOtB;AACLL,IAAAA,EADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,OAHK;AAILI,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAZA,uBADO;AAEP,SAAGF;AAFI,KAJJ;AAQLF,IAAAA,IARK;AASLC,IAAAA,UATK;AAULI,IAAAA,UAAU,EAAE,OAVP;AAWLC,IAAAA,QAAQ,EAAE;AACRT,MAAAA,EAAE,EAAEA,EADI;AACAU,MAAAA,GAAG,EAAEV;AADL;AAXL,GAPsB;AAAA,CAAtB;;;;AAuBA,MAAMW,WAAW,GAAG,UACzBT,OADyB,EAEzBC,IAFyB,EAGzBS,UAHyB;AAAA,MACzBV,OADyB;AACzBA,IAAAA,OADyB,GACjB,EADiB;AAAA;;AAAA,MAEzBC,IAFyB;AAEzBA,IAAAA,IAFyB,GAEpB,EAFoB;AAAA;;AAAA,MAGzBS,UAHyB;AAGzBA,IAAAA,UAHyB,GAGd,IAHc;AAAA;;AAAA,SAItBT,IAAI,CACNU,GADE,CACE,CAACtB,CAAD,EAAIuB,MAAJ,KAAe;AACjBZ,IAAAA,OAAO,CAACa,OAAR,CAAgBvB,CAAC,IAAI;AACnBD,MAAAA,CAAC,CAACC,CAAC,CAACC,EAAH,CAAD,GAAUH,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAvB;AACD,KAFD;AAGAD,IAAAA,CAAC,CAACS,EAAF,GAAOT,CAAC,CAACqB,UAAD,CAAD,WAAsBE,MAA7B;AACA,WAAOvB,CAAP;AACF,GAPE,CAJsB;AAAA,CAApB","sourcesContent":["import {\r\n  numberFormat,\r\n  roundBy\r\n} from './AdapterFn';\r\n\r\nconst _isNumber = n => typeof n === 'number'\r\n, _replaceNaN = (n, str='') => n - n === 0\r\n    ? n : str;\r\n\r\nconst _getCellValue = (r, h) => {\r\n  const { pn, toN } = h\r\n  , _isToNumber = !!toN\r\n  , _toFixedBy = _isToNumber && toN[0]\r\n  , _strV = r[pn];\r\n  return _isToNumber\r\n    ? _isNumber(_toFixedBy)\r\n        ? roundBy(_strV, _toFixedBy)\r\n        : _replaceNaN(parseFloat(_strV))\r\n    : _strV;\r\n};\r\n\r\nexport const crTableConfig = ({\r\n  id,\r\n  title,\r\n  headers,\r\n  rows,\r\n  dataSource,\r\n  fns\r\n}) => ({\r\n  id,\r\n  title,\r\n  headers,\r\n  tableFn: {\r\n    numberFormat,\r\n    ...fns\r\n  },\r\n  rows,\r\n  dataSource,\r\n  zhCompType: 'TABLE',\r\n  zhConfig: {\r\n    id: id, key: id\r\n  }\r\n})\r\n\r\nexport const crTableRows = (\r\n  headers=[],\r\n  rows=[],\r\n  idPropName='id'\r\n) => rows\r\n  .map((r, rIndex) => {\r\n     headers.forEach(h => {\r\n       r[h.pn] = _getCellValue(r, h);\r\n     })\r\n     r.id = r[idPropName] || `id${rIndex}`\r\n     return r;\r\n  });\r\n"],"file":"toTableFn.js"}