{"version":3,"sources":["../../src/adapters/crAdapterOHLCV.js"],"names":["valueMoving","AdapterFn","stockSeriesLegend","toSeriesData","AdapterStockFn","_crCaptionDf","title","subtitle","_crIdDf","_itemKey","_getArrDf","json","_crAddConfigDf","crAdapterOHLCV","seriaOption","crCaption","crId","getArr","crAddConfig","toDate","toConfig","option","id","dataOption","arr","data","dataMfi","config","stockConfig","addCaption","add","legend","addZhPoints","toSeries","isAllSeries","stockSeria","toSeria"],"mappings":"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","sourcesContent":["import Builder from '../charts/ConfigBuilder'\r\nimport AdapterFn from './AdapterFn'\r\nimport AdapterStockFn from './AdapterStockFn'\r\n\r\nconst {  \r\n  valueMoving,\r\n  stockSeriesLegend\r\n} = AdapterFn\r\nconst { toSeriesData } = AdapterStockFn\r\n\r\nconst _crCaptionDf = ({ title, subtitle }) => ({ title, subtitle })\r\n, _crIdDf = ({ _itemKey }) => _itemKey\r\n, _getArrDf = json => json\r\n, _crAddConfigDf = () => {};\r\n\r\nconst crAdapterOHLCV = ({\r\n  seriaOption={},\r\n  crCaption=_crCaptionDf,\r\n  crId=_crIdDf,\r\n  getArr=_getArrDf,\r\n  crAddConfig=_crAddConfigDf,\r\n  toDate\r\n}) => ({\r\n  toConfig(json, option){\r\n    const { title, subtitle } = crCaption(option)\r\n    , id = crId(option)\r\n    , dataOption = toSeriesData({\r\n        arr: getArr(json, option),\r\n        toDate,\r\n        seriaOption, option\r\n      })\r\n    , { data, dataMfi } = dataOption\r\n    , config = Builder()\r\n        .stockConfig(id, dataOption)\r\n        .addCaption(title, subtitle)\r\n        .add({\r\n           valueMoving: valueMoving(data),\r\n           ...crAddConfig({\r\n              json, option, data,\r\n              id, title, subtitle\r\n           })\r\n         })\r\n         .add('zhConfig', { legend: stockSeriesLegend() })\r\n         .addZhPoints(dataMfi)\r\n         .toConfig();\r\n\r\n    return { config };\r\n  },\r\n\r\n  toSeries(json, option){\r\n    const id = crId(option)\r\n    , { data } = toSeriesData({\r\n       arr: getArr(json, option),\r\n       toDate,\r\n       seriaOption: { ...seriaOption, isAllSeries: false },\r\n       option\r\n     });\r\n    return Builder()\r\n      .stockSeria(id, data)\r\n      .toSeria();\r\n  }\r\n})\r\n\r\nexport default crAdapterOHLCV\r\n"],"file":"crAdapterOHLCV.js"}