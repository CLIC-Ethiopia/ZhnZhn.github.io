{"version":3,"sources":["../../src/math/mathFn.js"],"names":["fnEcho","value","MAX_TO_ROUND","_isNumber","n","_formatedToBig","v","dfR","_b","toString","replace","round","_roundBig","bValue","_bValue","gt","toFixed","_toBig","Big","err","_roundBy","nOrStr","by","_floatOrNaN","parseFloat","roundBy","calcPercent","bTotal","eq","times","div","abs","crValueMoving","nowValue","prevValue","fnFormat","bNowValue","bPrevValue","_bDelta","minus","_direction","DT_DOWN","lt","DT_UP","DT_EQUAL","_bPercent","_bNowValue","_bDeltaAbs","_value","delta","_deltaAbs","percent","_percentAbs","direction","parseInt","toFixedNumber","crId","_crId"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport {\r\n  DT_UP,\r\n  DT_DOWN,\r\n  DT_EQUAL\r\n} from '../constants/DirectionType';\r\nimport _crId from './crId';\r\n\r\nconst fnEcho = value => value;\r\n\r\nconst MAX_TO_ROUND = '1000000';\r\n\r\nconst _isNumber = n => typeof n === 'number'\r\n && (n - n === 0);\r\n\r\nconst _formatedToBig = (v=0, dfR) => {\r\n  const _b = Big(v.toString().replace(/\\s/g,''));\r\n  return _isNumber(dfR)\r\n    ? _b.round(dfR)\r\n    : _b;\r\n}\r\n\r\nconst _roundBig = (bValue) => {\r\n  const _bValue = bValue.round(4);\r\n  return _bValue.gt(MAX_TO_ROUND)\r\n     ? bValue.toFixed(0)\r\n     : _bValue;\r\n};\r\n\r\n\r\nconst _toBig = (bValue) => {\r\n  if (bValue instanceof Big) {\r\n    return bValue;\r\n  }\r\n  try {\r\n    bValue = new Big(bValue)\r\n    return bValue;\r\n  } catch(err) {\r\n    return new Big(0);\r\n  }\r\n};\r\n\r\nconst _roundBy = (nOrStr, by=2) => {\r\n  if (nOrStr == null) {\r\n    return null;\r\n  }\r\n  const _floatOrNaN = parseFloat(nOrStr);\r\n  if (_floatOrNaN - _floatOrNaN !== 0) {\r\n    return _floatOrNaN;\r\n  }\r\n  return parseFloat(Big(nOrStr).toFixed(by));\r\n};\r\n\r\n\r\nexport const roundBy = _roundBy\r\n\r\nexport const calcPercent = ({\r\n  bValue=Big(0),\r\n  bTotal=Big(0)\r\n}) => {\r\n  bValue = _toBig(bValue)\r\n  bTotal = _toBig(bTotal)\r\n  return !bTotal.eq(Big(0))\r\n    ? bValue.times(100).div(bTotal).abs().toFixed(2)\r\n    : Big(0).toFixed(2);\r\n}\r\n\r\nexport const crValueMoving = ({\r\n  nowValue,\r\n  prevValue,\r\n  fnFormat=fnEcho,\r\n  dfR\r\n}={}) => {\r\n  const bNowValue = _formatedToBig(nowValue, dfR)\r\n  , bPrevValue = _formatedToBig(prevValue, dfR)\r\n  , _bDelta = bPrevValue.minus(bNowValue)\r\n  , _direction = _bDelta.gt(0.0)\r\n       ? DT_DOWN\r\n       : _bDelta.lt(0.0) ? DT_UP : DT_EQUAL\r\n  , _bPercent = calcPercent({\r\n       bValue:_bDelta,\r\n       bTotal: bPrevValue\r\n  })\r\n  , _bNowValue = _roundBig(bNowValue)\r\n  , _bDeltaAbs = _roundBig(_bDelta.abs());\r\n\r\n  return {\r\n    value: fnFormat(_bNowValue).toString(),\r\n    _value: _bNowValue.toString(),\r\n    delta: fnFormat(_bDeltaAbs).toString(),\r\n    _deltaAbs: _bDeltaAbs.toString(),\r\n    percent: _bPercent.toString() + '%',\r\n    _percentAbs: _bPercent.toString(),\r\n    direction: _direction\r\n  };\r\n}\r\n\r\nexport const toFixed = (value) => {\r\n  const bValue = Big(value);\r\n  return bValue.gt('10')\r\n    ? parseInt(bValue.toFixed(0), 10)\r\n    : parseFloat(bValue.toFixed(2));\r\n}\r\n\r\nexport const toFixedNumber = (value) => {\r\n  if ( !_isNumber(value) ) {\r\n    return value;\r\n  }\r\n  if ( value<10 ) {\r\n    return _roundBy(value, 4);\r\n  } else if ( value<10000 ) {\r\n    return _roundBy(value, 2);\r\n  } else {\r\n    return _roundBy(value, 0);\r\n  }\r\n}\r\n\r\nexport const crId = _crId\r\n"],"file":"mathFn.js"}