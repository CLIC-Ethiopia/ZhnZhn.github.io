{"version":3,"sources":["../../src/math/mathFn.js"],"names":["fnEcho","value","MAX_TO_ROUND","_isNumber","n","Number","isNaN","_formatedToBig","v","dfR","_b","toString","replace","round","_roundBig","bValue","_bValue","gt","toFixed","_toBig","dfValue","Big","err","_roundBy","nOrStr","by","parseFloat","mathFn","roundBy","calcPercent","bTotal","eq","times","div","abs","crValueMoving","option","nowValue","prevValue","Direction","D","fnFormat","bNowValue","bPrevValue","_bDelta","minus","_direction","DOWN","lt","UP","EQUAL","_bPercent","_bNowValue","_bDeltaAbs","_value","delta","_deltaAbs","percent","_percentAbs","direction","parseInt","toFixedNumber"],"mappings":"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","sourcesContent":["import Big from 'big.js'\r\n\r\nconst fnEcho = value => value;\r\n\r\nconst MAX_TO_ROUND = '1000000';\r\n\r\nconst _isNumber = n => typeof n === 'number'\r\n && !Number.isNaN(n);\r\n\r\nconst _formatedToBig = (v=0, dfR) => {\r\n  const _b = Big(v.toString().replace(/\\s/g,''));\r\n  return _isNumber(dfR)\r\n    ? _b.round(dfR)\r\n    : _b;\r\n}\r\n\r\nconst _roundBig = (bValue) => {\r\n  let _bValue = bValue.round(4);\r\n  if ( _bValue.gt(MAX_TO_ROUND) ){\r\n    _bValue = bValue.toFixed(0);\r\n  }\r\n  return _bValue;\r\n};\r\n\r\n\r\nconst _toBig = (bValue, dfValue=0) => {\r\n  if (bValue instanceof Big) {\r\n    return bValue;\r\n  }\r\n  try {\r\n    bValue = new Big(bValue)\r\n    return bValue;\r\n  } catch(err) {\r\n    return new Big(dfValue);\r\n  }\r\n};\r\n\r\nconst _roundBy = (nOrStr, by=2) => nOrStr != null\r\n  ? parseFloat(Big(nOrStr).toFixed(by))\r\n  : null;\r\n\r\nconst mathFn = {\r\n  roundBy: _roundBy,\r\n\r\n  calcPercent: ({ bValue=Big(0), bTotal=Big(0) }) => {\r\n    bValue = _toBig(bValue)\r\n    bTotal = _toBig(bTotal)\r\n    return !bTotal.eq(Big(0))\r\n      ? bValue.times(100).div(bTotal).abs().toFixed(2)\r\n      : Big(0).toFixed(2);\r\n  },\r\n\r\n  crValueMoving: (option) => {\r\n    const {\r\n      nowValue,\r\n      prevValue,\r\n      Direction:D={},\r\n      fnFormat=fnEcho,\r\n      dfR\r\n    } = option\r\n    , bNowValue = _formatedToBig(nowValue, dfR)\r\n    , bPrevValue = _formatedToBig(prevValue, dfR)\r\n    , _bDelta = bPrevValue.minus(bNowValue)\r\n    , _direction = _bDelta.gt(0.0)\r\n         ? D.DOWN\r\n         : _bDelta.lt(0.0)\r\n              ? D.UP\r\n              : D.EQUAL;\r\n\r\n    const _bPercent = mathFn.calcPercent({\r\n      bValue:_bDelta, bTotal: bPrevValue\r\n    });\r\n\r\n    const _bNowValue = _roundBig(bNowValue)\r\n    , _bDeltaAbs = _roundBig(_bDelta.abs());\r\n\r\n\r\n    return {\r\n      value: fnFormat(_bNowValue).toString(),\r\n      _value: _bNowValue.toString(),\r\n      delta: fnFormat(_bDeltaAbs).toString(),\r\n      _deltaAbs: _bDeltaAbs.toString(),\r\n      percent: _bPercent.toString() + '%',\r\n      _percentAbs: _bPercent.toString(),\r\n      direction: _direction\r\n    };\r\n  },\r\n\r\n  toFixed: (value) => {\r\n    const bValue = Big(value);\r\n    return bValue.gt('10')\r\n      ? parseInt(bValue.toFixed(0), 10)\r\n      : parseFloat(bValue.toFixed(2));\r\n  },\r\n\r\n  toFixedNumber: (value) => {\r\n    if ( !_isNumber(value) ) {\r\n      return value;\r\n    }\r\n    if ( value<10 ) {\r\n      return _roundBy(value, 4);\r\n    } else if ( value<10000 ) {\r\n      return _roundBy(value, 2);\r\n    } else {\r\n      return _roundBy(value, 0);\r\n    }\r\n  }\r\n}\r\n\r\nexport default mathFn\r\n"],"file":"mathFn.js"}