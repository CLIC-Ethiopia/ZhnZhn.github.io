{"version":3,"sources":["../../src/math/seriaFn.js"],"names":["_isArr","Array","isArray","_isNaN","Number","isNaN","_calcChanges","yPrev","yNext","parseFloat","minus","toString","_fFindY","initialValue","findY","data","resultY","getY","_fn","p","currentY","pointY","i","length","mathFn","toFixedNumber","_findMinY","y","min","_findMaxY","max","fn","growthRate","roc","changesBetween","normalize","d","getX","_y0","_d","push","div","times","toFixed","findMinY","POSITIVE_INFINITY","findMaxY","NEGATIVE_INFINITY","filterTrimZero","_getY","_countZero","splice","_zeroIndex","mean","_sum","_numberOfPoints","_y","add","_maxIndex","_avg","parseInt","NaN","median","map","sort","a","b","_len","_half","_median","Math","round"],"mappings":"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","sourcesContent":["import Big from 'big.js'\r\n\r\nimport mathFn from './mathFn'\r\nimport fIndicatorCalc from './fIndicatorCalc'\r\nimport roc from './roc'\r\nimport {\r\n  isNotEmptyArr,\r\n  isNumber,\r\n  crPointGetter,\r\n  fGetY,\r\n  getZeroCountFromStart,\r\n  getZeroIndexFromEnd\r\n} from './seriaHelperFn';\r\n\r\nconst _isArr = Array.isArray\r\n, _isNaN = Number.isNaN;\r\n\r\nconst _calcChanges = (yPrev, yNext) => {\r\n  if (!isNumber(yPrev) || !isNumber(yNext)) {\r\n    return null;\r\n  }\r\n  return parseFloat(Big(yNext).minus(yPrev).toString());\r\n};\r\n\r\n\r\nconst _fFindY = (initialValue, findY) => (data) => {\r\n  if (!isNotEmptyArr(data)){\r\n    return;\r\n  }\r\n  let resultY = initialValue;\r\n  const { getY } = crPointGetter(data)\r\n  , _fn = (p, currentY) => {\r\n      const pointY = getY(p);\r\n      return findY(pointY, currentY);\r\n  };\r\n  let i = 0;\r\n  for (; i<data.length; i++){\r\n    resultY = _fn(data[i], resultY)\r\n  }\r\n  return resultY !== initialValue\r\n    ? mathFn.toFixedNumber(resultY)\r\n    : void 0;\r\n};\r\nconst _findMinY = (y, min) => isNumber(y) && y<min\r\n  ? y : min;\r\nconst _findMaxY = (y, max) => isNumber(y) && y>max\r\n  ? y : max;\r\n\r\nconst fn = {\r\n  growthRate: fIndicatorCalc(roc),\r\n  changesBetween: fIndicatorCalc(_calcChanges),\r\n\r\n  normalize: (d) => {\r\n    if (!isNotEmptyArr(d)) {\r\n      return [];\r\n    }\r\n    const { getX, getY } = crPointGetter(d)\r\n    , _y0 = getY(d[0]);\r\n    if ( !(isNumber(_y0) && _y0 !== 0) ) {\r\n      return [];\r\n    }\r\n\r\n    const _d = [];\r\n    let i = 0;\r\n    for(; i<d.length; i++) {\r\n      _d.push([\r\n        getX(d[i]),\r\n        parseFloat(\r\n          Big(getY(d[i])).div(_y0)\r\n           .times(100)\r\n           .toFixed(2)\r\n        )\r\n      ])\r\n    }\r\n\r\n    return _d;\r\n  },\r\n\r\n  findMinY: _fFindY(Number.POSITIVE_INFINITY, _findMinY),\r\n  findMaxY: _fFindY(Number.NEGATIVE_INFINITY, _findMaxY),\r\n\r\n  filterTrimZero: (data) => {\r\n    if (!_isArr(data)) { return data; }\r\n\r\n    const _getY = fGetY(data[0]);\r\n    if (!_getY) { return data; }\r\n\r\n    const _countZero = getZeroCountFromStart(data, _getY)\r\n    if (_countZero) {\r\n      data.splice(0, _countZero)\r\n    }\r\n    const _zeroIndex = getZeroIndexFromEnd(data, _getY)\r\n    if (_zeroIndex){\r\n      data.splice(_zeroIndex)\r\n    }\r\n    return data;\r\n  },\r\n\r\n  mean: (data) => {\r\n    if (!isNotEmptyArr(data)){\r\n      return [];\r\n    }\r\n    const { getY, getX } = crPointGetter(data);\r\n    let _sum = Big(0)\r\n    , _numberOfPoints = 0\r\n    , i = 0\r\n    , _y;\r\n    for (;i<data.length;i++) {\r\n      _y = getY(data[i])\r\n      if (isNumber(_y)) {\r\n        _sum = _sum.add(_y)\r\n        _numberOfPoints++\r\n      }\r\n    }\r\n    const _maxIndex = data.length - 1\r\n    , _avg = _numberOfPoints !== 0\r\n        ? parseInt(_sum.div(_numberOfPoints).toFixed(0), 10)\r\n        : NaN;\r\n    return _isNaN(_avg) ? []\r\n     : [\r\n         [getX(data[0]), _avg],\r\n         [getX(data[_maxIndex]), _avg]\r\n       ];\r\n  },\r\n\r\n  median: (data) => {\r\n    if (!isNotEmptyArr(data)){\r\n      return [];\r\n    }\r\n    const { getY, getX } = crPointGetter(data);\r\n\r\n    const _d = data\r\n      .map(getY)\r\n      .sort((a, b) => a-b)\r\n    , _len = data.length\r\n    , _half = _len/2\r\n    , _median = _half % 2 === 0\r\n       ? Math.round((_d[_half-1] + _d[_half])/2)\r\n       : _d[Math.round(_half) - 1];\r\n    return [\r\n      [getX(data[0]), _median],\r\n      [getX(data[_len-1]), _median],\r\n    ];\r\n  }\r\n};\r\n\r\nexport default fn\r\n"],"file":"seriaFn.js"}