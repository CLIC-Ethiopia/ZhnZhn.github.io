{"version":3,"sources":["../../src/math/seriaFn.js"],"names":["_isArr","Array","isArray","_isNumber","n","_calcY","yPrev","yNext","parseFloat","div","Math","abs","times","toFixed","_isDataArr","data","length","fn","growthRate","d","rt","_rt","parseInt","_d","max","prevStep","pPrev","pNext","i","push","x","y","normalize","_max","_y0","findMinY","undefined","minY","Number","POSITIVE_INFINITY","_fn","p","min","arr","mathFn","toFixedNumber","findMaxY","maxY","NEGATIVE_INFINITY","mean","_sum","add","_avg","median","map","arrP","sort","a","b","_len","_half","_median","round"],"mappings":"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","sourcesContent":["import Big from 'big.js'\r\n\r\nimport mathFn from './mathFn'\r\n\r\nconst _isArr = Array.isArray;\r\nconst _isNumber = n => typeof n === 'number'\r\n  ? (n - n === 0)\r\n  : false;\r\n\r\nconst _calcY = (yPrev, yNext) => {\r\n\r\n  if (!_isNumber(yPrev) || !_isNumber(yNext)) {\r\n    return null;\r\n  }\r\n\r\n  if (yNext === 0) {\r\n    return yPrev === 0\r\n      ? 0\r\n      : yPrev > 0 ? -100 : 100;\r\n  }\r\n\r\n  if (yPrev === 0) {\r\n    return null;\r\n  }\r\n\r\n  return parseFloat(\r\n    Big(yNext - yPrev)\r\n      .div(Math.abs(yPrev))\r\n      .times(100)\r\n      .toFixed(2)\r\n    );\r\n};\r\n\r\nconst _isDataArr = data => _isArr(data)\r\n  && data.length > 1\r\n  && _isArr(data[0]);\r\n\r\nconst fn = {\r\n  growthRate: (d, rt=1) => {\r\n    const _rt = parseInt(rt, 10);\r\n    if ( !(_isArr(d) && _isNumber(_rt)) ) {\r\n      return [];\r\n    }\r\n\r\n    const _d = []\r\n    , max = d.length\r\n    , prevStep = _rt-1;\r\n    let pPrev = d[0]\r\n      , pNext\r\n      , i=_rt;\r\n    for (; i<max; i++){\r\n      pNext = d[i];\r\n      _d.push([\r\n        pNext.x,\r\n        _calcY(pPrev.y, pNext.y)\r\n      ])\r\n      pPrev = d[i-prevStep]\r\n    }\r\n    return _d;\r\n  },\r\n\r\n  normalize: (d) => {\r\n    if (!_isArr(d)) {\r\n      return [];\r\n    }\r\n    const _d = []\r\n    , _max = d.length\r\n    , _y0 = d[0].y;\r\n    if (!_isNumber(_y0) || _y0 === 0 || _max === 0) {\r\n      return [];\r\n    }\r\n    for(let i=0; i<_max; i++) {\r\n      _d.push([\r\n        d[i].x,\r\n        parseFloat(\r\n          Big(d[i].y/_y0)\r\n           .times(100)\r\n           .toFixed(2)\r\n        )\r\n      ])\r\n    }\r\n\r\n    return _d;\r\n  },\r\n\r\n  findMinY: (data) => {\r\n    if (!_isArr(data) || data.length<1 ) {\r\n      return undefined;\r\n    }\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    const _fn = _isNumber(data[0].y)\r\n      ? (p, min) => _isNumber(p.y) && p.y<min ? p.y : min\r\n      : (arr, min) => _isNumber(arr[1]) && arr[1]<min ? arr[1] : min;\r\n    for (let i=0, max=data.length; i<max; i++){\r\n      minY = _fn(data[i], minY)\r\n    }\r\n    return minY !== Number.POSITIVE_INFINITY\r\n      ? mathFn.toFixedNumber(minY)\r\n      : undefined;\r\n  },\r\n  findMaxY: (data) => {\r\n    if (!_isArr(data) || data.length<1 ) {\r\n      return undefined;\r\n    }\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    const _fn = _isNumber(data[0].y)\r\n      ? (p, max) => _isNumber(p.y) && p.y>max ? p.y : max\r\n      : (arr, max) => _isNumber(arr[1]) && arr[1]>max ? arr[1] : max;\r\n    for (let i=0, max=data.length; i<max; i++){\r\n      maxY = _fn(data[i], maxY)\r\n    }\r\n    return maxY !== Number.NEGATIVE_INFINITY\r\n      ? mathFn.toFixedNumber(maxY)\r\n      : undefined;\r\n  },\r\n\r\n  mean: (data) => {\r\n    if ( !_isDataArr(data) ) {\r\n      return [];\r\n    }\r\n    let _sum = Big(0);\r\n    for (const p of data) {\r\n      if (_isNumber(p[1])) {\r\n        _sum = _sum.add(p[1])\r\n      }\r\n    }\r\n    const _max = data.length - 1;\r\n    const _avg = parseInt(_sum.div(_max).toFixed(0), 10);\r\n    return [\r\n      [data[0][0], _avg],\r\n      [data[_max][0], _avg]\r\n    ];\r\n  },\r\n\r\n  median: (data) => {\r\n    if ( !_isDataArr(data) ) {\r\n      return [];\r\n    }\r\n    const _d = data\r\n      .map(arrP => arrP[1])\r\n      .sort((a, b) => a-b)\r\n    , _len = data.length\r\n    , _half = _len/2\r\n    , _median = _half % 2 === 0\r\n       ? Math.round((_d[_half-1] + _d[_half])/2)\r\n       : _d[Math.round(_half) - 1];\r\n    return [\r\n      [data[0][0], _median],\r\n      [data[_len-1][0], _median],\r\n    ];\r\n  }\r\n};\r\n\r\nexport default fn\r\n"],"file":"seriaFn.js"}