{"version":3,"sources":["../../src/math/seriaFn.js"],"names":["_isArr","Array","isArray","_isNaN","Number","isNaN","_calcChanges","yPrev","yNext","_fFindY","initialValue","findY","data","resultY","getY","_fn","p","currentY","pointY","i","length","_findMinY","y","min","_findMaxY","max","growthRate","roc","changesBetween","normalize","d","getX","_y0","_d","push","parseFloat","div","times","toFixed","findMinY","POSITIVE_INFINITY","findMaxY","NEGATIVE_INFINITY","filterTrimZero","_getY","_countZero","splice","_zeroIndex","mean","_sum","_numberOfPoints","_y","add","_maxIndex","_avg","parseInt","NaN","median","map","sort","a","b","_len","_half","_median","Math","round"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\n\r\nimport { toFixedNumber } from './mathFn';\r\nimport fIndicatorCalc from './fIndicatorCalc';\r\nimport diff from './diff';\r\nimport roc from './roc';\r\nimport {\r\n  isNotEmptyArr,\r\n  isNumber,\r\n  crPointGetter,\r\n  fGetY,\r\n  getZeroCountFromStart,\r\n  getZeroIndexFromEnd\r\n} from './seriaHelperFn';\r\n\r\nconst _isArr = Array.isArray\r\n, _isNaN = Number.isNaN;\r\n\r\nconst _calcChanges = (yPrev, yNext) => {\r\n  if (!isNumber(yPrev) || !isNumber(yNext)) {\r\n    return null;\r\n  }\r\n  return diff(yNext, yPrev);\r\n};\r\n\r\n\r\nconst _fFindY = (initialValue, findY) => (data) => {\r\n  if (!isNotEmptyArr(data)){\r\n    return;\r\n  }\r\n  let resultY = initialValue;\r\n  const { getY } = crPointGetter(data)\r\n  , _fn = (p, currentY) => {\r\n      const pointY = getY(p);\r\n      return findY(pointY, currentY);\r\n  };\r\n  let i = 0;\r\n  for (; i<data.length; i++){\r\n    resultY = _fn(data[i], resultY)\r\n  }\r\n  return resultY !== initialValue\r\n    ? toFixedNumber(resultY)\r\n    : void 0;\r\n};\r\nconst _findMinY = (y, min) => isNumber(y) && y<min\r\n  ? y : min;\r\nconst _findMaxY = (y, max) => isNumber(y) && y>max\r\n  ? y : max;\r\n\r\nexport const growthRate = fIndicatorCalc(roc)\r\nexport const changesBetween = fIndicatorCalc(_calcChanges)\r\n\r\nexport const normalize = (d) => {\r\n  if (!isNotEmptyArr(d)) {\r\n    return [];\r\n  }\r\n  const { getX, getY } = crPointGetter(d)\r\n  , _y0 = getY(d[0]);\r\n  if ( !(isNumber(_y0) && _y0 !== 0) ) {\r\n    return [];\r\n  }\r\n\r\n  const _d = [];\r\n  let i = 0;\r\n  for(; i<d.length; i++) {\r\n    _d.push([\r\n      getX(d[i]),\r\n      parseFloat(\r\n        Big(getY(d[i])).div(_y0)\r\n         .times(100)\r\n         .toFixed(2)\r\n      )\r\n    ])\r\n  }\r\n\r\n  return _d;\r\n}\r\n\r\nexport const findMinY = _fFindY(Number.POSITIVE_INFINITY, _findMinY)\r\nexport const findMaxY = _fFindY(Number.NEGATIVE_INFINITY, _findMaxY)\r\n\r\nexport const filterTrimZero = (data) => {\r\n  if (!_isArr(data)) { return data; }\r\n\r\n  const _getY = fGetY(data[0]);\r\n  if (!_getY) { return data; }\r\n\r\n  const _countZero = getZeroCountFromStart(data, _getY)\r\n  if (_countZero) {\r\n    data.splice(0, _countZero)\r\n  }\r\n  const _zeroIndex = getZeroIndexFromEnd(data, _getY)\r\n  if (_zeroIndex){\r\n    data.splice(_zeroIndex)\r\n  }\r\n  return data;\r\n}\r\n\r\nexport const mean = (data) => {\r\n  if (!isNotEmptyArr(data)){\r\n    return [];\r\n  }\r\n  const { getY, getX } = crPointGetter(data);\r\n  let _sum = Big(0)\r\n  , _numberOfPoints = 0\r\n  , i = 0\r\n  , _y;\r\n  for (;i<data.length;i++) {\r\n    _y = getY(data[i])\r\n    if (isNumber(_y)) {\r\n      _sum = _sum.add(_y)\r\n      _numberOfPoints++\r\n    }\r\n  }\r\n  const _maxIndex = data.length - 1\r\n  , _avg = _numberOfPoints !== 0\r\n      ? parseInt(_sum.div(_numberOfPoints).toFixed(0), 10)\r\n      : NaN;\r\n  return _isNaN(_avg) ? []\r\n   : [\r\n       [getX(data[0]), _avg],\r\n       [getX(data[_maxIndex]), _avg]\r\n     ];\r\n}\r\n\r\nexport const median = (data) => {\r\n  if (!isNotEmptyArr(data)){\r\n    return [];\r\n  }\r\n  const { getY, getX } = crPointGetter(data);\r\n\r\n  const _d = data\r\n    .map(getY)\r\n    .sort((a, b) => a-b)\r\n  , _len = data.length\r\n  , _half = _len/2\r\n  , _median = _half % 2 === 0\r\n     ? Math.round((_d[_half-1] + _d[_half])/2)\r\n     : _d[Math.round(_half) - 1];\r\n  return [\r\n    [getX(data[0]), _median],\r\n    [getX(data[_len-1]), _median],\r\n  ];\r\n}\r\n"],"file":"seriaFn.js"}