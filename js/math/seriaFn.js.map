{"version":3,"sources":["../../src/math/seriaFn.js"],"names":["isNumber","fns","isPointArr","fGetY","getZeroCountFromStart","getZeroIndexFromEnd","_isArr","Array","isArray","_calcY","yPrev","yNext","parseFloat","div","Math","abs","times","toFixed","fn","growthRate","d","rt","_rt","parseInt","_d","max","length","prevStep","pPrev","pNext","i","push","x","y","normalize","_max","_y0","findMinY","data","undefined","minY","Number","POSITIVE_INFINITY","_fn","p","min","arr","mathFn","toFixedNumber","findMaxY","maxY","NEGATIVE_INFINITY","filterTrimZero","_getY","_countZero","splice","_zeroIndex","mean","_sum","add","_avg","median","map","arrP","sort","a","b","_len","_half","_median","round"],"mappings":"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","sourcesContent":["import Big from 'big.js'\r\n\r\nimport mathFn from './mathFn'\r\nimport fns from './seriaHelperFn'\r\n\r\nconst {\r\n  isNumber,\r\n  isPointArr,\r\n  fGetY,\r\n  getZeroCountFromStart,\r\n  getZeroIndexFromEnd\r\n} = fns\r\n\r\nconst _isArr = Array.isArray;\r\n\r\nconst _calcY = (yPrev, yNext) => {\r\n\r\n  if (!isNumber(yPrev) || !isNumber(yNext)) {\r\n    return null;\r\n  }\r\n\r\n  if (yNext === 0) {\r\n    return yPrev === 0\r\n      ? 0\r\n      : yPrev > 0 ? -100 : 100;\r\n  }\r\n\r\n  if (yPrev === 0) {\r\n    return null;\r\n  }\r\n\r\n  return parseFloat(\r\n    Big(yNext - yPrev)\r\n      .div(Math.abs(yPrev))\r\n      .times(100)\r\n      .toFixed(2)\r\n    );\r\n};\r\n\r\nconst fn = {\r\n  growthRate: (d, rt=1) => {\r\n    const _rt = parseInt(rt, 10);\r\n    if ( !(_isArr(d) && isNumber(_rt)) ) {\r\n      return [];\r\n    }\r\n\r\n    const _d = []\r\n    , max = d.length\r\n    , prevStep = _rt-1;\r\n    let pPrev = d[0]\r\n      , pNext\r\n      , i=_rt;\r\n    for (; i<max; i++){\r\n      pNext = d[i];\r\n      _d.push([\r\n        pNext.x,\r\n        _calcY(pPrev.y, pNext.y)\r\n      ])\r\n      pPrev = d[i-prevStep]\r\n    }\r\n    return _d;\r\n  },\r\n\r\n  normalize: (d) => {\r\n    if (!_isArr(d)) {\r\n      return [];\r\n    }\r\n    const _d = []\r\n    , _max = d.length\r\n    , _y0 = d[0].y;\r\n    if (!isNumber(_y0) || _y0 === 0 || _max === 0) {\r\n      return [];\r\n    }\r\n    for(let i=0; i<_max; i++) {\r\n      _d.push([\r\n        d[i].x,\r\n        parseFloat(\r\n          Big(d[i].y/_y0)\r\n           .times(100)\r\n           .toFixed(2)\r\n        )\r\n      ])\r\n    }\r\n\r\n    return _d;\r\n  },\r\n\r\n  findMinY: (data) => {\r\n    if (!_isArr(data) || data.length<1 ) {\r\n      return undefined;\r\n    }\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    const _fn = isNumber(data[0].y)\r\n      ? (p, min) => isNumber(p.y) && p.y<min ? p.y : min\r\n      : (arr, min) => isNumber(arr[1]) && arr[1]<min ? arr[1] : min;\r\n    for (let i=0, max=data.length; i<max; i++){\r\n      minY = _fn(data[i], minY)\r\n    }\r\n    return minY !== Number.POSITIVE_INFINITY\r\n      ? mathFn.toFixedNumber(minY)\r\n      : undefined;\r\n  },\r\n  findMaxY: (data) => {\r\n    if (!_isArr(data) || data.length<1 ) {\r\n      return undefined;\r\n    }\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    const _fn = isNumber(data[0].y)\r\n      ? (p, max) => isNumber(p.y) && p.y>max ? p.y : max\r\n      : (arr, max) => isNumber(arr[1]) && arr[1]>max ? arr[1] : max;\r\n    for (let i=0, max=data.length; i<max; i++){\r\n      maxY = _fn(data[i], maxY)\r\n    }\r\n    return maxY !== Number.NEGATIVE_INFINITY\r\n      ? mathFn.toFixedNumber(maxY)\r\n      : undefined;\r\n  },\r\n\r\n  filterTrimZero: (data) => {\r\n    if (!_isArr(data)) { return data; }\r\n\r\n    const _getY = fGetY(data[0]);\r\n    if (!_getY) { return data; }\r\n\r\n    const _countZero = getZeroCountFromStart(data, _getY)\r\n    if (_countZero) {\r\n      data.splice(0, _countZero)\r\n    }\r\n    const _zeroIndex = getZeroIndexFromEnd(data, _getY)\r\n    if (_zeroIndex){\r\n      data.splice(_zeroIndex)\r\n    }\r\n    return data;\r\n  },\r\n\r\n  mean: (data) => {\r\n    if ( !isPointArr(data) ) {\r\n      return [];\r\n    }\r\n    let _sum = Big(0);\r\n    for (const p of data) {\r\n      if (isNumber(p[1])) {\r\n        _sum = _sum.add(p[1])\r\n      }\r\n    }\r\n    const _max = data.length - 1;\r\n    const _avg = parseInt(_sum.div(_max).toFixed(0), 10);\r\n    return [\r\n      [data[0][0], _avg],\r\n      [data[_max][0], _avg]\r\n    ];\r\n  },\r\n\r\n  median: (data) => {\r\n    if ( !isPointArr(data) ) {\r\n      return [];\r\n    }\r\n    const _d = data\r\n      .map(arrP => arrP[1])\r\n      .sort((a, b) => a-b)\r\n    , _len = data.length\r\n    , _half = _len/2\r\n    , _median = _half % 2 === 0\r\n       ? Math.round((_d[_half-1] + _d[_half])/2)\r\n       : _d[Math.round(_half) - 1];\r\n    return [\r\n      [data[0][0], _median],\r\n      [data[_len-1][0], _median],\r\n    ];\r\n  }\r\n};\r\n\r\nexport default fn\r\n"],"file":"seriaFn.js"}