{"version":3,"sources":["../../src/math/sma.js"],"names":["isNumber","fns","crPointGetter","_crPeriod","period","plus","_delta","parseFloat","minus","toFixed","sma","data","dataSma","Array","isArray","length","_period","getX","getY","_data","filter","p","max","bSum","point","i","push","div"],"mappings":";;;;;;;AAAA;;AAEA;;IAEQA,Q,GAA4BC,yB,CAA5BD,Q;IAAUE,a,GAAkBD,yB,CAAlBC,a;;AAElB,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,IAAT,EAAkB;AAClC,MAAMC,MAAM,GAAGN,QAAQ,CAACK,IAAD,CAAR,GAAiB,IAAIA,IAArB,GAA4B,CAA3C;;AACA,SAAOE,UAAU,CACf,qBAAIH,MAAJ,EACEI,KADF,CACQF,MADR,EAEEG,OAFF,CAEU,CAFV,CADe,CAAjB;AAKD,CAPD;;AASA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAOP,MAAP,EAAiBC,IAAjB,EAA0B;AAAA,MAAnBD,MAAmB;AAAnBA,IAAAA,MAAmB,GAAZ,CAAY;AAAA;;AACpC,MAAMQ,OAAO,GAAG,EAAhB;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAD,IAAwBA,IAAI,CAACI,MAAL,KAAgB,CAA5C,EAA+C;AAC7C,WAAOH,OAAP;AACD;;AAEK,MAAAI,OAAO,GAAGb,SAAS,CAACC,MAAD,EAASC,IAAT,CAAnB;AAAA,uBACaH,aAAa,CAACS,IAAD,CAD1B;AAAA,MACFM,IADE,kBACFA,IADE;AAAA,MACIC,IADJ,kBACIA,IADJ;AAAA,MAEJC,KAFI,GAEIR,IAAI,CAACS,MAAL,CAAY,UAAAC,CAAC;AAAA,WAAIrB,QAAQ,CAACkB,IAAI,CAACG,CAAD,CAAL,CAAZ;AAAA,GAAb,CAFJ;AAAA,MAGJC,GAHI,GAGEH,KAAK,CAACJ,MAHR;;AAIN,MAAIQ,IAAI,GAAG,qBAAI,KAAJ,CAAX;AAAA,MACEC,KADF;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,GAAhB,EAAqBG,CAAC,EAAtB,EAAyB;AACvBD,IAAAA,KAAK,GAAGL,KAAK,CAACM,CAAD,CAAb;;AACA,QAAIA,CAAC,GAACT,OAAN,EAAc;AACXO,MAAAA,IAAI,GAAGA,IAAI,CAAClB,IAAL,CAAUa,IAAI,CAACM,KAAD,CAAd,EAAuBhB,KAAvB,CAA6BU,IAAI,CAACC,KAAK,CAACM,CAAC,GAACrB,MAAH,CAAN,CAAjC,CAAP;AACAQ,MAAAA,OAAO,CAACc,IAAR,CAAa,CACXT,IAAI,CAACO,KAAD,CADO,EAEXjB,UAAU,CAACgB,IAAI,CAACI,GAAL,CAASvB,MAAT,EAAiBK,OAAjB,CAAyB,CAAzB,CAAD,CAFC,CAAb;AAIF,KAND,MAMO;AACLc,MAAAA,IAAI,GAAGA,IAAI,CAAClB,IAAL,CAAUa,IAAI,CAACM,KAAD,CAAd,CAAP;AACD;AACF;;AACD,SAAOZ,OAAP;AACD,CAzBD;;eA2BeF,G","sourcesContent":["import Big from 'big.js';\r\n\r\nimport fns from './seriaHelperFn'\r\n\r\nconst { isNumber, crPointGetter } = fns;\r\n\r\nconst _crPeriod = (period, plus) => {\r\n  const _delta = isNumber(plus) ? 1 - plus : 1;\r\n  return parseFloat(\r\n    Big(period)\r\n     .minus(_delta)\r\n     .toFixed(0)\r\n  );\r\n};\r\n\r\nconst sma = (data, period=1, plus) => {\r\n  const dataSma = [];\r\n  if (!Array.isArray(data) || data.length === 0) {\r\n    return dataSma;\r\n  }\r\n\r\n  const _period = _crPeriod(period, plus)\r\n  , { getX, getY } = crPointGetter(data)\r\n  , _data = data.filter(p => isNumber(getY(p)))\r\n  , max = _data.length;\r\n  let bSum = Big('0.0')\r\n  , point;\r\n  for (let i=0; i<max; i++){\r\n    point = _data[i]\r\n    if (i>_period){\r\n       bSum = bSum.plus(getY(point)).minus(getY(_data[i-period]));\r\n       dataSma.push([\r\n         getX(point),\r\n         parseFloat(bSum.div(period).toFixed(2))\r\n       ])\r\n    } else {\r\n      bSum = bSum.plus(getY(point));\r\n    }\r\n  }\r\n  return dataSma;\r\n};\r\n\r\nexport default sma\r\n"],"file":"sma.js"}