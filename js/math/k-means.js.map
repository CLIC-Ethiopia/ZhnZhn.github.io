{"version":3,"sources":["../../src/math/k-means.js"],"names":["C","N","ITERATION","getterSetter","initialValue","validator","thingToGetSet","_fnIsValid","val","newValue","sumOfSquareDiffs","oneVector","anotherVector","squareDiffs","map","component","i","Math","pow","reduce","a","b","mindex","array","min","indexOf","sumVectors","averageLocation","points","zeroVector","location","locations","point","vectorSum","length","Point","self","label","updateLabel","centroids","distancesSquared","centroid","Centroid","initialLocation","updateLocation","pointsWithThisCentroid","filter","kmeans","data","config","k","round","sqrt","iterations","vector","push","iter","forEach","compareUnaryCentroid","compareUnaryPoint","clusterMaker","arrayOfArrays","n","boolA","boolB","clusters","pointsAndCentroids","undefined","value","unarySortedClusters","sort","cluster","crUnarySortedCluster","iteration"],"mappings":"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","sourcesContent":["\r\n\r\nconst C = {\r\n  N: 6,\r\n  ITERATION: 100\r\n};\r\n\r\n// convenience functions\r\nconst getterSetter = function(initialValue, validator) {\r\n  let thingToGetSet = initialValue;\r\n  const _fnIsValid = validator || function(val) { return true };\r\n  return function(newValue) {\r\n    if (typeof newValue === 'undefined') return thingToGetSet;\r\n    if (_fnIsValid(newValue)) thingToGetSet = newValue;\r\n  };\r\n};\r\n\r\nconst sumOfSquareDiffs = function(oneVector, anotherVector) {\r\n  const squareDiffs = oneVector.map( (component, i) => {\r\n    return Math.pow(component - anotherVector[i], 2);\r\n  });\r\n  return squareDiffs.reduce( (a, b) => { return a + b }, 0);\r\n};\r\n\r\nconst mindex = function(array) {\r\n  const min = array.reduce( (a, b) => {\r\n    return Math.min(a, b);\r\n  });\r\n  return array.indexOf(min);\r\n};\r\n\r\nconst sumVectors = function(a, b) {\r\n  return a.map( (val, i) => { return val + b[i]; });\r\n};\r\n\r\nconst averageLocation = function(points) {\r\n  const zeroVector = points[0].location().map( () => { return 0; })\r\n      , locations = points.map( (point) => { return point.location(); })\r\n      , vectorSum = locations.reduce( (a, b) => { return sumVectors(a, b); }, zeroVector);\r\n\r\n  return vectorSum.map( (val) => { return val / points.length; });\r\n};\r\n\r\n// objects\r\nconst Point = function(location) {\r\n  const self = this;\r\n  this.location = getterSetter(location);\r\n\r\n  this.label = getterSetter();\r\n  this.updateLabel = function(centroids) {\r\n    const distancesSquared = centroids.map( (centroid) => {\r\n      return sumOfSquareDiffs(self.location(), centroid.location());\r\n    });\r\n    self.label(mindex(distancesSquared));\r\n  };\r\n};\r\n\r\nconst Centroid = function(initialLocation, label) {\r\n  const self = this;\r\n  this.location = getterSetter(initialLocation);\r\n  this.label = getterSetter(label);\r\n  this.updateLocation = function(points) {\r\n    const pointsWithThisCentroid = points.filter( (point) => { return point.label() == self.label(); });\r\n    if (pointsWithThisCentroid.length > 0) self.location(averageLocation(pointsWithThisCentroid));\r\n  };\r\n};\r\n\r\n\r\n\r\nconst kmeans = function(data, config) {\r\n  // default k\r\n  const k = config.k || Math.round(Math.sqrt(data.length / 2))\r\n      , iterations = config.iterations;\r\n\r\n  // initialize point objects with data\r\n  const points = data.map( (vector) => { return new Point(vector); });\r\n\r\n  // intialize centroids randomly\r\n  const centroids = [];\r\n  let i;\r\n  for (i = 0; i < k; i++) {\r\n    centroids.push(new Centroid(points[i % points.length].location(), i));\r\n  }\r\n\r\n  // update labels and centroid locations until convergence\r\n  let iter;\r\n  for (iter = 0; iter < iterations; iter++) {\r\n    points.forEach( (point) => { point.updateLabel(centroids); });\r\n    centroids.forEach( (centroid) => { centroid.updateLocation(points); });\r\n  }\r\n\r\n  // return points and centroids\r\n  return {\r\n    points: points,\r\n    centroids: centroids\r\n  };\r\n\r\n};\r\n\r\n\r\n//fn for sort clusters\r\nconst compareUnaryCentroid = (a, b) => {\r\n  if ( a.centroid[0] < b.centroid[0] ) { return -1;}\r\n  if ( a.centroid[0] > b.centroid[0] ) { return 1;}\r\n  if ( a.centroid[0] === b.centroid[0] ) { return 0;}\r\n};\r\nconst compareUnaryPoint = (a, b) => {\r\n  if ( a[0] < b[0] ) { return -1;}\r\n  if ( a[0] > b[0] ) { return 1;}\r\n  if ( a[0] === b[0] ) { return 0;}\r\n};\r\n\r\nconst clusterMaker = {\r\n\r\n  data: getterSetter([], function(arrayOfArrays) {\r\n    const n = arrayOfArrays[0].length;\r\n    return (arrayOfArrays.map( (array) => {\r\n      return array.length == n;\r\n    }).reduce( (boolA, boolB) => { return (boolA & boolB); }, true));\r\n  }),\r\n\r\n  clusters() {\r\n    const pointsAndCentroids = kmeans(this.data(), {k: this.k(), iterations: this.iterations() })\r\n        , points = pointsAndCentroids.points\r\n        , centroids = pointsAndCentroids.centroids;\r\n\r\n    return centroids.map( (centroid) => {\r\n      return {\r\n        centroid: centroid.location(),\r\n        points: points\r\n                  .filter( (point) => {\r\n                    return point.label() == centroid.label();\r\n                  })\r\n                  .map( (point) => {\r\n                     return point.location();\r\n                  })\r\n      };\r\n    });\r\n  },\r\n\r\n  k: getterSetter(undefined, function(value) { return ((value % 1 == 0) & (value > 0)) }),\r\n\r\n  iterations: getterSetter(Math.pow(10, 3), function(value) { return ((value % 1 == 0) & (value > 0)) }),\r\n\r\n\r\n  unarySortedClusters() {\r\n    return this.clusters()\r\n        .sort(compareUnaryCentroid)\r\n        .map( (cluster) => {\r\n           cluster.points = cluster.points.sort(compareUnaryPoint);\r\n           return cluster;\r\n        });\r\n  },\r\n\r\n  crUnarySortedCluster(points=[], n=C.N, iteration=C.ITERATION){\r\n    this.k(n)\r\n    this.iterations(iteration)\r\n    this.data(points)\r\n    return this.unarySortedClusters();\r\n  }\r\n\r\n};\r\n\r\nexport default clusterMaker\r\n"],"file":"k-means.js"}