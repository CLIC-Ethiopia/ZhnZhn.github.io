{"version":3,"sources":["../../../src/math/__tests__/categoryFn.test.js"],"names":["_crParams","_crP1","_crExpectedPoint","categoryHelpers","describe","sc","rc","test","d1","d2","expectedResult","expect","toEqual"],"mappings":"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","sourcesContent":["import categoryHelpers from './categoryHelpers';\r\nimport {\r\n  categoryDiff,\r\n  categoryRate,\r\n  categoryRoc\r\n}\r\nfrom '../categoryFn';\r\n\r\nconst {\r\n  _crParams,\r\n  _crP1,\r\n  _crExpectedPoint\r\n} = categoryHelpers;\r\n\r\n//Diff S1-S2\r\ndescribe('categoryDiff', ()=>{\r\n  const sc = '#111', rc = '#222';\r\n  test('should return array with correct diff values', ()=>{\r\n    const [d1, d2, expectedResult] = _crParams([\r\n       ['P1', 10, 5, 5],\r\n       ['P2', 10, 0, 10],\r\n       ['P3', 10, null, 0]\r\n    ], {sc, rc});\r\n    expect(categoryDiff(d1, d2, {sc, rc}))\r\n      .toEqual(expectedResult)\r\n  })\r\n\r\n  test('should return arr with 0 y values for not match points', ()=>{\r\n    expect(categoryDiff(\r\n      [_crP1('A1', 10, sc)], [], {sc, rc}))\r\n    .toEqual([_crExpectedPoint('A1', 0, rc)])\r\n  })\r\n})\r\n\r\n//Rate S1/S2\r\ndescribe('categoryRate', ()=>{\r\n  const sc = '#111', rc = '#222';\r\n  test('should return array with rate S1/S2 values', ()=>{\r\n    const [d1, d2, expectedResult] = _crParams([\r\n      ['P1', 10, 5, 2],\r\n      ['P2', 10, 0, 0],\r\n    ], {sc, rc})\r\n    expect(categoryRate(d1, d2, {sc, rc}))\r\n      .toEqual(expectedResult)\r\n  })\r\n  test('should return arr with 0 values for not match points',()=>{\r\n    expect(categoryRate(\r\n      [_crP1('A1', 10, sc)], [], {sc, rc}\r\n    )).toEqual([_crExpectedPoint('A1',0, rc)])\r\n  })\r\n})\r\n\r\n// ROC S1 from S2\r\ndescribe('categoryRoc',()=>{\r\n  test('should return arr with correct roc values',()=>{\r\n    const sc = '#111', rc = '#222'\r\n    , [d1, d2, expectedResult] = _crParams([\r\n      ['P1', 10, 5, 100],\r\n      ['P2', 9, 6, 50],\r\n      ['P3', 5, 10, -50],\r\n      ['P4', 0, 9, -100],\r\n      ['P5', 100.01, 100, 0.01],\r\n      ['P6', 99.99, 100, -0.01],\r\n      ['P7', 0, 1, -100],\r\n      ['P8', 0, -1, 100],\r\n    ], {sc, rc});\r\n    expect(\r\n      categoryRoc(d1, d2, {sc, rc})\r\n    ).toEqual(expectedResult)\r\n  })\r\n\r\n  test('should return arr with null values for not match points', ()=>{\r\n    const sc = '#111', rc = '#222';\r\n    expect(categoryRoc(\r\n      [_crP1('A1', 3, sc)], [], {rc, sc}\r\n    )).toEqual([_crExpectedPoint('A1', null, rc)])\r\n  })\r\n})\r\n"],"file":"categoryFn.test.js"}