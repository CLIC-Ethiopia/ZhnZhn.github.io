{"version":3,"sources":["../../../src/math/__tests__/seriaHelperFn.test.js"],"names":["isNumber","fns","isPointArr","crPointGetter","fGetY","getZeroCountFromStart","getZeroIndexFromEnd","describe","fn","test","expect","toBe","NaN","undefined","data","_data","getX","getY","x","y","point","dataArr","dataArr2","dataObj"],"mappings":"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","sourcesContent":["import fns from '../seriaHelperFn'\r\n\r\nconst {\r\n  isNumber,\r\n  isPointArr,\r\n  crPointGetter,\r\n  fGetY,\r\n  getZeroCountFromStart,\r\n  getZeroIndexFromEnd\r\n} = fns\r\n\r\ndescribe(\"isNumber\", ()=>{\r\n  const fn = isNumber\r\n  test(\"should check is value number type\", ()=>{\r\n    expect(fn(0.1)).toBe(true)\r\n    expect(fn(0)).toBe(true)\r\n    expect(fn(-0)).toBe(true)\r\n    expect(fn(+0)).toBe(true)\r\n\r\n    expect(fn(NaN)).toBe(false)\r\n    expect(fn(null)).toBe(false)\r\n    expect(fn(undefined)).toBe(false)\r\n    expect(fn('')).toBe(false)\r\n    expect(fn({})).toBe(false)\r\n  })\r\n})\r\n\r\ndescribe(\"isPointArr\", ()=>{\r\n  const fn = isPointArr\r\n  test('should return true in case data points is arr and at least 2', ()=>{\r\n    const data = [[], []];\r\n    expect(fn(data)).toBe(true)\r\n  })\r\n})\r\n\r\ndescribe(\"crPointGetter\", ()=>{\r\n  const fn = crPointGetter;\r\n  test(\"should create getter for array points\", ()=> {\r\n    const _data = [[0, 0], [1, 1]]\r\n    const { getX, getY } = fn(_data)\r\n\r\n    expect(getX(_data[0])).toBe(0)\r\n    expect(getY(_data[0])).toBe(0)\r\n    expect(getX(_data[1])).toBe(1)\r\n    expect(getY(_data[1])).toBe(1)\r\n  })\r\n  test(\"should create getter for object points\", ()=> {\r\n    const _data = [{x: 0, y: 0}, {x: 1, y: 1}]\r\n    const { getX, getY } = fn(_data)\r\n\r\n    expect(getX(_data[0])).toBe(0)\r\n    expect(getY(_data[0])).toBe(0)\r\n    expect(getX(_data[1])).toBe(1)\r\n    expect(getY(_data[1])).toBe(1)\r\n  })\r\n})\r\n\r\n\r\ndescribe(\"fGetY\", ()=>{\r\n  const fn = fGetY\r\n  test(\"should return function for getting y for arr point\", () => {\r\n    const point = [1, 2]\r\n    , getY = fn(point)\r\n\r\n    expect(typeof getY).toBe('function')\r\n    expect(getY(point)).toBe(point[1])\r\n  })\r\n  test(\"should return function for getting y for obj point\", () => {\r\n    const point = {y:2}\r\n    , getY = fn(point)\r\n\r\n    expect(typeof getY).toBe('function')\r\n    expect(getY(point)).toBe(point.y)\r\n  })\r\n  test('should return undefined for edge case', ()=>{\r\n    expect(fn(null)).toBe(undefined)\r\n    expect(fn({})).toBe(undefined)\r\n  })\r\n})\r\n\r\n\r\ndescribe('getZeroCountFromStart', ()=>{\r\n  const fn = getZeroCountFromStart\r\n  test('should return number of points with y 0 or null from data start', ()=>{\r\n    const dataArr = [[1,0],[2,null]]\r\n    expect(fn(dataArr, fGetY(dataArr[0]))).toBe(2)\r\n\r\n    const dataArr2 = [[1,0],[2,null],[-1, 1]]\r\n    expect(fn(dataArr2, fGetY(dataArr2[0]))).toBe(2)\r\n\r\n    const dataObj = [{x:1,y:0},{x:2,y:null}]\r\n    expect(fn(dataObj, fGetY(dataObj[0]))).toBe(2)\r\n  })\r\n})\r\n\r\ndescribe('getZeroIndexFromEnd', ()=>{\r\n  const fn = getZeroIndexFromEnd\r\n  test('should return index of last y 0 or null from data end', ()=>{\r\n    const dataArr = [[-1, -1], [1,0],[2,null]]\r\n    expect(fn(dataArr, fGetY(dataArr[0]))).toBe(1)\r\n\r\n    const dataObj = [{x:-1, y:-1}, {x:1,y:0},{x:2,y:null}]\r\n    expect(fn(dataObj, fGetY(dataObj[0]))).toBe(1)\r\n  })\r\n})\r\n"],"file":"seriaHelperFn.test.js"}