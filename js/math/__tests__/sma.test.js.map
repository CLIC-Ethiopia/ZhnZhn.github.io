{"version":3,"sources":["../../../src/math/__tests__/sma.test.js"],"names":["describe","test","expect","toEqual","x","y","NaN"],"mappings":"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","sourcesContent":["import sma from '../sma'\r\n\r\ndescribe(\"math sma\", ()=>{\r\n  test(\"should return empty array for not array or empty array input\", ()=>{\r\n    expect(sma()).toEqual([])\r\n    expect(sma(null)).toEqual([])\r\n    expect(sma(1)).toEqual([])\r\n    expect(sma('str')).toEqual([])\r\n    expect(sma(true)).toEqual([])\r\n    expect(sma({})).toEqual([])\r\n    expect(sma([])).toEqual([])\r\n  })\r\n  test(\"should return correct sma toFixed 2 array for array points\", ()=>{\r\n    expect(sma([[1, 0.7745],[2, 0.7844],[3, 0.78],[4 ,0.78]]))\r\n      .toEqual([[2, 0.78],[3, 0.78],[4, 0.78]])\r\n    // JS 3*0.7 = 2.0999999999999996 < 2.1\r\n    expect(sma([[1, 0.7],[2, 0.7],[3, 0.7],[4, 0.7]],3))\r\n      .toEqual([[4, 0.7]])\r\n    // JS 3*0.2 = 0.6000000000000001 > 0.6\r\n    expect(sma([[1, 0.2],[2, 0.2],[3, 0.2],[4, 0.2]],3))\r\n      .toEqual([[4, 0.2]])\r\n  })\r\n  test(\"should return correct sma array toFixed 2 for x, y points\", ()=>{\r\n    expect(sma([{x:1,y:0.7777},{x:2,y:0.7777},{x:3,y:0.7777},{x:4,y:0.7777}]))\r\n      .toEqual([[2, 0.78],[3, 0.78],[4, 0.78]])\r\n    expect(sma([{x:1,y:0.7},{x:2,y:0.7},{x:3,y:0.7},{x:4,y:0.7}],3))\r\n      .toEqual([[4, 0.7]])\r\n    expect(sma([{x:1,y:0.2},{x:2,y:0.2},{x:3,y:0.2},{x:4,y:0.2}],3))\r\n      .toEqual([[4, 0.2]])\r\n  })\r\n  test(\"should filter not number values\", () => {\r\n    expect(sma([[1, 0.7],[2, void 0],[3, 'str'],[4, NaN],[5, null],[6, 0.7]]))\r\n      .toEqual([[6, 0.7]])\r\n  })\r\n})\r\n"],"file":"sma.test.js"}