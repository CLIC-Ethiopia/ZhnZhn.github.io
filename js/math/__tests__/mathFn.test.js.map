{"version":3,"sources":["../../../src/math/__tests__/mathFn.test.js"],"names":["roundBy","mathFn","calcPercent","crValueMoving","toFixed","toFixedNumber","PERCENT_0","PERCENT_100","_crVmInputs","nowValue","prevValue","Direction","describe","fn","test","expect","toBe","r","bValue","bTotal","NaN","value","percent","delta","direction","UP","dfR","fnFormat","_Direction","undefined","DOWN","EQUAL"],"mappings":"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","sourcesContent":["import Big from 'big.js'\r\nimport mathFn from '../mathFn'\r\nimport { Direction } from '../../constants/Type'\r\n\r\nconst {\r\n  roundBy,\r\n  calcPercent,\r\n  crValueMoving,\r\n  toFixed,\r\n  toFixedNumber\r\n} = mathFn;\r\n\r\nconst PERCENT_0 = '0.00%';\r\nconst PERCENT_100 = '100.00%';\r\n\r\nconst _crVmInputs = (nowValue, prevValue) => ({\r\n  nowValue, prevValue, Direction\r\n});\r\n\r\ndescribe('roundBy', () => {\r\n  const fn = roundBy\r\n  test('should return rounded number from string or number by', ()=>{\r\n    expect(fn(1.555, 2)).toBe(1.56)\r\n    expect(fn('1.555', 2)).toBe(1.56)\r\n    expect(fn(1.005, 2)).toBe(1.01)\r\n    expect(fn('1.005', 2)).toBe(1.01)\r\n    expect(fn(0)).toBe(0)\r\n  })\r\n  test('shoul return null for null or undefined', ()=>{\r\n    expect(fn(null)).toBe(null)\r\n    expect(fn()).toBe(null)\r\n  })\r\n})\r\n\r\ndescribe('calcPercent', ()=>{\r\n  const fn = calcPercent\r\n  test('should return str percent with Fixed 2 from Big values', ()=>{\r\n     const r = fn({ bValue: Big(10), bTotal: Big(100)})\r\n     expect(r).toBe('10.00')\r\n  })\r\n  test('should return str percent with Fixed 2 from number values', ()=>{\r\n    const r = fn({ bValue: 10, bTotal: 100})\r\n    expect(r).toBe('10.00')\r\n  })\r\n  test('should use bValue 0 in case undefined', ()=>{\r\n    const r = fn({ bTotal: Big(100) })\r\n    expect(r).toBe('0.00')\r\n  })\r\n  test('should use bTotal 0 in case undefined', ()=>{\r\n    const r = fn({ bValue: Big(10) })\r\n    expect(r).toBe('0.00')\r\n  })\r\n  test('should return str 0.00 in case bValue NaN', ()=>{\r\n    const r = fn({ bValue: NaN, bTotal: Big(100)})\r\n    expect(r).toBe('0.00')\r\n  })\r\n})\r\n\r\ndescribe('crValueMoving', () => {\r\n   const fn = crValueMoving\r\n   test('should return correct obj for Big values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n        Big('200.02'), Big('100.01')\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should return correct obj for strings values with radix', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200.02', '100.01'\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should use dfR for rounding', () => {\r\n     const r = fn({\r\n       ..._crVmInputs('200.023333', '100.01333'),\r\n       ...{ dfR: 2 }\r\n     });\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should use fnFormat for output', () => {\r\n     const r = fn({\r\n       ..._crVmInputs('200.02', '100.01'),\r\n       ...{ fnFormat: (value) => value + ';' }\r\n     });\r\n\r\n     expect(r.value).toBe('200.02;')\r\n     expect(r.delta).toBe('100.01;')\r\n   })\r\n   test('should use Direction for output', () => {\r\n     const _Direction = { UP: 'UPPP' }\r\n     const r = fn({\r\n       ..._crVmInputs('200.02', '100.01'),\r\n       ...{ Direction: _Direction }\r\n     });\r\n\r\n     expect(r.direction).toBe(_Direction.UP)\r\n   })\r\n   test('should use df Direction as {} for output', () => {\r\n     const r = fn({\r\n       ..._crVmInputs('200.02', '100.01'),\r\n       ...{ Direction: void 0 }\r\n     });\r\n\r\n     expect(r.direction).toBe(undefined)\r\n   })\r\n\r\n   test('should return correct obj for strings values with nowValue=\"0\"', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '0', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100')\r\n     expect(r.direction).toBe(Direction.DOWN)\r\n   })\r\n   test('should return correct obj for equal strings values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '100', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('100')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(Direction.EQUAL)\r\n   })\r\n\r\n   test('should replace blanks in string values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200 000 000', '100 000 000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should replace several blanks in string values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200  000  000', '100  000  000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should to fixed to radix 0 value and round delta in case value or delta bigger 1 000 000', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200 000 000.02', '100 000 000.01'\r\n     ))\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n\r\n   test('should use 0 values in edge cases', ()=>{\r\n     const r = fn({ Direction })\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(Direction.EQUAL)\r\n   })\r\n\r\n})\r\n\r\ndescribe('toFixed', () => {\r\n  const fn = toFixed;\r\n  test('should return fixed by 0 number for values > 10', () => {\r\n    expect(fn(102.34)).toBe(102)\r\n    expect(fn('102.34')).toBe(102)\r\n    expect(fn(10.234)).toBe(10)\r\n    expect(fn('10.234')).toBe(10)\r\n  })\r\n  test('should return fixed by 2 number for values =< 10', () => {\r\n    expect(fn(1.234)).toBe(1.23)\r\n    expect(fn('1.234')).toBe(1.23)\r\n    expect(fn(0.1234)).toBe(0.12)\r\n    expect(fn('0.1234')).toBe(0.12)\r\n    expect(fn(0.01234)).toBe(0.01)\r\n    expect(fn('0.01234')).toBe(0.01)\r\n  })\r\n})\r\n\r\ndescribe('toFixedNumber', ()=>{\r\n  const fn = toFixedNumber;\r\n  test('should return number rounded depend of value', ()=>{\r\n    expect(fn(9.00005)).toBe(9.0001)\r\n    expect(fn(9000.005)).toBe(9000.01)\r\n    expect(fn(10000.005)).toBe(10000)\r\n  })\r\n  test('should retun same value in case not number', () => {\r\n    expect(fn(NaN)).toBe(NaN)\r\n    expect(fn()).toBe(undefined)\r\n    expect(fn(null)).toBe(null)\r\n  })\r\n})\r\n"],"file":"mathFn.test.js"}