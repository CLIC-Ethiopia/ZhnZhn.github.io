{"version":3,"sources":["../../../src/math/__tests__/mathFn.test.js"],"names":["PERCENT_0","PERCENT_100","_crVmInputs","nowValue","prevValue","describe","fn","roundBy","test","expect","toBe","toBeNaN","calcPercent","r","bValue","bTotal","NaN","crValueMoving","value","percent","delta","direction","DT_UP","dfR","fnFormat","DT_DOWN","DT_EQUAL","toFixed","toFixedNumber","undefined","crId","id","length","prefix","substring","id1","id2","id3","not"],"mappings":"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","sourcesContent":["import Big from 'big.js';\r\nimport {\r\n  roundBy,\r\n  calcPercent,\r\n  crValueMoving,\r\n  toFixed,\r\n  toFixedNumber,\r\n  crId\r\n} from '../mathFn';\r\nimport {\r\n  DT_UP,\r\n  DT_DOWN,\r\n  DT_EQUAL\r\n} from '../../constants/DirectionType';\r\n\r\nconst PERCENT_0 = '0.00%';\r\nconst PERCENT_100 = '100.00%';\r\n\r\nconst _crVmInputs = (\r\n  nowValue,\r\n  prevValue\r\n) => ({\r\n  nowValue, prevValue\r\n});\r\n\r\ndescribe('roundBy', () => {\r\n  const fn = roundBy\r\n  test('should return rounded number from string or number by', ()=>{\r\n    expect(fn(1.554, 2)).toBe(1.55)\r\n    expect(fn(1.555, 2)).toBe(1.56)\r\n\r\n    expect(fn('1.554', 2)).toBe(1.55)\r\n    expect(fn('1.555', 2)).toBe(1.56)\r\n\r\n    expect(fn(1.004, 2)).toBe(1)\r\n    expect(fn(1.005, 2)).toBe(1.01)\r\n\r\n    expect(fn('1.004', 2)).toBe(1)\r\n    expect(fn('1.005', 2)).toBe(1.01)\r\n\r\n    expect(fn(0)).toBe(0)\r\n  })\r\n  test('should return null for null or undefined', ()=>{\r\n    expect(fn(null)).toBe(null)\r\n    expect(fn()).toBe(null)\r\n  })\r\n  test('should return NaN for all other not number input  cases', ()=>{\r\n    expect(fn('str')).toBeNaN()\r\n    expect(fn(false)).toBeNaN()\r\n    expect(fn(true)).toBeNaN()\r\n    expect(fn({})).toBeNaN()\r\n    expect(fn([])).toBeNaN()\r\n  })\r\n})\r\n\r\ndescribe('calcPercent', ()=>{\r\n  const fn = calcPercent\r\n  test('should return str percent with Fixed 2 from Big values', ()=>{\r\n     const r = fn({ bValue: Big(10), bTotal: Big(100)})\r\n     expect(r).toBe('10.00')\r\n  })\r\n  test('should return str percent with Fixed 2 from number values', ()=>{\r\n    const r = fn({ bValue: 10, bTotal: 100})\r\n    expect(r).toBe('10.00')\r\n  })\r\n  test('should use bValue 0 in case undefined', ()=>{\r\n    const r = fn({ bTotal: Big(100) })\r\n    expect(r).toBe('0.00')\r\n  })\r\n  test('should use bTotal 0 in case undefined', ()=>{\r\n    const r = fn({ bValue: Big(10) })\r\n    expect(r).toBe('0.00')\r\n  })\r\n  test('should return str 0.00 in case bValue NaN', ()=>{\r\n    const r = fn({ bValue: NaN, bTotal: Big(100)})\r\n    expect(r).toBe('0.00')\r\n  })\r\n})\r\n\r\ndescribe('crValueMoving', () => {\r\n   const fn = crValueMoving\r\n   test('should return correct obj for Big values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n        Big('200.02'), Big('100.01')\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n   test('should return correct obj for strings values with radix', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200.02', '100.01'\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n   test('should use dfR for rounding', () => {\r\n     const r = fn({\r\n       ..._crVmInputs('200.023333', '100.01333'),\r\n       ...{ dfR: 2 }\r\n     });\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n   test('should use fnFormat for output', () => {\r\n     const r = fn({\r\n       ..._crVmInputs('200.02', '100.01'),\r\n       ...{ fnFormat: (value) => value + ';' }\r\n     });\r\n\r\n     expect(r.value).toBe('200.02;')\r\n     expect(r.delta).toBe('100.01;')\r\n   })\r\n\r\n   test('should return correct obj for strings values with nowValue=\"0\"', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '0', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100')\r\n     expect(r.direction).toBe(DT_DOWN)\r\n   })\r\n   test('should return correct obj for equal strings values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '100', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('100')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(DT_EQUAL)\r\n   })\r\n\r\n   test('should replace blanks in string values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200 000 000', '100 000 000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n   test('should replace several blanks in string values', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200  000  000', '100  000  000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n   test('should to fixed to radix 0 value and round delta in case value or delta bigger 1 000 000', ()=>{\r\n     const r = fn(_crVmInputs(\r\n       '200 000 000.02', '100 000 000.01'\r\n     ))\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(DT_UP)\r\n   })\r\n\r\n   test('should use 0 values in edge cases', ()=>{\r\n     const r = fn()\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(DT_EQUAL)\r\n   })\r\n\r\n})\r\n\r\ndescribe('toFixed', () => {\r\n  const fn = toFixed;\r\n  test('should return fixed by 0 number for values > 10', () => {\r\n    expect(fn(102.34)).toBe(102)\r\n    expect(fn('102.34')).toBe(102)\r\n    expect(fn(10.234)).toBe(10)\r\n    expect(fn('10.234')).toBe(10)\r\n  })\r\n  test('should return fixed by 2 number for values =< 10', () => {\r\n    expect(fn(1.234)).toBe(1.23)\r\n    expect(fn('1.234')).toBe(1.23)\r\n    expect(fn(0.1234)).toBe(0.12)\r\n    expect(fn('0.1234')).toBe(0.12)\r\n    expect(fn(0.01234)).toBe(0.01)\r\n    expect(fn('0.01234')).toBe(0.01)\r\n  })\r\n})\r\n\r\ndescribe('toFixedNumber', ()=>{\r\n  const fn = toFixedNumber;\r\n  test('should return number rounded depend of value', ()=>{\r\n    expect(fn(9.00005)).toBe(9.0001)\r\n    expect(fn(9000.005)).toBe(9000.01)\r\n    expect(fn(10000.005)).toBe(10000)\r\n  })\r\n  test('should retun same value in case not number', () => {\r\n    expect(fn(NaN)).toBe(NaN)\r\n    expect(fn()).toBe(undefined)\r\n    expect(fn(null)).toBe(null)\r\n  })\r\n})\r\n\r\ndescribe('crId', ()=>{\r\n  const fn = crId;\r\n  test('should return str with 15 length for empty prefix', ()=>{\r\n    const id = fn();\r\n    expect(typeof id).toBe('string')\r\n    expect(id.length).toBe(15)\r\n  })\r\n  test('should use prefix parameter', ()=>{\r\n    const prefix = 'ABC_'\r\n    , id = fn(prefix);\r\n    expect(id.substring(0, prefix.length)).toBe(prefix)\r\n  })\r\n  test('should return unique id', ()=>{\r\n    const id1 = fn()\r\n    , id2 = fn()\r\n    , id3 = fn();\r\n    expect(id1).not.toBe(id2)\r\n    expect(id2).not.toBe(id3)\r\n  })\r\n\r\n})\r\n"],"file":"mathFn.test.js"}