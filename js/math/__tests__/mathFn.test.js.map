{"version":3,"sources":["../../../src/math/__tests__/mathFn.test.js"],"names":["calcPercent","mathFn","crValueMoving","toFixed","PERCENT_0","PERCENT_100","_fValueMoving","nowValue","prevValue","Direction","describe","fn","test","r","bValue","bTotal","expect","toBe","value","percent","delta","direction","UP","DOWN","EQUAL"],"mappings":";;;;AAAA;;AACA;;AACA;;IAGEA,W,GAGEC,kB,CAHFD,W;IACAE,a,GAEED,kB,CAFFC,a;IACAC,O,GACEF,kB,CADFE,O;AAGF,IAAMC,SAAS,GAAG,OAAlB;AACA,IAAMC,WAAW,GAAG,SAApB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,SAAX;AAAA,SAA0B;AAC9CD,IAAAA,QAAQ,EAARA,QAD8C;AACpCC,IAAAA,SAAS,EAATA,SADoC;AACzBC,IAAAA,SAAS,EAATA;AADyB,GAA1B;AAAA,CAAtB;;AAIAC,QAAQ,CAAC,aAAD,EAAgB,YAAI;AAC1B,MAAMC,EAAE,GAAGX,WAAX;AACAY,EAAAA,IAAI,CAAC,wDAAD,EAA2D,YAAI;AAChE,QAAMC,CAAC,GAAGF,EAAE,CAAC;AAAEG,MAAAA,MAAM,EAAE,qBAAI,EAAJ,CAAV;AAAmBC,MAAAA,MAAM,EAAE,qBAAI,GAAJ;AAA3B,KAAD,CAAZ;AACAC,IAAAA,MAAM,CAACH,CAAD,CAAN,CAAUI,IAAV,CAAe,OAAf;AACF,GAHG,CAAJ;AAID,CANO,CAAR;AAQAP,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC7B,MAAMC,EAAE,GAAGT,aAAX;AACAU,EAAAA,IAAI,CAAC,0CAAD,EAA6C,YAAI;AACnD,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACvB,qBAAI,QAAJ,CADuB,EACR,qBAAI,QAAJ,CADQ,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,QAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,QAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUa,EAAnC;AACD,GATG,CAAJ;AAUAV,EAAAA,IAAI,CAAC,yDAAD,EAA4D,YAAI;AAClE,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,QADwB,EACd,QADc,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,QAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,QAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUa,EAAnC;AACD,GATG,CAAJ;AAUAV,EAAAA,IAAI,CAAC,gEAAD,EAAmE,YAAI;AACzE,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,GADwB,EACnB,KADmB,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,GAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,KAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUc,IAAnC;AACD,GATG,CAAJ;AAUAX,EAAAA,IAAI,CAAC,oDAAD,EAAuD,YAAI;AAC7D,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,KADwB,EACjB,KADiB,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,KAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBb,SAAvB;AACAY,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,GAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUe,KAAnC;AACD,GATG,CAAJ;AAWAZ,EAAAA,IAAI,CAAC,wCAAD,EAA2C,YAAI;AACjD,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,aADwB,EACT,aADS,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUa,EAAnC;AACD,GATG,CAAJ;AAUAV,EAAAA,IAAI,CAAC,gDAAD,EAAmD,YAAI;AACzD,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,eADwB,EACP,eADO,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUa,EAAnC;AACD,GATG,CAAJ;AAUAV,EAAAA,IAAI,CAAC,0FAAD,EAA6F,YAAI;AACnG,QAAMC,CAAC,GAAGF,EAAE,CAACL,aAAa,CACxB,gBADwB,EACN,gBADM,CAAd,CAAZ;AAIAU,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBZ,WAAvB;AACAW,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,WAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUa,EAAnC;AACD,GATG,CAAJ;AAWAV,EAAAA,IAAI,CAAC,mCAAD,EAAsC,YAAI;AAC5C,QAAMC,CAAC,GAAGF,EAAE,CAAC;AAAEF,MAAAA,SAAS,EAATA;AAAF,KAAD,CAAZ;AAEAO,IAAAA,MAAM,CAACH,CAAC,CAACK,KAAH,CAAN,CAAgBD,IAAhB,CAAqB,GAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACM,OAAH,CAAN,CAAkBF,IAAlB,CAAuBb,SAAvB;AACAY,IAAAA,MAAM,CAACH,CAAC,CAACO,KAAH,CAAN,CAAgBH,IAAhB,CAAqB,GAArB;AACAD,IAAAA,MAAM,CAACH,CAAC,CAACQ,SAAH,CAAN,CAAoBJ,IAApB,CAAyBR,gBAAUe,KAAnC;AACD,GAPG,CAAJ;AASF,CAnFO,CAAR;AAqFAd,QAAQ,CAAC,SAAD,EAAY,YAAM;AACxB,MAAMC,EAAE,GAAGR,OAAX;AACAS,EAAAA,IAAI,CAAC,iDAAD,EAAoD,YAAM;AAC5DI,IAAAA,MAAM,CAACL,EAAE,CAAC,MAAD,CAAH,CAAN,CAAmBM,IAAnB,CAAwB,GAAxB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,QAAD,CAAH,CAAN,CAAqBM,IAArB,CAA0B,GAA1B;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,MAAD,CAAH,CAAN,CAAmBM,IAAnB,CAAwB,EAAxB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,QAAD,CAAH,CAAN,CAAqBM,IAArB,CAA0B,EAA1B;AACD,GALG,CAAJ;AAMAL,EAAAA,IAAI,CAAC,kDAAD,EAAqD,YAAM;AAC7DI,IAAAA,MAAM,CAACL,EAAE,CAAC,KAAD,CAAH,CAAN,CAAkBM,IAAlB,CAAuB,IAAvB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,OAAD,CAAH,CAAN,CAAoBM,IAApB,CAAyB,IAAzB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,MAAD,CAAH,CAAN,CAAmBM,IAAnB,CAAwB,IAAxB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,QAAD,CAAH,CAAN,CAAqBM,IAArB,CAA0B,IAA1B;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,OAAD,CAAH,CAAN,CAAoBM,IAApB,CAAyB,IAAzB;AACAD,IAAAA,MAAM,CAACL,EAAE,CAAC,SAAD,CAAH,CAAN,CAAsBM,IAAtB,CAA2B,IAA3B;AACD,GAPG,CAAJ;AAQD,CAhBO,CAAR","sourcesContent":["import Big from 'big.js'\r\nimport mathFn from '../mathFn'\r\nimport { Direction } from '../../constants/Type'\r\n\r\nconst {\r\n  calcPercent,\r\n  crValueMoving,\r\n  toFixed\r\n} = mathFn;\r\n\r\nconst PERCENT_0 = '0.00%';\r\nconst PERCENT_100 = '100.00%';\r\n\r\nconst _fValueMoving = (nowValue, prevValue) => ({\r\n  nowValue, prevValue, Direction\r\n});\r\n\r\ndescribe('calcPercent', ()=>{\r\n  const fn = calcPercent\r\n  test('should return str percent with Fixed 2 from Big values', ()=>{\r\n     const r = fn({ bValue: Big(10), bTotal: Big(100)})\r\n     expect(r).toBe('10.00')\r\n  })\r\n})\r\n\r\ndescribe('crValueMoving', () => {\r\n   const fn = crValueMoving\r\n   test('should return correct obj for Big values', ()=>{\r\n     const r = fn(_fValueMoving(\r\n        Big('200.02'), Big('100.01')\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should return correct obj for strings values with radix', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '200.02', '100.01'\r\n     ));\r\n\r\n     expect(r.value).toBe('200.02')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100.01')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should return correct obj for strings values with nowValue=\"0\"', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '0', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100')\r\n     expect(r.direction).toBe(Direction.DOWN)\r\n   })\r\n   test('should return correct obj for equal strings values', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '100', '100'\r\n     ));\r\n\r\n     expect(r.value).toBe('100')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(Direction.EQUAL)\r\n   })\r\n\r\n   test('should replace blanks in string values', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '200 000 000', '100 000 000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should replace several blanks in string values', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '200  000  000', '100  000  000'\r\n     ));\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n   test('should to fixed to radix 0 value and round delta in case value or delta bigger 1 000 000', ()=>{\r\n     const r = fn(_fValueMoving(\r\n       '200 000 000.02', '100 000 000.01'\r\n     ))\r\n\r\n     expect(r.value).toBe('200000000')\r\n     expect(r.percent).toBe(PERCENT_100)\r\n     expect(r.delta).toBe('100000000')\r\n     expect(r.direction).toBe(Direction.UP)\r\n   })\r\n\r\n   test('should use 0 values in edge cases', ()=>{\r\n     const r = fn({ Direction })\r\n\r\n     expect(r.value).toBe('0')\r\n     expect(r.percent).toBe(PERCENT_0)\r\n     expect(r.delta).toBe('0')\r\n     expect(r.direction).toBe(Direction.EQUAL)\r\n   })\r\n\r\n})\r\n\r\ndescribe('toFixed', () => {\r\n  const fn = toFixed;\r\n  test('should return fixed by 0 number for values > 10', () => {\r\n    expect(fn(102.34)).toBe(102)\r\n    expect(fn('102.34')).toBe(102)\r\n    expect(fn(10.234)).toBe(10)\r\n    expect(fn('10.234')).toBe(10)\r\n  })\r\n  test('should return fixed by 2 number for values =< 10', () => {\r\n    expect(fn(1.234)).toBe(1.23)\r\n    expect(fn('1.234')).toBe(1.23)\r\n    expect(fn(0.1234)).toBe(0.12)\r\n    expect(fn('0.1234')).toBe(0.12)\r\n    expect(fn(0.01234)).toBe(0.01)\r\n    expect(fn('0.01234')).toBe(0.01)\r\n  })\r\n})\r\n"],"file":"mathFn.test.js"}