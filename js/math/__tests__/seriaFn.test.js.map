{"version":3,"sources":["../../../src/math/__tests__/seriaFn.test.js"],"names":["_crInArrOfObj","arr","map","v","i","x","y","_crInArr","_crOutArr","_testFn","fn","inputArr","resultArr","_dOut","expect","toEqual","_testRtParam","rtNumber","pointArr","_dIn","describe","growthRate","test","changesBetween","normalize","dataArr","dataObj","findMinY","toBe","undefined","NaN","findMaxY","filterTrimZero","dataArr2","mean","median"],"mappings":"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","sourcesContent":["import {\r\n  growthRate,\r\n  changesBetween,\r\n  normalize,\r\n  findMinY,\r\n  findMaxY,\r\n  filterTrimZero,\r\n  mean,\r\n  median\r\n} from '../seriaFn';\r\n\r\nconst _crInArrOfObj = (arr) => arr\r\n  .map((v, i) => ({ x: i+1, y: v }));\r\nconst _crInArr = (arr) => arr\r\n  .map((v, i) => ([i+1, v]));\r\nconst _crOutArr = (arr) => arr\r\n  .map((v, i) => ([i+2, v]));\r\n\r\nconst _testFn = (fn, inputArr, resultArr) => {\r\n  const _dOut = _crOutArr(resultArr);\r\n  expect(fn(_crInArrOfObj(inputArr))).toEqual(_dOut)\r\n  expect(fn(_crInArr(inputArr))).toEqual(_dOut)\r\n}\r\n\r\nconst _testRtParam = (fn, rtNumber, inputArr, pointArr) => {\r\n  const _dIn = _crInArr(inputArr);\r\n  expect(fn(_dIn, rtNumber)).toEqual([pointArr])\r\n  expect(fn(_dIn, ''+rtNumber)).toEqual([pointArr])\r\n}\r\n\r\ndescribe('calc seria growRate', ()=>{\r\n  const fn = growthRate;\r\n  test('should return empty arr in edge case for unput data arr', ()=>{\r\n    expect(fn()).toEqual([])\r\n    expect(fn(null)).toEqual([])\r\n    expect(fn('')).toEqual([])\r\n    expect(fn(4.5)).toEqual([])\r\n    expect(fn(()=>{})).toEqual([])\r\n\r\n    expect(fn([{ x: 1, y: 1 }])).toEqual([])\r\n  })\r\n\r\n  test('should calc growthRate by 0, 0', ()=>{\r\n    _testFn(fn,\r\n      [1.0001, 1.0001, 1.0001],\r\n      [0, 0]\r\n    )\r\n  })\r\n\r\n  test('should calc growthRate as null in case null value', ()=>{\r\n    _testFn(fn,\r\n      [1.0001, null, 1.0001],\r\n      [null, null]\r\n    )\r\n  })\r\n\r\n\r\n  test('should calc growthRate by 100, 50', ()=>{\r\n    _testFn(fn,\r\n      [1.00001, 2.00002, 3.00003],\r\n      [100, 50]\r\n    )\r\n  })\r\n\r\n  test('should calc growthRate with presicion of 2 digits by -33.33, -49.75', ()=>{\r\n    _testFn(fn,\r\n      [3.00003, 2.00002, 1.005],\r\n      [-33.33, -49.75]\r\n    )\r\n  })\r\n  test('should calc growthRate with presicion of 2 digits by 0.01, 0', ()=>{\r\n    _testFn(fn,\r\n      [100, 100.01, 100.011],\r\n      [0.01, 0]\r\n    )\r\n  })\r\n\r\n  test('should fill to null for zero old values', ()=>{\r\n    _testFn(fn,\r\n      [0, 0, 1, 1],\r\n      [0, null, 0]\r\n    )\r\n  })\r\n\r\n  test('should calc growth rate from 0 to values as 0, 100, -100 or null', ()=>{\r\n    _testFn(fn,\r\n      [0, 2, 0, 0, -3, 0],\r\n      [null, -100, 0, null, 100]\r\n    )\r\n  })\r\n\r\n  test('should use rt param as number & string', ()=>{\r\n    _testRtParam(fn, 2, [1.0001, 1.0001, 1.0001], [3, 0])\r\n    _testRtParam(fn, 2, [100.0001, 200.0002, 300.0003], [3, 200])\r\n  })\r\n\r\n})\r\n\r\ndescribe('changesBetween', ()=>{\r\n  const fn = changesBetween;\r\n  test('should return arr with changes between', () =>{\r\n    _testFn(fn, [1.1, 2.2, 4.4], [1.1, 2.2])\r\n\r\n    _testFn(fn, [0.13, 0.14], [0.01])\r\n    _testFn(fn, [209.19, 208.7], [-0.49])\r\n\r\n    _testFn(fn, [1.1, null], [null])\r\n    _testFn(fn, [null, 2.2], [null])\r\n  })\r\n  test('should use params rt as number & string', () => {\r\n    _testRtParam(fn, 2, [1.1, 2.2, 4.4], [3, 3.3])\r\n    _testRtParam(fn, 2, [0.13, 2.2, 0.14], [3, 0.01])\r\n    _testRtParam(fn, 2, [209.19, 209, 208.7], [3, -0.49])\r\n  })\r\n  test('should return empty arr in edge case for data', () => {\r\n    //expect(fn()).toEqual([])\r\n    //_testFn(fn, [], [])\r\n  })\r\n})\r\n\r\n\r\ndescribe('normalize', ()=>{\r\n  const fn = normalize\r\n  test('should return arr with normalize data', ()=>{\r\n    const dataArr = [[1,10],[2,20]];\r\n    expect(fn(dataArr)).toEqual([[1,100], [2, 200]])\r\n\r\n    const dataObj = [{x:1,y:10},{x:2,y:20}];\r\n    expect(fn(dataObj)).toEqual([[1,100], [2, 200]])\r\n  })\r\n  test('should return [] in in edge case for data input', ()=>{\r\n    expect(fn()).toEqual([])\r\n    expect(fn(null)).toEqual([])\r\n    expect(fn([])).toEqual([])\r\n    expect(fn([null])).toEqual([])\r\n    expect(fn([{y:0},{y:1}])).toEqual([])\r\n  })\r\n})\r\n\r\ndescribe('findMinY', ()=>{\r\n  const fn = findMinY\r\n  test('should return min y value from data', ()=>{\r\n    expect(fn([{y:0},{y:1},{y:null}])).toBe(0)\r\n    expect(fn([[1,0],[2,1],[3,null]])).toBe(0)\r\n  })\r\n  test('should return undefined in edge case for input data', ()=>{\r\n    expect(fn()).toBe(undefined)\r\n    expect(fn(null)).toBe(undefined)\r\n    expect(fn({})).toBe(undefined)\r\n    expect(fn([])).toBe(undefined)\r\n  })\r\n  test('should return undefined in edge case for input data values', ()=>{\r\n    expect(fn([[1,NaN],[3,null]])).toBe(undefined)\r\n  })\r\n})\r\n\r\ndescribe('findMaxY', ()=>{\r\n  const fn = findMaxY\r\n  test('should return max y value from data', ()=>{\r\n    expect(fn([{y:0},{y:1},{y:null}])).toBe(1)\r\n    expect(fn([[1,0],[2,1],[3,null]])).toBe(1)\r\n  })\r\n  test('should return undefined in edge case for input data', ()=>{\r\n    expect(fn()).toBe(undefined)\r\n    expect(fn(null)).toBe(undefined)\r\n    expect(fn({})).toBe(undefined)\r\n    expect(fn([])).toBe(undefined)\r\n  })\r\n  test('should return undefined in edge case for input data values', ()=>{\r\n    expect(fn([[1,NaN],[3,null]])).toBe(undefined)\r\n  })\r\n})\r\n\r\n\r\ndescribe('filterTrimZero', ()=>{\r\n  const fn = filterTrimZero\r\n  test('should trim points with 0 or null values', ()=>{\r\n    const dataArr = [[1,0],[2,1],[3, null]]\r\n    expect(fn(dataArr)).toEqual([[2,1]])\r\n\r\n    const dataObj = [{y:0},{y:1},{y:null}]\r\n    expect(fn(dataObj)).toEqual([{y:1}])\r\n\r\n    const dataArr2 = [[1,1],[2,2],[3,3]]\r\n    expect(fn(dataArr2)).toEqual(dataArr2)\r\n\r\n  })\r\n  test('should return echo input in edge case for input',()=>{\r\n    expect(fn()).toBe(undefined)\r\n    expect(fn(null)).toBe(null)\r\n    expect(fn([])).toEqual([])\r\n  })\r\n})\r\n\r\ndescribe('mean', ()=>{\r\n  const fn = mean\r\n  test('should return arr with two mean points from data', ()=>{\r\n    expect(fn([[1, 1], [2, 1], [3, 1]])).toEqual([[1,1], [3,1]])\r\n  })\r\n  test('should return arr with two mean points from data with null, NaN', ()=>{\r\n    expect(fn([[1, null], [2, 3], [3, NaN]])).toEqual([[1,3], [3,3]])\r\n  })\r\n  test('should return [] in edge case for input', ()=>{\r\n    expect(fn([[1, null], [2, void 0], [3, NaN]])).toEqual([])\r\n    expect(fn()).toEqual([])\r\n    expect(fn(null)).toEqual([])\r\n    expect(fn([])).toEqual([])\r\n  })\r\n})\r\n\r\ndescribe('median', ()=>{\r\n  const fn =median\r\n  test('should return arr with two median points from data', ()=>{\r\n    expect(fn([[1, 1], [2, 2], [3, 3]])).toEqual([[1,2], [3,2]])\r\n    expect(fn([[1, 1], [2, 2], [3, 3],[4, 4]])).toEqual([[1,3], [4,3]])\r\n  })\r\n  test('should return [] in edge case for input', ()=>{\r\n    expect(fn()).toEqual([])\r\n    expect(fn(null)).toEqual([])\r\n    expect(fn([])).toEqual([])\r\n  })\r\n})\r\n"],"file":"seriaFn.test.js"}