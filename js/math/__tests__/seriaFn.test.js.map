{"version":3,"sources":["../../../src/math/__tests__/seriaFn.test.js"],"names":["growthRate","seriaFn","_crInArr","arr","map","v","i","x","y","_crOutArr","describe","fn","test","expect","toEqual","_dIn","_dOut","_dR","forEach","p"],"mappings":"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","sourcesContent":["import seriaFn from '../seriaFn'\r\n\r\nconst { growthRate } = seriaFn;\r\n\r\nconst _crInArr = (arr) => arr\r\n  .map((v, i) => ({ x: i+1, y: v }));\r\nconst _crOutArr = (arr) => arr\r\n  .map((v, i) => ([ i+2, v]));\r\n\r\ndescribe('calc seria growRate', ()=>{\r\n  const fn = growthRate;\r\n  test('should return empty arr on empty args', ()=>{\r\n    expect(fn()).toEqual([])\r\n  })\r\n  test('should return empty arr on empty arr', ()=>{\r\n    expect(fn([])).toEqual([])\r\n  })\r\n  test('should return empty arr on only one point', ()=>{\r\n    expect(fn([{ x: 1, y: 1 }])).toEqual([])\r\n  })\r\n  test('should return empty arr on not arr args', ()=>{\r\n    expect(fn('')).toEqual([])\r\n    expect(fn(null)).toEqual([])\r\n    expect(fn(4.5)).toEqual([])\r\n    expect(fn(()=>{})).toEqual([])\r\n  })\r\n\r\n  test('should calc growthRate by 0, 0', ()=>{\r\n    const _dIn = _crInArr([1.0001, 1.0001, 1.0001])\r\n        , _dOut = _crOutArr([0, 0])\r\n        , _dR = fn(_dIn);\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n\r\n  test('should calc growthRate by 100, 50', ()=>{\r\n    const _dIn = _crInArr([1.00001, 2.00002, 3.00003])\r\n        , _dOut = _crOutArr([100, 50])\r\n        , _dR = fn(_dIn);\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n\r\n  test('should calc growthRate with presicion of 2 digits by -33.33, -49.75', ()=>{\r\n    const _dIn = _crInArr([3.00003, 2.00002, 1.005])\r\n       , _dOut = _crOutArr([-33.33, -49.75])\r\n       , _dR = fn(_dIn);\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n  test('should calc growthRate with presicion of 2 digits by 0.01, 0', ()=>{\r\n    const _dIn = _crInArr([100, 100.01, 100.011])\r\n        , _dOut = _crOutArr([0.01, 0])\r\n        , _dR = fn(_dIn);\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n\r\n  test('should fill to null for zero old values', ()=>{\r\n    const _dIn = _crInArr([0, 0, 1, 1])\r\n        , _dOut = _crOutArr([0, null, 0])\r\n        , _dR = fn(_dIn)\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n\r\n  test('should calc growth rate from 0 to values as 0, 100, -100 or null', ()=>{\r\n    const _dIn = _crInArr([0, 2, 0, 0, -3, 0])\r\n        , _dOut = _crOutArr([null, -100, 0, null, 100])\r\n        , _dR = fn(_dIn)\r\n    _dR.forEach((p, i) => {\r\n      expect(p).toEqual(_dOut[i])\r\n    })\r\n  })\r\n\r\n})\r\n"],"file":"seriaFn.test.js"}